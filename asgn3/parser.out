Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    KEYWORD_redo
    KEYWORD_unless
    BLOCK_END
    KEYWORD___ENCODING__
    BITANDEQUAL
    OPEN_BRACKET
    KEYWORD_next
    SQUOTES
    KEYWORD_END
    KEYWORD_self
    KEYWORD_when
    KEYWORD_break
    MINUSEQUAL
    KEYWORD_nil
    OR
    SIGIL_AT
    DIVEQUAL
    KEYWORD_or
    KEYWORD_retry
    KEYWORD_return
    KEYWORD_undef
    SIGIL_DOLLAR
    DOUBLE_COLON
    DOUBLESTAREQUAL
    KEYWORD_false
    KEYWORD_definedQ
    SHIFTLEQUAL
    AND
    NOT
    KEYWORD_not
    KEYWORD_yield
    DOT
    KEYWORD_ensure
    MODEQUAL
    QUESTIONCOLON
    KEYWORD_true
    LOGICALOREQUAL
    KEYWORD___END__
    PLUSEQUAL
    KEYWORD_super
    KEYWORD_alias
    MULTIPLYEQUAL
    SHIFTREQUAL
    KEYWORD___LINE__
    KEYWORD_BEGIN
    CLOSE_BRACKET
    BLOCK_BEGIN
    KEYWORD_class
    DQUOTES
    KEYWORD_def
    PIPEEQUAL
    KEYWORD_and
    LOGICALANDEQUAL
    KEYWORD___FILE__
    SIGIL_DOUBLE_AT
    KEYWORD_rescue
    KEYWORD_module
    DOLLAR
    BACK_SLASH
    KEYWORD_case
    BITXOREQUAL

Grammar

Rule 0     S' -> program
Rule 1     program -> top_compstmt
Rule 2     top_compstmt -> top_stmts opt_terms
Rule 3     top_stmts -> none
Rule 4     top_stmts -> top_stmt
Rule 5     top_stmts -> top_stmts terms top_stmt
Rule 6     top_stmt -> stmt
Rule 7     top_stmt -> KEYWORD_if expr3 opt_then top_compstmt elsif_tail opt_else_stmt KEYWORD_end
Rule 8     top_stmt -> KEYWORD_while expr3 opt_do top_compstmt KEYWORD_end
Rule 9     top_stmt -> top_stmt KEYWORD_while expr3
Rule 10    top_stmt -> KEYWORD_begin top_compstmt KEYWORD_end KEYWORD_while expr3
Rule 11    top_stmt -> top_stmt KEYWORD_until expr3
Rule 12    top_stmt -> KEYWORD_until expr3 opt_do top_compstmt KEYWORD_end
Rule 13    top_stmt -> KEYWORD_begin top_compstmt KEYWORD_end KEYWORD_until expr3
Rule 14    top_stmt -> KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do top_compstmt KEYWORD_end
Rule 15    stmt -> expr
Rule 16    opt_else_stmt -> KEYWORD_else top_compstmt
Rule 17    opt_else_stmt -> none
Rule 18    elsif_tail -> none
Rule 19    elsif_tail -> KEYWORD_elsif expr3 opt_then top_compstmt elsif_tail
Rule 20    opt_then -> KEYWORD_then
Rule 21    opt_then -> newline
Rule 22    opt_do -> KEYWORD_do
Rule 23    opt_do -> newline
Rule 24    multi_var -> VARIABLES
Rule 25    multi_var -> CONSTANTS
Rule 26    multi_var -> multi_var COMMA VARIABLES
Rule 27    multi_var -> multi_var COMMA CONSTANTS
Rule 28    opt_oparen -> OPEN_PAREN
Rule 29    opt_oparen -> none
Rule 30    opt_cparen -> CLOSE_PAREN
Rule 31    opt_cparen -> none
Rule 32    for_range -> INT_CONSTANTS DOUBLEDOT INT_CONSTANTS
Rule 33    for_range -> INT_CONSTANTS TRIPLEDOT INT_CONSTANTS
Rule 34    for_range -> VARIABLES
Rule 35    for_range -> CONSTANTS
Rule 36    expr -> mlhs EQUAL mrhs
Rule 37    mlhs -> VARIABLES
Rule 38    mlhs -> CONSTANTS
Rule 39    mrhs -> expr1
Rule 40    primary -> INT_CONSTANTS
Rule 41    primary -> FLOAT_CONSTANTS
Rule 42    primary -> STRING_CONSTANTS
Rule 43    primary -> CHAR_CONSTANTS
Rule 44    primary -> BOOLEAN_CONSTANTS
Rule 45    primary -> CONSTANTS
Rule 46    primary -> VARIABLES
Rule 47    expr1 -> expr3 QUESTION_MARK expr2 COLON expr2
Rule 48    expr1 -> expr2
Rule 49    expr2 -> expr7 DOUBLEDOT expr7
Rule 50    expr2 -> expr7 TRIPLEDOT expr7
Rule 51    expr2 -> expr3
Rule 52    expr3 -> expr3 LOGICALOR expr4
Rule 53    expr3 -> expr4
Rule 54    expr4 -> expr4 LOGICALAND expr5
Rule 55    expr4 -> expr5
Rule 56    expr5 -> expr6 IFF expr6
Rule 57    expr5 -> expr6 DOUBLEEQUAL expr6
Rule 58    expr5 -> expr6 TRIPLEEQUAL expr6
Rule 59    expr5 -> expr6 NOTEQUAL expr6
Rule 60    expr5 -> expr6
Rule 61    expr6 -> expr7 LESSEQUAL expr7
Rule 62    expr6 -> expr7 LESS expr7
Rule 63    expr6 -> expr7 GREATER expr7
Rule 64    expr6 -> expr7 GREATEREQUAL expr7
Rule 65    expr6 -> expr7
Rule 66    expr7 -> expr7 BITXOR expr8
Rule 67    expr7 -> expr7 PIPE expr8
Rule 68    expr7 -> expr8
Rule 69    expr8 -> expr8 BITAND expr9
Rule 70    expr8 -> expr9
Rule 71    expr9 -> expr9 SHIFTL expr10
Rule 72    expr9 -> expr9 SHIFTR expr10
Rule 73    expr9 -> expr10
Rule 74    expr10 -> expr10 PLUS expr11
Rule 75    expr10 -> expr10 MINUS expr11
Rule 76    expr10 -> expr11
Rule 77    expr11 -> expr11 MULTIPLY expr12
Rule 78    expr11 -> expr11 DIV expr12
Rule 79    expr11 -> expr11 MOD expr12
Rule 80    expr11 -> expr12
Rule 81    expr12 -> expr13 DOUBLESTAR expr12
Rule 82    expr12 -> expr13
Rule 83    expr13 -> OPEN_PAREN expr1 CLOSE_PAREN
Rule 84    expr13 -> uexpr INT_CONSTANTS
Rule 85    expr13 -> uexpr FLOAT_CONSTANTS
Rule 86    expr13 -> CONSTANTS
Rule 87    expr13 -> VARIABLES
Rule 88    uexpr -> none
Rule 89    uexpr -> PLUS
Rule 90    uexpr -> MINUS
Rule 91    uexpr -> BITNOT
Rule 92    uexpr -> BITCOMP
Rule 93    opt_terms -> none
Rule 94    opt_terms -> terms
Rule 95    terms -> term
Rule 96    terms -> terms term
Rule 97    term -> DELIM
Rule 98    term -> newline
Rule 99    none -> <empty>

Terminals, with rules where they appear

AND                  : 
BACK_SLASH           : 
BITAND               : 69
BITANDEQUAL          : 
BITCOMP              : 92
BITNOT               : 91
BITXOR               : 66
BITXOREQUAL          : 
BLOCK_BEGIN          : 
BLOCK_END            : 
BOOLEAN_CONSTANTS    : 44
CHAR_CONSTANTS       : 43
CLOSE_BRACKET        : 
CLOSE_PAREN          : 30 83
COLON                : 47
COMMA                : 26 27
CONSTANTS            : 25 27 35 38 45 86
DELIM                : 97
DIV                  : 78
DIVEQUAL             : 
DOLLAR               : 
DOT                  : 
DOUBLEDOT            : 32 49
DOUBLEEQUAL          : 57
DOUBLESTAR           : 81
DOUBLESTAREQUAL      : 
DOUBLE_COLON         : 
DQUOTES              : 
EQUAL                : 36
FLOAT_CONSTANTS      : 41 85
GREATER              : 63
GREATEREQUAL         : 64
IFF                  : 56
INT_CONSTANTS        : 32 32 33 33 40 84
KEYWORD_BEGIN        : 
KEYWORD_END          : 
KEYWORD___ENCODING__ : 
KEYWORD___END__      : 
KEYWORD___FILE__     : 
KEYWORD___LINE__     : 
KEYWORD_alias        : 
KEYWORD_and          : 
KEYWORD_begin        : 10 13
KEYWORD_break        : 
KEYWORD_case         : 
KEYWORD_class        : 
KEYWORD_def          : 
KEYWORD_definedQ     : 
KEYWORD_do           : 22
KEYWORD_else         : 16
KEYWORD_elsif        : 19
KEYWORD_end          : 7 8 10 12 13 14
KEYWORD_ensure       : 
KEYWORD_false        : 
KEYWORD_for          : 14
KEYWORD_if           : 7
KEYWORD_in           : 14
KEYWORD_module       : 
KEYWORD_next         : 
KEYWORD_nil          : 
KEYWORD_not          : 
KEYWORD_or           : 
KEYWORD_redo         : 
KEYWORD_rescue       : 
KEYWORD_retry        : 
KEYWORD_return       : 
KEYWORD_self         : 
KEYWORD_super        : 
KEYWORD_then         : 20
KEYWORD_true         : 
KEYWORD_undef        : 
KEYWORD_unless       : 
KEYWORD_until        : 11 12 13
KEYWORD_when         : 
KEYWORD_while        : 8 9 10
KEYWORD_yield        : 
LESS                 : 62
LESSEQUAL            : 61
LOGICALAND           : 54
LOGICALANDEQUAL      : 
LOGICALOR            : 52
LOGICALOREQUAL       : 
MINUS                : 75 90
MINUSEQUAL           : 
MOD                  : 79
MODEQUAL             : 
MULTIPLY             : 77
MULTIPLYEQUAL        : 
NOT                  : 
NOTEQUAL             : 59
OPEN_BRACKET         : 
OPEN_PAREN           : 28 83
OR                   : 
PIPE                 : 67
PIPEEQUAL            : 
PLUS                 : 74 89
PLUSEQUAL            : 
QUESTIONCOLON        : 
QUESTION_MARK        : 47
SHIFTL               : 71
SHIFTLEQUAL          : 
SHIFTR               : 72
SHIFTREQUAL          : 
SIGIL_AT             : 
SIGIL_DOLLAR         : 
SIGIL_DOUBLE_AT      : 
SQUOTES              : 
STRING_CONSTANTS     : 42
TRIPLEDOT            : 33 50
TRIPLEEQUAL          : 58
VARIABLES            : 24 26 34 37 46 87
error                : 
newline              : 21 23 98

Nonterminals, with rules where they appear

elsif_tail           : 7 19
expr                 : 15
expr1                : 39 83
expr10               : 71 72 73 74 75
expr11               : 74 75 76 77 78 79
expr12               : 77 78 79 80 81
expr13               : 81 82
expr2                : 47 47 48
expr3                : 7 8 9 10 11 12 13 19 47 51 52
expr4                : 52 53 54
expr5                : 54 55
expr6                : 56 56 57 57 58 58 59 59 60
expr7                : 49 49 50 50 61 61 62 62 63 63 64 64 65 66 67
expr8                : 66 67 68 69
expr9                : 69 70 71 72
for_range            : 14
mlhs                 : 36
mrhs                 : 36
multi_var            : 14 26 27
none                 : 3 17 18 29 31 88 93
opt_cparen           : 14
opt_do               : 8 12 14
opt_else_stmt        : 7
opt_oparen           : 14
opt_terms            : 2
opt_then             : 7 19
primary              : 
program              : 0
stmt                 : 6
term                 : 95 96
terms                : 5 94 96
top_compstmt         : 1 7 8 10 12 13 14 16 19
top_stmt             : 4 5 9 11
top_stmts            : 2 5
uexpr                : 84 85

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . top_compstmt
    (2) top_compstmt -> . top_stmts opt_terms
    (3) top_stmts -> . none
    (4) top_stmts -> . top_stmt
    (5) top_stmts -> . top_stmts terms top_stmt
    (99) none -> .
    (6) top_stmt -> . stmt
    (7) top_stmt -> . KEYWORD_if expr3 opt_then top_compstmt elsif_tail opt_else_stmt KEYWORD_end
    (8) top_stmt -> . KEYWORD_while expr3 opt_do top_compstmt KEYWORD_end
    (9) top_stmt -> . top_stmt KEYWORD_while expr3
    (10) top_stmt -> . KEYWORD_begin top_compstmt KEYWORD_end KEYWORD_while expr3
    (11) top_stmt -> . top_stmt KEYWORD_until expr3
    (12) top_stmt -> . KEYWORD_until expr3 opt_do top_compstmt KEYWORD_end
    (13) top_stmt -> . KEYWORD_begin top_compstmt KEYWORD_end KEYWORD_until expr3
    (14) top_stmt -> . KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do top_compstmt KEYWORD_end
    (15) stmt -> . expr
    (36) expr -> . mlhs EQUAL mrhs
    (37) mlhs -> . VARIABLES
    (38) mlhs -> . CONSTANTS

    DELIM           reduce using rule 99 (none -> .)
    newline         reduce using rule 99 (none -> .)
    $end            reduce using rule 99 (none -> .)
    KEYWORD_if      shift and go to state 3
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 7
    KEYWORD_until   shift and go to state 2
    KEYWORD_for     shift and go to state 11
    VARIABLES       shift and go to state 5
    CONSTANTS       shift and go to state 14

    none                           shift and go to state 12
    expr                           shift and go to state 13
    top_compstmt                   shift and go to state 9
    mlhs                           shift and go to state 1
    stmt                           shift and go to state 10
    program                        shift and go to state 6
    top_stmts                      shift and go to state 8
    top_stmt                       shift and go to state 15

state 1

    (36) expr -> mlhs . EQUAL mrhs

    EQUAL           shift and go to state 16


state 2

    (12) top_stmt -> KEYWORD_until . expr3 opt_do top_compstmt KEYWORD_end
    (52) expr3 -> . expr3 LOGICALOR expr4
    (53) expr3 -> . expr4
    (54) expr4 -> . expr4 LOGICALAND expr5
    (55) expr4 -> . expr5
    (56) expr5 -> . expr6 IFF expr6
    (57) expr5 -> . expr6 DOUBLEEQUAL expr6
    (58) expr5 -> . expr6 TRIPLEEQUAL expr6
    (59) expr5 -> . expr6 NOTEQUAL expr6
    (60) expr5 -> . expr6
    (61) expr6 -> . expr7 LESSEQUAL expr7
    (62) expr6 -> . expr7 LESS expr7
    (63) expr6 -> . expr7 GREATER expr7
    (64) expr6 -> . expr7 GREATEREQUAL expr7
    (65) expr6 -> . expr7
    (66) expr7 -> . expr7 BITXOR expr8
    (67) expr7 -> . expr7 PIPE expr8
    (68) expr7 -> . expr8
    (69) expr8 -> . expr8 BITAND expr9
    (70) expr8 -> . expr9
    (71) expr9 -> . expr9 SHIFTL expr10
    (72) expr9 -> . expr9 SHIFTR expr10
    (73) expr9 -> . expr10
    (74) expr10 -> . expr10 PLUS expr11
    (75) expr10 -> . expr10 MINUS expr11
    (76) expr10 -> . expr11
    (77) expr11 -> . expr11 MULTIPLY expr12
    (78) expr11 -> . expr11 DIV expr12
    (79) expr11 -> . expr11 MOD expr12
    (80) expr11 -> . expr12
    (81) expr12 -> . expr13 DOUBLESTAR expr12
    (82) expr12 -> . expr13
    (83) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (84) expr13 -> . uexpr INT_CONSTANTS
    (85) expr13 -> . uexpr FLOAT_CONSTANTS
    (86) expr13 -> . CONSTANTS
    (87) expr13 -> . VARIABLES
    (88) uexpr -> . none
    (89) uexpr -> . PLUS
    (90) uexpr -> . MINUS
    (91) uexpr -> . BITNOT
    (92) uexpr -> . BITCOMP
    (99) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 35
    VARIABLES       shift and go to state 21
    PLUS            shift and go to state 29
    MINUS           shift and go to state 20
    BITNOT          shift and go to state 34
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 99 (none -> .)
    FLOAT_CONSTANTS reduce using rule 99 (none -> .)

    uexpr                          shift and go to state 32
    none                           shift and go to state 33
    expr9                          shift and go to state 31
    expr12                         shift and go to state 17
    expr3                          shift and go to state 23
    expr6                          shift and go to state 25
    expr7                          shift and go to state 26
    expr4                          shift and go to state 27
    expr5                          shift and go to state 28
    expr10                         shift and go to state 18
    expr8                          shift and go to state 30
    expr13                         shift and go to state 19
    expr11                         shift and go to state 36

state 3

    (7) top_stmt -> KEYWORD_if . expr3 opt_then top_compstmt elsif_tail opt_else_stmt KEYWORD_end
    (52) expr3 -> . expr3 LOGICALOR expr4
    (53) expr3 -> . expr4
    (54) expr4 -> . expr4 LOGICALAND expr5
    (55) expr4 -> . expr5
    (56) expr5 -> . expr6 IFF expr6
    (57) expr5 -> . expr6 DOUBLEEQUAL expr6
    (58) expr5 -> . expr6 TRIPLEEQUAL expr6
    (59) expr5 -> . expr6 NOTEQUAL expr6
    (60) expr5 -> . expr6
    (61) expr6 -> . expr7 LESSEQUAL expr7
    (62) expr6 -> . expr7 LESS expr7
    (63) expr6 -> . expr7 GREATER expr7
    (64) expr6 -> . expr7 GREATEREQUAL expr7
    (65) expr6 -> . expr7
    (66) expr7 -> . expr7 BITXOR expr8
    (67) expr7 -> . expr7 PIPE expr8
    (68) expr7 -> . expr8
    (69) expr8 -> . expr8 BITAND expr9
    (70) expr8 -> . expr9
    (71) expr9 -> . expr9 SHIFTL expr10
    (72) expr9 -> . expr9 SHIFTR expr10
    (73) expr9 -> . expr10
    (74) expr10 -> . expr10 PLUS expr11
    (75) expr10 -> . expr10 MINUS expr11
    (76) expr10 -> . expr11
    (77) expr11 -> . expr11 MULTIPLY expr12
    (78) expr11 -> . expr11 DIV expr12
    (79) expr11 -> . expr11 MOD expr12
    (80) expr11 -> . expr12
    (81) expr12 -> . expr13 DOUBLESTAR expr12
    (82) expr12 -> . expr13
    (83) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (84) expr13 -> . uexpr INT_CONSTANTS
    (85) expr13 -> . uexpr FLOAT_CONSTANTS
    (86) expr13 -> . CONSTANTS
    (87) expr13 -> . VARIABLES
    (88) uexpr -> . none
    (89) uexpr -> . PLUS
    (90) uexpr -> . MINUS
    (91) uexpr -> . BITNOT
    (92) uexpr -> . BITCOMP
    (99) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 35
    VARIABLES       shift and go to state 21
    PLUS            shift and go to state 29
    MINUS           shift and go to state 20
    BITNOT          shift and go to state 34
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 99 (none -> .)
    FLOAT_CONSTANTS reduce using rule 99 (none -> .)

    expr11                         shift and go to state 36
    uexpr                          shift and go to state 32
    expr10                         shift and go to state 18
    none                           shift and go to state 33
    expr3                          shift and go to state 37
    expr6                          shift and go to state 25
    expr5                          shift and go to state 28
    expr4                          shift and go to state 27
    expr7                          shift and go to state 26
    expr8                          shift and go to state 30
    expr9                          shift and go to state 31
    expr13                         shift and go to state 19
    expr12                         shift and go to state 17

state 4

    (8) top_stmt -> KEYWORD_while . expr3 opt_do top_compstmt KEYWORD_end
    (52) expr3 -> . expr3 LOGICALOR expr4
    (53) expr3 -> . expr4
    (54) expr4 -> . expr4 LOGICALAND expr5
    (55) expr4 -> . expr5
    (56) expr5 -> . expr6 IFF expr6
    (57) expr5 -> . expr6 DOUBLEEQUAL expr6
    (58) expr5 -> . expr6 TRIPLEEQUAL expr6
    (59) expr5 -> . expr6 NOTEQUAL expr6
    (60) expr5 -> . expr6
    (61) expr6 -> . expr7 LESSEQUAL expr7
    (62) expr6 -> . expr7 LESS expr7
    (63) expr6 -> . expr7 GREATER expr7
    (64) expr6 -> . expr7 GREATEREQUAL expr7
    (65) expr6 -> . expr7
    (66) expr7 -> . expr7 BITXOR expr8
    (67) expr7 -> . expr7 PIPE expr8
    (68) expr7 -> . expr8
    (69) expr8 -> . expr8 BITAND expr9
    (70) expr8 -> . expr9
    (71) expr9 -> . expr9 SHIFTL expr10
    (72) expr9 -> . expr9 SHIFTR expr10
    (73) expr9 -> . expr10
    (74) expr10 -> . expr10 PLUS expr11
    (75) expr10 -> . expr10 MINUS expr11
    (76) expr10 -> . expr11
    (77) expr11 -> . expr11 MULTIPLY expr12
    (78) expr11 -> . expr11 DIV expr12
    (79) expr11 -> . expr11 MOD expr12
    (80) expr11 -> . expr12
    (81) expr12 -> . expr13 DOUBLESTAR expr12
    (82) expr12 -> . expr13
    (83) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (84) expr13 -> . uexpr INT_CONSTANTS
    (85) expr13 -> . uexpr FLOAT_CONSTANTS
    (86) expr13 -> . CONSTANTS
    (87) expr13 -> . VARIABLES
    (88) uexpr -> . none
    (89) uexpr -> . PLUS
    (90) uexpr -> . MINUS
    (91) uexpr -> . BITNOT
    (92) uexpr -> . BITCOMP
    (99) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 35
    VARIABLES       shift and go to state 21
    PLUS            shift and go to state 29
    MINUS           shift and go to state 20
    BITNOT          shift and go to state 34
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 99 (none -> .)
    FLOAT_CONSTANTS reduce using rule 99 (none -> .)

    uexpr                          shift and go to state 32
    none                           shift and go to state 33
    expr9                          shift and go to state 31
    expr12                         shift and go to state 17
    expr3                          shift and go to state 38
    expr6                          shift and go to state 25
    expr7                          shift and go to state 26
    expr4                          shift and go to state 27
    expr5                          shift and go to state 28
    expr10                         shift and go to state 18
    expr8                          shift and go to state 30
    expr13                         shift and go to state 19
    expr11                         shift and go to state 36

state 5

    (37) mlhs -> VARIABLES .

    EQUAL           reduce using rule 37 (mlhs -> VARIABLES .)


state 6

    (0) S' -> program .



state 7

    (10) top_stmt -> KEYWORD_begin . top_compstmt KEYWORD_end KEYWORD_while expr3
    (13) top_stmt -> KEYWORD_begin . top_compstmt KEYWORD_end KEYWORD_until expr3
    (2) top_compstmt -> . top_stmts opt_terms
    (3) top_stmts -> . none
    (4) top_stmts -> . top_stmt
    (5) top_stmts -> . top_stmts terms top_stmt
    (99) none -> .
    (6) top_stmt -> . stmt
    (7) top_stmt -> . KEYWORD_if expr3 opt_then top_compstmt elsif_tail opt_else_stmt KEYWORD_end
    (8) top_stmt -> . KEYWORD_while expr3 opt_do top_compstmt KEYWORD_end
    (9) top_stmt -> . top_stmt KEYWORD_while expr3
    (10) top_stmt -> . KEYWORD_begin top_compstmt KEYWORD_end KEYWORD_while expr3
    (11) top_stmt -> . top_stmt KEYWORD_until expr3
    (12) top_stmt -> . KEYWORD_until expr3 opt_do top_compstmt KEYWORD_end
    (13) top_stmt -> . KEYWORD_begin top_compstmt KEYWORD_end KEYWORD_until expr3
    (14) top_stmt -> . KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do top_compstmt KEYWORD_end
    (15) stmt -> . expr
    (36) expr -> . mlhs EQUAL mrhs
    (37) mlhs -> . VARIABLES
    (38) mlhs -> . CONSTANTS

    DELIM           reduce using rule 99 (none -> .)
    newline         reduce using rule 99 (none -> .)
    KEYWORD_end     reduce using rule 99 (none -> .)
    KEYWORD_if      shift and go to state 3
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 7
    KEYWORD_until   shift and go to state 2
    KEYWORD_for     shift and go to state 11
    VARIABLES       shift and go to state 5
    CONSTANTS       shift and go to state 14

    none                           shift and go to state 12
    expr                           shift and go to state 13
    top_compstmt                   shift and go to state 39
    mlhs                           shift and go to state 1
    stmt                           shift and go to state 10
    top_stmts                      shift and go to state 8
    top_stmt                       shift and go to state 15

state 8

    (2) top_compstmt -> top_stmts . opt_terms
    (5) top_stmts -> top_stmts . terms top_stmt
    (93) opt_terms -> . none
    (94) opt_terms -> . terms
    (95) terms -> . term
    (96) terms -> . terms term
    (99) none -> .
    (97) term -> . DELIM
    (98) term -> . newline

    $end            reduce using rule 99 (none -> .)
    KEYWORD_end     reduce using rule 99 (none -> .)
    KEYWORD_elsif   reduce using rule 99 (none -> .)
    KEYWORD_else    reduce using rule 99 (none -> .)
    DELIM           shift and go to state 43
    newline         shift and go to state 42

    term                           shift and go to state 40
    terms                          shift and go to state 41
    none                           shift and go to state 44
    opt_terms                      shift and go to state 45

state 9

    (1) program -> top_compstmt .

    $end            reduce using rule 1 (program -> top_compstmt .)


state 10

    (6) top_stmt -> stmt .

    KEYWORD_while   reduce using rule 6 (top_stmt -> stmt .)
    KEYWORD_until   reduce using rule 6 (top_stmt -> stmt .)
    DELIM           reduce using rule 6 (top_stmt -> stmt .)
    newline         reduce using rule 6 (top_stmt -> stmt .)
    KEYWORD_end     reduce using rule 6 (top_stmt -> stmt .)
    KEYWORD_elsif   reduce using rule 6 (top_stmt -> stmt .)
    KEYWORD_else    reduce using rule 6 (top_stmt -> stmt .)
    $end            reduce using rule 6 (top_stmt -> stmt .)


state 11

    (14) top_stmt -> KEYWORD_for . opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do top_compstmt KEYWORD_end
    (28) opt_oparen -> . OPEN_PAREN
    (29) opt_oparen -> . none
    (99) none -> .

    OPEN_PAREN      shift and go to state 47
    VARIABLES       reduce using rule 99 (none -> .)
    CONSTANTS       reduce using rule 99 (none -> .)

    none                           shift and go to state 46
    opt_oparen                     shift and go to state 48

state 12

    (3) top_stmts -> none .

    DELIM           reduce using rule 3 (top_stmts -> none .)
    newline         reduce using rule 3 (top_stmts -> none .)
    $end            reduce using rule 3 (top_stmts -> none .)
    KEYWORD_elsif   reduce using rule 3 (top_stmts -> none .)
    KEYWORD_else    reduce using rule 3 (top_stmts -> none .)
    KEYWORD_end     reduce using rule 3 (top_stmts -> none .)


state 13

    (15) stmt -> expr .

    KEYWORD_while   reduce using rule 15 (stmt -> expr .)
    KEYWORD_until   reduce using rule 15 (stmt -> expr .)
    DELIM           reduce using rule 15 (stmt -> expr .)
    newline         reduce using rule 15 (stmt -> expr .)
    $end            reduce using rule 15 (stmt -> expr .)
    KEYWORD_end     reduce using rule 15 (stmt -> expr .)
    KEYWORD_elsif   reduce using rule 15 (stmt -> expr .)
    KEYWORD_else    reduce using rule 15 (stmt -> expr .)


state 14

    (38) mlhs -> CONSTANTS .

    EQUAL           reduce using rule 38 (mlhs -> CONSTANTS .)


state 15

    (4) top_stmts -> top_stmt .
    (9) top_stmt -> top_stmt . KEYWORD_while expr3
    (11) top_stmt -> top_stmt . KEYWORD_until expr3

    DELIM           reduce using rule 4 (top_stmts -> top_stmt .)
    newline         reduce using rule 4 (top_stmts -> top_stmt .)
    $end            reduce using rule 4 (top_stmts -> top_stmt .)
    KEYWORD_elsif   reduce using rule 4 (top_stmts -> top_stmt .)
    KEYWORD_else    reduce using rule 4 (top_stmts -> top_stmt .)
    KEYWORD_end     reduce using rule 4 (top_stmts -> top_stmt .)
    KEYWORD_while   shift and go to state 49
    KEYWORD_until   shift and go to state 50


state 16

    (36) expr -> mlhs EQUAL . mrhs
    (39) mrhs -> . expr1
    (47) expr1 -> . expr3 QUESTION_MARK expr2 COLON expr2
    (48) expr1 -> . expr2
    (52) expr3 -> . expr3 LOGICALOR expr4
    (53) expr3 -> . expr4
    (49) expr2 -> . expr7 DOUBLEDOT expr7
    (50) expr2 -> . expr7 TRIPLEDOT expr7
    (51) expr2 -> . expr3
    (54) expr4 -> . expr4 LOGICALAND expr5
    (55) expr4 -> . expr5
    (66) expr7 -> . expr7 BITXOR expr8
    (67) expr7 -> . expr7 PIPE expr8
    (68) expr7 -> . expr8
    (56) expr5 -> . expr6 IFF expr6
    (57) expr5 -> . expr6 DOUBLEEQUAL expr6
    (58) expr5 -> . expr6 TRIPLEEQUAL expr6
    (59) expr5 -> . expr6 NOTEQUAL expr6
    (60) expr5 -> . expr6
    (69) expr8 -> . expr8 BITAND expr9
    (70) expr8 -> . expr9
    (61) expr6 -> . expr7 LESSEQUAL expr7
    (62) expr6 -> . expr7 LESS expr7
    (63) expr6 -> . expr7 GREATER expr7
    (64) expr6 -> . expr7 GREATEREQUAL expr7
    (65) expr6 -> . expr7
    (71) expr9 -> . expr9 SHIFTL expr10
    (72) expr9 -> . expr9 SHIFTR expr10
    (73) expr9 -> . expr10
    (74) expr10 -> . expr10 PLUS expr11
    (75) expr10 -> . expr10 MINUS expr11
    (76) expr10 -> . expr11
    (77) expr11 -> . expr11 MULTIPLY expr12
    (78) expr11 -> . expr11 DIV expr12
    (79) expr11 -> . expr11 MOD expr12
    (80) expr11 -> . expr12
    (81) expr12 -> . expr13 DOUBLESTAR expr12
    (82) expr12 -> . expr13
    (83) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (84) expr13 -> . uexpr INT_CONSTANTS
    (85) expr13 -> . uexpr FLOAT_CONSTANTS
    (86) expr13 -> . CONSTANTS
    (87) expr13 -> . VARIABLES
    (88) uexpr -> . none
    (89) uexpr -> . PLUS
    (90) uexpr -> . MINUS
    (91) uexpr -> . BITNOT
    (92) uexpr -> . BITCOMP
    (99) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 35
    VARIABLES       shift and go to state 21
    PLUS            shift and go to state 29
    MINUS           shift and go to state 20
    BITNOT          shift and go to state 34
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 99 (none -> .)
    FLOAT_CONSTANTS reduce using rule 99 (none -> .)

    uexpr                          shift and go to state 32
    none                           shift and go to state 33
    expr12                         shift and go to state 17
    expr13                         shift and go to state 19
    expr2                          shift and go to state 51
    expr3                          shift and go to state 52
    mrhs                           shift and go to state 55
    expr1                          shift and go to state 53
    expr6                          shift and go to state 25
    expr7                          shift and go to state 54
    expr4                          shift and go to state 27
    expr5                          shift and go to state 28
    expr10                         shift and go to state 18
    expr8                          shift and go to state 30
    expr9                          shift and go to state 31
    expr11                         shift and go to state 36

state 17

    (80) expr11 -> expr12 .

    MULTIPLY        reduce using rule 80 (expr11 -> expr12 .)
    DIV             reduce using rule 80 (expr11 -> expr12 .)
    MOD             reduce using rule 80 (expr11 -> expr12 .)
    PLUS            reduce using rule 80 (expr11 -> expr12 .)
    MINUS           reduce using rule 80 (expr11 -> expr12 .)
    SHIFTL          reduce using rule 80 (expr11 -> expr12 .)
    SHIFTR          reduce using rule 80 (expr11 -> expr12 .)
    BITAND          reduce using rule 80 (expr11 -> expr12 .)
    BITXOR          reduce using rule 80 (expr11 -> expr12 .)
    PIPE            reduce using rule 80 (expr11 -> expr12 .)
    IFF             reduce using rule 80 (expr11 -> expr12 .)
    DOUBLEEQUAL     reduce using rule 80 (expr11 -> expr12 .)
    TRIPLEEQUAL     reduce using rule 80 (expr11 -> expr12 .)
    NOTEQUAL        reduce using rule 80 (expr11 -> expr12 .)
    LOGICALAND      reduce using rule 80 (expr11 -> expr12 .)
    LOGICALOR       reduce using rule 80 (expr11 -> expr12 .)
    KEYWORD_do      reduce using rule 80 (expr11 -> expr12 .)
    newline         reduce using rule 80 (expr11 -> expr12 .)
    KEYWORD_then    reduce using rule 80 (expr11 -> expr12 .)
    QUESTION_MARK   reduce using rule 80 (expr11 -> expr12 .)
    KEYWORD_while   reduce using rule 80 (expr11 -> expr12 .)
    KEYWORD_until   reduce using rule 80 (expr11 -> expr12 .)
    DELIM           reduce using rule 80 (expr11 -> expr12 .)
    $end            reduce using rule 80 (expr11 -> expr12 .)
    KEYWORD_end     reduce using rule 80 (expr11 -> expr12 .)
    KEYWORD_elsif   reduce using rule 80 (expr11 -> expr12 .)
    KEYWORD_else    reduce using rule 80 (expr11 -> expr12 .)
    CLOSE_PAREN     reduce using rule 80 (expr11 -> expr12 .)
    COLON           reduce using rule 80 (expr11 -> expr12 .)
    LESSEQUAL       reduce using rule 80 (expr11 -> expr12 .)
    LESS            reduce using rule 80 (expr11 -> expr12 .)
    GREATER         reduce using rule 80 (expr11 -> expr12 .)
    GREATEREQUAL    reduce using rule 80 (expr11 -> expr12 .)
    DOUBLEDOT       reduce using rule 80 (expr11 -> expr12 .)
    TRIPLEDOT       reduce using rule 80 (expr11 -> expr12 .)


state 18

    (73) expr9 -> expr10 .
    (74) expr10 -> expr10 . PLUS expr11
    (75) expr10 -> expr10 . MINUS expr11

    SHIFTL          reduce using rule 73 (expr9 -> expr10 .)
    SHIFTR          reduce using rule 73 (expr9 -> expr10 .)
    BITAND          reduce using rule 73 (expr9 -> expr10 .)
    BITXOR          reduce using rule 73 (expr9 -> expr10 .)
    PIPE            reduce using rule 73 (expr9 -> expr10 .)
    IFF             reduce using rule 73 (expr9 -> expr10 .)
    DOUBLEEQUAL     reduce using rule 73 (expr9 -> expr10 .)
    TRIPLEEQUAL     reduce using rule 73 (expr9 -> expr10 .)
    NOTEQUAL        reduce using rule 73 (expr9 -> expr10 .)
    LOGICALAND      reduce using rule 73 (expr9 -> expr10 .)
    LOGICALOR       reduce using rule 73 (expr9 -> expr10 .)
    KEYWORD_do      reduce using rule 73 (expr9 -> expr10 .)
    newline         reduce using rule 73 (expr9 -> expr10 .)
    KEYWORD_then    reduce using rule 73 (expr9 -> expr10 .)
    QUESTION_MARK   reduce using rule 73 (expr9 -> expr10 .)
    KEYWORD_while   reduce using rule 73 (expr9 -> expr10 .)
    KEYWORD_until   reduce using rule 73 (expr9 -> expr10 .)
    DELIM           reduce using rule 73 (expr9 -> expr10 .)
    $end            reduce using rule 73 (expr9 -> expr10 .)
    KEYWORD_end     reduce using rule 73 (expr9 -> expr10 .)
    KEYWORD_elsif   reduce using rule 73 (expr9 -> expr10 .)
    KEYWORD_else    reduce using rule 73 (expr9 -> expr10 .)
    CLOSE_PAREN     reduce using rule 73 (expr9 -> expr10 .)
    COLON           reduce using rule 73 (expr9 -> expr10 .)
    LESSEQUAL       reduce using rule 73 (expr9 -> expr10 .)
    LESS            reduce using rule 73 (expr9 -> expr10 .)
    GREATER         reduce using rule 73 (expr9 -> expr10 .)
    GREATEREQUAL    reduce using rule 73 (expr9 -> expr10 .)
    DOUBLEDOT       reduce using rule 73 (expr9 -> expr10 .)
    TRIPLEDOT       reduce using rule 73 (expr9 -> expr10 .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57


state 19

    (81) expr12 -> expr13 . DOUBLESTAR expr12
    (82) expr12 -> expr13 .

    DOUBLESTAR      shift and go to state 58
    MULTIPLY        reduce using rule 82 (expr12 -> expr13 .)
    DIV             reduce using rule 82 (expr12 -> expr13 .)
    MOD             reduce using rule 82 (expr12 -> expr13 .)
    PLUS            reduce using rule 82 (expr12 -> expr13 .)
    MINUS           reduce using rule 82 (expr12 -> expr13 .)
    SHIFTL          reduce using rule 82 (expr12 -> expr13 .)
    SHIFTR          reduce using rule 82 (expr12 -> expr13 .)
    BITAND          reduce using rule 82 (expr12 -> expr13 .)
    DOUBLEDOT       reduce using rule 82 (expr12 -> expr13 .)
    TRIPLEDOT       reduce using rule 82 (expr12 -> expr13 .)
    BITXOR          reduce using rule 82 (expr12 -> expr13 .)
    PIPE            reduce using rule 82 (expr12 -> expr13 .)
    LESSEQUAL       reduce using rule 82 (expr12 -> expr13 .)
    LESS            reduce using rule 82 (expr12 -> expr13 .)
    GREATER         reduce using rule 82 (expr12 -> expr13 .)
    GREATEREQUAL    reduce using rule 82 (expr12 -> expr13 .)
    IFF             reduce using rule 82 (expr12 -> expr13 .)
    DOUBLEEQUAL     reduce using rule 82 (expr12 -> expr13 .)
    TRIPLEEQUAL     reduce using rule 82 (expr12 -> expr13 .)
    NOTEQUAL        reduce using rule 82 (expr12 -> expr13 .)
    LOGICALAND      reduce using rule 82 (expr12 -> expr13 .)
    LOGICALOR       reduce using rule 82 (expr12 -> expr13 .)
    KEYWORD_while   reduce using rule 82 (expr12 -> expr13 .)
    KEYWORD_until   reduce using rule 82 (expr12 -> expr13 .)
    DELIM           reduce using rule 82 (expr12 -> expr13 .)
    newline         reduce using rule 82 (expr12 -> expr13 .)
    $end            reduce using rule 82 (expr12 -> expr13 .)
    KEYWORD_end     reduce using rule 82 (expr12 -> expr13 .)
    KEYWORD_elsif   reduce using rule 82 (expr12 -> expr13 .)
    KEYWORD_else    reduce using rule 82 (expr12 -> expr13 .)
    CLOSE_PAREN     reduce using rule 82 (expr12 -> expr13 .)
    QUESTION_MARK   reduce using rule 82 (expr12 -> expr13 .)
    KEYWORD_do      reduce using rule 82 (expr12 -> expr13 .)
    KEYWORD_then    reduce using rule 82 (expr12 -> expr13 .)
    COLON           reduce using rule 82 (expr12 -> expr13 .)


state 20

    (90) uexpr -> MINUS .

    INT_CONSTANTS   reduce using rule 90 (uexpr -> MINUS .)
    FLOAT_CONSTANTS reduce using rule 90 (uexpr -> MINUS .)


state 21

    (87) expr13 -> VARIABLES .

    DOUBLESTAR      reduce using rule 87 (expr13 -> VARIABLES .)
    MULTIPLY        reduce using rule 87 (expr13 -> VARIABLES .)
    DIV             reduce using rule 87 (expr13 -> VARIABLES .)
    MOD             reduce using rule 87 (expr13 -> VARIABLES .)
    PLUS            reduce using rule 87 (expr13 -> VARIABLES .)
    MINUS           reduce using rule 87 (expr13 -> VARIABLES .)
    SHIFTL          reduce using rule 87 (expr13 -> VARIABLES .)
    SHIFTR          reduce using rule 87 (expr13 -> VARIABLES .)
    BITAND          reduce using rule 87 (expr13 -> VARIABLES .)
    BITXOR          reduce using rule 87 (expr13 -> VARIABLES .)
    PIPE            reduce using rule 87 (expr13 -> VARIABLES .)
    KEYWORD_while   reduce using rule 87 (expr13 -> VARIABLES .)
    KEYWORD_until   reduce using rule 87 (expr13 -> VARIABLES .)
    DELIM           reduce using rule 87 (expr13 -> VARIABLES .)
    newline         reduce using rule 87 (expr13 -> VARIABLES .)
    $end            reduce using rule 87 (expr13 -> VARIABLES .)
    KEYWORD_end     reduce using rule 87 (expr13 -> VARIABLES .)
    KEYWORD_elsif   reduce using rule 87 (expr13 -> VARIABLES .)
    KEYWORD_else    reduce using rule 87 (expr13 -> VARIABLES .)
    CLOSE_PAREN     reduce using rule 87 (expr13 -> VARIABLES .)
    COLON           reduce using rule 87 (expr13 -> VARIABLES .)
    DOUBLEDOT       reduce using rule 87 (expr13 -> VARIABLES .)
    TRIPLEDOT       reduce using rule 87 (expr13 -> VARIABLES .)
    LESSEQUAL       reduce using rule 87 (expr13 -> VARIABLES .)
    LESS            reduce using rule 87 (expr13 -> VARIABLES .)
    GREATER         reduce using rule 87 (expr13 -> VARIABLES .)
    GREATEREQUAL    reduce using rule 87 (expr13 -> VARIABLES .)
    IFF             reduce using rule 87 (expr13 -> VARIABLES .)
    DOUBLEEQUAL     reduce using rule 87 (expr13 -> VARIABLES .)
    TRIPLEEQUAL     reduce using rule 87 (expr13 -> VARIABLES .)
    NOTEQUAL        reduce using rule 87 (expr13 -> VARIABLES .)
    LOGICALAND      reduce using rule 87 (expr13 -> VARIABLES .)
    QUESTION_MARK   reduce using rule 87 (expr13 -> VARIABLES .)
    LOGICALOR       reduce using rule 87 (expr13 -> VARIABLES .)
    KEYWORD_do      reduce using rule 87 (expr13 -> VARIABLES .)
    KEYWORD_then    reduce using rule 87 (expr13 -> VARIABLES .)


state 22

    (92) uexpr -> BITCOMP .

    INT_CONSTANTS   reduce using rule 92 (uexpr -> BITCOMP .)
    FLOAT_CONSTANTS reduce using rule 92 (uexpr -> BITCOMP .)


state 23

    (12) top_stmt -> KEYWORD_until expr3 . opt_do top_compstmt KEYWORD_end
    (52) expr3 -> expr3 . LOGICALOR expr4
    (22) opt_do -> . KEYWORD_do
    (23) opt_do -> . newline

    LOGICALOR       shift and go to state 60
    KEYWORD_do      shift and go to state 61
    newline         shift and go to state 59

    opt_do                         shift and go to state 62

state 24

    (83) expr13 -> OPEN_PAREN . expr1 CLOSE_PAREN
    (47) expr1 -> . expr3 QUESTION_MARK expr2 COLON expr2
    (48) expr1 -> . expr2
    (52) expr3 -> . expr3 LOGICALOR expr4
    (53) expr3 -> . expr4
    (49) expr2 -> . expr7 DOUBLEDOT expr7
    (50) expr2 -> . expr7 TRIPLEDOT expr7
    (51) expr2 -> . expr3
    (54) expr4 -> . expr4 LOGICALAND expr5
    (55) expr4 -> . expr5
    (66) expr7 -> . expr7 BITXOR expr8
    (67) expr7 -> . expr7 PIPE expr8
    (68) expr7 -> . expr8
    (56) expr5 -> . expr6 IFF expr6
    (57) expr5 -> . expr6 DOUBLEEQUAL expr6
    (58) expr5 -> . expr6 TRIPLEEQUAL expr6
    (59) expr5 -> . expr6 NOTEQUAL expr6
    (60) expr5 -> . expr6
    (69) expr8 -> . expr8 BITAND expr9
    (70) expr8 -> . expr9
    (61) expr6 -> . expr7 LESSEQUAL expr7
    (62) expr6 -> . expr7 LESS expr7
    (63) expr6 -> . expr7 GREATER expr7
    (64) expr6 -> . expr7 GREATEREQUAL expr7
    (65) expr6 -> . expr7
    (71) expr9 -> . expr9 SHIFTL expr10
    (72) expr9 -> . expr9 SHIFTR expr10
    (73) expr9 -> . expr10
    (74) expr10 -> . expr10 PLUS expr11
    (75) expr10 -> . expr10 MINUS expr11
    (76) expr10 -> . expr11
    (77) expr11 -> . expr11 MULTIPLY expr12
    (78) expr11 -> . expr11 DIV expr12
    (79) expr11 -> . expr11 MOD expr12
    (80) expr11 -> . expr12
    (81) expr12 -> . expr13 DOUBLESTAR expr12
    (82) expr12 -> . expr13
    (83) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (84) expr13 -> . uexpr INT_CONSTANTS
    (85) expr13 -> . uexpr FLOAT_CONSTANTS
    (86) expr13 -> . CONSTANTS
    (87) expr13 -> . VARIABLES
    (88) uexpr -> . none
    (89) uexpr -> . PLUS
    (90) uexpr -> . MINUS
    (91) uexpr -> . BITNOT
    (92) uexpr -> . BITCOMP
    (99) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 35
    VARIABLES       shift and go to state 21
    PLUS            shift and go to state 29
    MINUS           shift and go to state 20
    BITNOT          shift and go to state 34
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 99 (none -> .)
    FLOAT_CONSTANTS reduce using rule 99 (none -> .)

    uexpr                          shift and go to state 32
    none                           shift and go to state 33
    expr12                         shift and go to state 17
    expr13                         shift and go to state 19
    expr2                          shift and go to state 51
    expr3                          shift and go to state 52
    expr1                          shift and go to state 63
    expr6                          shift and go to state 25
    expr7                          shift and go to state 54
    expr4                          shift and go to state 27
    expr5                          shift and go to state 28
    expr10                         shift and go to state 18
    expr8                          shift and go to state 30
    expr9                          shift and go to state 31
    expr11                         shift and go to state 36

state 25

    (56) expr5 -> expr6 . IFF expr6
    (57) expr5 -> expr6 . DOUBLEEQUAL expr6
    (58) expr5 -> expr6 . TRIPLEEQUAL expr6
    (59) expr5 -> expr6 . NOTEQUAL expr6
    (60) expr5 -> expr6 .

    IFF             shift and go to state 65
    DOUBLEEQUAL     shift and go to state 67
    TRIPLEEQUAL     shift and go to state 66
    NOTEQUAL        shift and go to state 64
    LOGICALAND      reduce using rule 60 (expr5 -> expr6 .)
    LOGICALOR       reduce using rule 60 (expr5 -> expr6 .)
    KEYWORD_do      reduce using rule 60 (expr5 -> expr6 .)
    newline         reduce using rule 60 (expr5 -> expr6 .)
    KEYWORD_then    reduce using rule 60 (expr5 -> expr6 .)
    QUESTION_MARK   reduce using rule 60 (expr5 -> expr6 .)
    KEYWORD_while   reduce using rule 60 (expr5 -> expr6 .)
    KEYWORD_until   reduce using rule 60 (expr5 -> expr6 .)
    DELIM           reduce using rule 60 (expr5 -> expr6 .)
    $end            reduce using rule 60 (expr5 -> expr6 .)
    KEYWORD_end     reduce using rule 60 (expr5 -> expr6 .)
    KEYWORD_elsif   reduce using rule 60 (expr5 -> expr6 .)
    KEYWORD_else    reduce using rule 60 (expr5 -> expr6 .)
    CLOSE_PAREN     reduce using rule 60 (expr5 -> expr6 .)
    COLON           reduce using rule 60 (expr5 -> expr6 .)


state 26

    (61) expr6 -> expr7 . LESSEQUAL expr7
    (62) expr6 -> expr7 . LESS expr7
    (63) expr6 -> expr7 . GREATER expr7
    (64) expr6 -> expr7 . GREATEREQUAL expr7
    (65) expr6 -> expr7 .
    (66) expr7 -> expr7 . BITXOR expr8
    (67) expr7 -> expr7 . PIPE expr8

    LESSEQUAL       shift and go to state 73
    LESS            shift and go to state 70
    GREATER         shift and go to state 69
    GREATEREQUAL    shift and go to state 68
    IFF             reduce using rule 65 (expr6 -> expr7 .)
    DOUBLEEQUAL     reduce using rule 65 (expr6 -> expr7 .)
    TRIPLEEQUAL     reduce using rule 65 (expr6 -> expr7 .)
    NOTEQUAL        reduce using rule 65 (expr6 -> expr7 .)
    LOGICALAND      reduce using rule 65 (expr6 -> expr7 .)
    LOGICALOR       reduce using rule 65 (expr6 -> expr7 .)
    KEYWORD_while   reduce using rule 65 (expr6 -> expr7 .)
    KEYWORD_until   reduce using rule 65 (expr6 -> expr7 .)
    DELIM           reduce using rule 65 (expr6 -> expr7 .)
    newline         reduce using rule 65 (expr6 -> expr7 .)
    $end            reduce using rule 65 (expr6 -> expr7 .)
    KEYWORD_end     reduce using rule 65 (expr6 -> expr7 .)
    KEYWORD_elsif   reduce using rule 65 (expr6 -> expr7 .)
    KEYWORD_else    reduce using rule 65 (expr6 -> expr7 .)
    KEYWORD_do      reduce using rule 65 (expr6 -> expr7 .)
    KEYWORD_then    reduce using rule 65 (expr6 -> expr7 .)
    QUESTION_MARK   reduce using rule 65 (expr6 -> expr7 .)
    CLOSE_PAREN     reduce using rule 65 (expr6 -> expr7 .)
    COLON           reduce using rule 65 (expr6 -> expr7 .)
    BITXOR          shift and go to state 72
    PIPE            shift and go to state 71


state 27

    (53) expr3 -> expr4 .
    (54) expr4 -> expr4 . LOGICALAND expr5

    LOGICALOR       reduce using rule 53 (expr3 -> expr4 .)
    KEYWORD_while   reduce using rule 53 (expr3 -> expr4 .)
    KEYWORD_until   reduce using rule 53 (expr3 -> expr4 .)
    DELIM           reduce using rule 53 (expr3 -> expr4 .)
    newline         reduce using rule 53 (expr3 -> expr4 .)
    $end            reduce using rule 53 (expr3 -> expr4 .)
    KEYWORD_end     reduce using rule 53 (expr3 -> expr4 .)
    KEYWORD_elsif   reduce using rule 53 (expr3 -> expr4 .)
    KEYWORD_else    reduce using rule 53 (expr3 -> expr4 .)
    KEYWORD_do      reduce using rule 53 (expr3 -> expr4 .)
    CLOSE_PAREN     reduce using rule 53 (expr3 -> expr4 .)
    KEYWORD_then    reduce using rule 53 (expr3 -> expr4 .)
    QUESTION_MARK   reduce using rule 53 (expr3 -> expr4 .)
    COLON           reduce using rule 53 (expr3 -> expr4 .)
    LOGICALAND      shift and go to state 74


state 28

    (55) expr4 -> expr5 .

    LOGICALAND      reduce using rule 55 (expr4 -> expr5 .)
    LOGICALOR       reduce using rule 55 (expr4 -> expr5 .)
    KEYWORD_then    reduce using rule 55 (expr4 -> expr5 .)
    newline         reduce using rule 55 (expr4 -> expr5 .)
    KEYWORD_while   reduce using rule 55 (expr4 -> expr5 .)
    KEYWORD_until   reduce using rule 55 (expr4 -> expr5 .)
    DELIM           reduce using rule 55 (expr4 -> expr5 .)
    $end            reduce using rule 55 (expr4 -> expr5 .)
    KEYWORD_end     reduce using rule 55 (expr4 -> expr5 .)
    KEYWORD_elsif   reduce using rule 55 (expr4 -> expr5 .)
    KEYWORD_else    reduce using rule 55 (expr4 -> expr5 .)
    COLON           reduce using rule 55 (expr4 -> expr5 .)
    KEYWORD_do      reduce using rule 55 (expr4 -> expr5 .)
    QUESTION_MARK   reduce using rule 55 (expr4 -> expr5 .)
    CLOSE_PAREN     reduce using rule 55 (expr4 -> expr5 .)


state 29

    (89) uexpr -> PLUS .

    INT_CONSTANTS   reduce using rule 89 (uexpr -> PLUS .)
    FLOAT_CONSTANTS reduce using rule 89 (uexpr -> PLUS .)


state 30

    (68) expr7 -> expr8 .
    (69) expr8 -> expr8 . BITAND expr9

    LESSEQUAL       reduce using rule 68 (expr7 -> expr8 .)
    LESS            reduce using rule 68 (expr7 -> expr8 .)
    GREATER         reduce using rule 68 (expr7 -> expr8 .)
    GREATEREQUAL    reduce using rule 68 (expr7 -> expr8 .)
    BITXOR          reduce using rule 68 (expr7 -> expr8 .)
    PIPE            reduce using rule 68 (expr7 -> expr8 .)
    IFF             reduce using rule 68 (expr7 -> expr8 .)
    DOUBLEEQUAL     reduce using rule 68 (expr7 -> expr8 .)
    TRIPLEEQUAL     reduce using rule 68 (expr7 -> expr8 .)
    NOTEQUAL        reduce using rule 68 (expr7 -> expr8 .)
    LOGICALAND      reduce using rule 68 (expr7 -> expr8 .)
    LOGICALOR       reduce using rule 68 (expr7 -> expr8 .)
    KEYWORD_do      reduce using rule 68 (expr7 -> expr8 .)
    newline         reduce using rule 68 (expr7 -> expr8 .)
    DOUBLEDOT       reduce using rule 68 (expr7 -> expr8 .)
    TRIPLEDOT       reduce using rule 68 (expr7 -> expr8 .)
    QUESTION_MARK   reduce using rule 68 (expr7 -> expr8 .)
    CLOSE_PAREN     reduce using rule 68 (expr7 -> expr8 .)
    KEYWORD_then    reduce using rule 68 (expr7 -> expr8 .)
    KEYWORD_while   reduce using rule 68 (expr7 -> expr8 .)
    KEYWORD_until   reduce using rule 68 (expr7 -> expr8 .)
    DELIM           reduce using rule 68 (expr7 -> expr8 .)
    $end            reduce using rule 68 (expr7 -> expr8 .)
    KEYWORD_end     reduce using rule 68 (expr7 -> expr8 .)
    KEYWORD_elsif   reduce using rule 68 (expr7 -> expr8 .)
    KEYWORD_else    reduce using rule 68 (expr7 -> expr8 .)
    COLON           reduce using rule 68 (expr7 -> expr8 .)
    BITAND          shift and go to state 75


state 31

    (70) expr8 -> expr9 .
    (71) expr9 -> expr9 . SHIFTL expr10
    (72) expr9 -> expr9 . SHIFTR expr10

    BITAND          reduce using rule 70 (expr8 -> expr9 .)
    BITXOR          reduce using rule 70 (expr8 -> expr9 .)
    PIPE            reduce using rule 70 (expr8 -> expr9 .)
    KEYWORD_while   reduce using rule 70 (expr8 -> expr9 .)
    KEYWORD_until   reduce using rule 70 (expr8 -> expr9 .)
    DELIM           reduce using rule 70 (expr8 -> expr9 .)
    newline         reduce using rule 70 (expr8 -> expr9 .)
    $end            reduce using rule 70 (expr8 -> expr9 .)
    KEYWORD_end     reduce using rule 70 (expr8 -> expr9 .)
    KEYWORD_elsif   reduce using rule 70 (expr8 -> expr9 .)
    KEYWORD_else    reduce using rule 70 (expr8 -> expr9 .)
    CLOSE_PAREN     reduce using rule 70 (expr8 -> expr9 .)
    COLON           reduce using rule 70 (expr8 -> expr9 .)
    IFF             reduce using rule 70 (expr8 -> expr9 .)
    DOUBLEEQUAL     reduce using rule 70 (expr8 -> expr9 .)
    TRIPLEEQUAL     reduce using rule 70 (expr8 -> expr9 .)
    NOTEQUAL        reduce using rule 70 (expr8 -> expr9 .)
    LOGICALAND      reduce using rule 70 (expr8 -> expr9 .)
    LOGICALOR       reduce using rule 70 (expr8 -> expr9 .)
    KEYWORD_do      reduce using rule 70 (expr8 -> expr9 .)
    KEYWORD_then    reduce using rule 70 (expr8 -> expr9 .)
    QUESTION_MARK   reduce using rule 70 (expr8 -> expr9 .)
    LESSEQUAL       reduce using rule 70 (expr8 -> expr9 .)
    LESS            reduce using rule 70 (expr8 -> expr9 .)
    GREATER         reduce using rule 70 (expr8 -> expr9 .)
    GREATEREQUAL    reduce using rule 70 (expr8 -> expr9 .)
    DOUBLEDOT       reduce using rule 70 (expr8 -> expr9 .)
    TRIPLEDOT       reduce using rule 70 (expr8 -> expr9 .)
    SHIFTL          shift and go to state 77
    SHIFTR          shift and go to state 76


state 32

    (84) expr13 -> uexpr . INT_CONSTANTS
    (85) expr13 -> uexpr . FLOAT_CONSTANTS

    INT_CONSTANTS   shift and go to state 78
    FLOAT_CONSTANTS shift and go to state 79


state 33

    (88) uexpr -> none .

    INT_CONSTANTS   reduce using rule 88 (uexpr -> none .)
    FLOAT_CONSTANTS reduce using rule 88 (uexpr -> none .)


state 34

    (91) uexpr -> BITNOT .

    INT_CONSTANTS   reduce using rule 91 (uexpr -> BITNOT .)
    FLOAT_CONSTANTS reduce using rule 91 (uexpr -> BITNOT .)


state 35

    (86) expr13 -> CONSTANTS .

    DOUBLESTAR      reduce using rule 86 (expr13 -> CONSTANTS .)
    MULTIPLY        reduce using rule 86 (expr13 -> CONSTANTS .)
    DIV             reduce using rule 86 (expr13 -> CONSTANTS .)
    MOD             reduce using rule 86 (expr13 -> CONSTANTS .)
    PLUS            reduce using rule 86 (expr13 -> CONSTANTS .)
    MINUS           reduce using rule 86 (expr13 -> CONSTANTS .)
    SHIFTL          reduce using rule 86 (expr13 -> CONSTANTS .)
    SHIFTR          reduce using rule 86 (expr13 -> CONSTANTS .)
    BITAND          reduce using rule 86 (expr13 -> CONSTANTS .)
    BITXOR          reduce using rule 86 (expr13 -> CONSTANTS .)
    PIPE            reduce using rule 86 (expr13 -> CONSTANTS .)
    KEYWORD_while   reduce using rule 86 (expr13 -> CONSTANTS .)
    KEYWORD_until   reduce using rule 86 (expr13 -> CONSTANTS .)
    DELIM           reduce using rule 86 (expr13 -> CONSTANTS .)
    newline         reduce using rule 86 (expr13 -> CONSTANTS .)
    $end            reduce using rule 86 (expr13 -> CONSTANTS .)
    KEYWORD_end     reduce using rule 86 (expr13 -> CONSTANTS .)
    KEYWORD_elsif   reduce using rule 86 (expr13 -> CONSTANTS .)
    KEYWORD_else    reduce using rule 86 (expr13 -> CONSTANTS .)
    CLOSE_PAREN     reduce using rule 86 (expr13 -> CONSTANTS .)
    COLON           reduce using rule 86 (expr13 -> CONSTANTS .)
    DOUBLEDOT       reduce using rule 86 (expr13 -> CONSTANTS .)
    TRIPLEDOT       reduce using rule 86 (expr13 -> CONSTANTS .)
    LESSEQUAL       reduce using rule 86 (expr13 -> CONSTANTS .)
    LESS            reduce using rule 86 (expr13 -> CONSTANTS .)
    GREATER         reduce using rule 86 (expr13 -> CONSTANTS .)
    GREATEREQUAL    reduce using rule 86 (expr13 -> CONSTANTS .)
    IFF             reduce using rule 86 (expr13 -> CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 86 (expr13 -> CONSTANTS .)
    TRIPLEEQUAL     reduce using rule 86 (expr13 -> CONSTANTS .)
    NOTEQUAL        reduce using rule 86 (expr13 -> CONSTANTS .)
    LOGICALAND      reduce using rule 86 (expr13 -> CONSTANTS .)
    QUESTION_MARK   reduce using rule 86 (expr13 -> CONSTANTS .)
    LOGICALOR       reduce using rule 86 (expr13 -> CONSTANTS .)
    KEYWORD_do      reduce using rule 86 (expr13 -> CONSTANTS .)
    KEYWORD_then    reduce using rule 86 (expr13 -> CONSTANTS .)


state 36

    (76) expr10 -> expr11 .
    (77) expr11 -> expr11 . MULTIPLY expr12
    (78) expr11 -> expr11 . DIV expr12
    (79) expr11 -> expr11 . MOD expr12

    PLUS            reduce using rule 76 (expr10 -> expr11 .)
    MINUS           reduce using rule 76 (expr10 -> expr11 .)
    SHIFTL          reduce using rule 76 (expr10 -> expr11 .)
    SHIFTR          reduce using rule 76 (expr10 -> expr11 .)
    BITAND          reduce using rule 76 (expr10 -> expr11 .)
    LESSEQUAL       reduce using rule 76 (expr10 -> expr11 .)
    LESS            reduce using rule 76 (expr10 -> expr11 .)
    GREATER         reduce using rule 76 (expr10 -> expr11 .)
    GREATEREQUAL    reduce using rule 76 (expr10 -> expr11 .)
    BITXOR          reduce using rule 76 (expr10 -> expr11 .)
    PIPE            reduce using rule 76 (expr10 -> expr11 .)
    LOGICALAND      reduce using rule 76 (expr10 -> expr11 .)
    LOGICALOR       reduce using rule 76 (expr10 -> expr11 .)
    KEYWORD_do      reduce using rule 76 (expr10 -> expr11 .)
    newline         reduce using rule 76 (expr10 -> expr11 .)
    KEYWORD_then    reduce using rule 76 (expr10 -> expr11 .)
    QUESTION_MARK   reduce using rule 76 (expr10 -> expr11 .)
    KEYWORD_while   reduce using rule 76 (expr10 -> expr11 .)
    KEYWORD_until   reduce using rule 76 (expr10 -> expr11 .)
    DELIM           reduce using rule 76 (expr10 -> expr11 .)
    $end            reduce using rule 76 (expr10 -> expr11 .)
    KEYWORD_end     reduce using rule 76 (expr10 -> expr11 .)
    KEYWORD_elsif   reduce using rule 76 (expr10 -> expr11 .)
    KEYWORD_else    reduce using rule 76 (expr10 -> expr11 .)
    CLOSE_PAREN     reduce using rule 76 (expr10 -> expr11 .)
    COLON           reduce using rule 76 (expr10 -> expr11 .)
    IFF             reduce using rule 76 (expr10 -> expr11 .)
    DOUBLEEQUAL     reduce using rule 76 (expr10 -> expr11 .)
    TRIPLEEQUAL     reduce using rule 76 (expr10 -> expr11 .)
    NOTEQUAL        reduce using rule 76 (expr10 -> expr11 .)
    DOUBLEDOT       reduce using rule 76 (expr10 -> expr11 .)
    TRIPLEDOT       reduce using rule 76 (expr10 -> expr11 .)
    MULTIPLY        shift and go to state 80
    DIV             shift and go to state 81
    MOD             shift and go to state 82


state 37

    (7) top_stmt -> KEYWORD_if expr3 . opt_then top_compstmt elsif_tail opt_else_stmt KEYWORD_end
    (52) expr3 -> expr3 . LOGICALOR expr4
    (20) opt_then -> . KEYWORD_then
    (21) opt_then -> . newline

    LOGICALOR       shift and go to state 60
    KEYWORD_then    shift and go to state 84
    newline         shift and go to state 83

    opt_then                       shift and go to state 85

state 38

    (8) top_stmt -> KEYWORD_while expr3 . opt_do top_compstmt KEYWORD_end
    (52) expr3 -> expr3 . LOGICALOR expr4
    (22) opt_do -> . KEYWORD_do
    (23) opt_do -> . newline

    LOGICALOR       shift and go to state 60
    KEYWORD_do      shift and go to state 61
    newline         shift and go to state 59

    opt_do                         shift and go to state 86

state 39

    (10) top_stmt -> KEYWORD_begin top_compstmt . KEYWORD_end KEYWORD_while expr3
    (13) top_stmt -> KEYWORD_begin top_compstmt . KEYWORD_end KEYWORD_until expr3

    KEYWORD_end     shift and go to state 87


state 40

    (95) terms -> term .

    KEYWORD_if      reduce using rule 95 (terms -> term .)
    KEYWORD_while   reduce using rule 95 (terms -> term .)
    KEYWORD_begin   reduce using rule 95 (terms -> term .)
    KEYWORD_until   reduce using rule 95 (terms -> term .)
    KEYWORD_for     reduce using rule 95 (terms -> term .)
    DELIM           reduce using rule 95 (terms -> term .)
    newline         reduce using rule 95 (terms -> term .)
    VARIABLES       reduce using rule 95 (terms -> term .)
    CONSTANTS       reduce using rule 95 (terms -> term .)
    $end            reduce using rule 95 (terms -> term .)
    KEYWORD_end     reduce using rule 95 (terms -> term .)
    KEYWORD_elsif   reduce using rule 95 (terms -> term .)
    KEYWORD_else    reduce using rule 95 (terms -> term .)


state 41

    (5) top_stmts -> top_stmts terms . top_stmt
    (94) opt_terms -> terms .
    (96) terms -> terms . term
    (6) top_stmt -> . stmt
    (7) top_stmt -> . KEYWORD_if expr3 opt_then top_compstmt elsif_tail opt_else_stmt KEYWORD_end
    (8) top_stmt -> . KEYWORD_while expr3 opt_do top_compstmt KEYWORD_end
    (9) top_stmt -> . top_stmt KEYWORD_while expr3
    (10) top_stmt -> . KEYWORD_begin top_compstmt KEYWORD_end KEYWORD_while expr3
    (11) top_stmt -> . top_stmt KEYWORD_until expr3
    (12) top_stmt -> . KEYWORD_until expr3 opt_do top_compstmt KEYWORD_end
    (13) top_stmt -> . KEYWORD_begin top_compstmt KEYWORD_end KEYWORD_until expr3
    (14) top_stmt -> . KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do top_compstmt KEYWORD_end
    (97) term -> . DELIM
    (98) term -> . newline
    (15) stmt -> . expr
    (36) expr -> . mlhs EQUAL mrhs
    (37) mlhs -> . VARIABLES
    (38) mlhs -> . CONSTANTS

    $end            reduce using rule 94 (opt_terms -> terms .)
    KEYWORD_end     reduce using rule 94 (opt_terms -> terms .)
    KEYWORD_elsif   reduce using rule 94 (opt_terms -> terms .)
    KEYWORD_else    reduce using rule 94 (opt_terms -> terms .)
    KEYWORD_if      shift and go to state 3
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 7
    KEYWORD_until   shift and go to state 2
    KEYWORD_for     shift and go to state 11
    DELIM           shift and go to state 43
    newline         shift and go to state 42
    VARIABLES       shift and go to state 5
    CONSTANTS       shift and go to state 14

    term                           shift and go to state 88
    expr                           shift and go to state 13
    mlhs                           shift and go to state 1
    stmt                           shift and go to state 10
    top_stmt                       shift and go to state 89

state 42

    (98) term -> newline .

    KEYWORD_if      reduce using rule 98 (term -> newline .)
    KEYWORD_while   reduce using rule 98 (term -> newline .)
    KEYWORD_begin   reduce using rule 98 (term -> newline .)
    KEYWORD_until   reduce using rule 98 (term -> newline .)
    KEYWORD_for     reduce using rule 98 (term -> newline .)
    DELIM           reduce using rule 98 (term -> newline .)
    newline         reduce using rule 98 (term -> newline .)
    VARIABLES       reduce using rule 98 (term -> newline .)
    CONSTANTS       reduce using rule 98 (term -> newline .)
    $end            reduce using rule 98 (term -> newline .)
    KEYWORD_end     reduce using rule 98 (term -> newline .)
    KEYWORD_elsif   reduce using rule 98 (term -> newline .)
    KEYWORD_else    reduce using rule 98 (term -> newline .)


state 43

    (97) term -> DELIM .

    KEYWORD_if      reduce using rule 97 (term -> DELIM .)
    KEYWORD_while   reduce using rule 97 (term -> DELIM .)
    KEYWORD_begin   reduce using rule 97 (term -> DELIM .)
    KEYWORD_until   reduce using rule 97 (term -> DELIM .)
    KEYWORD_for     reduce using rule 97 (term -> DELIM .)
    DELIM           reduce using rule 97 (term -> DELIM .)
    newline         reduce using rule 97 (term -> DELIM .)
    VARIABLES       reduce using rule 97 (term -> DELIM .)
    CONSTANTS       reduce using rule 97 (term -> DELIM .)
    $end            reduce using rule 97 (term -> DELIM .)
    KEYWORD_end     reduce using rule 97 (term -> DELIM .)
    KEYWORD_elsif   reduce using rule 97 (term -> DELIM .)
    KEYWORD_else    reduce using rule 97 (term -> DELIM .)


state 44

    (93) opt_terms -> none .

    $end            reduce using rule 93 (opt_terms -> none .)
    KEYWORD_end     reduce using rule 93 (opt_terms -> none .)
    KEYWORD_elsif   reduce using rule 93 (opt_terms -> none .)
    KEYWORD_else    reduce using rule 93 (opt_terms -> none .)


state 45

    (2) top_compstmt -> top_stmts opt_terms .

    KEYWORD_end     reduce using rule 2 (top_compstmt -> top_stmts opt_terms .)
    KEYWORD_elsif   reduce using rule 2 (top_compstmt -> top_stmts opt_terms .)
    KEYWORD_else    reduce using rule 2 (top_compstmt -> top_stmts opt_terms .)
    $end            reduce using rule 2 (top_compstmt -> top_stmts opt_terms .)


state 46

    (29) opt_oparen -> none .

    VARIABLES       reduce using rule 29 (opt_oparen -> none .)
    CONSTANTS       reduce using rule 29 (opt_oparen -> none .)


state 47

    (28) opt_oparen -> OPEN_PAREN .

    VARIABLES       reduce using rule 28 (opt_oparen -> OPEN_PAREN .)
    CONSTANTS       reduce using rule 28 (opt_oparen -> OPEN_PAREN .)


state 48

    (14) top_stmt -> KEYWORD_for opt_oparen . multi_var opt_cparen KEYWORD_in for_range opt_do top_compstmt KEYWORD_end
    (24) multi_var -> . VARIABLES
    (25) multi_var -> . CONSTANTS
    (26) multi_var -> . multi_var COMMA VARIABLES
    (27) multi_var -> . multi_var COMMA CONSTANTS

    VARIABLES       shift and go to state 90
    CONSTANTS       shift and go to state 92

    multi_var                      shift and go to state 91

state 49

    (9) top_stmt -> top_stmt KEYWORD_while . expr3
    (52) expr3 -> . expr3 LOGICALOR expr4
    (53) expr3 -> . expr4
    (54) expr4 -> . expr4 LOGICALAND expr5
    (55) expr4 -> . expr5
    (56) expr5 -> . expr6 IFF expr6
    (57) expr5 -> . expr6 DOUBLEEQUAL expr6
    (58) expr5 -> . expr6 TRIPLEEQUAL expr6
    (59) expr5 -> . expr6 NOTEQUAL expr6
    (60) expr5 -> . expr6
    (61) expr6 -> . expr7 LESSEQUAL expr7
    (62) expr6 -> . expr7 LESS expr7
    (63) expr6 -> . expr7 GREATER expr7
    (64) expr6 -> . expr7 GREATEREQUAL expr7
    (65) expr6 -> . expr7
    (66) expr7 -> . expr7 BITXOR expr8
    (67) expr7 -> . expr7 PIPE expr8
    (68) expr7 -> . expr8
    (69) expr8 -> . expr8 BITAND expr9
    (70) expr8 -> . expr9
    (71) expr9 -> . expr9 SHIFTL expr10
    (72) expr9 -> . expr9 SHIFTR expr10
    (73) expr9 -> . expr10
    (74) expr10 -> . expr10 PLUS expr11
    (75) expr10 -> . expr10 MINUS expr11
    (76) expr10 -> . expr11
    (77) expr11 -> . expr11 MULTIPLY expr12
    (78) expr11 -> . expr11 DIV expr12
    (79) expr11 -> . expr11 MOD expr12
    (80) expr11 -> . expr12
    (81) expr12 -> . expr13 DOUBLESTAR expr12
    (82) expr12 -> . expr13
    (83) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (84) expr13 -> . uexpr INT_CONSTANTS
    (85) expr13 -> . uexpr FLOAT_CONSTANTS
    (86) expr13 -> . CONSTANTS
    (87) expr13 -> . VARIABLES
    (88) uexpr -> . none
    (89) uexpr -> . PLUS
    (90) uexpr -> . MINUS
    (91) uexpr -> . BITNOT
    (92) uexpr -> . BITCOMP
    (99) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 35
    VARIABLES       shift and go to state 21
    PLUS            shift and go to state 29
    MINUS           shift and go to state 20
    BITNOT          shift and go to state 34
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 99 (none -> .)
    FLOAT_CONSTANTS reduce using rule 99 (none -> .)

    uexpr                          shift and go to state 32
    none                           shift and go to state 33
    expr12                         shift and go to state 17
    expr13                         shift and go to state 19
    expr3                          shift and go to state 93
    expr6                          shift and go to state 25
    expr7                          shift and go to state 26
    expr4                          shift and go to state 27
    expr5                          shift and go to state 28
    expr10                         shift and go to state 18
    expr8                          shift and go to state 30
    expr9                          shift and go to state 31
    expr11                         shift and go to state 36

state 50

    (11) top_stmt -> top_stmt KEYWORD_until . expr3
    (52) expr3 -> . expr3 LOGICALOR expr4
    (53) expr3 -> . expr4
    (54) expr4 -> . expr4 LOGICALAND expr5
    (55) expr4 -> . expr5
    (56) expr5 -> . expr6 IFF expr6
    (57) expr5 -> . expr6 DOUBLEEQUAL expr6
    (58) expr5 -> . expr6 TRIPLEEQUAL expr6
    (59) expr5 -> . expr6 NOTEQUAL expr6
    (60) expr5 -> . expr6
    (61) expr6 -> . expr7 LESSEQUAL expr7
    (62) expr6 -> . expr7 LESS expr7
    (63) expr6 -> . expr7 GREATER expr7
    (64) expr6 -> . expr7 GREATEREQUAL expr7
    (65) expr6 -> . expr7
    (66) expr7 -> . expr7 BITXOR expr8
    (67) expr7 -> . expr7 PIPE expr8
    (68) expr7 -> . expr8
    (69) expr8 -> . expr8 BITAND expr9
    (70) expr8 -> . expr9
    (71) expr9 -> . expr9 SHIFTL expr10
    (72) expr9 -> . expr9 SHIFTR expr10
    (73) expr9 -> . expr10
    (74) expr10 -> . expr10 PLUS expr11
    (75) expr10 -> . expr10 MINUS expr11
    (76) expr10 -> . expr11
    (77) expr11 -> . expr11 MULTIPLY expr12
    (78) expr11 -> . expr11 DIV expr12
    (79) expr11 -> . expr11 MOD expr12
    (80) expr11 -> . expr12
    (81) expr12 -> . expr13 DOUBLESTAR expr12
    (82) expr12 -> . expr13
    (83) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (84) expr13 -> . uexpr INT_CONSTANTS
    (85) expr13 -> . uexpr FLOAT_CONSTANTS
    (86) expr13 -> . CONSTANTS
    (87) expr13 -> . VARIABLES
    (88) uexpr -> . none
    (89) uexpr -> . PLUS
    (90) uexpr -> . MINUS
    (91) uexpr -> . BITNOT
    (92) uexpr -> . BITCOMP
    (99) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 35
    VARIABLES       shift and go to state 21
    PLUS            shift and go to state 29
    MINUS           shift and go to state 20
    BITNOT          shift and go to state 34
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 99 (none -> .)
    FLOAT_CONSTANTS reduce using rule 99 (none -> .)

    uexpr                          shift and go to state 32
    none                           shift and go to state 33
    expr12                         shift and go to state 17
    expr13                         shift and go to state 19
    expr3                          shift and go to state 94
    expr6                          shift and go to state 25
    expr7                          shift and go to state 26
    expr4                          shift and go to state 27
    expr5                          shift and go to state 28
    expr10                         shift and go to state 18
    expr8                          shift and go to state 30
    expr9                          shift and go to state 31
    expr11                         shift and go to state 36

state 51

    (48) expr1 -> expr2 .

    KEYWORD_while   reduce using rule 48 (expr1 -> expr2 .)
    KEYWORD_until   reduce using rule 48 (expr1 -> expr2 .)
    DELIM           reduce using rule 48 (expr1 -> expr2 .)
    newline         reduce using rule 48 (expr1 -> expr2 .)
    $end            reduce using rule 48 (expr1 -> expr2 .)
    KEYWORD_end     reduce using rule 48 (expr1 -> expr2 .)
    KEYWORD_elsif   reduce using rule 48 (expr1 -> expr2 .)
    KEYWORD_else    reduce using rule 48 (expr1 -> expr2 .)
    CLOSE_PAREN     reduce using rule 48 (expr1 -> expr2 .)


state 52

    (47) expr1 -> expr3 . QUESTION_MARK expr2 COLON expr2
    (52) expr3 -> expr3 . LOGICALOR expr4
    (51) expr2 -> expr3 .

    QUESTION_MARK   shift and go to state 95
    LOGICALOR       shift and go to state 60
    CLOSE_PAREN     reduce using rule 51 (expr2 -> expr3 .)
    KEYWORD_while   reduce using rule 51 (expr2 -> expr3 .)
    KEYWORD_until   reduce using rule 51 (expr2 -> expr3 .)
    DELIM           reduce using rule 51 (expr2 -> expr3 .)
    newline         reduce using rule 51 (expr2 -> expr3 .)
    $end            reduce using rule 51 (expr2 -> expr3 .)
    KEYWORD_end     reduce using rule 51 (expr2 -> expr3 .)
    KEYWORD_elsif   reduce using rule 51 (expr2 -> expr3 .)
    KEYWORD_else    reduce using rule 51 (expr2 -> expr3 .)


state 53

    (39) mrhs -> expr1 .

    KEYWORD_while   reduce using rule 39 (mrhs -> expr1 .)
    KEYWORD_until   reduce using rule 39 (mrhs -> expr1 .)
    DELIM           reduce using rule 39 (mrhs -> expr1 .)
    newline         reduce using rule 39 (mrhs -> expr1 .)
    $end            reduce using rule 39 (mrhs -> expr1 .)
    KEYWORD_end     reduce using rule 39 (mrhs -> expr1 .)
    KEYWORD_elsif   reduce using rule 39 (mrhs -> expr1 .)
    KEYWORD_else    reduce using rule 39 (mrhs -> expr1 .)


state 54

    (49) expr2 -> expr7 . DOUBLEDOT expr7
    (50) expr2 -> expr7 . TRIPLEDOT expr7
    (66) expr7 -> expr7 . BITXOR expr8
    (67) expr7 -> expr7 . PIPE expr8
    (61) expr6 -> expr7 . LESSEQUAL expr7
    (62) expr6 -> expr7 . LESS expr7
    (63) expr6 -> expr7 . GREATER expr7
    (64) expr6 -> expr7 . GREATEREQUAL expr7
    (65) expr6 -> expr7 .

    DOUBLEDOT       shift and go to state 96
    TRIPLEDOT       shift and go to state 97
    BITXOR          shift and go to state 72
    PIPE            shift and go to state 71
    LESSEQUAL       shift and go to state 73
    LESS            shift and go to state 70
    GREATER         shift and go to state 69
    GREATEREQUAL    shift and go to state 68
    IFF             reduce using rule 65 (expr6 -> expr7 .)
    DOUBLEEQUAL     reduce using rule 65 (expr6 -> expr7 .)
    TRIPLEEQUAL     reduce using rule 65 (expr6 -> expr7 .)
    NOTEQUAL        reduce using rule 65 (expr6 -> expr7 .)
    LOGICALAND      reduce using rule 65 (expr6 -> expr7 .)
    LOGICALOR       reduce using rule 65 (expr6 -> expr7 .)
    COLON           reduce using rule 65 (expr6 -> expr7 .)
    QUESTION_MARK   reduce using rule 65 (expr6 -> expr7 .)
    CLOSE_PAREN     reduce using rule 65 (expr6 -> expr7 .)
    KEYWORD_while   reduce using rule 65 (expr6 -> expr7 .)
    KEYWORD_until   reduce using rule 65 (expr6 -> expr7 .)
    DELIM           reduce using rule 65 (expr6 -> expr7 .)
    newline         reduce using rule 65 (expr6 -> expr7 .)
    $end            reduce using rule 65 (expr6 -> expr7 .)
    KEYWORD_end     reduce using rule 65 (expr6 -> expr7 .)
    KEYWORD_elsif   reduce using rule 65 (expr6 -> expr7 .)
    KEYWORD_else    reduce using rule 65 (expr6 -> expr7 .)


state 55

    (36) expr -> mlhs EQUAL mrhs .

    KEYWORD_while   reduce using rule 36 (expr -> mlhs EQUAL mrhs .)
    KEYWORD_until   reduce using rule 36 (expr -> mlhs EQUAL mrhs .)
    DELIM           reduce using rule 36 (expr -> mlhs EQUAL mrhs .)
    newline         reduce using rule 36 (expr -> mlhs EQUAL mrhs .)
    KEYWORD_end     reduce using rule 36 (expr -> mlhs EQUAL mrhs .)
    KEYWORD_elsif   reduce using rule 36 (expr -> mlhs EQUAL mrhs .)
    KEYWORD_else    reduce using rule 36 (expr -> mlhs EQUAL mrhs .)
    $end            reduce using rule 36 (expr -> mlhs EQUAL mrhs .)


state 56

    (74) expr10 -> expr10 PLUS . expr11
    (77) expr11 -> . expr11 MULTIPLY expr12
    (78) expr11 -> . expr11 DIV expr12
    (79) expr11 -> . expr11 MOD expr12
    (80) expr11 -> . expr12
    (81) expr12 -> . expr13 DOUBLESTAR expr12
    (82) expr12 -> . expr13
    (83) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (84) expr13 -> . uexpr INT_CONSTANTS
    (85) expr13 -> . uexpr FLOAT_CONSTANTS
    (86) expr13 -> . CONSTANTS
    (87) expr13 -> . VARIABLES
    (88) uexpr -> . none
    (89) uexpr -> . PLUS
    (90) uexpr -> . MINUS
    (91) uexpr -> . BITNOT
    (92) uexpr -> . BITCOMP
    (99) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 35
    VARIABLES       shift and go to state 21
    PLUS            shift and go to state 29
    MINUS           shift and go to state 20
    BITNOT          shift and go to state 34
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 99 (none -> .)
    FLOAT_CONSTANTS reduce using rule 99 (none -> .)

    uexpr                          shift and go to state 32
    none                           shift and go to state 33
    expr11                         shift and go to state 98
    expr12                         shift and go to state 17
    expr13                         shift and go to state 19

state 57

    (75) expr10 -> expr10 MINUS . expr11
    (77) expr11 -> . expr11 MULTIPLY expr12
    (78) expr11 -> . expr11 DIV expr12
    (79) expr11 -> . expr11 MOD expr12
    (80) expr11 -> . expr12
    (81) expr12 -> . expr13 DOUBLESTAR expr12
    (82) expr12 -> . expr13
    (83) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (84) expr13 -> . uexpr INT_CONSTANTS
    (85) expr13 -> . uexpr FLOAT_CONSTANTS
    (86) expr13 -> . CONSTANTS
    (87) expr13 -> . VARIABLES
    (88) uexpr -> . none
    (89) uexpr -> . PLUS
    (90) uexpr -> . MINUS
    (91) uexpr -> . BITNOT
    (92) uexpr -> . BITCOMP
    (99) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 35
    VARIABLES       shift and go to state 21
    PLUS            shift and go to state 29
    MINUS           shift and go to state 20
    BITNOT          shift and go to state 34
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 99 (none -> .)
    FLOAT_CONSTANTS reduce using rule 99 (none -> .)

    uexpr                          shift and go to state 32
    none                           shift and go to state 33
    expr11                         shift and go to state 99
    expr12                         shift and go to state 17
    expr13                         shift and go to state 19

state 58

    (81) expr12 -> expr13 DOUBLESTAR . expr12
    (81) expr12 -> . expr13 DOUBLESTAR expr12
    (82) expr12 -> . expr13
    (83) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (84) expr13 -> . uexpr INT_CONSTANTS
    (85) expr13 -> . uexpr FLOAT_CONSTANTS
    (86) expr13 -> . CONSTANTS
    (87) expr13 -> . VARIABLES
    (88) uexpr -> . none
    (89) uexpr -> . PLUS
    (90) uexpr -> . MINUS
    (91) uexpr -> . BITNOT
    (92) uexpr -> . BITCOMP
    (99) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 35
    VARIABLES       shift and go to state 21
    PLUS            shift and go to state 29
    MINUS           shift and go to state 20
    BITNOT          shift and go to state 34
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 99 (none -> .)
    FLOAT_CONSTANTS reduce using rule 99 (none -> .)

    uexpr                          shift and go to state 32
    none                           shift and go to state 33
    expr12                         shift and go to state 100
    expr13                         shift and go to state 19

state 59

    (23) opt_do -> newline .

    KEYWORD_if      reduce using rule 23 (opt_do -> newline .)
    KEYWORD_while   reduce using rule 23 (opt_do -> newline .)
    KEYWORD_begin   reduce using rule 23 (opt_do -> newline .)
    KEYWORD_until   reduce using rule 23 (opt_do -> newline .)
    KEYWORD_for     reduce using rule 23 (opt_do -> newline .)
    VARIABLES       reduce using rule 23 (opt_do -> newline .)
    CONSTANTS       reduce using rule 23 (opt_do -> newline .)
    KEYWORD_end     reduce using rule 23 (opt_do -> newline .)
    DELIM           reduce using rule 23 (opt_do -> newline .)
    newline         reduce using rule 23 (opt_do -> newline .)


state 60

    (52) expr3 -> expr3 LOGICALOR . expr4
    (54) expr4 -> . expr4 LOGICALAND expr5
    (55) expr4 -> . expr5
    (56) expr5 -> . expr6 IFF expr6
    (57) expr5 -> . expr6 DOUBLEEQUAL expr6
    (58) expr5 -> . expr6 TRIPLEEQUAL expr6
    (59) expr5 -> . expr6 NOTEQUAL expr6
    (60) expr5 -> . expr6
    (61) expr6 -> . expr7 LESSEQUAL expr7
    (62) expr6 -> . expr7 LESS expr7
    (63) expr6 -> . expr7 GREATER expr7
    (64) expr6 -> . expr7 GREATEREQUAL expr7
    (65) expr6 -> . expr7
    (66) expr7 -> . expr7 BITXOR expr8
    (67) expr7 -> . expr7 PIPE expr8
    (68) expr7 -> . expr8
    (69) expr8 -> . expr8 BITAND expr9
    (70) expr8 -> . expr9
    (71) expr9 -> . expr9 SHIFTL expr10
    (72) expr9 -> . expr9 SHIFTR expr10
    (73) expr9 -> . expr10
    (74) expr10 -> . expr10 PLUS expr11
    (75) expr10 -> . expr10 MINUS expr11
    (76) expr10 -> . expr11
    (77) expr11 -> . expr11 MULTIPLY expr12
    (78) expr11 -> . expr11 DIV expr12
    (79) expr11 -> . expr11 MOD expr12
    (80) expr11 -> . expr12
    (81) expr12 -> . expr13 DOUBLESTAR expr12
    (82) expr12 -> . expr13
    (83) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (84) expr13 -> . uexpr INT_CONSTANTS
    (85) expr13 -> . uexpr FLOAT_CONSTANTS
    (86) expr13 -> . CONSTANTS
    (87) expr13 -> . VARIABLES
    (88) uexpr -> . none
    (89) uexpr -> . PLUS
    (90) uexpr -> . MINUS
    (91) uexpr -> . BITNOT
    (92) uexpr -> . BITCOMP
    (99) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 35
    VARIABLES       shift and go to state 21
    PLUS            shift and go to state 29
    MINUS           shift and go to state 20
    BITNOT          shift and go to state 34
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 99 (none -> .)
    FLOAT_CONSTANTS reduce using rule 99 (none -> .)

    uexpr                          shift and go to state 32
    none                           shift and go to state 33
    expr12                         shift and go to state 17
    expr13                         shift and go to state 19
    expr6                          shift and go to state 25
    expr7                          shift and go to state 26
    expr4                          shift and go to state 101
    expr5                          shift and go to state 28
    expr10                         shift and go to state 18
    expr8                          shift and go to state 30
    expr9                          shift and go to state 31
    expr11                         shift and go to state 36

state 61

    (22) opt_do -> KEYWORD_do .

    KEYWORD_if      reduce using rule 22 (opt_do -> KEYWORD_do .)
    KEYWORD_while   reduce using rule 22 (opt_do -> KEYWORD_do .)
    KEYWORD_begin   reduce using rule 22 (opt_do -> KEYWORD_do .)
    KEYWORD_until   reduce using rule 22 (opt_do -> KEYWORD_do .)
    KEYWORD_for     reduce using rule 22 (opt_do -> KEYWORD_do .)
    VARIABLES       reduce using rule 22 (opt_do -> KEYWORD_do .)
    CONSTANTS       reduce using rule 22 (opt_do -> KEYWORD_do .)
    KEYWORD_end     reduce using rule 22 (opt_do -> KEYWORD_do .)
    DELIM           reduce using rule 22 (opt_do -> KEYWORD_do .)
    newline         reduce using rule 22 (opt_do -> KEYWORD_do .)


state 62

    (12) top_stmt -> KEYWORD_until expr3 opt_do . top_compstmt KEYWORD_end
    (2) top_compstmt -> . top_stmts opt_terms
    (3) top_stmts -> . none
    (4) top_stmts -> . top_stmt
    (5) top_stmts -> . top_stmts terms top_stmt
    (99) none -> .
    (6) top_stmt -> . stmt
    (7) top_stmt -> . KEYWORD_if expr3 opt_then top_compstmt elsif_tail opt_else_stmt KEYWORD_end
    (8) top_stmt -> . KEYWORD_while expr3 opt_do top_compstmt KEYWORD_end
    (9) top_stmt -> . top_stmt KEYWORD_while expr3
    (10) top_stmt -> . KEYWORD_begin top_compstmt KEYWORD_end KEYWORD_while expr3
    (11) top_stmt -> . top_stmt KEYWORD_until expr3
    (12) top_stmt -> . KEYWORD_until expr3 opt_do top_compstmt KEYWORD_end
    (13) top_stmt -> . KEYWORD_begin top_compstmt KEYWORD_end KEYWORD_until expr3
    (14) top_stmt -> . KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do top_compstmt KEYWORD_end
    (15) stmt -> . expr
    (36) expr -> . mlhs EQUAL mrhs
    (37) mlhs -> . VARIABLES
    (38) mlhs -> . CONSTANTS

    DELIM           reduce using rule 99 (none -> .)
    newline         reduce using rule 99 (none -> .)
    KEYWORD_end     reduce using rule 99 (none -> .)
    KEYWORD_if      shift and go to state 3
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 7
    KEYWORD_until   shift and go to state 2
    KEYWORD_for     shift and go to state 11
    VARIABLES       shift and go to state 5
    CONSTANTS       shift and go to state 14

    none                           shift and go to state 12
    expr                           shift and go to state 13
    top_compstmt                   shift and go to state 102
    mlhs                           shift and go to state 1
    stmt                           shift and go to state 10
    top_stmts                      shift and go to state 8
    top_stmt                       shift and go to state 15

state 63

    (83) expr13 -> OPEN_PAREN expr1 . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 103


state 64

    (59) expr5 -> expr6 NOTEQUAL . expr6
    (61) expr6 -> . expr7 LESSEQUAL expr7
    (62) expr6 -> . expr7 LESS expr7
    (63) expr6 -> . expr7 GREATER expr7
    (64) expr6 -> . expr7 GREATEREQUAL expr7
    (65) expr6 -> . expr7
    (66) expr7 -> . expr7 BITXOR expr8
    (67) expr7 -> . expr7 PIPE expr8
    (68) expr7 -> . expr8
    (69) expr8 -> . expr8 BITAND expr9
    (70) expr8 -> . expr9
    (71) expr9 -> . expr9 SHIFTL expr10
    (72) expr9 -> . expr9 SHIFTR expr10
    (73) expr9 -> . expr10
    (74) expr10 -> . expr10 PLUS expr11
    (75) expr10 -> . expr10 MINUS expr11
    (76) expr10 -> . expr11
    (77) expr11 -> . expr11 MULTIPLY expr12
    (78) expr11 -> . expr11 DIV expr12
    (79) expr11 -> . expr11 MOD expr12
    (80) expr11 -> . expr12
    (81) expr12 -> . expr13 DOUBLESTAR expr12
    (82) expr12 -> . expr13
    (83) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (84) expr13 -> . uexpr INT_CONSTANTS
    (85) expr13 -> . uexpr FLOAT_CONSTANTS
    (86) expr13 -> . CONSTANTS
    (87) expr13 -> . VARIABLES
    (88) uexpr -> . none
    (89) uexpr -> . PLUS
    (90) uexpr -> . MINUS
    (91) uexpr -> . BITNOT
    (92) uexpr -> . BITCOMP
    (99) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 35
    VARIABLES       shift and go to state 21
    PLUS            shift and go to state 29
    MINUS           shift and go to state 20
    BITNOT          shift and go to state 34
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 99 (none -> .)
    FLOAT_CONSTANTS reduce using rule 99 (none -> .)

    uexpr                          shift and go to state 32
    none                           shift and go to state 33
    expr10                         shift and go to state 18
    expr7                          shift and go to state 26
    expr12                         shift and go to state 17
    expr13                         shift and go to state 19
    expr6                          shift and go to state 104
    expr8                          shift and go to state 30
    expr9                          shift and go to state 31
    expr11                         shift and go to state 36

state 65

    (56) expr5 -> expr6 IFF . expr6
    (61) expr6 -> . expr7 LESSEQUAL expr7
    (62) expr6 -> . expr7 LESS expr7
    (63) expr6 -> . expr7 GREATER expr7
    (64) expr6 -> . expr7 GREATEREQUAL expr7
    (65) expr6 -> . expr7
    (66) expr7 -> . expr7 BITXOR expr8
    (67) expr7 -> . expr7 PIPE expr8
    (68) expr7 -> . expr8
    (69) expr8 -> . expr8 BITAND expr9
    (70) expr8 -> . expr9
    (71) expr9 -> . expr9 SHIFTL expr10
    (72) expr9 -> . expr9 SHIFTR expr10
    (73) expr9 -> . expr10
    (74) expr10 -> . expr10 PLUS expr11
    (75) expr10 -> . expr10 MINUS expr11
    (76) expr10 -> . expr11
    (77) expr11 -> . expr11 MULTIPLY expr12
    (78) expr11 -> . expr11 DIV expr12
    (79) expr11 -> . expr11 MOD expr12
    (80) expr11 -> . expr12
    (81) expr12 -> . expr13 DOUBLESTAR expr12
    (82) expr12 -> . expr13
    (83) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (84) expr13 -> . uexpr INT_CONSTANTS
    (85) expr13 -> . uexpr FLOAT_CONSTANTS
    (86) expr13 -> . CONSTANTS
    (87) expr13 -> . VARIABLES
    (88) uexpr -> . none
    (89) uexpr -> . PLUS
    (90) uexpr -> . MINUS
    (91) uexpr -> . BITNOT
    (92) uexpr -> . BITCOMP
    (99) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 35
    VARIABLES       shift and go to state 21
    PLUS            shift and go to state 29
    MINUS           shift and go to state 20
    BITNOT          shift and go to state 34
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 99 (none -> .)
    FLOAT_CONSTANTS reduce using rule 99 (none -> .)

    uexpr                          shift and go to state 32
    none                           shift and go to state 33
    expr10                         shift and go to state 18
    expr7                          shift and go to state 26
    expr12                         shift and go to state 17
    expr13                         shift and go to state 19
    expr6                          shift and go to state 105
    expr8                          shift and go to state 30
    expr9                          shift and go to state 31
    expr11                         shift and go to state 36

state 66

    (58) expr5 -> expr6 TRIPLEEQUAL . expr6
    (61) expr6 -> . expr7 LESSEQUAL expr7
    (62) expr6 -> . expr7 LESS expr7
    (63) expr6 -> . expr7 GREATER expr7
    (64) expr6 -> . expr7 GREATEREQUAL expr7
    (65) expr6 -> . expr7
    (66) expr7 -> . expr7 BITXOR expr8
    (67) expr7 -> . expr7 PIPE expr8
    (68) expr7 -> . expr8
    (69) expr8 -> . expr8 BITAND expr9
    (70) expr8 -> . expr9
    (71) expr9 -> . expr9 SHIFTL expr10
    (72) expr9 -> . expr9 SHIFTR expr10
    (73) expr9 -> . expr10
    (74) expr10 -> . expr10 PLUS expr11
    (75) expr10 -> . expr10 MINUS expr11
    (76) expr10 -> . expr11
    (77) expr11 -> . expr11 MULTIPLY expr12
    (78) expr11 -> . expr11 DIV expr12
    (79) expr11 -> . expr11 MOD expr12
    (80) expr11 -> . expr12
    (81) expr12 -> . expr13 DOUBLESTAR expr12
    (82) expr12 -> . expr13
    (83) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (84) expr13 -> . uexpr INT_CONSTANTS
    (85) expr13 -> . uexpr FLOAT_CONSTANTS
    (86) expr13 -> . CONSTANTS
    (87) expr13 -> . VARIABLES
    (88) uexpr -> . none
    (89) uexpr -> . PLUS
    (90) uexpr -> . MINUS
    (91) uexpr -> . BITNOT
    (92) uexpr -> . BITCOMP
    (99) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 35
    VARIABLES       shift and go to state 21
    PLUS            shift and go to state 29
    MINUS           shift and go to state 20
    BITNOT          shift and go to state 34
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 99 (none -> .)
    FLOAT_CONSTANTS reduce using rule 99 (none -> .)

    uexpr                          shift and go to state 32
    none                           shift and go to state 33
    expr10                         shift and go to state 18
    expr7                          shift and go to state 26
    expr12                         shift and go to state 17
    expr13                         shift and go to state 19
    expr6                          shift and go to state 106
    expr8                          shift and go to state 30
    expr9                          shift and go to state 31
    expr11                         shift and go to state 36

state 67

    (57) expr5 -> expr6 DOUBLEEQUAL . expr6
    (61) expr6 -> . expr7 LESSEQUAL expr7
    (62) expr6 -> . expr7 LESS expr7
    (63) expr6 -> . expr7 GREATER expr7
    (64) expr6 -> . expr7 GREATEREQUAL expr7
    (65) expr6 -> . expr7
    (66) expr7 -> . expr7 BITXOR expr8
    (67) expr7 -> . expr7 PIPE expr8
    (68) expr7 -> . expr8
    (69) expr8 -> . expr8 BITAND expr9
    (70) expr8 -> . expr9
    (71) expr9 -> . expr9 SHIFTL expr10
    (72) expr9 -> . expr9 SHIFTR expr10
    (73) expr9 -> . expr10
    (74) expr10 -> . expr10 PLUS expr11
    (75) expr10 -> . expr10 MINUS expr11
    (76) expr10 -> . expr11
    (77) expr11 -> . expr11 MULTIPLY expr12
    (78) expr11 -> . expr11 DIV expr12
    (79) expr11 -> . expr11 MOD expr12
    (80) expr11 -> . expr12
    (81) expr12 -> . expr13 DOUBLESTAR expr12
    (82) expr12 -> . expr13
    (83) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (84) expr13 -> . uexpr INT_CONSTANTS
    (85) expr13 -> . uexpr FLOAT_CONSTANTS
    (86) expr13 -> . CONSTANTS
    (87) expr13 -> . VARIABLES
    (88) uexpr -> . none
    (89) uexpr -> . PLUS
    (90) uexpr -> . MINUS
    (91) uexpr -> . BITNOT
    (92) uexpr -> . BITCOMP
    (99) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 35
    VARIABLES       shift and go to state 21
    PLUS            shift and go to state 29
    MINUS           shift and go to state 20
    BITNOT          shift and go to state 34
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 99 (none -> .)
    FLOAT_CONSTANTS reduce using rule 99 (none -> .)

    uexpr                          shift and go to state 32
    none                           shift and go to state 33
    expr10                         shift and go to state 18
    expr7                          shift and go to state 26
    expr12                         shift and go to state 17
    expr13                         shift and go to state 19
    expr6                          shift and go to state 107
    expr8                          shift and go to state 30
    expr9                          shift and go to state 31
    expr11                         shift and go to state 36

state 68

    (64) expr6 -> expr7 GREATEREQUAL . expr7
    (66) expr7 -> . expr7 BITXOR expr8
    (67) expr7 -> . expr7 PIPE expr8
    (68) expr7 -> . expr8
    (69) expr8 -> . expr8 BITAND expr9
    (70) expr8 -> . expr9
    (71) expr9 -> . expr9 SHIFTL expr10
    (72) expr9 -> . expr9 SHIFTR expr10
    (73) expr9 -> . expr10
    (74) expr10 -> . expr10 PLUS expr11
    (75) expr10 -> . expr10 MINUS expr11
    (76) expr10 -> . expr11
    (77) expr11 -> . expr11 MULTIPLY expr12
    (78) expr11 -> . expr11 DIV expr12
    (79) expr11 -> . expr11 MOD expr12
    (80) expr11 -> . expr12
    (81) expr12 -> . expr13 DOUBLESTAR expr12
    (82) expr12 -> . expr13
    (83) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (84) expr13 -> . uexpr INT_CONSTANTS
    (85) expr13 -> . uexpr FLOAT_CONSTANTS
    (86) expr13 -> . CONSTANTS
    (87) expr13 -> . VARIABLES
    (88) uexpr -> . none
    (89) uexpr -> . PLUS
    (90) uexpr -> . MINUS
    (91) uexpr -> . BITNOT
    (92) uexpr -> . BITCOMP
    (99) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 35
    VARIABLES       shift and go to state 21
    PLUS            shift and go to state 29
    MINUS           shift and go to state 20
    BITNOT          shift and go to state 34
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 99 (none -> .)
    FLOAT_CONSTANTS reduce using rule 99 (none -> .)

    uexpr                          shift and go to state 32
    none                           shift and go to state 33
    expr10                         shift and go to state 18
    expr7                          shift and go to state 108
    expr12                         shift and go to state 17
    expr13                         shift and go to state 19
    expr8                          shift and go to state 30
    expr9                          shift and go to state 31
    expr11                         shift and go to state 36

state 69

    (63) expr6 -> expr7 GREATER . expr7
    (66) expr7 -> . expr7 BITXOR expr8
    (67) expr7 -> . expr7 PIPE expr8
    (68) expr7 -> . expr8
    (69) expr8 -> . expr8 BITAND expr9
    (70) expr8 -> . expr9
    (71) expr9 -> . expr9 SHIFTL expr10
    (72) expr9 -> . expr9 SHIFTR expr10
    (73) expr9 -> . expr10
    (74) expr10 -> . expr10 PLUS expr11
    (75) expr10 -> . expr10 MINUS expr11
    (76) expr10 -> . expr11
    (77) expr11 -> . expr11 MULTIPLY expr12
    (78) expr11 -> . expr11 DIV expr12
    (79) expr11 -> . expr11 MOD expr12
    (80) expr11 -> . expr12
    (81) expr12 -> . expr13 DOUBLESTAR expr12
    (82) expr12 -> . expr13
    (83) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (84) expr13 -> . uexpr INT_CONSTANTS
    (85) expr13 -> . uexpr FLOAT_CONSTANTS
    (86) expr13 -> . CONSTANTS
    (87) expr13 -> . VARIABLES
    (88) uexpr -> . none
    (89) uexpr -> . PLUS
    (90) uexpr -> . MINUS
    (91) uexpr -> . BITNOT
    (92) uexpr -> . BITCOMP
    (99) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 35
    VARIABLES       shift and go to state 21
    PLUS            shift and go to state 29
    MINUS           shift and go to state 20
    BITNOT          shift and go to state 34
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 99 (none -> .)
    FLOAT_CONSTANTS reduce using rule 99 (none -> .)

    uexpr                          shift and go to state 32
    none                           shift and go to state 33
    expr10                         shift and go to state 18
    expr7                          shift and go to state 109
    expr12                         shift and go to state 17
    expr13                         shift and go to state 19
    expr8                          shift and go to state 30
    expr9                          shift and go to state 31
    expr11                         shift and go to state 36

state 70

    (62) expr6 -> expr7 LESS . expr7
    (66) expr7 -> . expr7 BITXOR expr8
    (67) expr7 -> . expr7 PIPE expr8
    (68) expr7 -> . expr8
    (69) expr8 -> . expr8 BITAND expr9
    (70) expr8 -> . expr9
    (71) expr9 -> . expr9 SHIFTL expr10
    (72) expr9 -> . expr9 SHIFTR expr10
    (73) expr9 -> . expr10
    (74) expr10 -> . expr10 PLUS expr11
    (75) expr10 -> . expr10 MINUS expr11
    (76) expr10 -> . expr11
    (77) expr11 -> . expr11 MULTIPLY expr12
    (78) expr11 -> . expr11 DIV expr12
    (79) expr11 -> . expr11 MOD expr12
    (80) expr11 -> . expr12
    (81) expr12 -> . expr13 DOUBLESTAR expr12
    (82) expr12 -> . expr13
    (83) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (84) expr13 -> . uexpr INT_CONSTANTS
    (85) expr13 -> . uexpr FLOAT_CONSTANTS
    (86) expr13 -> . CONSTANTS
    (87) expr13 -> . VARIABLES
    (88) uexpr -> . none
    (89) uexpr -> . PLUS
    (90) uexpr -> . MINUS
    (91) uexpr -> . BITNOT
    (92) uexpr -> . BITCOMP
    (99) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 35
    VARIABLES       shift and go to state 21
    PLUS            shift and go to state 29
    MINUS           shift and go to state 20
    BITNOT          shift and go to state 34
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 99 (none -> .)
    FLOAT_CONSTANTS reduce using rule 99 (none -> .)

    uexpr                          shift and go to state 32
    none                           shift and go to state 33
    expr10                         shift and go to state 18
    expr7                          shift and go to state 110
    expr12                         shift and go to state 17
    expr13                         shift and go to state 19
    expr8                          shift and go to state 30
    expr9                          shift and go to state 31
    expr11                         shift and go to state 36

state 71

    (67) expr7 -> expr7 PIPE . expr8
    (69) expr8 -> . expr8 BITAND expr9
    (70) expr8 -> . expr9
    (71) expr9 -> . expr9 SHIFTL expr10
    (72) expr9 -> . expr9 SHIFTR expr10
    (73) expr9 -> . expr10
    (74) expr10 -> . expr10 PLUS expr11
    (75) expr10 -> . expr10 MINUS expr11
    (76) expr10 -> . expr11
    (77) expr11 -> . expr11 MULTIPLY expr12
    (78) expr11 -> . expr11 DIV expr12
    (79) expr11 -> . expr11 MOD expr12
    (80) expr11 -> . expr12
    (81) expr12 -> . expr13 DOUBLESTAR expr12
    (82) expr12 -> . expr13
    (83) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (84) expr13 -> . uexpr INT_CONSTANTS
    (85) expr13 -> . uexpr FLOAT_CONSTANTS
    (86) expr13 -> . CONSTANTS
    (87) expr13 -> . VARIABLES
    (88) uexpr -> . none
    (89) uexpr -> . PLUS
    (90) uexpr -> . MINUS
    (91) uexpr -> . BITNOT
    (92) uexpr -> . BITCOMP
    (99) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 35
    VARIABLES       shift and go to state 21
    PLUS            shift and go to state 29
    MINUS           shift and go to state 20
    BITNOT          shift and go to state 34
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 99 (none -> .)
    FLOAT_CONSTANTS reduce using rule 99 (none -> .)

    uexpr                          shift and go to state 32
    none                           shift and go to state 33
    expr10                         shift and go to state 18
    expr12                         shift and go to state 17
    expr13                         shift and go to state 19
    expr8                          shift and go to state 111
    expr9                          shift and go to state 31
    expr11                         shift and go to state 36

state 72

    (66) expr7 -> expr7 BITXOR . expr8
    (69) expr8 -> . expr8 BITAND expr9
    (70) expr8 -> . expr9
    (71) expr9 -> . expr9 SHIFTL expr10
    (72) expr9 -> . expr9 SHIFTR expr10
    (73) expr9 -> . expr10
    (74) expr10 -> . expr10 PLUS expr11
    (75) expr10 -> . expr10 MINUS expr11
    (76) expr10 -> . expr11
    (77) expr11 -> . expr11 MULTIPLY expr12
    (78) expr11 -> . expr11 DIV expr12
    (79) expr11 -> . expr11 MOD expr12
    (80) expr11 -> . expr12
    (81) expr12 -> . expr13 DOUBLESTAR expr12
    (82) expr12 -> . expr13
    (83) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (84) expr13 -> . uexpr INT_CONSTANTS
    (85) expr13 -> . uexpr FLOAT_CONSTANTS
    (86) expr13 -> . CONSTANTS
    (87) expr13 -> . VARIABLES
    (88) uexpr -> . none
    (89) uexpr -> . PLUS
    (90) uexpr -> . MINUS
    (91) uexpr -> . BITNOT
    (92) uexpr -> . BITCOMP
    (99) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 35
    VARIABLES       shift and go to state 21
    PLUS            shift and go to state 29
    MINUS           shift and go to state 20
    BITNOT          shift and go to state 34
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 99 (none -> .)
    FLOAT_CONSTANTS reduce using rule 99 (none -> .)

    uexpr                          shift and go to state 32
    none                           shift and go to state 33
    expr10                         shift and go to state 18
    expr12                         shift and go to state 17
    expr13                         shift and go to state 19
    expr8                          shift and go to state 112
    expr9                          shift and go to state 31
    expr11                         shift and go to state 36

state 73

    (61) expr6 -> expr7 LESSEQUAL . expr7
    (66) expr7 -> . expr7 BITXOR expr8
    (67) expr7 -> . expr7 PIPE expr8
    (68) expr7 -> . expr8
    (69) expr8 -> . expr8 BITAND expr9
    (70) expr8 -> . expr9
    (71) expr9 -> . expr9 SHIFTL expr10
    (72) expr9 -> . expr9 SHIFTR expr10
    (73) expr9 -> . expr10
    (74) expr10 -> . expr10 PLUS expr11
    (75) expr10 -> . expr10 MINUS expr11
    (76) expr10 -> . expr11
    (77) expr11 -> . expr11 MULTIPLY expr12
    (78) expr11 -> . expr11 DIV expr12
    (79) expr11 -> . expr11 MOD expr12
    (80) expr11 -> . expr12
    (81) expr12 -> . expr13 DOUBLESTAR expr12
    (82) expr12 -> . expr13
    (83) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (84) expr13 -> . uexpr INT_CONSTANTS
    (85) expr13 -> . uexpr FLOAT_CONSTANTS
    (86) expr13 -> . CONSTANTS
    (87) expr13 -> . VARIABLES
    (88) uexpr -> . none
    (89) uexpr -> . PLUS
    (90) uexpr -> . MINUS
    (91) uexpr -> . BITNOT
    (92) uexpr -> . BITCOMP
    (99) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 35
    VARIABLES       shift and go to state 21
    PLUS            shift and go to state 29
    MINUS           shift and go to state 20
    BITNOT          shift and go to state 34
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 99 (none -> .)
    FLOAT_CONSTANTS reduce using rule 99 (none -> .)

    uexpr                          shift and go to state 32
    none                           shift and go to state 33
    expr10                         shift and go to state 18
    expr7                          shift and go to state 113
    expr12                         shift and go to state 17
    expr13                         shift and go to state 19
    expr8                          shift and go to state 30
    expr9                          shift and go to state 31
    expr11                         shift and go to state 36

state 74

    (54) expr4 -> expr4 LOGICALAND . expr5
    (56) expr5 -> . expr6 IFF expr6
    (57) expr5 -> . expr6 DOUBLEEQUAL expr6
    (58) expr5 -> . expr6 TRIPLEEQUAL expr6
    (59) expr5 -> . expr6 NOTEQUAL expr6
    (60) expr5 -> . expr6
    (61) expr6 -> . expr7 LESSEQUAL expr7
    (62) expr6 -> . expr7 LESS expr7
    (63) expr6 -> . expr7 GREATER expr7
    (64) expr6 -> . expr7 GREATEREQUAL expr7
    (65) expr6 -> . expr7
    (66) expr7 -> . expr7 BITXOR expr8
    (67) expr7 -> . expr7 PIPE expr8
    (68) expr7 -> . expr8
    (69) expr8 -> . expr8 BITAND expr9
    (70) expr8 -> . expr9
    (71) expr9 -> . expr9 SHIFTL expr10
    (72) expr9 -> . expr9 SHIFTR expr10
    (73) expr9 -> . expr10
    (74) expr10 -> . expr10 PLUS expr11
    (75) expr10 -> . expr10 MINUS expr11
    (76) expr10 -> . expr11
    (77) expr11 -> . expr11 MULTIPLY expr12
    (78) expr11 -> . expr11 DIV expr12
    (79) expr11 -> . expr11 MOD expr12
    (80) expr11 -> . expr12
    (81) expr12 -> . expr13 DOUBLESTAR expr12
    (82) expr12 -> . expr13
    (83) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (84) expr13 -> . uexpr INT_CONSTANTS
    (85) expr13 -> . uexpr FLOAT_CONSTANTS
    (86) expr13 -> . CONSTANTS
    (87) expr13 -> . VARIABLES
    (88) uexpr -> . none
    (89) uexpr -> . PLUS
    (90) uexpr -> . MINUS
    (91) uexpr -> . BITNOT
    (92) uexpr -> . BITCOMP
    (99) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 35
    VARIABLES       shift and go to state 21
    PLUS            shift and go to state 29
    MINUS           shift and go to state 20
    BITNOT          shift and go to state 34
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 99 (none -> .)
    FLOAT_CONSTANTS reduce using rule 99 (none -> .)

    uexpr                          shift and go to state 32
    none                           shift and go to state 33
    expr12                         shift and go to state 17
    expr13                         shift and go to state 19
    expr6                          shift and go to state 25
    expr7                          shift and go to state 26
    expr5                          shift and go to state 114
    expr10                         shift and go to state 18
    expr8                          shift and go to state 30
    expr9                          shift and go to state 31
    expr11                         shift and go to state 36

state 75

    (69) expr8 -> expr8 BITAND . expr9
    (71) expr9 -> . expr9 SHIFTL expr10
    (72) expr9 -> . expr9 SHIFTR expr10
    (73) expr9 -> . expr10
    (74) expr10 -> . expr10 PLUS expr11
    (75) expr10 -> . expr10 MINUS expr11
    (76) expr10 -> . expr11
    (77) expr11 -> . expr11 MULTIPLY expr12
    (78) expr11 -> . expr11 DIV expr12
    (79) expr11 -> . expr11 MOD expr12
    (80) expr11 -> . expr12
    (81) expr12 -> . expr13 DOUBLESTAR expr12
    (82) expr12 -> . expr13
    (83) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (84) expr13 -> . uexpr INT_CONSTANTS
    (85) expr13 -> . uexpr FLOAT_CONSTANTS
    (86) expr13 -> . CONSTANTS
    (87) expr13 -> . VARIABLES
    (88) uexpr -> . none
    (89) uexpr -> . PLUS
    (90) uexpr -> . MINUS
    (91) uexpr -> . BITNOT
    (92) uexpr -> . BITCOMP
    (99) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 35
    VARIABLES       shift and go to state 21
    PLUS            shift and go to state 29
    MINUS           shift and go to state 20
    BITNOT          shift and go to state 34
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 99 (none -> .)
    FLOAT_CONSTANTS reduce using rule 99 (none -> .)

    uexpr                          shift and go to state 32
    none                           shift and go to state 33
    expr10                         shift and go to state 18
    expr11                         shift and go to state 36
    expr12                         shift and go to state 17
    expr13                         shift and go to state 19
    expr9                          shift and go to state 115

state 76

    (72) expr9 -> expr9 SHIFTR . expr10
    (74) expr10 -> . expr10 PLUS expr11
    (75) expr10 -> . expr10 MINUS expr11
    (76) expr10 -> . expr11
    (77) expr11 -> . expr11 MULTIPLY expr12
    (78) expr11 -> . expr11 DIV expr12
    (79) expr11 -> . expr11 MOD expr12
    (80) expr11 -> . expr12
    (81) expr12 -> . expr13 DOUBLESTAR expr12
    (82) expr12 -> . expr13
    (83) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (84) expr13 -> . uexpr INT_CONSTANTS
    (85) expr13 -> . uexpr FLOAT_CONSTANTS
    (86) expr13 -> . CONSTANTS
    (87) expr13 -> . VARIABLES
    (88) uexpr -> . none
    (89) uexpr -> . PLUS
    (90) uexpr -> . MINUS
    (91) uexpr -> . BITNOT
    (92) uexpr -> . BITCOMP
    (99) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 35
    VARIABLES       shift and go to state 21
    PLUS            shift and go to state 29
    MINUS           shift and go to state 20
    BITNOT          shift and go to state 34
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 99 (none -> .)
    FLOAT_CONSTANTS reduce using rule 99 (none -> .)

    uexpr                          shift and go to state 32
    none                           shift and go to state 33
    expr10                         shift and go to state 116
    expr11                         shift and go to state 36
    expr12                         shift and go to state 17
    expr13                         shift and go to state 19

state 77

    (71) expr9 -> expr9 SHIFTL . expr10
    (74) expr10 -> . expr10 PLUS expr11
    (75) expr10 -> . expr10 MINUS expr11
    (76) expr10 -> . expr11
    (77) expr11 -> . expr11 MULTIPLY expr12
    (78) expr11 -> . expr11 DIV expr12
    (79) expr11 -> . expr11 MOD expr12
    (80) expr11 -> . expr12
    (81) expr12 -> . expr13 DOUBLESTAR expr12
    (82) expr12 -> . expr13
    (83) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (84) expr13 -> . uexpr INT_CONSTANTS
    (85) expr13 -> . uexpr FLOAT_CONSTANTS
    (86) expr13 -> . CONSTANTS
    (87) expr13 -> . VARIABLES
    (88) uexpr -> . none
    (89) uexpr -> . PLUS
    (90) uexpr -> . MINUS
    (91) uexpr -> . BITNOT
    (92) uexpr -> . BITCOMP
    (99) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 35
    VARIABLES       shift and go to state 21
    PLUS            shift and go to state 29
    MINUS           shift and go to state 20
    BITNOT          shift and go to state 34
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 99 (none -> .)
    FLOAT_CONSTANTS reduce using rule 99 (none -> .)

    uexpr                          shift and go to state 32
    none                           shift and go to state 33
    expr10                         shift and go to state 117
    expr11                         shift and go to state 36
    expr12                         shift and go to state 17
    expr13                         shift and go to state 19

state 78

    (84) expr13 -> uexpr INT_CONSTANTS .

    DOUBLESTAR      reduce using rule 84 (expr13 -> uexpr INT_CONSTANTS .)
    MULTIPLY        reduce using rule 84 (expr13 -> uexpr INT_CONSTANTS .)
    DIV             reduce using rule 84 (expr13 -> uexpr INT_CONSTANTS .)
    MOD             reduce using rule 84 (expr13 -> uexpr INT_CONSTANTS .)
    PLUS            reduce using rule 84 (expr13 -> uexpr INT_CONSTANTS .)
    MINUS           reduce using rule 84 (expr13 -> uexpr INT_CONSTANTS .)
    SHIFTL          reduce using rule 84 (expr13 -> uexpr INT_CONSTANTS .)
    SHIFTR          reduce using rule 84 (expr13 -> uexpr INT_CONSTANTS .)
    BITAND          reduce using rule 84 (expr13 -> uexpr INT_CONSTANTS .)
    BITXOR          reduce using rule 84 (expr13 -> uexpr INT_CONSTANTS .)
    PIPE            reduce using rule 84 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_while   reduce using rule 84 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_until   reduce using rule 84 (expr13 -> uexpr INT_CONSTANTS .)
    DELIM           reduce using rule 84 (expr13 -> uexpr INT_CONSTANTS .)
    newline         reduce using rule 84 (expr13 -> uexpr INT_CONSTANTS .)
    $end            reduce using rule 84 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_end     reduce using rule 84 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 84 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_else    reduce using rule 84 (expr13 -> uexpr INT_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 84 (expr13 -> uexpr INT_CONSTANTS .)
    COLON           reduce using rule 84 (expr13 -> uexpr INT_CONSTANTS .)
    DOUBLEDOT       reduce using rule 84 (expr13 -> uexpr INT_CONSTANTS .)
    TRIPLEDOT       reduce using rule 84 (expr13 -> uexpr INT_CONSTANTS .)
    LESSEQUAL       reduce using rule 84 (expr13 -> uexpr INT_CONSTANTS .)
    LESS            reduce using rule 84 (expr13 -> uexpr INT_CONSTANTS .)
    GREATER         reduce using rule 84 (expr13 -> uexpr INT_CONSTANTS .)
    GREATEREQUAL    reduce using rule 84 (expr13 -> uexpr INT_CONSTANTS .)
    IFF             reduce using rule 84 (expr13 -> uexpr INT_CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 84 (expr13 -> uexpr INT_CONSTANTS .)
    TRIPLEEQUAL     reduce using rule 84 (expr13 -> uexpr INT_CONSTANTS .)
    NOTEQUAL        reduce using rule 84 (expr13 -> uexpr INT_CONSTANTS .)
    LOGICALAND      reduce using rule 84 (expr13 -> uexpr INT_CONSTANTS .)
    QUESTION_MARK   reduce using rule 84 (expr13 -> uexpr INT_CONSTANTS .)
    LOGICALOR       reduce using rule 84 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_do      reduce using rule 84 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_then    reduce using rule 84 (expr13 -> uexpr INT_CONSTANTS .)


state 79

    (85) expr13 -> uexpr FLOAT_CONSTANTS .

    DOUBLESTAR      reduce using rule 85 (expr13 -> uexpr FLOAT_CONSTANTS .)
    MULTIPLY        reduce using rule 85 (expr13 -> uexpr FLOAT_CONSTANTS .)
    DIV             reduce using rule 85 (expr13 -> uexpr FLOAT_CONSTANTS .)
    MOD             reduce using rule 85 (expr13 -> uexpr FLOAT_CONSTANTS .)
    PLUS            reduce using rule 85 (expr13 -> uexpr FLOAT_CONSTANTS .)
    MINUS           reduce using rule 85 (expr13 -> uexpr FLOAT_CONSTANTS .)
    SHIFTL          reduce using rule 85 (expr13 -> uexpr FLOAT_CONSTANTS .)
    SHIFTR          reduce using rule 85 (expr13 -> uexpr FLOAT_CONSTANTS .)
    BITAND          reduce using rule 85 (expr13 -> uexpr FLOAT_CONSTANTS .)
    BITXOR          reduce using rule 85 (expr13 -> uexpr FLOAT_CONSTANTS .)
    PIPE            reduce using rule 85 (expr13 -> uexpr FLOAT_CONSTANTS .)
    KEYWORD_while   reduce using rule 85 (expr13 -> uexpr FLOAT_CONSTANTS .)
    KEYWORD_until   reduce using rule 85 (expr13 -> uexpr FLOAT_CONSTANTS .)
    DELIM           reduce using rule 85 (expr13 -> uexpr FLOAT_CONSTANTS .)
    newline         reduce using rule 85 (expr13 -> uexpr FLOAT_CONSTANTS .)
    $end            reduce using rule 85 (expr13 -> uexpr FLOAT_CONSTANTS .)
    KEYWORD_end     reduce using rule 85 (expr13 -> uexpr FLOAT_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 85 (expr13 -> uexpr FLOAT_CONSTANTS .)
    KEYWORD_else    reduce using rule 85 (expr13 -> uexpr FLOAT_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 85 (expr13 -> uexpr FLOAT_CONSTANTS .)
    COLON           reduce using rule 85 (expr13 -> uexpr FLOAT_CONSTANTS .)
    DOUBLEDOT       reduce using rule 85 (expr13 -> uexpr FLOAT_CONSTANTS .)
    TRIPLEDOT       reduce using rule 85 (expr13 -> uexpr FLOAT_CONSTANTS .)
    LESSEQUAL       reduce using rule 85 (expr13 -> uexpr FLOAT_CONSTANTS .)
    LESS            reduce using rule 85 (expr13 -> uexpr FLOAT_CONSTANTS .)
    GREATER         reduce using rule 85 (expr13 -> uexpr FLOAT_CONSTANTS .)
    GREATEREQUAL    reduce using rule 85 (expr13 -> uexpr FLOAT_CONSTANTS .)
    IFF             reduce using rule 85 (expr13 -> uexpr FLOAT_CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 85 (expr13 -> uexpr FLOAT_CONSTANTS .)
    TRIPLEEQUAL     reduce using rule 85 (expr13 -> uexpr FLOAT_CONSTANTS .)
    NOTEQUAL        reduce using rule 85 (expr13 -> uexpr FLOAT_CONSTANTS .)
    LOGICALAND      reduce using rule 85 (expr13 -> uexpr FLOAT_CONSTANTS .)
    QUESTION_MARK   reduce using rule 85 (expr13 -> uexpr FLOAT_CONSTANTS .)
    LOGICALOR       reduce using rule 85 (expr13 -> uexpr FLOAT_CONSTANTS .)
    KEYWORD_do      reduce using rule 85 (expr13 -> uexpr FLOAT_CONSTANTS .)
    KEYWORD_then    reduce using rule 85 (expr13 -> uexpr FLOAT_CONSTANTS .)


state 80

    (77) expr11 -> expr11 MULTIPLY . expr12
    (81) expr12 -> . expr13 DOUBLESTAR expr12
    (82) expr12 -> . expr13
    (83) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (84) expr13 -> . uexpr INT_CONSTANTS
    (85) expr13 -> . uexpr FLOAT_CONSTANTS
    (86) expr13 -> . CONSTANTS
    (87) expr13 -> . VARIABLES
    (88) uexpr -> . none
    (89) uexpr -> . PLUS
    (90) uexpr -> . MINUS
    (91) uexpr -> . BITNOT
    (92) uexpr -> . BITCOMP
    (99) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 35
    VARIABLES       shift and go to state 21
    PLUS            shift and go to state 29
    MINUS           shift and go to state 20
    BITNOT          shift and go to state 34
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 99 (none -> .)
    FLOAT_CONSTANTS reduce using rule 99 (none -> .)

    uexpr                          shift and go to state 32
    none                           shift and go to state 33
    expr12                         shift and go to state 118
    expr13                         shift and go to state 19

state 81

    (78) expr11 -> expr11 DIV . expr12
    (81) expr12 -> . expr13 DOUBLESTAR expr12
    (82) expr12 -> . expr13
    (83) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (84) expr13 -> . uexpr INT_CONSTANTS
    (85) expr13 -> . uexpr FLOAT_CONSTANTS
    (86) expr13 -> . CONSTANTS
    (87) expr13 -> . VARIABLES
    (88) uexpr -> . none
    (89) uexpr -> . PLUS
    (90) uexpr -> . MINUS
    (91) uexpr -> . BITNOT
    (92) uexpr -> . BITCOMP
    (99) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 35
    VARIABLES       shift and go to state 21
    PLUS            shift and go to state 29
    MINUS           shift and go to state 20
    BITNOT          shift and go to state 34
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 99 (none -> .)
    FLOAT_CONSTANTS reduce using rule 99 (none -> .)

    uexpr                          shift and go to state 32
    none                           shift and go to state 33
    expr12                         shift and go to state 119
    expr13                         shift and go to state 19

state 82

    (79) expr11 -> expr11 MOD . expr12
    (81) expr12 -> . expr13 DOUBLESTAR expr12
    (82) expr12 -> . expr13
    (83) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (84) expr13 -> . uexpr INT_CONSTANTS
    (85) expr13 -> . uexpr FLOAT_CONSTANTS
    (86) expr13 -> . CONSTANTS
    (87) expr13 -> . VARIABLES
    (88) uexpr -> . none
    (89) uexpr -> . PLUS
    (90) uexpr -> . MINUS
    (91) uexpr -> . BITNOT
    (92) uexpr -> . BITCOMP
    (99) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 35
    VARIABLES       shift and go to state 21
    PLUS            shift and go to state 29
    MINUS           shift and go to state 20
    BITNOT          shift and go to state 34
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 99 (none -> .)
    FLOAT_CONSTANTS reduce using rule 99 (none -> .)

    uexpr                          shift and go to state 32
    none                           shift and go to state 33
    expr12                         shift and go to state 120
    expr13                         shift and go to state 19

state 83

    (21) opt_then -> newline .

    KEYWORD_if      reduce using rule 21 (opt_then -> newline .)
    KEYWORD_while   reduce using rule 21 (opt_then -> newline .)
    KEYWORD_begin   reduce using rule 21 (opt_then -> newline .)
    KEYWORD_until   reduce using rule 21 (opt_then -> newline .)
    KEYWORD_for     reduce using rule 21 (opt_then -> newline .)
    VARIABLES       reduce using rule 21 (opt_then -> newline .)
    CONSTANTS       reduce using rule 21 (opt_then -> newline .)
    KEYWORD_elsif   reduce using rule 21 (opt_then -> newline .)
    KEYWORD_else    reduce using rule 21 (opt_then -> newline .)
    KEYWORD_end     reduce using rule 21 (opt_then -> newline .)
    DELIM           reduce using rule 21 (opt_then -> newline .)
    newline         reduce using rule 21 (opt_then -> newline .)


state 84

    (20) opt_then -> KEYWORD_then .

    KEYWORD_if      reduce using rule 20 (opt_then -> KEYWORD_then .)
    KEYWORD_while   reduce using rule 20 (opt_then -> KEYWORD_then .)
    KEYWORD_begin   reduce using rule 20 (opt_then -> KEYWORD_then .)
    KEYWORD_until   reduce using rule 20 (opt_then -> KEYWORD_then .)
    KEYWORD_for     reduce using rule 20 (opt_then -> KEYWORD_then .)
    VARIABLES       reduce using rule 20 (opt_then -> KEYWORD_then .)
    CONSTANTS       reduce using rule 20 (opt_then -> KEYWORD_then .)
    KEYWORD_elsif   reduce using rule 20 (opt_then -> KEYWORD_then .)
    KEYWORD_else    reduce using rule 20 (opt_then -> KEYWORD_then .)
    KEYWORD_end     reduce using rule 20 (opt_then -> KEYWORD_then .)
    DELIM           reduce using rule 20 (opt_then -> KEYWORD_then .)
    newline         reduce using rule 20 (opt_then -> KEYWORD_then .)


state 85

    (7) top_stmt -> KEYWORD_if expr3 opt_then . top_compstmt elsif_tail opt_else_stmt KEYWORD_end
    (2) top_compstmt -> . top_stmts opt_terms
    (3) top_stmts -> . none
    (4) top_stmts -> . top_stmt
    (5) top_stmts -> . top_stmts terms top_stmt
    (99) none -> .
    (6) top_stmt -> . stmt
    (7) top_stmt -> . KEYWORD_if expr3 opt_then top_compstmt elsif_tail opt_else_stmt KEYWORD_end
    (8) top_stmt -> . KEYWORD_while expr3 opt_do top_compstmt KEYWORD_end
    (9) top_stmt -> . top_stmt KEYWORD_while expr3
    (10) top_stmt -> . KEYWORD_begin top_compstmt KEYWORD_end KEYWORD_while expr3
    (11) top_stmt -> . top_stmt KEYWORD_until expr3
    (12) top_stmt -> . KEYWORD_until expr3 opt_do top_compstmt KEYWORD_end
    (13) top_stmt -> . KEYWORD_begin top_compstmt KEYWORD_end KEYWORD_until expr3
    (14) top_stmt -> . KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do top_compstmt KEYWORD_end
    (15) stmt -> . expr
    (36) expr -> . mlhs EQUAL mrhs
    (37) mlhs -> . VARIABLES
    (38) mlhs -> . CONSTANTS

    DELIM           reduce using rule 99 (none -> .)
    newline         reduce using rule 99 (none -> .)
    KEYWORD_elsif   reduce using rule 99 (none -> .)
    KEYWORD_else    reduce using rule 99 (none -> .)
    KEYWORD_end     reduce using rule 99 (none -> .)
    KEYWORD_if      shift and go to state 3
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 7
    KEYWORD_until   shift and go to state 2
    KEYWORD_for     shift and go to state 11
    VARIABLES       shift and go to state 5
    CONSTANTS       shift and go to state 14

    none                           shift and go to state 12
    expr                           shift and go to state 13
    top_compstmt                   shift and go to state 121
    mlhs                           shift and go to state 1
    stmt                           shift and go to state 10
    top_stmts                      shift and go to state 8
    top_stmt                       shift and go to state 15

state 86

    (8) top_stmt -> KEYWORD_while expr3 opt_do . top_compstmt KEYWORD_end
    (2) top_compstmt -> . top_stmts opt_terms
    (3) top_stmts -> . none
    (4) top_stmts -> . top_stmt
    (5) top_stmts -> . top_stmts terms top_stmt
    (99) none -> .
    (6) top_stmt -> . stmt
    (7) top_stmt -> . KEYWORD_if expr3 opt_then top_compstmt elsif_tail opt_else_stmt KEYWORD_end
    (8) top_stmt -> . KEYWORD_while expr3 opt_do top_compstmt KEYWORD_end
    (9) top_stmt -> . top_stmt KEYWORD_while expr3
    (10) top_stmt -> . KEYWORD_begin top_compstmt KEYWORD_end KEYWORD_while expr3
    (11) top_stmt -> . top_stmt KEYWORD_until expr3
    (12) top_stmt -> . KEYWORD_until expr3 opt_do top_compstmt KEYWORD_end
    (13) top_stmt -> . KEYWORD_begin top_compstmt KEYWORD_end KEYWORD_until expr3
    (14) top_stmt -> . KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do top_compstmt KEYWORD_end
    (15) stmt -> . expr
    (36) expr -> . mlhs EQUAL mrhs
    (37) mlhs -> . VARIABLES
    (38) mlhs -> . CONSTANTS

    DELIM           reduce using rule 99 (none -> .)
    newline         reduce using rule 99 (none -> .)
    KEYWORD_end     reduce using rule 99 (none -> .)
    KEYWORD_if      shift and go to state 3
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 7
    KEYWORD_until   shift and go to state 2
    KEYWORD_for     shift and go to state 11
    VARIABLES       shift and go to state 5
    CONSTANTS       shift and go to state 14

    none                           shift and go to state 12
    expr                           shift and go to state 13
    top_compstmt                   shift and go to state 122
    mlhs                           shift and go to state 1
    stmt                           shift and go to state 10
    top_stmts                      shift and go to state 8
    top_stmt                       shift and go to state 15

state 87

    (10) top_stmt -> KEYWORD_begin top_compstmt KEYWORD_end . KEYWORD_while expr3
    (13) top_stmt -> KEYWORD_begin top_compstmt KEYWORD_end . KEYWORD_until expr3

    KEYWORD_while   shift and go to state 124
    KEYWORD_until   shift and go to state 123


state 88

    (96) terms -> terms term .

    KEYWORD_if      reduce using rule 96 (terms -> terms term .)
    KEYWORD_while   reduce using rule 96 (terms -> terms term .)
    KEYWORD_begin   reduce using rule 96 (terms -> terms term .)
    KEYWORD_until   reduce using rule 96 (terms -> terms term .)
    KEYWORD_for     reduce using rule 96 (terms -> terms term .)
    DELIM           reduce using rule 96 (terms -> terms term .)
    newline         reduce using rule 96 (terms -> terms term .)
    VARIABLES       reduce using rule 96 (terms -> terms term .)
    CONSTANTS       reduce using rule 96 (terms -> terms term .)
    $end            reduce using rule 96 (terms -> terms term .)
    KEYWORD_end     reduce using rule 96 (terms -> terms term .)
    KEYWORD_elsif   reduce using rule 96 (terms -> terms term .)
    KEYWORD_else    reduce using rule 96 (terms -> terms term .)


state 89

    (5) top_stmts -> top_stmts terms top_stmt .
    (9) top_stmt -> top_stmt . KEYWORD_while expr3
    (11) top_stmt -> top_stmt . KEYWORD_until expr3

    DELIM           reduce using rule 5 (top_stmts -> top_stmts terms top_stmt .)
    newline         reduce using rule 5 (top_stmts -> top_stmts terms top_stmt .)
    $end            reduce using rule 5 (top_stmts -> top_stmts terms top_stmt .)
    KEYWORD_elsif   reduce using rule 5 (top_stmts -> top_stmts terms top_stmt .)
    KEYWORD_else    reduce using rule 5 (top_stmts -> top_stmts terms top_stmt .)
    KEYWORD_end     reduce using rule 5 (top_stmts -> top_stmts terms top_stmt .)
    KEYWORD_while   shift and go to state 49
    KEYWORD_until   shift and go to state 50


state 90

    (24) multi_var -> VARIABLES .

    COMMA           reduce using rule 24 (multi_var -> VARIABLES .)
    CLOSE_PAREN     reduce using rule 24 (multi_var -> VARIABLES .)
    KEYWORD_in      reduce using rule 24 (multi_var -> VARIABLES .)


state 91

    (14) top_stmt -> KEYWORD_for opt_oparen multi_var . opt_cparen KEYWORD_in for_range opt_do top_compstmt KEYWORD_end
    (26) multi_var -> multi_var . COMMA VARIABLES
    (27) multi_var -> multi_var . COMMA CONSTANTS
    (30) opt_cparen -> . CLOSE_PAREN
    (31) opt_cparen -> . none
    (99) none -> .

    COMMA           shift and go to state 127
    CLOSE_PAREN     shift and go to state 128
    KEYWORD_in      reduce using rule 99 (none -> .)

    none                           shift and go to state 125
    opt_cparen                     shift and go to state 126

state 92

    (25) multi_var -> CONSTANTS .

    COMMA           reduce using rule 25 (multi_var -> CONSTANTS .)
    CLOSE_PAREN     reduce using rule 25 (multi_var -> CONSTANTS .)
    KEYWORD_in      reduce using rule 25 (multi_var -> CONSTANTS .)


state 93

    (9) top_stmt -> top_stmt KEYWORD_while expr3 .
    (52) expr3 -> expr3 . LOGICALOR expr4

    KEYWORD_while   reduce using rule 9 (top_stmt -> top_stmt KEYWORD_while expr3 .)
    KEYWORD_until   reduce using rule 9 (top_stmt -> top_stmt KEYWORD_while expr3 .)
    DELIM           reduce using rule 9 (top_stmt -> top_stmt KEYWORD_while expr3 .)
    newline         reduce using rule 9 (top_stmt -> top_stmt KEYWORD_while expr3 .)
    KEYWORD_end     reduce using rule 9 (top_stmt -> top_stmt KEYWORD_while expr3 .)
    KEYWORD_elsif   reduce using rule 9 (top_stmt -> top_stmt KEYWORD_while expr3 .)
    KEYWORD_else    reduce using rule 9 (top_stmt -> top_stmt KEYWORD_while expr3 .)
    $end            reduce using rule 9 (top_stmt -> top_stmt KEYWORD_while expr3 .)
    LOGICALOR       shift and go to state 60


state 94

    (11) top_stmt -> top_stmt KEYWORD_until expr3 .
    (52) expr3 -> expr3 . LOGICALOR expr4

    KEYWORD_while   reduce using rule 11 (top_stmt -> top_stmt KEYWORD_until expr3 .)
    KEYWORD_until   reduce using rule 11 (top_stmt -> top_stmt KEYWORD_until expr3 .)
    DELIM           reduce using rule 11 (top_stmt -> top_stmt KEYWORD_until expr3 .)
    newline         reduce using rule 11 (top_stmt -> top_stmt KEYWORD_until expr3 .)
    KEYWORD_end     reduce using rule 11 (top_stmt -> top_stmt KEYWORD_until expr3 .)
    KEYWORD_elsif   reduce using rule 11 (top_stmt -> top_stmt KEYWORD_until expr3 .)
    KEYWORD_else    reduce using rule 11 (top_stmt -> top_stmt KEYWORD_until expr3 .)
    $end            reduce using rule 11 (top_stmt -> top_stmt KEYWORD_until expr3 .)
    LOGICALOR       shift and go to state 60


state 95

    (47) expr1 -> expr3 QUESTION_MARK . expr2 COLON expr2
    (49) expr2 -> . expr7 DOUBLEDOT expr7
    (50) expr2 -> . expr7 TRIPLEDOT expr7
    (51) expr2 -> . expr3
    (66) expr7 -> . expr7 BITXOR expr8
    (67) expr7 -> . expr7 PIPE expr8
    (68) expr7 -> . expr8
    (52) expr3 -> . expr3 LOGICALOR expr4
    (53) expr3 -> . expr4
    (69) expr8 -> . expr8 BITAND expr9
    (70) expr8 -> . expr9
    (54) expr4 -> . expr4 LOGICALAND expr5
    (55) expr4 -> . expr5
    (71) expr9 -> . expr9 SHIFTL expr10
    (72) expr9 -> . expr9 SHIFTR expr10
    (73) expr9 -> . expr10
    (56) expr5 -> . expr6 IFF expr6
    (57) expr5 -> . expr6 DOUBLEEQUAL expr6
    (58) expr5 -> . expr6 TRIPLEEQUAL expr6
    (59) expr5 -> . expr6 NOTEQUAL expr6
    (60) expr5 -> . expr6
    (74) expr10 -> . expr10 PLUS expr11
    (75) expr10 -> . expr10 MINUS expr11
    (76) expr10 -> . expr11
    (61) expr6 -> . expr7 LESSEQUAL expr7
    (62) expr6 -> . expr7 LESS expr7
    (63) expr6 -> . expr7 GREATER expr7
    (64) expr6 -> . expr7 GREATEREQUAL expr7
    (65) expr6 -> . expr7
    (77) expr11 -> . expr11 MULTIPLY expr12
    (78) expr11 -> . expr11 DIV expr12
    (79) expr11 -> . expr11 MOD expr12
    (80) expr11 -> . expr12
    (81) expr12 -> . expr13 DOUBLESTAR expr12
    (82) expr12 -> . expr13
    (83) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (84) expr13 -> . uexpr INT_CONSTANTS
    (85) expr13 -> . uexpr FLOAT_CONSTANTS
    (86) expr13 -> . CONSTANTS
    (87) expr13 -> . VARIABLES
    (88) uexpr -> . none
    (89) uexpr -> . PLUS
    (90) uexpr -> . MINUS
    (91) uexpr -> . BITNOT
    (92) uexpr -> . BITCOMP
    (99) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 35
    VARIABLES       shift and go to state 21
    PLUS            shift and go to state 29
    MINUS           shift and go to state 20
    BITNOT          shift and go to state 34
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 99 (none -> .)
    FLOAT_CONSTANTS reduce using rule 99 (none -> .)

    uexpr                          shift and go to state 32
    none                           shift and go to state 33
    expr12                         shift and go to state 17
    expr13                         shift and go to state 19
    expr2                          shift and go to state 129
    expr3                          shift and go to state 130
    expr10                         shift and go to state 18
    expr7                          shift and go to state 54
    expr4                          shift and go to state 27
    expr5                          shift and go to state 28
    expr6                          shift and go to state 25
    expr8                          shift and go to state 30
    expr9                          shift and go to state 31
    expr11                         shift and go to state 36

state 96

    (49) expr2 -> expr7 DOUBLEDOT . expr7
    (66) expr7 -> . expr7 BITXOR expr8
    (67) expr7 -> . expr7 PIPE expr8
    (68) expr7 -> . expr8
    (69) expr8 -> . expr8 BITAND expr9
    (70) expr8 -> . expr9
    (71) expr9 -> . expr9 SHIFTL expr10
    (72) expr9 -> . expr9 SHIFTR expr10
    (73) expr9 -> . expr10
    (74) expr10 -> . expr10 PLUS expr11
    (75) expr10 -> . expr10 MINUS expr11
    (76) expr10 -> . expr11
    (77) expr11 -> . expr11 MULTIPLY expr12
    (78) expr11 -> . expr11 DIV expr12
    (79) expr11 -> . expr11 MOD expr12
    (80) expr11 -> . expr12
    (81) expr12 -> . expr13 DOUBLESTAR expr12
    (82) expr12 -> . expr13
    (83) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (84) expr13 -> . uexpr INT_CONSTANTS
    (85) expr13 -> . uexpr FLOAT_CONSTANTS
    (86) expr13 -> . CONSTANTS
    (87) expr13 -> . VARIABLES
    (88) uexpr -> . none
    (89) uexpr -> . PLUS
    (90) uexpr -> . MINUS
    (91) uexpr -> . BITNOT
    (92) uexpr -> . BITCOMP
    (99) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 35
    VARIABLES       shift and go to state 21
    PLUS            shift and go to state 29
    MINUS           shift and go to state 20
    BITNOT          shift and go to state 34
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 99 (none -> .)
    FLOAT_CONSTANTS reduce using rule 99 (none -> .)

    uexpr                          shift and go to state 32
    none                           shift and go to state 33
    expr10                         shift and go to state 18
    expr7                          shift and go to state 131
    expr12                         shift and go to state 17
    expr13                         shift and go to state 19
    expr8                          shift and go to state 30
    expr9                          shift and go to state 31
    expr11                         shift and go to state 36

state 97

    (50) expr2 -> expr7 TRIPLEDOT . expr7
    (66) expr7 -> . expr7 BITXOR expr8
    (67) expr7 -> . expr7 PIPE expr8
    (68) expr7 -> . expr8
    (69) expr8 -> . expr8 BITAND expr9
    (70) expr8 -> . expr9
    (71) expr9 -> . expr9 SHIFTL expr10
    (72) expr9 -> . expr9 SHIFTR expr10
    (73) expr9 -> . expr10
    (74) expr10 -> . expr10 PLUS expr11
    (75) expr10 -> . expr10 MINUS expr11
    (76) expr10 -> . expr11
    (77) expr11 -> . expr11 MULTIPLY expr12
    (78) expr11 -> . expr11 DIV expr12
    (79) expr11 -> . expr11 MOD expr12
    (80) expr11 -> . expr12
    (81) expr12 -> . expr13 DOUBLESTAR expr12
    (82) expr12 -> . expr13
    (83) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (84) expr13 -> . uexpr INT_CONSTANTS
    (85) expr13 -> . uexpr FLOAT_CONSTANTS
    (86) expr13 -> . CONSTANTS
    (87) expr13 -> . VARIABLES
    (88) uexpr -> . none
    (89) uexpr -> . PLUS
    (90) uexpr -> . MINUS
    (91) uexpr -> . BITNOT
    (92) uexpr -> . BITCOMP
    (99) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 35
    VARIABLES       shift and go to state 21
    PLUS            shift and go to state 29
    MINUS           shift and go to state 20
    BITNOT          shift and go to state 34
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 99 (none -> .)
    FLOAT_CONSTANTS reduce using rule 99 (none -> .)

    uexpr                          shift and go to state 32
    none                           shift and go to state 33
    expr10                         shift and go to state 18
    expr7                          shift and go to state 132
    expr12                         shift and go to state 17
    expr13                         shift and go to state 19
    expr8                          shift and go to state 30
    expr9                          shift and go to state 31
    expr11                         shift and go to state 36

state 98

    (74) expr10 -> expr10 PLUS expr11 .
    (77) expr11 -> expr11 . MULTIPLY expr12
    (78) expr11 -> expr11 . DIV expr12
    (79) expr11 -> expr11 . MOD expr12

    PLUS            reduce using rule 74 (expr10 -> expr10 PLUS expr11 .)
    MINUS           reduce using rule 74 (expr10 -> expr10 PLUS expr11 .)
    SHIFTL          reduce using rule 74 (expr10 -> expr10 PLUS expr11 .)
    SHIFTR          reduce using rule 74 (expr10 -> expr10 PLUS expr11 .)
    BITAND          reduce using rule 74 (expr10 -> expr10 PLUS expr11 .)
    LESSEQUAL       reduce using rule 74 (expr10 -> expr10 PLUS expr11 .)
    LESS            reduce using rule 74 (expr10 -> expr10 PLUS expr11 .)
    GREATER         reduce using rule 74 (expr10 -> expr10 PLUS expr11 .)
    GREATEREQUAL    reduce using rule 74 (expr10 -> expr10 PLUS expr11 .)
    BITXOR          reduce using rule 74 (expr10 -> expr10 PLUS expr11 .)
    PIPE            reduce using rule 74 (expr10 -> expr10 PLUS expr11 .)
    LOGICALAND      reduce using rule 74 (expr10 -> expr10 PLUS expr11 .)
    LOGICALOR       reduce using rule 74 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_do      reduce using rule 74 (expr10 -> expr10 PLUS expr11 .)
    newline         reduce using rule 74 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_then    reduce using rule 74 (expr10 -> expr10 PLUS expr11 .)
    QUESTION_MARK   reduce using rule 74 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_while   reduce using rule 74 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_until   reduce using rule 74 (expr10 -> expr10 PLUS expr11 .)
    DELIM           reduce using rule 74 (expr10 -> expr10 PLUS expr11 .)
    $end            reduce using rule 74 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_end     reduce using rule 74 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_elsif   reduce using rule 74 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_else    reduce using rule 74 (expr10 -> expr10 PLUS expr11 .)
    CLOSE_PAREN     reduce using rule 74 (expr10 -> expr10 PLUS expr11 .)
    COLON           reduce using rule 74 (expr10 -> expr10 PLUS expr11 .)
    IFF             reduce using rule 74 (expr10 -> expr10 PLUS expr11 .)
    DOUBLEEQUAL     reduce using rule 74 (expr10 -> expr10 PLUS expr11 .)
    TRIPLEEQUAL     reduce using rule 74 (expr10 -> expr10 PLUS expr11 .)
    NOTEQUAL        reduce using rule 74 (expr10 -> expr10 PLUS expr11 .)
    DOUBLEDOT       reduce using rule 74 (expr10 -> expr10 PLUS expr11 .)
    TRIPLEDOT       reduce using rule 74 (expr10 -> expr10 PLUS expr11 .)
    MULTIPLY        shift and go to state 80
    DIV             shift and go to state 81
    MOD             shift and go to state 82


state 99

    (75) expr10 -> expr10 MINUS expr11 .
    (77) expr11 -> expr11 . MULTIPLY expr12
    (78) expr11 -> expr11 . DIV expr12
    (79) expr11 -> expr11 . MOD expr12

    PLUS            reduce using rule 75 (expr10 -> expr10 MINUS expr11 .)
    MINUS           reduce using rule 75 (expr10 -> expr10 MINUS expr11 .)
    SHIFTL          reduce using rule 75 (expr10 -> expr10 MINUS expr11 .)
    SHIFTR          reduce using rule 75 (expr10 -> expr10 MINUS expr11 .)
    BITAND          reduce using rule 75 (expr10 -> expr10 MINUS expr11 .)
    LESSEQUAL       reduce using rule 75 (expr10 -> expr10 MINUS expr11 .)
    LESS            reduce using rule 75 (expr10 -> expr10 MINUS expr11 .)
    GREATER         reduce using rule 75 (expr10 -> expr10 MINUS expr11 .)
    GREATEREQUAL    reduce using rule 75 (expr10 -> expr10 MINUS expr11 .)
    BITXOR          reduce using rule 75 (expr10 -> expr10 MINUS expr11 .)
    PIPE            reduce using rule 75 (expr10 -> expr10 MINUS expr11 .)
    LOGICALAND      reduce using rule 75 (expr10 -> expr10 MINUS expr11 .)
    LOGICALOR       reduce using rule 75 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_do      reduce using rule 75 (expr10 -> expr10 MINUS expr11 .)
    newline         reduce using rule 75 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_then    reduce using rule 75 (expr10 -> expr10 MINUS expr11 .)
    QUESTION_MARK   reduce using rule 75 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_while   reduce using rule 75 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_until   reduce using rule 75 (expr10 -> expr10 MINUS expr11 .)
    DELIM           reduce using rule 75 (expr10 -> expr10 MINUS expr11 .)
    $end            reduce using rule 75 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_end     reduce using rule 75 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_elsif   reduce using rule 75 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_else    reduce using rule 75 (expr10 -> expr10 MINUS expr11 .)
    CLOSE_PAREN     reduce using rule 75 (expr10 -> expr10 MINUS expr11 .)
    COLON           reduce using rule 75 (expr10 -> expr10 MINUS expr11 .)
    IFF             reduce using rule 75 (expr10 -> expr10 MINUS expr11 .)
    DOUBLEEQUAL     reduce using rule 75 (expr10 -> expr10 MINUS expr11 .)
    TRIPLEEQUAL     reduce using rule 75 (expr10 -> expr10 MINUS expr11 .)
    NOTEQUAL        reduce using rule 75 (expr10 -> expr10 MINUS expr11 .)
    DOUBLEDOT       reduce using rule 75 (expr10 -> expr10 MINUS expr11 .)
    TRIPLEDOT       reduce using rule 75 (expr10 -> expr10 MINUS expr11 .)
    MULTIPLY        shift and go to state 80
    DIV             shift and go to state 81
    MOD             shift and go to state 82


state 100

    (81) expr12 -> expr13 DOUBLESTAR expr12 .

    MULTIPLY        reduce using rule 81 (expr12 -> expr13 DOUBLESTAR expr12 .)
    DIV             reduce using rule 81 (expr12 -> expr13 DOUBLESTAR expr12 .)
    MOD             reduce using rule 81 (expr12 -> expr13 DOUBLESTAR expr12 .)
    PLUS            reduce using rule 81 (expr12 -> expr13 DOUBLESTAR expr12 .)
    MINUS           reduce using rule 81 (expr12 -> expr13 DOUBLESTAR expr12 .)
    SHIFTL          reduce using rule 81 (expr12 -> expr13 DOUBLESTAR expr12 .)
    SHIFTR          reduce using rule 81 (expr12 -> expr13 DOUBLESTAR expr12 .)
    BITAND          reduce using rule 81 (expr12 -> expr13 DOUBLESTAR expr12 .)
    DOUBLEDOT       reduce using rule 81 (expr12 -> expr13 DOUBLESTAR expr12 .)
    TRIPLEDOT       reduce using rule 81 (expr12 -> expr13 DOUBLESTAR expr12 .)
    BITXOR          reduce using rule 81 (expr12 -> expr13 DOUBLESTAR expr12 .)
    PIPE            reduce using rule 81 (expr12 -> expr13 DOUBLESTAR expr12 .)
    LESSEQUAL       reduce using rule 81 (expr12 -> expr13 DOUBLESTAR expr12 .)
    LESS            reduce using rule 81 (expr12 -> expr13 DOUBLESTAR expr12 .)
    GREATER         reduce using rule 81 (expr12 -> expr13 DOUBLESTAR expr12 .)
    GREATEREQUAL    reduce using rule 81 (expr12 -> expr13 DOUBLESTAR expr12 .)
    IFF             reduce using rule 81 (expr12 -> expr13 DOUBLESTAR expr12 .)
    DOUBLEEQUAL     reduce using rule 81 (expr12 -> expr13 DOUBLESTAR expr12 .)
    TRIPLEEQUAL     reduce using rule 81 (expr12 -> expr13 DOUBLESTAR expr12 .)
    NOTEQUAL        reduce using rule 81 (expr12 -> expr13 DOUBLESTAR expr12 .)
    LOGICALAND      reduce using rule 81 (expr12 -> expr13 DOUBLESTAR expr12 .)
    LOGICALOR       reduce using rule 81 (expr12 -> expr13 DOUBLESTAR expr12 .)
    KEYWORD_while   reduce using rule 81 (expr12 -> expr13 DOUBLESTAR expr12 .)
    KEYWORD_until   reduce using rule 81 (expr12 -> expr13 DOUBLESTAR expr12 .)
    DELIM           reduce using rule 81 (expr12 -> expr13 DOUBLESTAR expr12 .)
    newline         reduce using rule 81 (expr12 -> expr13 DOUBLESTAR expr12 .)
    $end            reduce using rule 81 (expr12 -> expr13 DOUBLESTAR expr12 .)
    KEYWORD_end     reduce using rule 81 (expr12 -> expr13 DOUBLESTAR expr12 .)
    KEYWORD_elsif   reduce using rule 81 (expr12 -> expr13 DOUBLESTAR expr12 .)
    KEYWORD_else    reduce using rule 81 (expr12 -> expr13 DOUBLESTAR expr12 .)
    CLOSE_PAREN     reduce using rule 81 (expr12 -> expr13 DOUBLESTAR expr12 .)
    QUESTION_MARK   reduce using rule 81 (expr12 -> expr13 DOUBLESTAR expr12 .)
    KEYWORD_do      reduce using rule 81 (expr12 -> expr13 DOUBLESTAR expr12 .)
    KEYWORD_then    reduce using rule 81 (expr12 -> expr13 DOUBLESTAR expr12 .)
    COLON           reduce using rule 81 (expr12 -> expr13 DOUBLESTAR expr12 .)


state 101

    (52) expr3 -> expr3 LOGICALOR expr4 .
    (54) expr4 -> expr4 . LOGICALAND expr5

    LOGICALOR       reduce using rule 52 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_while   reduce using rule 52 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_until   reduce using rule 52 (expr3 -> expr3 LOGICALOR expr4 .)
    DELIM           reduce using rule 52 (expr3 -> expr3 LOGICALOR expr4 .)
    newline         reduce using rule 52 (expr3 -> expr3 LOGICALOR expr4 .)
    $end            reduce using rule 52 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_end     reduce using rule 52 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_elsif   reduce using rule 52 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_else    reduce using rule 52 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_do      reduce using rule 52 (expr3 -> expr3 LOGICALOR expr4 .)
    CLOSE_PAREN     reduce using rule 52 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_then    reduce using rule 52 (expr3 -> expr3 LOGICALOR expr4 .)
    QUESTION_MARK   reduce using rule 52 (expr3 -> expr3 LOGICALOR expr4 .)
    COLON           reduce using rule 52 (expr3 -> expr3 LOGICALOR expr4 .)
    LOGICALAND      shift and go to state 74


state 102

    (12) top_stmt -> KEYWORD_until expr3 opt_do top_compstmt . KEYWORD_end

    KEYWORD_end     shift and go to state 133


state 103

    (83) expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .

    DOUBLESTAR      reduce using rule 83 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    MULTIPLY        reduce using rule 83 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    DIV             reduce using rule 83 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    MOD             reduce using rule 83 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    PLUS            reduce using rule 83 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    MINUS           reduce using rule 83 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    SHIFTL          reduce using rule 83 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    SHIFTR          reduce using rule 83 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    BITAND          reduce using rule 83 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    BITXOR          reduce using rule 83 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    PIPE            reduce using rule 83 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_while   reduce using rule 83 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_until   reduce using rule 83 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    DELIM           reduce using rule 83 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    newline         reduce using rule 83 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    $end            reduce using rule 83 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_end     reduce using rule 83 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_elsif   reduce using rule 83 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_else    reduce using rule 83 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 83 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    COLON           reduce using rule 83 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    DOUBLEDOT       reduce using rule 83 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    TRIPLEDOT       reduce using rule 83 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    LESSEQUAL       reduce using rule 83 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    LESS            reduce using rule 83 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    GREATER         reduce using rule 83 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    GREATEREQUAL    reduce using rule 83 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    IFF             reduce using rule 83 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    DOUBLEEQUAL     reduce using rule 83 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    TRIPLEEQUAL     reduce using rule 83 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    NOTEQUAL        reduce using rule 83 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    LOGICALAND      reduce using rule 83 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    QUESTION_MARK   reduce using rule 83 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    LOGICALOR       reduce using rule 83 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_do      reduce using rule 83 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_then    reduce using rule 83 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)


state 104

    (59) expr5 -> expr6 NOTEQUAL expr6 .

    LOGICALAND      reduce using rule 59 (expr5 -> expr6 NOTEQUAL expr6 .)
    LOGICALOR       reduce using rule 59 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_do      reduce using rule 59 (expr5 -> expr6 NOTEQUAL expr6 .)
    newline         reduce using rule 59 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_then    reduce using rule 59 (expr5 -> expr6 NOTEQUAL expr6 .)
    QUESTION_MARK   reduce using rule 59 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_while   reduce using rule 59 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_until   reduce using rule 59 (expr5 -> expr6 NOTEQUAL expr6 .)
    DELIM           reduce using rule 59 (expr5 -> expr6 NOTEQUAL expr6 .)
    $end            reduce using rule 59 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_end     reduce using rule 59 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_elsif   reduce using rule 59 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_else    reduce using rule 59 (expr5 -> expr6 NOTEQUAL expr6 .)
    CLOSE_PAREN     reduce using rule 59 (expr5 -> expr6 NOTEQUAL expr6 .)
    COLON           reduce using rule 59 (expr5 -> expr6 NOTEQUAL expr6 .)


state 105

    (56) expr5 -> expr6 IFF expr6 .

    LOGICALAND      reduce using rule 56 (expr5 -> expr6 IFF expr6 .)
    LOGICALOR       reduce using rule 56 (expr5 -> expr6 IFF expr6 .)
    KEYWORD_do      reduce using rule 56 (expr5 -> expr6 IFF expr6 .)
    newline         reduce using rule 56 (expr5 -> expr6 IFF expr6 .)
    KEYWORD_then    reduce using rule 56 (expr5 -> expr6 IFF expr6 .)
    QUESTION_MARK   reduce using rule 56 (expr5 -> expr6 IFF expr6 .)
    KEYWORD_while   reduce using rule 56 (expr5 -> expr6 IFF expr6 .)
    KEYWORD_until   reduce using rule 56 (expr5 -> expr6 IFF expr6 .)
    DELIM           reduce using rule 56 (expr5 -> expr6 IFF expr6 .)
    $end            reduce using rule 56 (expr5 -> expr6 IFF expr6 .)
    KEYWORD_end     reduce using rule 56 (expr5 -> expr6 IFF expr6 .)
    KEYWORD_elsif   reduce using rule 56 (expr5 -> expr6 IFF expr6 .)
    KEYWORD_else    reduce using rule 56 (expr5 -> expr6 IFF expr6 .)
    CLOSE_PAREN     reduce using rule 56 (expr5 -> expr6 IFF expr6 .)
    COLON           reduce using rule 56 (expr5 -> expr6 IFF expr6 .)


state 106

    (58) expr5 -> expr6 TRIPLEEQUAL expr6 .

    LOGICALAND      reduce using rule 58 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    LOGICALOR       reduce using rule 58 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    KEYWORD_do      reduce using rule 58 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    newline         reduce using rule 58 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    KEYWORD_then    reduce using rule 58 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    QUESTION_MARK   reduce using rule 58 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    KEYWORD_while   reduce using rule 58 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    KEYWORD_until   reduce using rule 58 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    DELIM           reduce using rule 58 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    $end            reduce using rule 58 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    KEYWORD_end     reduce using rule 58 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    KEYWORD_elsif   reduce using rule 58 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    KEYWORD_else    reduce using rule 58 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    CLOSE_PAREN     reduce using rule 58 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    COLON           reduce using rule 58 (expr5 -> expr6 TRIPLEEQUAL expr6 .)


state 107

    (57) expr5 -> expr6 DOUBLEEQUAL expr6 .

    LOGICALAND      reduce using rule 57 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    LOGICALOR       reduce using rule 57 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_do      reduce using rule 57 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    newline         reduce using rule 57 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_then    reduce using rule 57 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    QUESTION_MARK   reduce using rule 57 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_while   reduce using rule 57 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_until   reduce using rule 57 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    DELIM           reduce using rule 57 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    $end            reduce using rule 57 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_end     reduce using rule 57 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_elsif   reduce using rule 57 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_else    reduce using rule 57 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    CLOSE_PAREN     reduce using rule 57 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    COLON           reduce using rule 57 (expr5 -> expr6 DOUBLEEQUAL expr6 .)


state 108

    (64) expr6 -> expr7 GREATEREQUAL expr7 .
    (66) expr7 -> expr7 . BITXOR expr8
    (67) expr7 -> expr7 . PIPE expr8

    IFF             reduce using rule 64 (expr6 -> expr7 GREATEREQUAL expr7 .)
    DOUBLEEQUAL     reduce using rule 64 (expr6 -> expr7 GREATEREQUAL expr7 .)
    TRIPLEEQUAL     reduce using rule 64 (expr6 -> expr7 GREATEREQUAL expr7 .)
    NOTEQUAL        reduce using rule 64 (expr6 -> expr7 GREATEREQUAL expr7 .)
    LOGICALAND      reduce using rule 64 (expr6 -> expr7 GREATEREQUAL expr7 .)
    LOGICALOR       reduce using rule 64 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_while   reduce using rule 64 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_until   reduce using rule 64 (expr6 -> expr7 GREATEREQUAL expr7 .)
    DELIM           reduce using rule 64 (expr6 -> expr7 GREATEREQUAL expr7 .)
    newline         reduce using rule 64 (expr6 -> expr7 GREATEREQUAL expr7 .)
    $end            reduce using rule 64 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_end     reduce using rule 64 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_elsif   reduce using rule 64 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_else    reduce using rule 64 (expr6 -> expr7 GREATEREQUAL expr7 .)
    COLON           reduce using rule 64 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_do      reduce using rule 64 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_then    reduce using rule 64 (expr6 -> expr7 GREATEREQUAL expr7 .)
    QUESTION_MARK   reduce using rule 64 (expr6 -> expr7 GREATEREQUAL expr7 .)
    CLOSE_PAREN     reduce using rule 64 (expr6 -> expr7 GREATEREQUAL expr7 .)
    BITXOR          shift and go to state 72
    PIPE            shift and go to state 71


state 109

    (63) expr6 -> expr7 GREATER expr7 .
    (66) expr7 -> expr7 . BITXOR expr8
    (67) expr7 -> expr7 . PIPE expr8

    IFF             reduce using rule 63 (expr6 -> expr7 GREATER expr7 .)
    DOUBLEEQUAL     reduce using rule 63 (expr6 -> expr7 GREATER expr7 .)
    TRIPLEEQUAL     reduce using rule 63 (expr6 -> expr7 GREATER expr7 .)
    NOTEQUAL        reduce using rule 63 (expr6 -> expr7 GREATER expr7 .)
    LOGICALAND      reduce using rule 63 (expr6 -> expr7 GREATER expr7 .)
    LOGICALOR       reduce using rule 63 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_while   reduce using rule 63 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_until   reduce using rule 63 (expr6 -> expr7 GREATER expr7 .)
    DELIM           reduce using rule 63 (expr6 -> expr7 GREATER expr7 .)
    newline         reduce using rule 63 (expr6 -> expr7 GREATER expr7 .)
    $end            reduce using rule 63 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_end     reduce using rule 63 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_elsif   reduce using rule 63 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_else    reduce using rule 63 (expr6 -> expr7 GREATER expr7 .)
    COLON           reduce using rule 63 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_do      reduce using rule 63 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_then    reduce using rule 63 (expr6 -> expr7 GREATER expr7 .)
    QUESTION_MARK   reduce using rule 63 (expr6 -> expr7 GREATER expr7 .)
    CLOSE_PAREN     reduce using rule 63 (expr6 -> expr7 GREATER expr7 .)
    BITXOR          shift and go to state 72
    PIPE            shift and go to state 71


state 110

    (62) expr6 -> expr7 LESS expr7 .
    (66) expr7 -> expr7 . BITXOR expr8
    (67) expr7 -> expr7 . PIPE expr8

    IFF             reduce using rule 62 (expr6 -> expr7 LESS expr7 .)
    DOUBLEEQUAL     reduce using rule 62 (expr6 -> expr7 LESS expr7 .)
    TRIPLEEQUAL     reduce using rule 62 (expr6 -> expr7 LESS expr7 .)
    NOTEQUAL        reduce using rule 62 (expr6 -> expr7 LESS expr7 .)
    LOGICALAND      reduce using rule 62 (expr6 -> expr7 LESS expr7 .)
    LOGICALOR       reduce using rule 62 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_while   reduce using rule 62 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_until   reduce using rule 62 (expr6 -> expr7 LESS expr7 .)
    DELIM           reduce using rule 62 (expr6 -> expr7 LESS expr7 .)
    newline         reduce using rule 62 (expr6 -> expr7 LESS expr7 .)
    $end            reduce using rule 62 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_end     reduce using rule 62 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_elsif   reduce using rule 62 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_else    reduce using rule 62 (expr6 -> expr7 LESS expr7 .)
    COLON           reduce using rule 62 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_do      reduce using rule 62 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_then    reduce using rule 62 (expr6 -> expr7 LESS expr7 .)
    QUESTION_MARK   reduce using rule 62 (expr6 -> expr7 LESS expr7 .)
    CLOSE_PAREN     reduce using rule 62 (expr6 -> expr7 LESS expr7 .)
    BITXOR          shift and go to state 72
    PIPE            shift and go to state 71


state 111

    (67) expr7 -> expr7 PIPE expr8 .
    (69) expr8 -> expr8 . BITAND expr9

    LESSEQUAL       reduce using rule 67 (expr7 -> expr7 PIPE expr8 .)
    LESS            reduce using rule 67 (expr7 -> expr7 PIPE expr8 .)
    GREATER         reduce using rule 67 (expr7 -> expr7 PIPE expr8 .)
    GREATEREQUAL    reduce using rule 67 (expr7 -> expr7 PIPE expr8 .)
    BITXOR          reduce using rule 67 (expr7 -> expr7 PIPE expr8 .)
    PIPE            reduce using rule 67 (expr7 -> expr7 PIPE expr8 .)
    IFF             reduce using rule 67 (expr7 -> expr7 PIPE expr8 .)
    DOUBLEEQUAL     reduce using rule 67 (expr7 -> expr7 PIPE expr8 .)
    TRIPLEEQUAL     reduce using rule 67 (expr7 -> expr7 PIPE expr8 .)
    NOTEQUAL        reduce using rule 67 (expr7 -> expr7 PIPE expr8 .)
    LOGICALAND      reduce using rule 67 (expr7 -> expr7 PIPE expr8 .)
    LOGICALOR       reduce using rule 67 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_do      reduce using rule 67 (expr7 -> expr7 PIPE expr8 .)
    newline         reduce using rule 67 (expr7 -> expr7 PIPE expr8 .)
    DOUBLEDOT       reduce using rule 67 (expr7 -> expr7 PIPE expr8 .)
    TRIPLEDOT       reduce using rule 67 (expr7 -> expr7 PIPE expr8 .)
    QUESTION_MARK   reduce using rule 67 (expr7 -> expr7 PIPE expr8 .)
    CLOSE_PAREN     reduce using rule 67 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_then    reduce using rule 67 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_while   reduce using rule 67 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_until   reduce using rule 67 (expr7 -> expr7 PIPE expr8 .)
    DELIM           reduce using rule 67 (expr7 -> expr7 PIPE expr8 .)
    $end            reduce using rule 67 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_end     reduce using rule 67 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_elsif   reduce using rule 67 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_else    reduce using rule 67 (expr7 -> expr7 PIPE expr8 .)
    COLON           reduce using rule 67 (expr7 -> expr7 PIPE expr8 .)
    BITAND          shift and go to state 75


state 112

    (66) expr7 -> expr7 BITXOR expr8 .
    (69) expr8 -> expr8 . BITAND expr9

    LESSEQUAL       reduce using rule 66 (expr7 -> expr7 BITXOR expr8 .)
    LESS            reduce using rule 66 (expr7 -> expr7 BITXOR expr8 .)
    GREATER         reduce using rule 66 (expr7 -> expr7 BITXOR expr8 .)
    GREATEREQUAL    reduce using rule 66 (expr7 -> expr7 BITXOR expr8 .)
    BITXOR          reduce using rule 66 (expr7 -> expr7 BITXOR expr8 .)
    PIPE            reduce using rule 66 (expr7 -> expr7 BITXOR expr8 .)
    IFF             reduce using rule 66 (expr7 -> expr7 BITXOR expr8 .)
    DOUBLEEQUAL     reduce using rule 66 (expr7 -> expr7 BITXOR expr8 .)
    TRIPLEEQUAL     reduce using rule 66 (expr7 -> expr7 BITXOR expr8 .)
    NOTEQUAL        reduce using rule 66 (expr7 -> expr7 BITXOR expr8 .)
    LOGICALAND      reduce using rule 66 (expr7 -> expr7 BITXOR expr8 .)
    LOGICALOR       reduce using rule 66 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_do      reduce using rule 66 (expr7 -> expr7 BITXOR expr8 .)
    newline         reduce using rule 66 (expr7 -> expr7 BITXOR expr8 .)
    DOUBLEDOT       reduce using rule 66 (expr7 -> expr7 BITXOR expr8 .)
    TRIPLEDOT       reduce using rule 66 (expr7 -> expr7 BITXOR expr8 .)
    QUESTION_MARK   reduce using rule 66 (expr7 -> expr7 BITXOR expr8 .)
    CLOSE_PAREN     reduce using rule 66 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_then    reduce using rule 66 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_while   reduce using rule 66 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_until   reduce using rule 66 (expr7 -> expr7 BITXOR expr8 .)
    DELIM           reduce using rule 66 (expr7 -> expr7 BITXOR expr8 .)
    $end            reduce using rule 66 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_end     reduce using rule 66 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_elsif   reduce using rule 66 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_else    reduce using rule 66 (expr7 -> expr7 BITXOR expr8 .)
    COLON           reduce using rule 66 (expr7 -> expr7 BITXOR expr8 .)
    BITAND          shift and go to state 75


state 113

    (61) expr6 -> expr7 LESSEQUAL expr7 .
    (66) expr7 -> expr7 . BITXOR expr8
    (67) expr7 -> expr7 . PIPE expr8

    IFF             reduce using rule 61 (expr6 -> expr7 LESSEQUAL expr7 .)
    DOUBLEEQUAL     reduce using rule 61 (expr6 -> expr7 LESSEQUAL expr7 .)
    TRIPLEEQUAL     reduce using rule 61 (expr6 -> expr7 LESSEQUAL expr7 .)
    NOTEQUAL        reduce using rule 61 (expr6 -> expr7 LESSEQUAL expr7 .)
    LOGICALAND      reduce using rule 61 (expr6 -> expr7 LESSEQUAL expr7 .)
    LOGICALOR       reduce using rule 61 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_while   reduce using rule 61 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_until   reduce using rule 61 (expr6 -> expr7 LESSEQUAL expr7 .)
    DELIM           reduce using rule 61 (expr6 -> expr7 LESSEQUAL expr7 .)
    newline         reduce using rule 61 (expr6 -> expr7 LESSEQUAL expr7 .)
    $end            reduce using rule 61 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_end     reduce using rule 61 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_elsif   reduce using rule 61 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_else    reduce using rule 61 (expr6 -> expr7 LESSEQUAL expr7 .)
    COLON           reduce using rule 61 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_do      reduce using rule 61 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_then    reduce using rule 61 (expr6 -> expr7 LESSEQUAL expr7 .)
    QUESTION_MARK   reduce using rule 61 (expr6 -> expr7 LESSEQUAL expr7 .)
    CLOSE_PAREN     reduce using rule 61 (expr6 -> expr7 LESSEQUAL expr7 .)
    BITXOR          shift and go to state 72
    PIPE            shift and go to state 71


state 114

    (54) expr4 -> expr4 LOGICALAND expr5 .

    LOGICALAND      reduce using rule 54 (expr4 -> expr4 LOGICALAND expr5 .)
    LOGICALOR       reduce using rule 54 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_then    reduce using rule 54 (expr4 -> expr4 LOGICALAND expr5 .)
    newline         reduce using rule 54 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_while   reduce using rule 54 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_until   reduce using rule 54 (expr4 -> expr4 LOGICALAND expr5 .)
    DELIM           reduce using rule 54 (expr4 -> expr4 LOGICALAND expr5 .)
    $end            reduce using rule 54 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_end     reduce using rule 54 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_elsif   reduce using rule 54 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_else    reduce using rule 54 (expr4 -> expr4 LOGICALAND expr5 .)
    COLON           reduce using rule 54 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_do      reduce using rule 54 (expr4 -> expr4 LOGICALAND expr5 .)
    QUESTION_MARK   reduce using rule 54 (expr4 -> expr4 LOGICALAND expr5 .)
    CLOSE_PAREN     reduce using rule 54 (expr4 -> expr4 LOGICALAND expr5 .)


state 115

    (69) expr8 -> expr8 BITAND expr9 .
    (71) expr9 -> expr9 . SHIFTL expr10
    (72) expr9 -> expr9 . SHIFTR expr10

    BITAND          reduce using rule 69 (expr8 -> expr8 BITAND expr9 .)
    BITXOR          reduce using rule 69 (expr8 -> expr8 BITAND expr9 .)
    PIPE            reduce using rule 69 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_while   reduce using rule 69 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_until   reduce using rule 69 (expr8 -> expr8 BITAND expr9 .)
    DELIM           reduce using rule 69 (expr8 -> expr8 BITAND expr9 .)
    newline         reduce using rule 69 (expr8 -> expr8 BITAND expr9 .)
    $end            reduce using rule 69 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_end     reduce using rule 69 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_elsif   reduce using rule 69 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_else    reduce using rule 69 (expr8 -> expr8 BITAND expr9 .)
    CLOSE_PAREN     reduce using rule 69 (expr8 -> expr8 BITAND expr9 .)
    COLON           reduce using rule 69 (expr8 -> expr8 BITAND expr9 .)
    IFF             reduce using rule 69 (expr8 -> expr8 BITAND expr9 .)
    DOUBLEEQUAL     reduce using rule 69 (expr8 -> expr8 BITAND expr9 .)
    TRIPLEEQUAL     reduce using rule 69 (expr8 -> expr8 BITAND expr9 .)
    NOTEQUAL        reduce using rule 69 (expr8 -> expr8 BITAND expr9 .)
    LOGICALAND      reduce using rule 69 (expr8 -> expr8 BITAND expr9 .)
    LOGICALOR       reduce using rule 69 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_do      reduce using rule 69 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_then    reduce using rule 69 (expr8 -> expr8 BITAND expr9 .)
    QUESTION_MARK   reduce using rule 69 (expr8 -> expr8 BITAND expr9 .)
    LESSEQUAL       reduce using rule 69 (expr8 -> expr8 BITAND expr9 .)
    LESS            reduce using rule 69 (expr8 -> expr8 BITAND expr9 .)
    GREATER         reduce using rule 69 (expr8 -> expr8 BITAND expr9 .)
    GREATEREQUAL    reduce using rule 69 (expr8 -> expr8 BITAND expr9 .)
    DOUBLEDOT       reduce using rule 69 (expr8 -> expr8 BITAND expr9 .)
    TRIPLEDOT       reduce using rule 69 (expr8 -> expr8 BITAND expr9 .)
    SHIFTL          shift and go to state 77
    SHIFTR          shift and go to state 76


state 116

    (72) expr9 -> expr9 SHIFTR expr10 .
    (74) expr10 -> expr10 . PLUS expr11
    (75) expr10 -> expr10 . MINUS expr11

    SHIFTL          reduce using rule 72 (expr9 -> expr9 SHIFTR expr10 .)
    SHIFTR          reduce using rule 72 (expr9 -> expr9 SHIFTR expr10 .)
    BITAND          reduce using rule 72 (expr9 -> expr9 SHIFTR expr10 .)
    BITXOR          reduce using rule 72 (expr9 -> expr9 SHIFTR expr10 .)
    PIPE            reduce using rule 72 (expr9 -> expr9 SHIFTR expr10 .)
    IFF             reduce using rule 72 (expr9 -> expr9 SHIFTR expr10 .)
    DOUBLEEQUAL     reduce using rule 72 (expr9 -> expr9 SHIFTR expr10 .)
    TRIPLEEQUAL     reduce using rule 72 (expr9 -> expr9 SHIFTR expr10 .)
    NOTEQUAL        reduce using rule 72 (expr9 -> expr9 SHIFTR expr10 .)
    LOGICALAND      reduce using rule 72 (expr9 -> expr9 SHIFTR expr10 .)
    LOGICALOR       reduce using rule 72 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_do      reduce using rule 72 (expr9 -> expr9 SHIFTR expr10 .)
    newline         reduce using rule 72 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_then    reduce using rule 72 (expr9 -> expr9 SHIFTR expr10 .)
    QUESTION_MARK   reduce using rule 72 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_while   reduce using rule 72 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_until   reduce using rule 72 (expr9 -> expr9 SHIFTR expr10 .)
    DELIM           reduce using rule 72 (expr9 -> expr9 SHIFTR expr10 .)
    $end            reduce using rule 72 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_end     reduce using rule 72 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_elsif   reduce using rule 72 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_else    reduce using rule 72 (expr9 -> expr9 SHIFTR expr10 .)
    CLOSE_PAREN     reduce using rule 72 (expr9 -> expr9 SHIFTR expr10 .)
    COLON           reduce using rule 72 (expr9 -> expr9 SHIFTR expr10 .)
    LESSEQUAL       reduce using rule 72 (expr9 -> expr9 SHIFTR expr10 .)
    LESS            reduce using rule 72 (expr9 -> expr9 SHIFTR expr10 .)
    GREATER         reduce using rule 72 (expr9 -> expr9 SHIFTR expr10 .)
    GREATEREQUAL    reduce using rule 72 (expr9 -> expr9 SHIFTR expr10 .)
    DOUBLEDOT       reduce using rule 72 (expr9 -> expr9 SHIFTR expr10 .)
    TRIPLEDOT       reduce using rule 72 (expr9 -> expr9 SHIFTR expr10 .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57


state 117

    (71) expr9 -> expr9 SHIFTL expr10 .
    (74) expr10 -> expr10 . PLUS expr11
    (75) expr10 -> expr10 . MINUS expr11

    SHIFTL          reduce using rule 71 (expr9 -> expr9 SHIFTL expr10 .)
    SHIFTR          reduce using rule 71 (expr9 -> expr9 SHIFTL expr10 .)
    BITAND          reduce using rule 71 (expr9 -> expr9 SHIFTL expr10 .)
    BITXOR          reduce using rule 71 (expr9 -> expr9 SHIFTL expr10 .)
    PIPE            reduce using rule 71 (expr9 -> expr9 SHIFTL expr10 .)
    IFF             reduce using rule 71 (expr9 -> expr9 SHIFTL expr10 .)
    DOUBLEEQUAL     reduce using rule 71 (expr9 -> expr9 SHIFTL expr10 .)
    TRIPLEEQUAL     reduce using rule 71 (expr9 -> expr9 SHIFTL expr10 .)
    NOTEQUAL        reduce using rule 71 (expr9 -> expr9 SHIFTL expr10 .)
    LOGICALAND      reduce using rule 71 (expr9 -> expr9 SHIFTL expr10 .)
    LOGICALOR       reduce using rule 71 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_do      reduce using rule 71 (expr9 -> expr9 SHIFTL expr10 .)
    newline         reduce using rule 71 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_then    reduce using rule 71 (expr9 -> expr9 SHIFTL expr10 .)
    QUESTION_MARK   reduce using rule 71 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_while   reduce using rule 71 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_until   reduce using rule 71 (expr9 -> expr9 SHIFTL expr10 .)
    DELIM           reduce using rule 71 (expr9 -> expr9 SHIFTL expr10 .)
    $end            reduce using rule 71 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_end     reduce using rule 71 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_elsif   reduce using rule 71 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_else    reduce using rule 71 (expr9 -> expr9 SHIFTL expr10 .)
    CLOSE_PAREN     reduce using rule 71 (expr9 -> expr9 SHIFTL expr10 .)
    COLON           reduce using rule 71 (expr9 -> expr9 SHIFTL expr10 .)
    LESSEQUAL       reduce using rule 71 (expr9 -> expr9 SHIFTL expr10 .)
    LESS            reduce using rule 71 (expr9 -> expr9 SHIFTL expr10 .)
    GREATER         reduce using rule 71 (expr9 -> expr9 SHIFTL expr10 .)
    GREATEREQUAL    reduce using rule 71 (expr9 -> expr9 SHIFTL expr10 .)
    DOUBLEDOT       reduce using rule 71 (expr9 -> expr9 SHIFTL expr10 .)
    TRIPLEDOT       reduce using rule 71 (expr9 -> expr9 SHIFTL expr10 .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57


state 118

    (77) expr11 -> expr11 MULTIPLY expr12 .

    MULTIPLY        reduce using rule 77 (expr11 -> expr11 MULTIPLY expr12 .)
    DIV             reduce using rule 77 (expr11 -> expr11 MULTIPLY expr12 .)
    MOD             reduce using rule 77 (expr11 -> expr11 MULTIPLY expr12 .)
    PLUS            reduce using rule 77 (expr11 -> expr11 MULTIPLY expr12 .)
    MINUS           reduce using rule 77 (expr11 -> expr11 MULTIPLY expr12 .)
    SHIFTL          reduce using rule 77 (expr11 -> expr11 MULTIPLY expr12 .)
    SHIFTR          reduce using rule 77 (expr11 -> expr11 MULTIPLY expr12 .)
    BITAND          reduce using rule 77 (expr11 -> expr11 MULTIPLY expr12 .)
    BITXOR          reduce using rule 77 (expr11 -> expr11 MULTIPLY expr12 .)
    PIPE            reduce using rule 77 (expr11 -> expr11 MULTIPLY expr12 .)
    IFF             reduce using rule 77 (expr11 -> expr11 MULTIPLY expr12 .)
    DOUBLEEQUAL     reduce using rule 77 (expr11 -> expr11 MULTIPLY expr12 .)
    TRIPLEEQUAL     reduce using rule 77 (expr11 -> expr11 MULTIPLY expr12 .)
    NOTEQUAL        reduce using rule 77 (expr11 -> expr11 MULTIPLY expr12 .)
    LOGICALAND      reduce using rule 77 (expr11 -> expr11 MULTIPLY expr12 .)
    LOGICALOR       reduce using rule 77 (expr11 -> expr11 MULTIPLY expr12 .)
    KEYWORD_do      reduce using rule 77 (expr11 -> expr11 MULTIPLY expr12 .)
    newline         reduce using rule 77 (expr11 -> expr11 MULTIPLY expr12 .)
    KEYWORD_then    reduce using rule 77 (expr11 -> expr11 MULTIPLY expr12 .)
    QUESTION_MARK   reduce using rule 77 (expr11 -> expr11 MULTIPLY expr12 .)
    KEYWORD_while   reduce using rule 77 (expr11 -> expr11 MULTIPLY expr12 .)
    KEYWORD_until   reduce using rule 77 (expr11 -> expr11 MULTIPLY expr12 .)
    DELIM           reduce using rule 77 (expr11 -> expr11 MULTIPLY expr12 .)
    $end            reduce using rule 77 (expr11 -> expr11 MULTIPLY expr12 .)
    KEYWORD_end     reduce using rule 77 (expr11 -> expr11 MULTIPLY expr12 .)
    KEYWORD_elsif   reduce using rule 77 (expr11 -> expr11 MULTIPLY expr12 .)
    KEYWORD_else    reduce using rule 77 (expr11 -> expr11 MULTIPLY expr12 .)
    CLOSE_PAREN     reduce using rule 77 (expr11 -> expr11 MULTIPLY expr12 .)
    COLON           reduce using rule 77 (expr11 -> expr11 MULTIPLY expr12 .)
    LESSEQUAL       reduce using rule 77 (expr11 -> expr11 MULTIPLY expr12 .)
    LESS            reduce using rule 77 (expr11 -> expr11 MULTIPLY expr12 .)
    GREATER         reduce using rule 77 (expr11 -> expr11 MULTIPLY expr12 .)
    GREATEREQUAL    reduce using rule 77 (expr11 -> expr11 MULTIPLY expr12 .)
    DOUBLEDOT       reduce using rule 77 (expr11 -> expr11 MULTIPLY expr12 .)
    TRIPLEDOT       reduce using rule 77 (expr11 -> expr11 MULTIPLY expr12 .)


state 119

    (78) expr11 -> expr11 DIV expr12 .

    MULTIPLY        reduce using rule 78 (expr11 -> expr11 DIV expr12 .)
    DIV             reduce using rule 78 (expr11 -> expr11 DIV expr12 .)
    MOD             reduce using rule 78 (expr11 -> expr11 DIV expr12 .)
    PLUS            reduce using rule 78 (expr11 -> expr11 DIV expr12 .)
    MINUS           reduce using rule 78 (expr11 -> expr11 DIV expr12 .)
    SHIFTL          reduce using rule 78 (expr11 -> expr11 DIV expr12 .)
    SHIFTR          reduce using rule 78 (expr11 -> expr11 DIV expr12 .)
    BITAND          reduce using rule 78 (expr11 -> expr11 DIV expr12 .)
    BITXOR          reduce using rule 78 (expr11 -> expr11 DIV expr12 .)
    PIPE            reduce using rule 78 (expr11 -> expr11 DIV expr12 .)
    IFF             reduce using rule 78 (expr11 -> expr11 DIV expr12 .)
    DOUBLEEQUAL     reduce using rule 78 (expr11 -> expr11 DIV expr12 .)
    TRIPLEEQUAL     reduce using rule 78 (expr11 -> expr11 DIV expr12 .)
    NOTEQUAL        reduce using rule 78 (expr11 -> expr11 DIV expr12 .)
    LOGICALAND      reduce using rule 78 (expr11 -> expr11 DIV expr12 .)
    LOGICALOR       reduce using rule 78 (expr11 -> expr11 DIV expr12 .)
    KEYWORD_do      reduce using rule 78 (expr11 -> expr11 DIV expr12 .)
    newline         reduce using rule 78 (expr11 -> expr11 DIV expr12 .)
    KEYWORD_then    reduce using rule 78 (expr11 -> expr11 DIV expr12 .)
    QUESTION_MARK   reduce using rule 78 (expr11 -> expr11 DIV expr12 .)
    KEYWORD_while   reduce using rule 78 (expr11 -> expr11 DIV expr12 .)
    KEYWORD_until   reduce using rule 78 (expr11 -> expr11 DIV expr12 .)
    DELIM           reduce using rule 78 (expr11 -> expr11 DIV expr12 .)
    $end            reduce using rule 78 (expr11 -> expr11 DIV expr12 .)
    KEYWORD_end     reduce using rule 78 (expr11 -> expr11 DIV expr12 .)
    KEYWORD_elsif   reduce using rule 78 (expr11 -> expr11 DIV expr12 .)
    KEYWORD_else    reduce using rule 78 (expr11 -> expr11 DIV expr12 .)
    CLOSE_PAREN     reduce using rule 78 (expr11 -> expr11 DIV expr12 .)
    COLON           reduce using rule 78 (expr11 -> expr11 DIV expr12 .)
    LESSEQUAL       reduce using rule 78 (expr11 -> expr11 DIV expr12 .)
    LESS            reduce using rule 78 (expr11 -> expr11 DIV expr12 .)
    GREATER         reduce using rule 78 (expr11 -> expr11 DIV expr12 .)
    GREATEREQUAL    reduce using rule 78 (expr11 -> expr11 DIV expr12 .)
    DOUBLEDOT       reduce using rule 78 (expr11 -> expr11 DIV expr12 .)
    TRIPLEDOT       reduce using rule 78 (expr11 -> expr11 DIV expr12 .)


state 120

    (79) expr11 -> expr11 MOD expr12 .

    MULTIPLY        reduce using rule 79 (expr11 -> expr11 MOD expr12 .)
    DIV             reduce using rule 79 (expr11 -> expr11 MOD expr12 .)
    MOD             reduce using rule 79 (expr11 -> expr11 MOD expr12 .)
    PLUS            reduce using rule 79 (expr11 -> expr11 MOD expr12 .)
    MINUS           reduce using rule 79 (expr11 -> expr11 MOD expr12 .)
    SHIFTL          reduce using rule 79 (expr11 -> expr11 MOD expr12 .)
    SHIFTR          reduce using rule 79 (expr11 -> expr11 MOD expr12 .)
    BITAND          reduce using rule 79 (expr11 -> expr11 MOD expr12 .)
    BITXOR          reduce using rule 79 (expr11 -> expr11 MOD expr12 .)
    PIPE            reduce using rule 79 (expr11 -> expr11 MOD expr12 .)
    IFF             reduce using rule 79 (expr11 -> expr11 MOD expr12 .)
    DOUBLEEQUAL     reduce using rule 79 (expr11 -> expr11 MOD expr12 .)
    TRIPLEEQUAL     reduce using rule 79 (expr11 -> expr11 MOD expr12 .)
    NOTEQUAL        reduce using rule 79 (expr11 -> expr11 MOD expr12 .)
    LOGICALAND      reduce using rule 79 (expr11 -> expr11 MOD expr12 .)
    LOGICALOR       reduce using rule 79 (expr11 -> expr11 MOD expr12 .)
    KEYWORD_do      reduce using rule 79 (expr11 -> expr11 MOD expr12 .)
    newline         reduce using rule 79 (expr11 -> expr11 MOD expr12 .)
    KEYWORD_then    reduce using rule 79 (expr11 -> expr11 MOD expr12 .)
    QUESTION_MARK   reduce using rule 79 (expr11 -> expr11 MOD expr12 .)
    KEYWORD_while   reduce using rule 79 (expr11 -> expr11 MOD expr12 .)
    KEYWORD_until   reduce using rule 79 (expr11 -> expr11 MOD expr12 .)
    DELIM           reduce using rule 79 (expr11 -> expr11 MOD expr12 .)
    $end            reduce using rule 79 (expr11 -> expr11 MOD expr12 .)
    KEYWORD_end     reduce using rule 79 (expr11 -> expr11 MOD expr12 .)
    KEYWORD_elsif   reduce using rule 79 (expr11 -> expr11 MOD expr12 .)
    KEYWORD_else    reduce using rule 79 (expr11 -> expr11 MOD expr12 .)
    CLOSE_PAREN     reduce using rule 79 (expr11 -> expr11 MOD expr12 .)
    COLON           reduce using rule 79 (expr11 -> expr11 MOD expr12 .)
    LESSEQUAL       reduce using rule 79 (expr11 -> expr11 MOD expr12 .)
    LESS            reduce using rule 79 (expr11 -> expr11 MOD expr12 .)
    GREATER         reduce using rule 79 (expr11 -> expr11 MOD expr12 .)
    GREATEREQUAL    reduce using rule 79 (expr11 -> expr11 MOD expr12 .)
    DOUBLEDOT       reduce using rule 79 (expr11 -> expr11 MOD expr12 .)
    TRIPLEDOT       reduce using rule 79 (expr11 -> expr11 MOD expr12 .)


state 121

    (7) top_stmt -> KEYWORD_if expr3 opt_then top_compstmt . elsif_tail opt_else_stmt KEYWORD_end
    (18) elsif_tail -> . none
    (19) elsif_tail -> . KEYWORD_elsif expr3 opt_then top_compstmt elsif_tail
    (99) none -> .

    KEYWORD_elsif   shift and go to state 135
    KEYWORD_else    reduce using rule 99 (none -> .)
    KEYWORD_end     reduce using rule 99 (none -> .)

    none                           shift and go to state 134
    elsif_tail                     shift and go to state 136

state 122

    (8) top_stmt -> KEYWORD_while expr3 opt_do top_compstmt . KEYWORD_end

    KEYWORD_end     shift and go to state 137


state 123

    (13) top_stmt -> KEYWORD_begin top_compstmt KEYWORD_end KEYWORD_until . expr3
    (52) expr3 -> . expr3 LOGICALOR expr4
    (53) expr3 -> . expr4
    (54) expr4 -> . expr4 LOGICALAND expr5
    (55) expr4 -> . expr5
    (56) expr5 -> . expr6 IFF expr6
    (57) expr5 -> . expr6 DOUBLEEQUAL expr6
    (58) expr5 -> . expr6 TRIPLEEQUAL expr6
    (59) expr5 -> . expr6 NOTEQUAL expr6
    (60) expr5 -> . expr6
    (61) expr6 -> . expr7 LESSEQUAL expr7
    (62) expr6 -> . expr7 LESS expr7
    (63) expr6 -> . expr7 GREATER expr7
    (64) expr6 -> . expr7 GREATEREQUAL expr7
    (65) expr6 -> . expr7
    (66) expr7 -> . expr7 BITXOR expr8
    (67) expr7 -> . expr7 PIPE expr8
    (68) expr7 -> . expr8
    (69) expr8 -> . expr8 BITAND expr9
    (70) expr8 -> . expr9
    (71) expr9 -> . expr9 SHIFTL expr10
    (72) expr9 -> . expr9 SHIFTR expr10
    (73) expr9 -> . expr10
    (74) expr10 -> . expr10 PLUS expr11
    (75) expr10 -> . expr10 MINUS expr11
    (76) expr10 -> . expr11
    (77) expr11 -> . expr11 MULTIPLY expr12
    (78) expr11 -> . expr11 DIV expr12
    (79) expr11 -> . expr11 MOD expr12
    (80) expr11 -> . expr12
    (81) expr12 -> . expr13 DOUBLESTAR expr12
    (82) expr12 -> . expr13
    (83) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (84) expr13 -> . uexpr INT_CONSTANTS
    (85) expr13 -> . uexpr FLOAT_CONSTANTS
    (86) expr13 -> . CONSTANTS
    (87) expr13 -> . VARIABLES
    (88) uexpr -> . none
    (89) uexpr -> . PLUS
    (90) uexpr -> . MINUS
    (91) uexpr -> . BITNOT
    (92) uexpr -> . BITCOMP
    (99) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 35
    VARIABLES       shift and go to state 21
    PLUS            shift and go to state 29
    MINUS           shift and go to state 20
    BITNOT          shift and go to state 34
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 99 (none -> .)
    FLOAT_CONSTANTS reduce using rule 99 (none -> .)

    uexpr                          shift and go to state 32
    none                           shift and go to state 33
    expr12                         shift and go to state 17
    expr3                          shift and go to state 138
    expr6                          shift and go to state 25
    expr7                          shift and go to state 26
    expr4                          shift and go to state 27
    expr5                          shift and go to state 28
    expr10                         shift and go to state 18
    expr8                          shift and go to state 30
    expr9                          shift and go to state 31
    expr13                         shift and go to state 19
    expr11                         shift and go to state 36

state 124

    (10) top_stmt -> KEYWORD_begin top_compstmt KEYWORD_end KEYWORD_while . expr3
    (52) expr3 -> . expr3 LOGICALOR expr4
    (53) expr3 -> . expr4
    (54) expr4 -> . expr4 LOGICALAND expr5
    (55) expr4 -> . expr5
    (56) expr5 -> . expr6 IFF expr6
    (57) expr5 -> . expr6 DOUBLEEQUAL expr6
    (58) expr5 -> . expr6 TRIPLEEQUAL expr6
    (59) expr5 -> . expr6 NOTEQUAL expr6
    (60) expr5 -> . expr6
    (61) expr6 -> . expr7 LESSEQUAL expr7
    (62) expr6 -> . expr7 LESS expr7
    (63) expr6 -> . expr7 GREATER expr7
    (64) expr6 -> . expr7 GREATEREQUAL expr7
    (65) expr6 -> . expr7
    (66) expr7 -> . expr7 BITXOR expr8
    (67) expr7 -> . expr7 PIPE expr8
    (68) expr7 -> . expr8
    (69) expr8 -> . expr8 BITAND expr9
    (70) expr8 -> . expr9
    (71) expr9 -> . expr9 SHIFTL expr10
    (72) expr9 -> . expr9 SHIFTR expr10
    (73) expr9 -> . expr10
    (74) expr10 -> . expr10 PLUS expr11
    (75) expr10 -> . expr10 MINUS expr11
    (76) expr10 -> . expr11
    (77) expr11 -> . expr11 MULTIPLY expr12
    (78) expr11 -> . expr11 DIV expr12
    (79) expr11 -> . expr11 MOD expr12
    (80) expr11 -> . expr12
    (81) expr12 -> . expr13 DOUBLESTAR expr12
    (82) expr12 -> . expr13
    (83) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (84) expr13 -> . uexpr INT_CONSTANTS
    (85) expr13 -> . uexpr FLOAT_CONSTANTS
    (86) expr13 -> . CONSTANTS
    (87) expr13 -> . VARIABLES
    (88) uexpr -> . none
    (89) uexpr -> . PLUS
    (90) uexpr -> . MINUS
    (91) uexpr -> . BITNOT
    (92) uexpr -> . BITCOMP
    (99) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 35
    VARIABLES       shift and go to state 21
    PLUS            shift and go to state 29
    MINUS           shift and go to state 20
    BITNOT          shift and go to state 34
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 99 (none -> .)
    FLOAT_CONSTANTS reduce using rule 99 (none -> .)

    uexpr                          shift and go to state 32
    none                           shift and go to state 33
    expr12                         shift and go to state 17
    expr3                          shift and go to state 139
    expr6                          shift and go to state 25
    expr7                          shift and go to state 26
    expr4                          shift and go to state 27
    expr5                          shift and go to state 28
    expr10                         shift and go to state 18
    expr8                          shift and go to state 30
    expr9                          shift and go to state 31
    expr13                         shift and go to state 19
    expr11                         shift and go to state 36

state 125

    (31) opt_cparen -> none .

    KEYWORD_in      reduce using rule 31 (opt_cparen -> none .)


state 126

    (14) top_stmt -> KEYWORD_for opt_oparen multi_var opt_cparen . KEYWORD_in for_range opt_do top_compstmt KEYWORD_end

    KEYWORD_in      shift and go to state 140


state 127

    (26) multi_var -> multi_var COMMA . VARIABLES
    (27) multi_var -> multi_var COMMA . CONSTANTS

    VARIABLES       shift and go to state 141
    CONSTANTS       shift and go to state 142


state 128

    (30) opt_cparen -> CLOSE_PAREN .

    KEYWORD_in      reduce using rule 30 (opt_cparen -> CLOSE_PAREN .)


state 129

    (47) expr1 -> expr3 QUESTION_MARK expr2 . COLON expr2

    COLON           shift and go to state 143


state 130

    (51) expr2 -> expr3 .
    (52) expr3 -> expr3 . LOGICALOR expr4

    KEYWORD_while   reduce using rule 51 (expr2 -> expr3 .)
    KEYWORD_until   reduce using rule 51 (expr2 -> expr3 .)
    DELIM           reduce using rule 51 (expr2 -> expr3 .)
    newline         reduce using rule 51 (expr2 -> expr3 .)
    $end            reduce using rule 51 (expr2 -> expr3 .)
    KEYWORD_end     reduce using rule 51 (expr2 -> expr3 .)
    KEYWORD_elsif   reduce using rule 51 (expr2 -> expr3 .)
    KEYWORD_else    reduce using rule 51 (expr2 -> expr3 .)
    CLOSE_PAREN     reduce using rule 51 (expr2 -> expr3 .)
    COLON           reduce using rule 51 (expr2 -> expr3 .)
    LOGICALOR       shift and go to state 60


state 131

    (49) expr2 -> expr7 DOUBLEDOT expr7 .
    (66) expr7 -> expr7 . BITXOR expr8
    (67) expr7 -> expr7 . PIPE expr8

    KEYWORD_while   reduce using rule 49 (expr2 -> expr7 DOUBLEDOT expr7 .)
    KEYWORD_until   reduce using rule 49 (expr2 -> expr7 DOUBLEDOT expr7 .)
    DELIM           reduce using rule 49 (expr2 -> expr7 DOUBLEDOT expr7 .)
    newline         reduce using rule 49 (expr2 -> expr7 DOUBLEDOT expr7 .)
    $end            reduce using rule 49 (expr2 -> expr7 DOUBLEDOT expr7 .)
    KEYWORD_end     reduce using rule 49 (expr2 -> expr7 DOUBLEDOT expr7 .)
    KEYWORD_elsif   reduce using rule 49 (expr2 -> expr7 DOUBLEDOT expr7 .)
    KEYWORD_else    reduce using rule 49 (expr2 -> expr7 DOUBLEDOT expr7 .)
    CLOSE_PAREN     reduce using rule 49 (expr2 -> expr7 DOUBLEDOT expr7 .)
    COLON           reduce using rule 49 (expr2 -> expr7 DOUBLEDOT expr7 .)
    BITXOR          shift and go to state 72
    PIPE            shift and go to state 71


state 132

    (50) expr2 -> expr7 TRIPLEDOT expr7 .
    (66) expr7 -> expr7 . BITXOR expr8
    (67) expr7 -> expr7 . PIPE expr8

    KEYWORD_while   reduce using rule 50 (expr2 -> expr7 TRIPLEDOT expr7 .)
    KEYWORD_until   reduce using rule 50 (expr2 -> expr7 TRIPLEDOT expr7 .)
    DELIM           reduce using rule 50 (expr2 -> expr7 TRIPLEDOT expr7 .)
    newline         reduce using rule 50 (expr2 -> expr7 TRIPLEDOT expr7 .)
    $end            reduce using rule 50 (expr2 -> expr7 TRIPLEDOT expr7 .)
    KEYWORD_end     reduce using rule 50 (expr2 -> expr7 TRIPLEDOT expr7 .)
    KEYWORD_elsif   reduce using rule 50 (expr2 -> expr7 TRIPLEDOT expr7 .)
    KEYWORD_else    reduce using rule 50 (expr2 -> expr7 TRIPLEDOT expr7 .)
    CLOSE_PAREN     reduce using rule 50 (expr2 -> expr7 TRIPLEDOT expr7 .)
    COLON           reduce using rule 50 (expr2 -> expr7 TRIPLEDOT expr7 .)
    BITXOR          shift and go to state 72
    PIPE            shift and go to state 71


state 133

    (12) top_stmt -> KEYWORD_until expr3 opt_do top_compstmt KEYWORD_end .

    KEYWORD_while   reduce using rule 12 (top_stmt -> KEYWORD_until expr3 opt_do top_compstmt KEYWORD_end .)
    KEYWORD_until   reduce using rule 12 (top_stmt -> KEYWORD_until expr3 opt_do top_compstmt KEYWORD_end .)
    DELIM           reduce using rule 12 (top_stmt -> KEYWORD_until expr3 opt_do top_compstmt KEYWORD_end .)
    newline         reduce using rule 12 (top_stmt -> KEYWORD_until expr3 opt_do top_compstmt KEYWORD_end .)
    KEYWORD_end     reduce using rule 12 (top_stmt -> KEYWORD_until expr3 opt_do top_compstmt KEYWORD_end .)
    KEYWORD_elsif   reduce using rule 12 (top_stmt -> KEYWORD_until expr3 opt_do top_compstmt KEYWORD_end .)
    KEYWORD_else    reduce using rule 12 (top_stmt -> KEYWORD_until expr3 opt_do top_compstmt KEYWORD_end .)
    $end            reduce using rule 12 (top_stmt -> KEYWORD_until expr3 opt_do top_compstmt KEYWORD_end .)


state 134

    (18) elsif_tail -> none .

    KEYWORD_else    reduce using rule 18 (elsif_tail -> none .)
    KEYWORD_end     reduce using rule 18 (elsif_tail -> none .)


state 135

    (19) elsif_tail -> KEYWORD_elsif . expr3 opt_then top_compstmt elsif_tail
    (52) expr3 -> . expr3 LOGICALOR expr4
    (53) expr3 -> . expr4
    (54) expr4 -> . expr4 LOGICALAND expr5
    (55) expr4 -> . expr5
    (56) expr5 -> . expr6 IFF expr6
    (57) expr5 -> . expr6 DOUBLEEQUAL expr6
    (58) expr5 -> . expr6 TRIPLEEQUAL expr6
    (59) expr5 -> . expr6 NOTEQUAL expr6
    (60) expr5 -> . expr6
    (61) expr6 -> . expr7 LESSEQUAL expr7
    (62) expr6 -> . expr7 LESS expr7
    (63) expr6 -> . expr7 GREATER expr7
    (64) expr6 -> . expr7 GREATEREQUAL expr7
    (65) expr6 -> . expr7
    (66) expr7 -> . expr7 BITXOR expr8
    (67) expr7 -> . expr7 PIPE expr8
    (68) expr7 -> . expr8
    (69) expr8 -> . expr8 BITAND expr9
    (70) expr8 -> . expr9
    (71) expr9 -> . expr9 SHIFTL expr10
    (72) expr9 -> . expr9 SHIFTR expr10
    (73) expr9 -> . expr10
    (74) expr10 -> . expr10 PLUS expr11
    (75) expr10 -> . expr10 MINUS expr11
    (76) expr10 -> . expr11
    (77) expr11 -> . expr11 MULTIPLY expr12
    (78) expr11 -> . expr11 DIV expr12
    (79) expr11 -> . expr11 MOD expr12
    (80) expr11 -> . expr12
    (81) expr12 -> . expr13 DOUBLESTAR expr12
    (82) expr12 -> . expr13
    (83) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (84) expr13 -> . uexpr INT_CONSTANTS
    (85) expr13 -> . uexpr FLOAT_CONSTANTS
    (86) expr13 -> . CONSTANTS
    (87) expr13 -> . VARIABLES
    (88) uexpr -> . none
    (89) uexpr -> . PLUS
    (90) uexpr -> . MINUS
    (91) uexpr -> . BITNOT
    (92) uexpr -> . BITCOMP
    (99) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 35
    VARIABLES       shift and go to state 21
    PLUS            shift and go to state 29
    MINUS           shift and go to state 20
    BITNOT          shift and go to state 34
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 99 (none -> .)
    FLOAT_CONSTANTS reduce using rule 99 (none -> .)

    uexpr                          shift and go to state 32
    none                           shift and go to state 33
    expr3                          shift and go to state 144
    expr6                          shift and go to state 25
    expr7                          shift and go to state 26
    expr4                          shift and go to state 27
    expr5                          shift and go to state 28
    expr10                         shift and go to state 18
    expr8                          shift and go to state 30
    expr9                          shift and go to state 31
    expr13                         shift and go to state 19
    expr12                         shift and go to state 17
    expr11                         shift and go to state 36

state 136

    (7) top_stmt -> KEYWORD_if expr3 opt_then top_compstmt elsif_tail . opt_else_stmt KEYWORD_end
    (16) opt_else_stmt -> . KEYWORD_else top_compstmt
    (17) opt_else_stmt -> . none
    (99) none -> .

    KEYWORD_else    shift and go to state 146
    KEYWORD_end     reduce using rule 99 (none -> .)

    none                           shift and go to state 145
    opt_else_stmt                  shift and go to state 147

state 137

    (8) top_stmt -> KEYWORD_while expr3 opt_do top_compstmt KEYWORD_end .

    KEYWORD_while   reduce using rule 8 (top_stmt -> KEYWORD_while expr3 opt_do top_compstmt KEYWORD_end .)
    KEYWORD_until   reduce using rule 8 (top_stmt -> KEYWORD_while expr3 opt_do top_compstmt KEYWORD_end .)
    DELIM           reduce using rule 8 (top_stmt -> KEYWORD_while expr3 opt_do top_compstmt KEYWORD_end .)
    newline         reduce using rule 8 (top_stmt -> KEYWORD_while expr3 opt_do top_compstmt KEYWORD_end .)
    KEYWORD_end     reduce using rule 8 (top_stmt -> KEYWORD_while expr3 opt_do top_compstmt KEYWORD_end .)
    KEYWORD_elsif   reduce using rule 8 (top_stmt -> KEYWORD_while expr3 opt_do top_compstmt KEYWORD_end .)
    KEYWORD_else    reduce using rule 8 (top_stmt -> KEYWORD_while expr3 opt_do top_compstmt KEYWORD_end .)
    $end            reduce using rule 8 (top_stmt -> KEYWORD_while expr3 opt_do top_compstmt KEYWORD_end .)


state 138

    (13) top_stmt -> KEYWORD_begin top_compstmt KEYWORD_end KEYWORD_until expr3 .
    (52) expr3 -> expr3 . LOGICALOR expr4

    KEYWORD_while   reduce using rule 13 (top_stmt -> KEYWORD_begin top_compstmt KEYWORD_end KEYWORD_until expr3 .)
    KEYWORD_until   reduce using rule 13 (top_stmt -> KEYWORD_begin top_compstmt KEYWORD_end KEYWORD_until expr3 .)
    DELIM           reduce using rule 13 (top_stmt -> KEYWORD_begin top_compstmt KEYWORD_end KEYWORD_until expr3 .)
    newline         reduce using rule 13 (top_stmt -> KEYWORD_begin top_compstmt KEYWORD_end KEYWORD_until expr3 .)
    KEYWORD_end     reduce using rule 13 (top_stmt -> KEYWORD_begin top_compstmt KEYWORD_end KEYWORD_until expr3 .)
    KEYWORD_elsif   reduce using rule 13 (top_stmt -> KEYWORD_begin top_compstmt KEYWORD_end KEYWORD_until expr3 .)
    KEYWORD_else    reduce using rule 13 (top_stmt -> KEYWORD_begin top_compstmt KEYWORD_end KEYWORD_until expr3 .)
    $end            reduce using rule 13 (top_stmt -> KEYWORD_begin top_compstmt KEYWORD_end KEYWORD_until expr3 .)
    LOGICALOR       shift and go to state 60


state 139

    (10) top_stmt -> KEYWORD_begin top_compstmt KEYWORD_end KEYWORD_while expr3 .
    (52) expr3 -> expr3 . LOGICALOR expr4

    KEYWORD_while   reduce using rule 10 (top_stmt -> KEYWORD_begin top_compstmt KEYWORD_end KEYWORD_while expr3 .)
    KEYWORD_until   reduce using rule 10 (top_stmt -> KEYWORD_begin top_compstmt KEYWORD_end KEYWORD_while expr3 .)
    DELIM           reduce using rule 10 (top_stmt -> KEYWORD_begin top_compstmt KEYWORD_end KEYWORD_while expr3 .)
    newline         reduce using rule 10 (top_stmt -> KEYWORD_begin top_compstmt KEYWORD_end KEYWORD_while expr3 .)
    KEYWORD_end     reduce using rule 10 (top_stmt -> KEYWORD_begin top_compstmt KEYWORD_end KEYWORD_while expr3 .)
    KEYWORD_elsif   reduce using rule 10 (top_stmt -> KEYWORD_begin top_compstmt KEYWORD_end KEYWORD_while expr3 .)
    KEYWORD_else    reduce using rule 10 (top_stmt -> KEYWORD_begin top_compstmt KEYWORD_end KEYWORD_while expr3 .)
    $end            reduce using rule 10 (top_stmt -> KEYWORD_begin top_compstmt KEYWORD_end KEYWORD_while expr3 .)
    LOGICALOR       shift and go to state 60


state 140

    (14) top_stmt -> KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in . for_range opt_do top_compstmt KEYWORD_end
    (32) for_range -> . INT_CONSTANTS DOUBLEDOT INT_CONSTANTS
    (33) for_range -> . INT_CONSTANTS TRIPLEDOT INT_CONSTANTS
    (34) for_range -> . VARIABLES
    (35) for_range -> . CONSTANTS

    INT_CONSTANTS   shift and go to state 148
    VARIABLES       shift and go to state 149
    CONSTANTS       shift and go to state 151

    for_range                      shift and go to state 150

state 141

    (26) multi_var -> multi_var COMMA VARIABLES .

    COMMA           reduce using rule 26 (multi_var -> multi_var COMMA VARIABLES .)
    CLOSE_PAREN     reduce using rule 26 (multi_var -> multi_var COMMA VARIABLES .)
    KEYWORD_in      reduce using rule 26 (multi_var -> multi_var COMMA VARIABLES .)


state 142

    (27) multi_var -> multi_var COMMA CONSTANTS .

    COMMA           reduce using rule 27 (multi_var -> multi_var COMMA CONSTANTS .)
    CLOSE_PAREN     reduce using rule 27 (multi_var -> multi_var COMMA CONSTANTS .)
    KEYWORD_in      reduce using rule 27 (multi_var -> multi_var COMMA CONSTANTS .)


state 143

    (47) expr1 -> expr3 QUESTION_MARK expr2 COLON . expr2
    (49) expr2 -> . expr7 DOUBLEDOT expr7
    (50) expr2 -> . expr7 TRIPLEDOT expr7
    (51) expr2 -> . expr3
    (66) expr7 -> . expr7 BITXOR expr8
    (67) expr7 -> . expr7 PIPE expr8
    (68) expr7 -> . expr8
    (52) expr3 -> . expr3 LOGICALOR expr4
    (53) expr3 -> . expr4
    (69) expr8 -> . expr8 BITAND expr9
    (70) expr8 -> . expr9
    (54) expr4 -> . expr4 LOGICALAND expr5
    (55) expr4 -> . expr5
    (71) expr9 -> . expr9 SHIFTL expr10
    (72) expr9 -> . expr9 SHIFTR expr10
    (73) expr9 -> . expr10
    (56) expr5 -> . expr6 IFF expr6
    (57) expr5 -> . expr6 DOUBLEEQUAL expr6
    (58) expr5 -> . expr6 TRIPLEEQUAL expr6
    (59) expr5 -> . expr6 NOTEQUAL expr6
    (60) expr5 -> . expr6
    (74) expr10 -> . expr10 PLUS expr11
    (75) expr10 -> . expr10 MINUS expr11
    (76) expr10 -> . expr11
    (61) expr6 -> . expr7 LESSEQUAL expr7
    (62) expr6 -> . expr7 LESS expr7
    (63) expr6 -> . expr7 GREATER expr7
    (64) expr6 -> . expr7 GREATEREQUAL expr7
    (65) expr6 -> . expr7
    (77) expr11 -> . expr11 MULTIPLY expr12
    (78) expr11 -> . expr11 DIV expr12
    (79) expr11 -> . expr11 MOD expr12
    (80) expr11 -> . expr12
    (81) expr12 -> . expr13 DOUBLESTAR expr12
    (82) expr12 -> . expr13
    (83) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (84) expr13 -> . uexpr INT_CONSTANTS
    (85) expr13 -> . uexpr FLOAT_CONSTANTS
    (86) expr13 -> . CONSTANTS
    (87) expr13 -> . VARIABLES
    (88) uexpr -> . none
    (89) uexpr -> . PLUS
    (90) uexpr -> . MINUS
    (91) uexpr -> . BITNOT
    (92) uexpr -> . BITCOMP
    (99) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 35
    VARIABLES       shift and go to state 21
    PLUS            shift and go to state 29
    MINUS           shift and go to state 20
    BITNOT          shift and go to state 34
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 99 (none -> .)
    FLOAT_CONSTANTS reduce using rule 99 (none -> .)

    uexpr                          shift and go to state 32
    none                           shift and go to state 33
    expr12                         shift and go to state 17
    expr13                         shift and go to state 19
    expr2                          shift and go to state 152
    expr3                          shift and go to state 130
    expr10                         shift and go to state 18
    expr7                          shift and go to state 54
    expr4                          shift and go to state 27
    expr5                          shift and go to state 28
    expr6                          shift and go to state 25
    expr8                          shift and go to state 30
    expr9                          shift and go to state 31
    expr11                         shift and go to state 36

state 144

    (19) elsif_tail -> KEYWORD_elsif expr3 . opt_then top_compstmt elsif_tail
    (52) expr3 -> expr3 . LOGICALOR expr4
    (20) opt_then -> . KEYWORD_then
    (21) opt_then -> . newline

    LOGICALOR       shift and go to state 60
    KEYWORD_then    shift and go to state 84
    newline         shift and go to state 83

    opt_then                       shift and go to state 153

state 145

    (17) opt_else_stmt -> none .

    KEYWORD_end     reduce using rule 17 (opt_else_stmt -> none .)


state 146

    (16) opt_else_stmt -> KEYWORD_else . top_compstmt
    (2) top_compstmt -> . top_stmts opt_terms
    (3) top_stmts -> . none
    (4) top_stmts -> . top_stmt
    (5) top_stmts -> . top_stmts terms top_stmt
    (99) none -> .
    (6) top_stmt -> . stmt
    (7) top_stmt -> . KEYWORD_if expr3 opt_then top_compstmt elsif_tail opt_else_stmt KEYWORD_end
    (8) top_stmt -> . KEYWORD_while expr3 opt_do top_compstmt KEYWORD_end
    (9) top_stmt -> . top_stmt KEYWORD_while expr3
    (10) top_stmt -> . KEYWORD_begin top_compstmt KEYWORD_end KEYWORD_while expr3
    (11) top_stmt -> . top_stmt KEYWORD_until expr3
    (12) top_stmt -> . KEYWORD_until expr3 opt_do top_compstmt KEYWORD_end
    (13) top_stmt -> . KEYWORD_begin top_compstmt KEYWORD_end KEYWORD_until expr3
    (14) top_stmt -> . KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do top_compstmt KEYWORD_end
    (15) stmt -> . expr
    (36) expr -> . mlhs EQUAL mrhs
    (37) mlhs -> . VARIABLES
    (38) mlhs -> . CONSTANTS

    DELIM           reduce using rule 99 (none -> .)
    newline         reduce using rule 99 (none -> .)
    KEYWORD_end     reduce using rule 99 (none -> .)
    KEYWORD_if      shift and go to state 3
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 7
    KEYWORD_until   shift and go to state 2
    KEYWORD_for     shift and go to state 11
    VARIABLES       shift and go to state 5
    CONSTANTS       shift and go to state 14

    none                           shift and go to state 12
    expr                           shift and go to state 13
    top_compstmt                   shift and go to state 154
    mlhs                           shift and go to state 1
    stmt                           shift and go to state 10
    top_stmts                      shift and go to state 8
    top_stmt                       shift and go to state 15

state 147

    (7) top_stmt -> KEYWORD_if expr3 opt_then top_compstmt elsif_tail opt_else_stmt . KEYWORD_end

    KEYWORD_end     shift and go to state 155


state 148

    (32) for_range -> INT_CONSTANTS . DOUBLEDOT INT_CONSTANTS
    (33) for_range -> INT_CONSTANTS . TRIPLEDOT INT_CONSTANTS

    DOUBLEDOT       shift and go to state 156
    TRIPLEDOT       shift and go to state 157


state 149

    (34) for_range -> VARIABLES .

    KEYWORD_do      reduce using rule 34 (for_range -> VARIABLES .)
    newline         reduce using rule 34 (for_range -> VARIABLES .)


state 150

    (14) top_stmt -> KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range . opt_do top_compstmt KEYWORD_end
    (22) opt_do -> . KEYWORD_do
    (23) opt_do -> . newline

    KEYWORD_do      shift and go to state 61
    newline         shift and go to state 59

    opt_do                         shift and go to state 158

state 151

    (35) for_range -> CONSTANTS .

    KEYWORD_do      reduce using rule 35 (for_range -> CONSTANTS .)
    newline         reduce using rule 35 (for_range -> CONSTANTS .)


state 152

    (47) expr1 -> expr3 QUESTION_MARK expr2 COLON expr2 .

    KEYWORD_while   reduce using rule 47 (expr1 -> expr3 QUESTION_MARK expr2 COLON expr2 .)
    KEYWORD_until   reduce using rule 47 (expr1 -> expr3 QUESTION_MARK expr2 COLON expr2 .)
    DELIM           reduce using rule 47 (expr1 -> expr3 QUESTION_MARK expr2 COLON expr2 .)
    newline         reduce using rule 47 (expr1 -> expr3 QUESTION_MARK expr2 COLON expr2 .)
    $end            reduce using rule 47 (expr1 -> expr3 QUESTION_MARK expr2 COLON expr2 .)
    KEYWORD_end     reduce using rule 47 (expr1 -> expr3 QUESTION_MARK expr2 COLON expr2 .)
    KEYWORD_elsif   reduce using rule 47 (expr1 -> expr3 QUESTION_MARK expr2 COLON expr2 .)
    KEYWORD_else    reduce using rule 47 (expr1 -> expr3 QUESTION_MARK expr2 COLON expr2 .)
    CLOSE_PAREN     reduce using rule 47 (expr1 -> expr3 QUESTION_MARK expr2 COLON expr2 .)


state 153

    (19) elsif_tail -> KEYWORD_elsif expr3 opt_then . top_compstmt elsif_tail
    (2) top_compstmt -> . top_stmts opt_terms
    (3) top_stmts -> . none
    (4) top_stmts -> . top_stmt
    (5) top_stmts -> . top_stmts terms top_stmt
    (99) none -> .
    (6) top_stmt -> . stmt
    (7) top_stmt -> . KEYWORD_if expr3 opt_then top_compstmt elsif_tail opt_else_stmt KEYWORD_end
    (8) top_stmt -> . KEYWORD_while expr3 opt_do top_compstmt KEYWORD_end
    (9) top_stmt -> . top_stmt KEYWORD_while expr3
    (10) top_stmt -> . KEYWORD_begin top_compstmt KEYWORD_end KEYWORD_while expr3
    (11) top_stmt -> . top_stmt KEYWORD_until expr3
    (12) top_stmt -> . KEYWORD_until expr3 opt_do top_compstmt KEYWORD_end
    (13) top_stmt -> . KEYWORD_begin top_compstmt KEYWORD_end KEYWORD_until expr3
    (14) top_stmt -> . KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do top_compstmt KEYWORD_end
    (15) stmt -> . expr
    (36) expr -> . mlhs EQUAL mrhs
    (37) mlhs -> . VARIABLES
    (38) mlhs -> . CONSTANTS

    DELIM           reduce using rule 99 (none -> .)
    newline         reduce using rule 99 (none -> .)
    KEYWORD_elsif   reduce using rule 99 (none -> .)
    KEYWORD_else    reduce using rule 99 (none -> .)
    KEYWORD_end     reduce using rule 99 (none -> .)
    KEYWORD_if      shift and go to state 3
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 7
    KEYWORD_until   shift and go to state 2
    KEYWORD_for     shift and go to state 11
    VARIABLES       shift and go to state 5
    CONSTANTS       shift and go to state 14

    none                           shift and go to state 12
    expr                           shift and go to state 13
    top_compstmt                   shift and go to state 159
    mlhs                           shift and go to state 1
    stmt                           shift and go to state 10
    top_stmts                      shift and go to state 8
    top_stmt                       shift and go to state 15

state 154

    (16) opt_else_stmt -> KEYWORD_else top_compstmt .

    KEYWORD_end     reduce using rule 16 (opt_else_stmt -> KEYWORD_else top_compstmt .)


state 155

    (7) top_stmt -> KEYWORD_if expr3 opt_then top_compstmt elsif_tail opt_else_stmt KEYWORD_end .

    KEYWORD_while   reduce using rule 7 (top_stmt -> KEYWORD_if expr3 opt_then top_compstmt elsif_tail opt_else_stmt KEYWORD_end .)
    KEYWORD_until   reduce using rule 7 (top_stmt -> KEYWORD_if expr3 opt_then top_compstmt elsif_tail opt_else_stmt KEYWORD_end .)
    DELIM           reduce using rule 7 (top_stmt -> KEYWORD_if expr3 opt_then top_compstmt elsif_tail opt_else_stmt KEYWORD_end .)
    newline         reduce using rule 7 (top_stmt -> KEYWORD_if expr3 opt_then top_compstmt elsif_tail opt_else_stmt KEYWORD_end .)
    KEYWORD_end     reduce using rule 7 (top_stmt -> KEYWORD_if expr3 opt_then top_compstmt elsif_tail opt_else_stmt KEYWORD_end .)
    KEYWORD_elsif   reduce using rule 7 (top_stmt -> KEYWORD_if expr3 opt_then top_compstmt elsif_tail opt_else_stmt KEYWORD_end .)
    KEYWORD_else    reduce using rule 7 (top_stmt -> KEYWORD_if expr3 opt_then top_compstmt elsif_tail opt_else_stmt KEYWORD_end .)
    $end            reduce using rule 7 (top_stmt -> KEYWORD_if expr3 opt_then top_compstmt elsif_tail opt_else_stmt KEYWORD_end .)


state 156

    (32) for_range -> INT_CONSTANTS DOUBLEDOT . INT_CONSTANTS

    INT_CONSTANTS   shift and go to state 160


state 157

    (33) for_range -> INT_CONSTANTS TRIPLEDOT . INT_CONSTANTS

    INT_CONSTANTS   shift and go to state 161


state 158

    (14) top_stmt -> KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do . top_compstmt KEYWORD_end
    (2) top_compstmt -> . top_stmts opt_terms
    (3) top_stmts -> . none
    (4) top_stmts -> . top_stmt
    (5) top_stmts -> . top_stmts terms top_stmt
    (99) none -> .
    (6) top_stmt -> . stmt
    (7) top_stmt -> . KEYWORD_if expr3 opt_then top_compstmt elsif_tail opt_else_stmt KEYWORD_end
    (8) top_stmt -> . KEYWORD_while expr3 opt_do top_compstmt KEYWORD_end
    (9) top_stmt -> . top_stmt KEYWORD_while expr3
    (10) top_stmt -> . KEYWORD_begin top_compstmt KEYWORD_end KEYWORD_while expr3
    (11) top_stmt -> . top_stmt KEYWORD_until expr3
    (12) top_stmt -> . KEYWORD_until expr3 opt_do top_compstmt KEYWORD_end
    (13) top_stmt -> . KEYWORD_begin top_compstmt KEYWORD_end KEYWORD_until expr3
    (14) top_stmt -> . KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do top_compstmt KEYWORD_end
    (15) stmt -> . expr
    (36) expr -> . mlhs EQUAL mrhs
    (37) mlhs -> . VARIABLES
    (38) mlhs -> . CONSTANTS

    DELIM           reduce using rule 99 (none -> .)
    newline         reduce using rule 99 (none -> .)
    KEYWORD_end     reduce using rule 99 (none -> .)
    KEYWORD_if      shift and go to state 3
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 7
    KEYWORD_until   shift and go to state 2
    KEYWORD_for     shift and go to state 11
    VARIABLES       shift and go to state 5
    CONSTANTS       shift and go to state 14

    none                           shift and go to state 12
    expr                           shift and go to state 13
    top_compstmt                   shift and go to state 162
    mlhs                           shift and go to state 1
    stmt                           shift and go to state 10
    top_stmts                      shift and go to state 8
    top_stmt                       shift and go to state 15

state 159

    (19) elsif_tail -> KEYWORD_elsif expr3 opt_then top_compstmt . elsif_tail
    (18) elsif_tail -> . none
    (19) elsif_tail -> . KEYWORD_elsif expr3 opt_then top_compstmt elsif_tail
    (99) none -> .

    KEYWORD_elsif   shift and go to state 135
    KEYWORD_else    reduce using rule 99 (none -> .)
    KEYWORD_end     reduce using rule 99 (none -> .)

    none                           shift and go to state 134
    elsif_tail                     shift and go to state 163

state 160

    (32) for_range -> INT_CONSTANTS DOUBLEDOT INT_CONSTANTS .

    KEYWORD_do      reduce using rule 32 (for_range -> INT_CONSTANTS DOUBLEDOT INT_CONSTANTS .)
    newline         reduce using rule 32 (for_range -> INT_CONSTANTS DOUBLEDOT INT_CONSTANTS .)


state 161

    (33) for_range -> INT_CONSTANTS TRIPLEDOT INT_CONSTANTS .

    KEYWORD_do      reduce using rule 33 (for_range -> INT_CONSTANTS TRIPLEDOT INT_CONSTANTS .)
    newline         reduce using rule 33 (for_range -> INT_CONSTANTS TRIPLEDOT INT_CONSTANTS .)


state 162

    (14) top_stmt -> KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do top_compstmt . KEYWORD_end

    KEYWORD_end     shift and go to state 164


state 163

    (19) elsif_tail -> KEYWORD_elsif expr3 opt_then top_compstmt elsif_tail .

    KEYWORD_else    reduce using rule 19 (elsif_tail -> KEYWORD_elsif expr3 opt_then top_compstmt elsif_tail .)
    KEYWORD_end     reduce using rule 19 (elsif_tail -> KEYWORD_elsif expr3 opt_then top_compstmt elsif_tail .)


state 164

    (14) top_stmt -> KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do top_compstmt KEYWORD_end .

    KEYWORD_while   reduce using rule 14 (top_stmt -> KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do top_compstmt KEYWORD_end .)
    KEYWORD_until   reduce using rule 14 (top_stmt -> KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do top_compstmt KEYWORD_end .)
    DELIM           reduce using rule 14 (top_stmt -> KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do top_compstmt KEYWORD_end .)
    newline         reduce using rule 14 (top_stmt -> KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do top_compstmt KEYWORD_end .)
    KEYWORD_end     reduce using rule 14 (top_stmt -> KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do top_compstmt KEYWORD_end .)
    KEYWORD_elsif   reduce using rule 14 (top_stmt -> KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do top_compstmt KEYWORD_end .)
    KEYWORD_else    reduce using rule 14 (top_stmt -> KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do top_compstmt KEYWORD_end .)
    $end            reduce using rule 14 (top_stmt -> KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do top_compstmt KEYWORD_end .)

