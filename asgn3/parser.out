Created by PLY version 3.7 (http://www.dabeaz.com/ply)

Unused terminals:

    KEYWORD_unless
    BLOCK_END
    KEYWORD___ENCODING__
    BITANDEQUAL
    SQUOTES
    KEYWORD_END
    KEYWORD_self
    KEYWORD_when
    MINUSEQUAL
    KEYWORD_nil
    OR
    SIGIL_AT
    DIVEQUAL
    KEYWORD_or
    LOGICALANDEQUAL
    KEYWORD_retry
    KEYWORD_undef
    SIGIL_DOLLAR
    DOUBLE_COLON
    DOUBLESTAREQUAL
    KEYWORD_false
    KEYWORD_definedQ
    SHIFTLEQUAL
    AND
    NOT
    KEYWORD_not
    KEYWORD_yield
    DOT
    KEYWORD_ensure
    MODEQUAL
    QUESTIONCOLON
    KEYWORD_true
    LOGICALOREQUAL
    KEYWORD___END__
    PLUSEQUAL
    KEYWORD_super
    KEYWORD_alias
    MULTIPLYEQUAL
    SHIFTREQUAL
    KEYWORD___LINE__
    KEYWORD_BEGIN
    BLOCK_BEGIN
    KEYWORD_class
    DQUOTES
    PIPEEQUAL
    KEYWORD_and
    KEYWORD___FILE__
    SIGIL_DOUBLE_AT
    KEYWORD_rescue
    KEYWORD_module
    DOLLAR
    BACK_SLASH
    KEYWORD_case
    BITXOREQUAL

Grammar

Rule 0     S' -> program
Rule 1     program -> top_top_compstmt
Rule 2     top_top_compstmt -> statements opt_terms
Rule 3     statements -> statement
Rule 4     statements -> statements terms statement
Rule 5     statements -> none
Rule 6     statement -> top_compstmt
Rule 7     statement -> func_defn
Rule 8     func_defn -> KEYWORD_def fname opt_oparen arguments opt_cparen func_stmts opt_terms KEYWORD_end
Rule 9     fname -> VARIABLES
Rule 10    fname -> CONSTANTS
Rule 11    arguments -> arguments COMMA VARIABLES
Rule 12    arguments -> arguments COMMA CONSTANTS
Rule 13    arguments -> arguments COMMA func_arg_expr
Rule 14    arguments -> VARIABLES
Rule 15    arguments -> CONSTANTS
Rule 16    arguments -> func_arg_expr
Rule 17    func_arg_expr -> VARIABLES EQUAL primary
Rule 18    func_arg_expr -> CONSTANTS EQUAL primary
Rule 19    top_compstmt -> top_stmts
Rule 20    top_stmts -> top_stmt
Rule 21    top_stmt -> stmt
Rule 22    top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
Rule 23    top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
Rule 24    top_stmt -> top_stmt KEYWORD_while expr3
Rule 25    top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
Rule 26    top_stmt -> top_stmt KEYWORD_until expr3
Rule 27    top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
Rule 28    top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
Rule 29    top_stmt -> KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
Rule 30    gen_stmts -> top_stmt
Rule 31    gen_stmts -> gen_stmts terms top_stmt
Rule 32    gen_stmts -> none
Rule 33    stmt -> expr
Rule 34    stmt -> expr1
Rule 35    stmt -> puts_stmt
Rule 36    stmt -> loop_stmt
Rule 37    stmt -> exit_stmt
Rule 38    stmt -> func_call_stmt
Rule 39    func_call_stmt -> fname opt_oparen func_ret_arg opt_cparen
Rule 40    func_call_stmt -> MLHS EQUAL fname opt_oparen func_ret_arg opt_cparen
Rule 41    loop_stmt -> KEYWORD_break
Rule 42    loop_stmt -> KEYWORD_next
Rule 43    loop_stmt -> KEYWORD_redo
Rule 44    exit_stmt -> KEYWORD_exit
Rule 45    puts_stmt -> KEYWORD_puts mrhs
Rule 46    puts_stmt -> KEYWORD_puts expr
Rule 47    func_stmts -> func_stmt
Rule 48    func_stmts -> func_stmts terms func_stmt
Rule 49    func_stmts -> none
Rule 50    func_stmt -> top_stmt
Rule 51    func_stmt -> KEYWORD_return func_ret_arg
Rule 52    func_ret_arg -> func_arg_expr
Rule 53    func_ret_arg -> primary
Rule 54    func_ret_arg -> func_ret_arg COMMA func_arg_expr
Rule 55    func_ret_arg -> func_ret_arg COMMA primary
Rule 56    opt_else_stmt -> KEYWORD_else gen_stmts
Rule 57    opt_else_stmt -> none
Rule 58    elsif_tail -> none
Rule 59    elsif_tail -> KEYWORD_elsif expr3 opt_then gen_stmts elsif_tail
Rule 60    opt_then -> KEYWORD_then
Rule 61    opt_then -> newline
Rule 62    opt_do -> KEYWORD_do
Rule 63    opt_do -> newline
Rule 64    multi_var -> VARIABLES
Rule 65    multi_var -> CONSTANTS
Rule 66    multi_var -> array
Rule 67    multi_var -> multi_var COMMA VARIABLES
Rule 68    multi_var -> multi_var COMMA CONSTANTS
Rule 69    opt_oparen -> OPEN_PAREN
Rule 70    opt_oparen -> none
Rule 71    opt_cparen -> CLOSE_PAREN
Rule 72    opt_cparen -> none
Rule 73    for_range -> INT_CONSTANTS DOUBLEDOT INT_CONSTANTS
Rule 74    for_range -> INT_CONSTANTS TRIPLEDOT INT_CONSTANTS
Rule 75    for_range -> VARIABLES
Rule 76    for_range -> array
Rule 77    for_range -> CONSTANTS
Rule 78    expr -> MLHS EQUAL MRHS
Rule 79    MLHS -> mlhs
Rule 80    MLHS -> MLHS COMMA mlhs
Rule 81    MRHS -> mrhs
Rule 82    MRHS -> MRHS COMMA mrhs
Rule 83    mlhs -> VARIABLES
Rule 84    mlhs -> CONSTANTS
Rule 85    mlhs -> array
Rule 86    mrhs -> expr1
Rule 87    mrhs -> str_expr
Rule 88    mrhs -> KEYWORD_gets
Rule 89    mrhs -> OPEN_BRACKET func_ret_arg CLOSE_BRACKET
Rule 90    str_expr -> str_expr PLUS STRING_CONSTANTS
Rule 91    str_expr -> STRING_CONSTANTS
Rule 92    primary -> INT_CONSTANTS
Rule 93    primary -> FLOAT_CONSTANTS
Rule 94    primary -> STRING_CONSTANTS
Rule 95    primary -> CHAR_CONSTANTS
Rule 96    primary -> BOOLEAN_CONSTANTS
Rule 97    primary -> CONSTANTS
Rule 98    primary -> VARIABLES
Rule 99    primary -> array
Rule 100   expr1 -> expr3 QUESTION_MARK expr2 COLON expr2
Rule 101   expr1 -> expr2
Rule 102   expr2 -> expr7 DOUBLEDOT expr7
Rule 103   expr2 -> expr7 TRIPLEDOT expr7
Rule 104   expr2 -> expr3
Rule 105   expr3 -> expr3 LOGICALOR expr4
Rule 106   expr3 -> expr4
Rule 107   expr4 -> expr4 LOGICALAND expr5
Rule 108   expr4 -> expr5
Rule 109   expr5 -> expr6 IFF expr6
Rule 110   expr5 -> expr6 DOUBLEEQUAL expr6
Rule 111   expr5 -> expr6 TRIPLEEQUAL expr6
Rule 112   expr5 -> expr6 NOTEQUAL expr6
Rule 113   expr5 -> expr6
Rule 114   expr6 -> expr7 LESSEQUAL expr7
Rule 115   expr6 -> expr7 LESS expr7
Rule 116   expr6 -> expr7 GREATER expr7
Rule 117   expr6 -> expr7 GREATEREQUAL expr7
Rule 118   expr6 -> expr7
Rule 119   expr6 -> BOOLEAN_CONSTANTS
Rule 120   expr7 -> expr7 BITXOR expr8
Rule 121   expr7 -> expr7 PIPE expr8
Rule 122   expr7 -> expr8
Rule 123   expr8 -> expr8 BITAND expr9
Rule 124   expr8 -> expr9
Rule 125   expr9 -> expr9 SHIFTL expr10
Rule 126   expr9 -> expr9 SHIFTR expr10
Rule 127   expr9 -> expr10
Rule 128   expr10 -> expr10 PLUS expr11
Rule 129   expr10 -> expr10 MINUS expr11
Rule 130   expr10 -> expr11
Rule 131   expr11 -> expr11 MULTIPLY expr12
Rule 132   expr11 -> expr11 DIV expr12
Rule 133   expr11 -> expr11 MOD expr12
Rule 134   expr11 -> expr12
Rule 135   expr12 -> expr13 DOUBLESTAR expr12
Rule 136   expr12 -> expr13
Rule 137   expr13 -> OPEN_PAREN expr1 CLOSE_PAREN
Rule 138   expr13 -> uexpr INT_CONSTANTS
Rule 139   expr13 -> uexpr FLOAT_CONSTANTS
Rule 140   expr13 -> CONSTANTS
Rule 141   expr13 -> VARIABLES
Rule 142   expr13 -> array
Rule 143   array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
Rule 144   array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
Rule 145   array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
Rule 146   uexpr -> none
Rule 147   uexpr -> PLUS
Rule 148   uexpr -> MINUS
Rule 149   uexpr -> BITNOT
Rule 150   uexpr -> BITCOMP
Rule 151   opt_terms -> none
Rule 152   opt_terms -> terms
Rule 153   terms -> term
Rule 154   terms -> terms term
Rule 155   term -> DELIM
Rule 156   term -> newline
Rule 157   none -> <empty>

Terminals, with rules where they appear

AND                  : 
BACK_SLASH           : 
BITAND               : 123
BITANDEQUAL          : 
BITCOMP              : 150
BITNOT               : 149
BITXOR               : 120
BITXOREQUAL          : 
BLOCK_BEGIN          : 
BLOCK_END            : 
BOOLEAN_CONSTANTS    : 96 119
CHAR_CONSTANTS       : 95
CLOSE_BRACKET        : 89 143 144 145
CLOSE_PAREN          : 71 137
COLON                : 100
COMMA                : 11 12 13 54 55 67 68 80 82
CONSTANTS            : 10 12 15 18 65 68 77 84 97 140
DELIM                : 155
DIV                  : 132
DIVEQUAL             : 
DOLLAR               : 
DOT                  : 
DOUBLEDOT            : 73 102 144
DOUBLEEQUAL          : 110
DOUBLESTAR           : 135
DOUBLESTAREQUAL      : 
DOUBLE_COLON         : 
DQUOTES              : 
EQUAL                : 17 18 40 78
FLOAT_CONSTANTS      : 93 139
GREATER              : 116
GREATEREQUAL         : 117
IFF                  : 109
INT_CONSTANTS        : 73 73 74 74 92 138
KEYWORD_BEGIN        : 
KEYWORD_END          : 
KEYWORD___ENCODING__ : 
KEYWORD___END__      : 
KEYWORD___FILE__     : 
KEYWORD___LINE__     : 
KEYWORD_alias        : 
KEYWORD_and          : 
KEYWORD_begin        : 25 28
KEYWORD_break        : 41
KEYWORD_case         : 
KEYWORD_class        : 
KEYWORD_def          : 8
KEYWORD_definedQ     : 
KEYWORD_do           : 62
KEYWORD_else         : 56
KEYWORD_elsif        : 59
KEYWORD_end          : 8 22 23 25 27 28 29
KEYWORD_ensure       : 
KEYWORD_exit         : 44
KEYWORD_false        : 
KEYWORD_for          : 29
KEYWORD_gets         : 88
KEYWORD_if           : 22
KEYWORD_in           : 29
KEYWORD_module       : 
KEYWORD_next         : 42
KEYWORD_nil          : 
KEYWORD_not          : 
KEYWORD_or           : 
KEYWORD_puts         : 45 46
KEYWORD_redo         : 43
KEYWORD_rescue       : 
KEYWORD_retry        : 
KEYWORD_return       : 51
KEYWORD_self         : 
KEYWORD_super        : 
KEYWORD_then         : 60
KEYWORD_true         : 
KEYWORD_undef        : 
KEYWORD_unless       : 
KEYWORD_until        : 26 27 28
KEYWORD_when         : 
KEYWORD_while        : 23 24 25
KEYWORD_yield        : 
LESS                 : 115
LESSEQUAL            : 114
LOGICALAND           : 107
LOGICALANDEQUAL      : 
LOGICALOR            : 105
LOGICALOREQUAL       : 
MINUS                : 129 148
MINUSEQUAL           : 
MOD                  : 133
MODEQUAL             : 
MULTIPLY             : 131
MULTIPLYEQUAL        : 
NOT                  : 
NOTEQUAL             : 112
OPEN_BRACKET         : 89 143 144 145
OPEN_PAREN           : 69 137
OR                   : 
PIPE                 : 121
PIPEEQUAL            : 
PLUS                 : 90 128 147
PLUSEQUAL            : 
QUESTIONCOLON        : 
QUESTION_MARK        : 100
SHIFTL               : 125
SHIFTLEQUAL          : 
SHIFTR               : 126
SHIFTREQUAL          : 
SIGIL_AT             : 
SIGIL_DOLLAR         : 
SIGIL_DOUBLE_AT      : 
SQUOTES              : 
STRING_CONSTANTS     : 90 91 94
TRIPLEDOT            : 74 103 145
TRIPLEEQUAL          : 111
VARIABLES            : 9 11 14 17 64 67 75 83 98 141 143 144 145
error                : 
newline              : 61 63 156

Nonterminals, with rules where they appear

MLHS                 : 40 78 80
MRHS                 : 78 82
arguments            : 8 11 12 13
array                : 66 76 85 99 142
elsif_tail           : 22 59
exit_stmt            : 37
expr                 : 33 46
expr1                : 34 86 137
expr10               : 125 126 127 128 129
expr11               : 128 129 130 131 132 133
expr12               : 131 132 133 134 135
expr13               : 135 136
expr2                : 100 100 101
expr3                : 22 23 24 25 26 27 28 59 100 104 105
expr4                : 105 106 107
expr5                : 107 108
expr6                : 109 109 110 110 111 111 112 112 113
expr7                : 102 102 103 103 114 114 115 115 116 116 117 117 118 120 121 143 144 144 145 145
expr8                : 120 121 122 123
expr9                : 123 124 125 126
fname                : 8 39 40
for_range            : 29
func_arg_expr        : 13 16 52 54
func_call_stmt       : 38
func_defn            : 7
func_ret_arg         : 39 40 51 54 55 89
func_stmt            : 47 48
func_stmts           : 8 48
gen_stmts            : 22 23 25 27 28 29 31 56 59
loop_stmt            : 36
mlhs                 : 79 80
mrhs                 : 45 81 82
multi_var            : 29 67 68
none                 : 5 32 49 57 58 70 72 146 151
opt_cparen           : 8 29 39 40
opt_do               : 23 27 29
opt_else_stmt        : 22
opt_oparen           : 8 29 39 40
opt_terms            : 2 8 22 23 25 27 28 29
opt_then             : 22 59
primary              : 17 18 53 55
program              : 0
puts_stmt            : 35
statement            : 3 4
statements           : 2 4
stmt                 : 21
str_expr             : 87 90
term                 : 153 154
terms                : 4 31 48 152 154
top_compstmt         : 6
top_stmt             : 20 24 26 30 31 50
top_stmts            : 19
top_top_compstmt     : 1
uexpr                : 138 139

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . top_top_compstmt
    (2) top_top_compstmt -> . statements opt_terms
    (3) statements -> . statement
    (4) statements -> . statements terms statement
    (5) statements -> . none
    (6) statement -> . top_compstmt
    (7) statement -> . func_defn
    (157) none -> .
    (19) top_compstmt -> . top_stmts
    (8) func_defn -> . KEYWORD_def fname opt_oparen arguments opt_cparen func_stmts opt_terms KEYWORD_end
    (20) top_stmts -> . top_stmt
    (21) top_stmt -> . stmt
    (22) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (23) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (24) top_stmt -> . top_stmt KEYWORD_while expr3
    (25) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (26) top_stmt -> . top_stmt KEYWORD_until expr3
    (27) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (28) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (29) top_stmt -> . KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (33) stmt -> . expr
    (34) stmt -> . expr1
    (35) stmt -> . puts_stmt
    (36) stmt -> . loop_stmt
    (37) stmt -> . exit_stmt
    (38) stmt -> . func_call_stmt
    (78) expr -> . MLHS EQUAL MRHS
    (100) expr1 -> . expr3 QUESTION_MARK expr2 COLON expr2
    (101) expr1 -> . expr2
    (45) puts_stmt -> . KEYWORD_puts mrhs
    (46) puts_stmt -> . KEYWORD_puts expr
    (41) loop_stmt -> . KEYWORD_break
    (42) loop_stmt -> . KEYWORD_next
    (43) loop_stmt -> . KEYWORD_redo
    (44) exit_stmt -> . KEYWORD_exit
    (39) func_call_stmt -> . fname opt_oparen func_ret_arg opt_cparen
    (40) func_call_stmt -> . MLHS EQUAL fname opt_oparen func_ret_arg opt_cparen
    (79) MLHS -> . mlhs
    (80) MLHS -> . MLHS COMMA mlhs
    (105) expr3 -> . expr3 LOGICALOR expr4
    (106) expr3 -> . expr4
    (102) expr2 -> . expr7 DOUBLEDOT expr7
    (103) expr2 -> . expr7 TRIPLEDOT expr7
    (104) expr2 -> . expr3
    (9) fname -> . VARIABLES
    (10) fname -> . CONSTANTS
    (83) mlhs -> . VARIABLES
    (84) mlhs -> . CONSTANTS
    (85) mlhs -> . array
    (107) expr4 -> . expr4 LOGICALAND expr5
    (108) expr4 -> . expr5
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (109) expr5 -> . expr6 IFF expr6
    (110) expr5 -> . expr6 DOUBLEEQUAL expr6
    (111) expr5 -> . expr6 TRIPLEEQUAL expr6
    (112) expr5 -> . expr6 NOTEQUAL expr6
    (113) expr5 -> . expr6
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (114) expr6 -> . expr7 LESSEQUAL expr7
    (115) expr6 -> . expr7 LESS expr7
    (116) expr6 -> . expr7 GREATER expr7
    (117) expr6 -> . expr7 GREATEREQUAL expr7
    (118) expr6 -> . expr7
    (119) expr6 -> . BOOLEAN_CONSTANTS
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP

    DELIM           reduce using rule 157 (none -> .)
    newline         reduce using rule 157 (none -> .)
    $end            reduce using rule 157 (none -> .)
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)
    KEYWORD_def     shift and go to state 21
    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 37
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 52
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 47
    KEYWORD_next    shift and go to state 30
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    VARIABLES       shift and go to state 28
    CONSTANTS       shift and go to state 22
    BOOLEAN_CONSTANTS shift and go to state 12
    OPEN_PAREN      shift and go to state 5
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29

    statements                     shift and go to state 24
    mlhs                           shift and go to state 2
    func_defn                      shift and go to state 36
    puts_stmt                      shift and go to state 19
    expr11                         shift and go to state 15
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    top_stmts                      shift and go to state 18
    array                          shift and go to state 26
    expr2                          shift and go to state 39
    expr3                          shift and go to state 40
    program                        shift and go to state 6
    expr6                          shift and go to state 42
    fname                          shift and go to state 43
    expr5                          shift and go to state 44
    func_call_stmt                 shift and go to state 32
    expr8                          shift and go to state 45
    expr9                          shift and go to state 46
    expr4                          shift and go to state 10
    statement                      shift and go to state 31
    exit_stmt                      shift and go to state 48
    top_compstmt                   shift and go to state 49
    MLHS                           shift and go to state 50
    stmt                           shift and go to state 20
    expr7                          shift and go to state 8
    loop_stmt                      shift and go to state 9
    uexpr                          shift and go to state 11
    none                           shift and go to state 34
    expr                           shift and go to state 35
    top_top_compstmt               shift and go to state 51
    expr10                         shift and go to state 14
    expr1                          shift and go to state 41
    top_stmt                       shift and go to state 13

state 1

    (43) loop_stmt -> KEYWORD_redo .

    KEYWORD_while   reduce using rule 43 (loop_stmt -> KEYWORD_redo .)
    KEYWORD_until   reduce using rule 43 (loop_stmt -> KEYWORD_redo .)
    DELIM           reduce using rule 43 (loop_stmt -> KEYWORD_redo .)
    newline         reduce using rule 43 (loop_stmt -> KEYWORD_redo .)
    KEYWORD_elsif   reduce using rule 43 (loop_stmt -> KEYWORD_redo .)
    KEYWORD_else    reduce using rule 43 (loop_stmt -> KEYWORD_redo .)
    KEYWORD_end     reduce using rule 43 (loop_stmt -> KEYWORD_redo .)
    $end            reduce using rule 43 (loop_stmt -> KEYWORD_redo .)


state 2

    (79) MLHS -> mlhs .

    EQUAL           reduce using rule 79 (MLHS -> mlhs .)
    COMMA           reduce using rule 79 (MLHS -> mlhs .)


state 3

    (148) uexpr -> MINUS .

    INT_CONSTANTS   reduce using rule 148 (uexpr -> MINUS .)
    FLOAT_CONSTANTS reduce using rule 148 (uexpr -> MINUS .)


state 4

    (23) top_stmt -> KEYWORD_while . expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (105) expr3 -> . expr3 LOGICALOR expr4
    (106) expr3 -> . expr4
    (107) expr4 -> . expr4 LOGICALAND expr5
    (108) expr4 -> . expr5
    (109) expr5 -> . expr6 IFF expr6
    (110) expr5 -> . expr6 DOUBLEEQUAL expr6
    (111) expr5 -> . expr6 TRIPLEEQUAL expr6
    (112) expr5 -> . expr6 NOTEQUAL expr6
    (113) expr5 -> . expr6
    (114) expr6 -> . expr7 LESSEQUAL expr7
    (115) expr6 -> . expr7 LESS expr7
    (116) expr6 -> . expr7 GREATER expr7
    (117) expr6 -> . expr7 GREATEREQUAL expr7
    (118) expr6 -> . expr7
    (119) expr6 -> . BOOLEAN_CONSTANTS
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (157) none -> .

    BOOLEAN_CONSTANTS shift and go to state 12
    OPEN_PAREN      shift and go to state 5
    CONSTANTS       shift and go to state 58
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    uexpr                          shift and go to state 11
    none                           shift and go to state 56
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr9                          shift and go to state 46
    expr3                          shift and go to state 54
    expr6                          shift and go to state 42
    expr7                          shift and go to state 55
    expr4                          shift and go to state 10
    expr5                          shift and go to state 44
    expr10                         shift and go to state 14
    expr8                          shift and go to state 45
    array                          shift and go to state 57
    expr11                         shift and go to state 15

state 5

    (137) expr13 -> OPEN_PAREN . expr1 CLOSE_PAREN
    (100) expr1 -> . expr3 QUESTION_MARK expr2 COLON expr2
    (101) expr1 -> . expr2
    (105) expr3 -> . expr3 LOGICALOR expr4
    (106) expr3 -> . expr4
    (102) expr2 -> . expr7 DOUBLEDOT expr7
    (103) expr2 -> . expr7 TRIPLEDOT expr7
    (104) expr2 -> . expr3
    (107) expr4 -> . expr4 LOGICALAND expr5
    (108) expr4 -> . expr5
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (109) expr5 -> . expr6 IFF expr6
    (110) expr5 -> . expr6 DOUBLEEQUAL expr6
    (111) expr5 -> . expr6 TRIPLEEQUAL expr6
    (112) expr5 -> . expr6 NOTEQUAL expr6
    (113) expr5 -> . expr6
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (114) expr6 -> . expr7 LESSEQUAL expr7
    (115) expr6 -> . expr7 LESS expr7
    (116) expr6 -> . expr7 GREATER expr7
    (117) expr6 -> . expr7 GREATEREQUAL expr7
    (118) expr6 -> . expr7
    (119) expr6 -> . BOOLEAN_CONSTANTS
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (157) none -> .

    BOOLEAN_CONSTANTS shift and go to state 12
    OPEN_PAREN      shift and go to state 5
    CONSTANTS       shift and go to state 58
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    uexpr                          shift and go to state 11
    none                           shift and go to state 56
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr2                          shift and go to state 39
    expr3                          shift and go to state 40
    expr1                          shift and go to state 59
    expr6                          shift and go to state 42
    expr7                          shift and go to state 8
    expr4                          shift and go to state 10
    expr5                          shift and go to state 44
    expr10                         shift and go to state 14
    expr8                          shift and go to state 45
    expr9                          shift and go to state 46
    array                          shift and go to state 57
    expr11                         shift and go to state 15

state 6

    (0) S' -> program .



state 7

    (147) uexpr -> PLUS .

    INT_CONSTANTS   reduce using rule 147 (uexpr -> PLUS .)
    FLOAT_CONSTANTS reduce using rule 147 (uexpr -> PLUS .)


state 8

    (102) expr2 -> expr7 . DOUBLEDOT expr7
    (103) expr2 -> expr7 . TRIPLEDOT expr7
    (120) expr7 -> expr7 . BITXOR expr8
    (121) expr7 -> expr7 . PIPE expr8
    (114) expr6 -> expr7 . LESSEQUAL expr7
    (115) expr6 -> expr7 . LESS expr7
    (116) expr6 -> expr7 . GREATER expr7
    (117) expr6 -> expr7 . GREATEREQUAL expr7
    (118) expr6 -> expr7 .

    DOUBLEDOT       shift and go to state 60
    TRIPLEDOT       shift and go to state 62
    BITXOR          shift and go to state 66
    PIPE            shift and go to state 65
    LESSEQUAL       shift and go to state 67
    LESS            shift and go to state 64
    GREATER         shift and go to state 63
    GREATEREQUAL    shift and go to state 61
    IFF             reduce using rule 118 (expr6 -> expr7 .)
    DOUBLEEQUAL     reduce using rule 118 (expr6 -> expr7 .)
    TRIPLEEQUAL     reduce using rule 118 (expr6 -> expr7 .)
    NOTEQUAL        reduce using rule 118 (expr6 -> expr7 .)
    LOGICALAND      reduce using rule 118 (expr6 -> expr7 .)
    LOGICALOR       reduce using rule 118 (expr6 -> expr7 .)
    COLON           reduce using rule 118 (expr6 -> expr7 .)
    QUESTION_MARK   reduce using rule 118 (expr6 -> expr7 .)
    KEYWORD_while   reduce using rule 118 (expr6 -> expr7 .)
    KEYWORD_until   reduce using rule 118 (expr6 -> expr7 .)
    DELIM           reduce using rule 118 (expr6 -> expr7 .)
    newline         reduce using rule 118 (expr6 -> expr7 .)
    $end            reduce using rule 118 (expr6 -> expr7 .)
    KEYWORD_end     reduce using rule 118 (expr6 -> expr7 .)
    KEYWORD_elsif   reduce using rule 118 (expr6 -> expr7 .)
    KEYWORD_else    reduce using rule 118 (expr6 -> expr7 .)
    CLOSE_PAREN     reduce using rule 118 (expr6 -> expr7 .)
    COMMA           reduce using rule 118 (expr6 -> expr7 .)


state 9

    (36) stmt -> loop_stmt .

    KEYWORD_while   reduce using rule 36 (stmt -> loop_stmt .)
    KEYWORD_until   reduce using rule 36 (stmt -> loop_stmt .)
    DELIM           reduce using rule 36 (stmt -> loop_stmt .)
    newline         reduce using rule 36 (stmt -> loop_stmt .)
    KEYWORD_end     reduce using rule 36 (stmt -> loop_stmt .)
    KEYWORD_elsif   reduce using rule 36 (stmt -> loop_stmt .)
    KEYWORD_else    reduce using rule 36 (stmt -> loop_stmt .)
    $end            reduce using rule 36 (stmt -> loop_stmt .)


state 10

    (106) expr3 -> expr4 .
    (107) expr4 -> expr4 . LOGICALAND expr5

    QUESTION_MARK   reduce using rule 106 (expr3 -> expr4 .)
    LOGICALOR       reduce using rule 106 (expr3 -> expr4 .)
    KEYWORD_while   reduce using rule 106 (expr3 -> expr4 .)
    KEYWORD_until   reduce using rule 106 (expr3 -> expr4 .)
    DELIM           reduce using rule 106 (expr3 -> expr4 .)
    newline         reduce using rule 106 (expr3 -> expr4 .)
    KEYWORD_end     reduce using rule 106 (expr3 -> expr4 .)
    KEYWORD_then    reduce using rule 106 (expr3 -> expr4 .)
    $end            reduce using rule 106 (expr3 -> expr4 .)
    CLOSE_PAREN     reduce using rule 106 (expr3 -> expr4 .)
    KEYWORD_elsif   reduce using rule 106 (expr3 -> expr4 .)
    KEYWORD_else    reduce using rule 106 (expr3 -> expr4 .)
    COMMA           reduce using rule 106 (expr3 -> expr4 .)
    KEYWORD_do      reduce using rule 106 (expr3 -> expr4 .)
    COLON           reduce using rule 106 (expr3 -> expr4 .)
    LOGICALAND      shift and go to state 68


state 11

    (138) expr13 -> uexpr . INT_CONSTANTS
    (139) expr13 -> uexpr . FLOAT_CONSTANTS

    INT_CONSTANTS   shift and go to state 69
    FLOAT_CONSTANTS shift and go to state 70


state 12

    (119) expr6 -> BOOLEAN_CONSTANTS .

    IFF             reduce using rule 119 (expr6 -> BOOLEAN_CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 119 (expr6 -> BOOLEAN_CONSTANTS .)
    TRIPLEEQUAL     reduce using rule 119 (expr6 -> BOOLEAN_CONSTANTS .)
    NOTEQUAL        reduce using rule 119 (expr6 -> BOOLEAN_CONSTANTS .)
    LOGICALAND      reduce using rule 119 (expr6 -> BOOLEAN_CONSTANTS .)
    LOGICALOR       reduce using rule 119 (expr6 -> BOOLEAN_CONSTANTS .)
    KEYWORD_then    reduce using rule 119 (expr6 -> BOOLEAN_CONSTANTS .)
    newline         reduce using rule 119 (expr6 -> BOOLEAN_CONSTANTS .)
    KEYWORD_while   reduce using rule 119 (expr6 -> BOOLEAN_CONSTANTS .)
    KEYWORD_until   reduce using rule 119 (expr6 -> BOOLEAN_CONSTANTS .)
    DELIM           reduce using rule 119 (expr6 -> BOOLEAN_CONSTANTS .)
    $end            reduce using rule 119 (expr6 -> BOOLEAN_CONSTANTS .)
    KEYWORD_end     reduce using rule 119 (expr6 -> BOOLEAN_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 119 (expr6 -> BOOLEAN_CONSTANTS .)
    KEYWORD_else    reduce using rule 119 (expr6 -> BOOLEAN_CONSTANTS .)
    QUESTION_MARK   reduce using rule 119 (expr6 -> BOOLEAN_CONSTANTS .)
    KEYWORD_do      reduce using rule 119 (expr6 -> BOOLEAN_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 119 (expr6 -> BOOLEAN_CONSTANTS .)
    COLON           reduce using rule 119 (expr6 -> BOOLEAN_CONSTANTS .)
    COMMA           reduce using rule 119 (expr6 -> BOOLEAN_CONSTANTS .)


state 13

    (20) top_stmts -> top_stmt .
    (24) top_stmt -> top_stmt . KEYWORD_while expr3
    (26) top_stmt -> top_stmt . KEYWORD_until expr3

    DELIM           reduce using rule 20 (top_stmts -> top_stmt .)
    newline         reduce using rule 20 (top_stmts -> top_stmt .)
    $end            reduce using rule 20 (top_stmts -> top_stmt .)
    KEYWORD_while   shift and go to state 71
    KEYWORD_until   shift and go to state 72


state 14

    (127) expr9 -> expr10 .
    (128) expr10 -> expr10 . PLUS expr11
    (129) expr10 -> expr10 . MINUS expr11

    SHIFTL          reduce using rule 127 (expr9 -> expr10 .)
    SHIFTR          reduce using rule 127 (expr9 -> expr10 .)
    BITAND          reduce using rule 127 (expr9 -> expr10 .)
    LESSEQUAL       reduce using rule 127 (expr9 -> expr10 .)
    LESS            reduce using rule 127 (expr9 -> expr10 .)
    GREATER         reduce using rule 127 (expr9 -> expr10 .)
    GREATEREQUAL    reduce using rule 127 (expr9 -> expr10 .)
    BITXOR          reduce using rule 127 (expr9 -> expr10 .)
    PIPE            reduce using rule 127 (expr9 -> expr10 .)
    IFF             reduce using rule 127 (expr9 -> expr10 .)
    DOUBLEEQUAL     reduce using rule 127 (expr9 -> expr10 .)
    TRIPLEEQUAL     reduce using rule 127 (expr9 -> expr10 .)
    NOTEQUAL        reduce using rule 127 (expr9 -> expr10 .)
    LOGICALAND      reduce using rule 127 (expr9 -> expr10 .)
    QUESTION_MARK   reduce using rule 127 (expr9 -> expr10 .)
    LOGICALOR       reduce using rule 127 (expr9 -> expr10 .)
    KEYWORD_while   reduce using rule 127 (expr9 -> expr10 .)
    KEYWORD_until   reduce using rule 127 (expr9 -> expr10 .)
    DELIM           reduce using rule 127 (expr9 -> expr10 .)
    newline         reduce using rule 127 (expr9 -> expr10 .)
    $end            reduce using rule 127 (expr9 -> expr10 .)
    KEYWORD_do      reduce using rule 127 (expr9 -> expr10 .)
    CLOSE_PAREN     reduce using rule 127 (expr9 -> expr10 .)
    KEYWORD_then    reduce using rule 127 (expr9 -> expr10 .)
    KEYWORD_end     reduce using rule 127 (expr9 -> expr10 .)
    KEYWORD_elsif   reduce using rule 127 (expr9 -> expr10 .)
    KEYWORD_else    reduce using rule 127 (expr9 -> expr10 .)
    COLON           reduce using rule 127 (expr9 -> expr10 .)
    COMMA           reduce using rule 127 (expr9 -> expr10 .)
    DOUBLEDOT       reduce using rule 127 (expr9 -> expr10 .)
    TRIPLEDOT       reduce using rule 127 (expr9 -> expr10 .)
    CLOSE_BRACKET   reduce using rule 127 (expr9 -> expr10 .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74


state 15

    (130) expr10 -> expr11 .
    (131) expr11 -> expr11 . MULTIPLY expr12
    (132) expr11 -> expr11 . DIV expr12
    (133) expr11 -> expr11 . MOD expr12

    PLUS            reduce using rule 130 (expr10 -> expr11 .)
    MINUS           reduce using rule 130 (expr10 -> expr11 .)
    SHIFTL          reduce using rule 130 (expr10 -> expr11 .)
    SHIFTR          reduce using rule 130 (expr10 -> expr11 .)
    BITAND          reduce using rule 130 (expr10 -> expr11 .)
    DOUBLEDOT       reduce using rule 130 (expr10 -> expr11 .)
    TRIPLEDOT       reduce using rule 130 (expr10 -> expr11 .)
    BITXOR          reduce using rule 130 (expr10 -> expr11 .)
    PIPE            reduce using rule 130 (expr10 -> expr11 .)
    LESSEQUAL       reduce using rule 130 (expr10 -> expr11 .)
    LESS            reduce using rule 130 (expr10 -> expr11 .)
    GREATER         reduce using rule 130 (expr10 -> expr11 .)
    GREATEREQUAL    reduce using rule 130 (expr10 -> expr11 .)
    IFF             reduce using rule 130 (expr10 -> expr11 .)
    DOUBLEEQUAL     reduce using rule 130 (expr10 -> expr11 .)
    TRIPLEEQUAL     reduce using rule 130 (expr10 -> expr11 .)
    NOTEQUAL        reduce using rule 130 (expr10 -> expr11 .)
    LOGICALAND      reduce using rule 130 (expr10 -> expr11 .)
    QUESTION_MARK   reduce using rule 130 (expr10 -> expr11 .)
    LOGICALOR       reduce using rule 130 (expr10 -> expr11 .)
    KEYWORD_while   reduce using rule 130 (expr10 -> expr11 .)
    KEYWORD_until   reduce using rule 130 (expr10 -> expr11 .)
    DELIM           reduce using rule 130 (expr10 -> expr11 .)
    newline         reduce using rule 130 (expr10 -> expr11 .)
    $end            reduce using rule 130 (expr10 -> expr11 .)
    KEYWORD_do      reduce using rule 130 (expr10 -> expr11 .)
    CLOSE_PAREN     reduce using rule 130 (expr10 -> expr11 .)
    KEYWORD_then    reduce using rule 130 (expr10 -> expr11 .)
    KEYWORD_end     reduce using rule 130 (expr10 -> expr11 .)
    KEYWORD_elsif   reduce using rule 130 (expr10 -> expr11 .)
    KEYWORD_else    reduce using rule 130 (expr10 -> expr11 .)
    COLON           reduce using rule 130 (expr10 -> expr11 .)
    COMMA           reduce using rule 130 (expr10 -> expr11 .)
    CLOSE_BRACKET   reduce using rule 130 (expr10 -> expr11 .)
    MULTIPLY        shift and go to state 75
    DIV             shift and go to state 76
    MOD             shift and go to state 77


state 16

    (134) expr11 -> expr12 .

    MULTIPLY        reduce using rule 134 (expr11 -> expr12 .)
    DIV             reduce using rule 134 (expr11 -> expr12 .)
    MOD             reduce using rule 134 (expr11 -> expr12 .)
    PLUS            reduce using rule 134 (expr11 -> expr12 .)
    MINUS           reduce using rule 134 (expr11 -> expr12 .)
    SHIFTL          reduce using rule 134 (expr11 -> expr12 .)
    SHIFTR          reduce using rule 134 (expr11 -> expr12 .)
    BITAND          reduce using rule 134 (expr11 -> expr12 .)
    DOUBLEDOT       reduce using rule 134 (expr11 -> expr12 .)
    TRIPLEDOT       reduce using rule 134 (expr11 -> expr12 .)
    BITXOR          reduce using rule 134 (expr11 -> expr12 .)
    PIPE            reduce using rule 134 (expr11 -> expr12 .)
    LESSEQUAL       reduce using rule 134 (expr11 -> expr12 .)
    LESS            reduce using rule 134 (expr11 -> expr12 .)
    GREATER         reduce using rule 134 (expr11 -> expr12 .)
    GREATEREQUAL    reduce using rule 134 (expr11 -> expr12 .)
    IFF             reduce using rule 134 (expr11 -> expr12 .)
    DOUBLEEQUAL     reduce using rule 134 (expr11 -> expr12 .)
    TRIPLEEQUAL     reduce using rule 134 (expr11 -> expr12 .)
    NOTEQUAL        reduce using rule 134 (expr11 -> expr12 .)
    LOGICALAND      reduce using rule 134 (expr11 -> expr12 .)
    QUESTION_MARK   reduce using rule 134 (expr11 -> expr12 .)
    LOGICALOR       reduce using rule 134 (expr11 -> expr12 .)
    KEYWORD_while   reduce using rule 134 (expr11 -> expr12 .)
    KEYWORD_until   reduce using rule 134 (expr11 -> expr12 .)
    DELIM           reduce using rule 134 (expr11 -> expr12 .)
    newline         reduce using rule 134 (expr11 -> expr12 .)
    $end            reduce using rule 134 (expr11 -> expr12 .)
    KEYWORD_do      reduce using rule 134 (expr11 -> expr12 .)
    CLOSE_PAREN     reduce using rule 134 (expr11 -> expr12 .)
    KEYWORD_then    reduce using rule 134 (expr11 -> expr12 .)
    KEYWORD_end     reduce using rule 134 (expr11 -> expr12 .)
    KEYWORD_elsif   reduce using rule 134 (expr11 -> expr12 .)
    KEYWORD_else    reduce using rule 134 (expr11 -> expr12 .)
    COLON           reduce using rule 134 (expr11 -> expr12 .)
    COMMA           reduce using rule 134 (expr11 -> expr12 .)
    CLOSE_BRACKET   reduce using rule 134 (expr11 -> expr12 .)


state 17

    (135) expr12 -> expr13 . DOUBLESTAR expr12
    (136) expr12 -> expr13 .

    DOUBLESTAR      shift and go to state 78
    MULTIPLY        reduce using rule 136 (expr12 -> expr13 .)
    DIV             reduce using rule 136 (expr12 -> expr13 .)
    MOD             reduce using rule 136 (expr12 -> expr13 .)
    PLUS            reduce using rule 136 (expr12 -> expr13 .)
    MINUS           reduce using rule 136 (expr12 -> expr13 .)
    SHIFTL          reduce using rule 136 (expr12 -> expr13 .)
    SHIFTR          reduce using rule 136 (expr12 -> expr13 .)
    BITAND          reduce using rule 136 (expr12 -> expr13 .)
    CLOSE_BRACKET   reduce using rule 136 (expr12 -> expr13 .)
    BITXOR          reduce using rule 136 (expr12 -> expr13 .)
    PIPE            reduce using rule 136 (expr12 -> expr13 .)
    DOUBLEDOT       reduce using rule 136 (expr12 -> expr13 .)
    TRIPLEDOT       reduce using rule 136 (expr12 -> expr13 .)
    LESSEQUAL       reduce using rule 136 (expr12 -> expr13 .)
    LESS            reduce using rule 136 (expr12 -> expr13 .)
    GREATER         reduce using rule 136 (expr12 -> expr13 .)
    GREATEREQUAL    reduce using rule 136 (expr12 -> expr13 .)
    IFF             reduce using rule 136 (expr12 -> expr13 .)
    DOUBLEEQUAL     reduce using rule 136 (expr12 -> expr13 .)
    TRIPLEEQUAL     reduce using rule 136 (expr12 -> expr13 .)
    NOTEQUAL        reduce using rule 136 (expr12 -> expr13 .)
    LOGICALAND      reduce using rule 136 (expr12 -> expr13 .)
    QUESTION_MARK   reduce using rule 136 (expr12 -> expr13 .)
    LOGICALOR       reduce using rule 136 (expr12 -> expr13 .)
    KEYWORD_while   reduce using rule 136 (expr12 -> expr13 .)
    KEYWORD_until   reduce using rule 136 (expr12 -> expr13 .)
    DELIM           reduce using rule 136 (expr12 -> expr13 .)
    newline         reduce using rule 136 (expr12 -> expr13 .)
    KEYWORD_end     reduce using rule 136 (expr12 -> expr13 .)
    KEYWORD_do      reduce using rule 136 (expr12 -> expr13 .)
    $end            reduce using rule 136 (expr12 -> expr13 .)
    CLOSE_PAREN     reduce using rule 136 (expr12 -> expr13 .)
    KEYWORD_then    reduce using rule 136 (expr12 -> expr13 .)
    KEYWORD_elsif   reduce using rule 136 (expr12 -> expr13 .)
    KEYWORD_else    reduce using rule 136 (expr12 -> expr13 .)
    COLON           reduce using rule 136 (expr12 -> expr13 .)
    COMMA           reduce using rule 136 (expr12 -> expr13 .)


state 18

    (19) top_compstmt -> top_stmts .

    DELIM           reduce using rule 19 (top_compstmt -> top_stmts .)
    newline         reduce using rule 19 (top_compstmt -> top_stmts .)
    $end            reduce using rule 19 (top_compstmt -> top_stmts .)


state 19

    (35) stmt -> puts_stmt .

    KEYWORD_while   reduce using rule 35 (stmt -> puts_stmt .)
    KEYWORD_until   reduce using rule 35 (stmt -> puts_stmt .)
    DELIM           reduce using rule 35 (stmt -> puts_stmt .)
    newline         reduce using rule 35 (stmt -> puts_stmt .)
    KEYWORD_end     reduce using rule 35 (stmt -> puts_stmt .)
    KEYWORD_elsif   reduce using rule 35 (stmt -> puts_stmt .)
    KEYWORD_else    reduce using rule 35 (stmt -> puts_stmt .)
    $end            reduce using rule 35 (stmt -> puts_stmt .)


state 20

    (21) top_stmt -> stmt .

    KEYWORD_while   reduce using rule 21 (top_stmt -> stmt .)
    KEYWORD_until   reduce using rule 21 (top_stmt -> stmt .)
    DELIM           reduce using rule 21 (top_stmt -> stmt .)
    newline         reduce using rule 21 (top_stmt -> stmt .)
    KEYWORD_end     reduce using rule 21 (top_stmt -> stmt .)
    KEYWORD_elsif   reduce using rule 21 (top_stmt -> stmt .)
    KEYWORD_else    reduce using rule 21 (top_stmt -> stmt .)
    $end            reduce using rule 21 (top_stmt -> stmt .)


state 21

    (8) func_defn -> KEYWORD_def . fname opt_oparen arguments opt_cparen func_stmts opt_terms KEYWORD_end
    (9) fname -> . VARIABLES
    (10) fname -> . CONSTANTS

    VARIABLES       shift and go to state 79
    CONSTANTS       shift and go to state 81

    fname                          shift and go to state 80

state 22

    (10) fname -> CONSTANTS .
    (84) mlhs -> CONSTANTS .
    (140) expr13 -> CONSTANTS .

    OPEN_PAREN      reduce using rule 10 (fname -> CONSTANTS .)
    VARIABLES       reduce using rule 10 (fname -> CONSTANTS .)
    CONSTANTS       reduce using rule 10 (fname -> CONSTANTS .)
    INT_CONSTANTS   reduce using rule 10 (fname -> CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 10 (fname -> CONSTANTS .)
    STRING_CONSTANTS reduce using rule 10 (fname -> CONSTANTS .)
    CHAR_CONSTANTS  reduce using rule 10 (fname -> CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 10 (fname -> CONSTANTS .)
    EQUAL           reduce using rule 84 (mlhs -> CONSTANTS .)
    COMMA           reduce using rule 84 (mlhs -> CONSTANTS .)
    DOUBLESTAR      reduce using rule 140 (expr13 -> CONSTANTS .)
    MULTIPLY        reduce using rule 140 (expr13 -> CONSTANTS .)
    DIV             reduce using rule 140 (expr13 -> CONSTANTS .)
    MOD             reduce using rule 140 (expr13 -> CONSTANTS .)
    PLUS            reduce using rule 140 (expr13 -> CONSTANTS .)
    MINUS           reduce using rule 140 (expr13 -> CONSTANTS .)
    SHIFTL          reduce using rule 140 (expr13 -> CONSTANTS .)
    SHIFTR          reduce using rule 140 (expr13 -> CONSTANTS .)
    BITAND          reduce using rule 140 (expr13 -> CONSTANTS .)
    DOUBLEDOT       reduce using rule 140 (expr13 -> CONSTANTS .)
    TRIPLEDOT       reduce using rule 140 (expr13 -> CONSTANTS .)
    BITXOR          reduce using rule 140 (expr13 -> CONSTANTS .)
    PIPE            reduce using rule 140 (expr13 -> CONSTANTS .)
    LESSEQUAL       reduce using rule 140 (expr13 -> CONSTANTS .)
    LESS            reduce using rule 140 (expr13 -> CONSTANTS .)
    GREATER         reduce using rule 140 (expr13 -> CONSTANTS .)
    GREATEREQUAL    reduce using rule 140 (expr13 -> CONSTANTS .)
    IFF             reduce using rule 140 (expr13 -> CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 140 (expr13 -> CONSTANTS .)
    TRIPLEEQUAL     reduce using rule 140 (expr13 -> CONSTANTS .)
    NOTEQUAL        reduce using rule 140 (expr13 -> CONSTANTS .)
    LOGICALAND      reduce using rule 140 (expr13 -> CONSTANTS .)
    QUESTION_MARK   reduce using rule 140 (expr13 -> CONSTANTS .)
    LOGICALOR       reduce using rule 140 (expr13 -> CONSTANTS .)
    KEYWORD_while   reduce using rule 140 (expr13 -> CONSTANTS .)
    KEYWORD_until   reduce using rule 140 (expr13 -> CONSTANTS .)
    DELIM           reduce using rule 140 (expr13 -> CONSTANTS .)
    newline         reduce using rule 140 (expr13 -> CONSTANTS .)
    KEYWORD_end     reduce using rule 140 (expr13 -> CONSTANTS .)
    KEYWORD_elsif   reduce using rule 140 (expr13 -> CONSTANTS .)
    KEYWORD_else    reduce using rule 140 (expr13 -> CONSTANTS .)
    $end            reduce using rule 140 (expr13 -> CONSTANTS .)


state 23

    (44) exit_stmt -> KEYWORD_exit .

    KEYWORD_while   reduce using rule 44 (exit_stmt -> KEYWORD_exit .)
    KEYWORD_until   reduce using rule 44 (exit_stmt -> KEYWORD_exit .)
    DELIM           reduce using rule 44 (exit_stmt -> KEYWORD_exit .)
    newline         reduce using rule 44 (exit_stmt -> KEYWORD_exit .)
    KEYWORD_end     reduce using rule 44 (exit_stmt -> KEYWORD_exit .)
    KEYWORD_elsif   reduce using rule 44 (exit_stmt -> KEYWORD_exit .)
    KEYWORD_else    reduce using rule 44 (exit_stmt -> KEYWORD_exit .)
    $end            reduce using rule 44 (exit_stmt -> KEYWORD_exit .)


state 24

    (2) top_top_compstmt -> statements . opt_terms
    (4) statements -> statements . terms statement
    (151) opt_terms -> . none
    (152) opt_terms -> . terms
    (153) terms -> . term
    (154) terms -> . terms term
    (157) none -> .
    (155) term -> . DELIM
    (156) term -> . newline

    $end            reduce using rule 157 (none -> .)
    DELIM           shift and go to state 85
    newline         shift and go to state 84

    term                           shift and go to state 82
    terms                          shift and go to state 83
    none                           shift and go to state 86
    opt_terms                      shift and go to state 87

state 25

    (27) top_stmt -> KEYWORD_until . expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (105) expr3 -> . expr3 LOGICALOR expr4
    (106) expr3 -> . expr4
    (107) expr4 -> . expr4 LOGICALAND expr5
    (108) expr4 -> . expr5
    (109) expr5 -> . expr6 IFF expr6
    (110) expr5 -> . expr6 DOUBLEEQUAL expr6
    (111) expr5 -> . expr6 TRIPLEEQUAL expr6
    (112) expr5 -> . expr6 NOTEQUAL expr6
    (113) expr5 -> . expr6
    (114) expr6 -> . expr7 LESSEQUAL expr7
    (115) expr6 -> . expr7 LESS expr7
    (116) expr6 -> . expr7 GREATER expr7
    (117) expr6 -> . expr7 GREATEREQUAL expr7
    (118) expr6 -> . expr7
    (119) expr6 -> . BOOLEAN_CONSTANTS
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (157) none -> .

    BOOLEAN_CONSTANTS shift and go to state 12
    OPEN_PAREN      shift and go to state 5
    CONSTANTS       shift and go to state 58
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    uexpr                          shift and go to state 11
    none                           shift and go to state 56
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr9                          shift and go to state 46
    expr3                          shift and go to state 88
    expr6                          shift and go to state 42
    expr7                          shift and go to state 55
    expr4                          shift and go to state 10
    expr5                          shift and go to state 44
    expr10                         shift and go to state 14
    expr8                          shift and go to state 45
    array                          shift and go to state 57
    expr11                         shift and go to state 15

state 26

    (85) mlhs -> array .
    (142) expr13 -> array .

    EQUAL           reduce using rule 85 (mlhs -> array .)
    COMMA           reduce using rule 85 (mlhs -> array .)
    DOUBLESTAR      reduce using rule 142 (expr13 -> array .)
    MULTIPLY        reduce using rule 142 (expr13 -> array .)
    DIV             reduce using rule 142 (expr13 -> array .)
    MOD             reduce using rule 142 (expr13 -> array .)
    PLUS            reduce using rule 142 (expr13 -> array .)
    MINUS           reduce using rule 142 (expr13 -> array .)
    SHIFTL          reduce using rule 142 (expr13 -> array .)
    SHIFTR          reduce using rule 142 (expr13 -> array .)
    BITAND          reduce using rule 142 (expr13 -> array .)
    DOUBLEDOT       reduce using rule 142 (expr13 -> array .)
    TRIPLEDOT       reduce using rule 142 (expr13 -> array .)
    BITXOR          reduce using rule 142 (expr13 -> array .)
    PIPE            reduce using rule 142 (expr13 -> array .)
    LESSEQUAL       reduce using rule 142 (expr13 -> array .)
    LESS            reduce using rule 142 (expr13 -> array .)
    GREATER         reduce using rule 142 (expr13 -> array .)
    GREATEREQUAL    reduce using rule 142 (expr13 -> array .)
    IFF             reduce using rule 142 (expr13 -> array .)
    DOUBLEEQUAL     reduce using rule 142 (expr13 -> array .)
    TRIPLEEQUAL     reduce using rule 142 (expr13 -> array .)
    NOTEQUAL        reduce using rule 142 (expr13 -> array .)
    LOGICALAND      reduce using rule 142 (expr13 -> array .)
    QUESTION_MARK   reduce using rule 142 (expr13 -> array .)
    LOGICALOR       reduce using rule 142 (expr13 -> array .)
    KEYWORD_while   reduce using rule 142 (expr13 -> array .)
    KEYWORD_until   reduce using rule 142 (expr13 -> array .)
    DELIM           reduce using rule 142 (expr13 -> array .)
    newline         reduce using rule 142 (expr13 -> array .)
    KEYWORD_end     reduce using rule 142 (expr13 -> array .)
    KEYWORD_elsif   reduce using rule 142 (expr13 -> array .)
    KEYWORD_else    reduce using rule 142 (expr13 -> array .)
    $end            reduce using rule 142 (expr13 -> array .)


state 27

    (22) top_stmt -> KEYWORD_if . expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (105) expr3 -> . expr3 LOGICALOR expr4
    (106) expr3 -> . expr4
    (107) expr4 -> . expr4 LOGICALAND expr5
    (108) expr4 -> . expr5
    (109) expr5 -> . expr6 IFF expr6
    (110) expr5 -> . expr6 DOUBLEEQUAL expr6
    (111) expr5 -> . expr6 TRIPLEEQUAL expr6
    (112) expr5 -> . expr6 NOTEQUAL expr6
    (113) expr5 -> . expr6
    (114) expr6 -> . expr7 LESSEQUAL expr7
    (115) expr6 -> . expr7 LESS expr7
    (116) expr6 -> . expr7 GREATER expr7
    (117) expr6 -> . expr7 GREATEREQUAL expr7
    (118) expr6 -> . expr7
    (119) expr6 -> . BOOLEAN_CONSTANTS
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (157) none -> .

    BOOLEAN_CONSTANTS shift and go to state 12
    OPEN_PAREN      shift and go to state 5
    CONSTANTS       shift and go to state 58
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    expr11                         shift and go to state 15
    uexpr                          shift and go to state 11
    none                           shift and go to state 56
    expr4                          shift and go to state 10
    expr5                          shift and go to state 44
    expr3                          shift and go to state 89
    expr6                          shift and go to state 42
    expr7                          shift and go to state 55
    expr10                         shift and go to state 14
    expr8                          shift and go to state 45
    expr9                          shift and go to state 46
    expr13                         shift and go to state 17
    array                          shift and go to state 57
    expr12                         shift and go to state 16

state 28

    (9) fname -> VARIABLES .
    (83) mlhs -> VARIABLES .
    (143) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> VARIABLES . OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> VARIABLES . OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (141) expr13 -> VARIABLES .

    OPEN_PAREN      reduce using rule 9 (fname -> VARIABLES .)
    VARIABLES       reduce using rule 9 (fname -> VARIABLES .)
    CONSTANTS       reduce using rule 9 (fname -> VARIABLES .)
    INT_CONSTANTS   reduce using rule 9 (fname -> VARIABLES .)
    FLOAT_CONSTANTS reduce using rule 9 (fname -> VARIABLES .)
    STRING_CONSTANTS reduce using rule 9 (fname -> VARIABLES .)
    CHAR_CONSTANTS  reduce using rule 9 (fname -> VARIABLES .)
    BOOLEAN_CONSTANTS reduce using rule 9 (fname -> VARIABLES .)
    EQUAL           reduce using rule 83 (mlhs -> VARIABLES .)
    COMMA           reduce using rule 83 (mlhs -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 90
    DOUBLESTAR      reduce using rule 141 (expr13 -> VARIABLES .)
    MULTIPLY        reduce using rule 141 (expr13 -> VARIABLES .)
    DIV             reduce using rule 141 (expr13 -> VARIABLES .)
    MOD             reduce using rule 141 (expr13 -> VARIABLES .)
    PLUS            reduce using rule 141 (expr13 -> VARIABLES .)
    MINUS           reduce using rule 141 (expr13 -> VARIABLES .)
    SHIFTL          reduce using rule 141 (expr13 -> VARIABLES .)
    SHIFTR          reduce using rule 141 (expr13 -> VARIABLES .)
    BITAND          reduce using rule 141 (expr13 -> VARIABLES .)
    DOUBLEDOT       reduce using rule 141 (expr13 -> VARIABLES .)
    TRIPLEDOT       reduce using rule 141 (expr13 -> VARIABLES .)
    BITXOR          reduce using rule 141 (expr13 -> VARIABLES .)
    PIPE            reduce using rule 141 (expr13 -> VARIABLES .)
    LESSEQUAL       reduce using rule 141 (expr13 -> VARIABLES .)
    LESS            reduce using rule 141 (expr13 -> VARIABLES .)
    GREATER         reduce using rule 141 (expr13 -> VARIABLES .)
    GREATEREQUAL    reduce using rule 141 (expr13 -> VARIABLES .)
    IFF             reduce using rule 141 (expr13 -> VARIABLES .)
    DOUBLEEQUAL     reduce using rule 141 (expr13 -> VARIABLES .)
    TRIPLEEQUAL     reduce using rule 141 (expr13 -> VARIABLES .)
    NOTEQUAL        reduce using rule 141 (expr13 -> VARIABLES .)
    LOGICALAND      reduce using rule 141 (expr13 -> VARIABLES .)
    QUESTION_MARK   reduce using rule 141 (expr13 -> VARIABLES .)
    LOGICALOR       reduce using rule 141 (expr13 -> VARIABLES .)
    KEYWORD_while   reduce using rule 141 (expr13 -> VARIABLES .)
    KEYWORD_until   reduce using rule 141 (expr13 -> VARIABLES .)
    DELIM           reduce using rule 141 (expr13 -> VARIABLES .)
    newline         reduce using rule 141 (expr13 -> VARIABLES .)
    KEYWORD_end     reduce using rule 141 (expr13 -> VARIABLES .)
    KEYWORD_elsif   reduce using rule 141 (expr13 -> VARIABLES .)
    KEYWORD_else    reduce using rule 141 (expr13 -> VARIABLES .)
    $end            reduce using rule 141 (expr13 -> VARIABLES .)


state 29

    (150) uexpr -> BITCOMP .

    INT_CONSTANTS   reduce using rule 150 (uexpr -> BITCOMP .)
    FLOAT_CONSTANTS reduce using rule 150 (uexpr -> BITCOMP .)


state 30

    (42) loop_stmt -> KEYWORD_next .

    KEYWORD_while   reduce using rule 42 (loop_stmt -> KEYWORD_next .)
    KEYWORD_until   reduce using rule 42 (loop_stmt -> KEYWORD_next .)
    DELIM           reduce using rule 42 (loop_stmt -> KEYWORD_next .)
    newline         reduce using rule 42 (loop_stmt -> KEYWORD_next .)
    KEYWORD_elsif   reduce using rule 42 (loop_stmt -> KEYWORD_next .)
    KEYWORD_else    reduce using rule 42 (loop_stmt -> KEYWORD_next .)
    KEYWORD_end     reduce using rule 42 (loop_stmt -> KEYWORD_next .)
    $end            reduce using rule 42 (loop_stmt -> KEYWORD_next .)


state 31

    (3) statements -> statement .

    DELIM           reduce using rule 3 (statements -> statement .)
    newline         reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)


state 32

    (38) stmt -> func_call_stmt .

    KEYWORD_while   reduce using rule 38 (stmt -> func_call_stmt .)
    KEYWORD_until   reduce using rule 38 (stmt -> func_call_stmt .)
    DELIM           reduce using rule 38 (stmt -> func_call_stmt .)
    newline         reduce using rule 38 (stmt -> func_call_stmt .)
    KEYWORD_end     reduce using rule 38 (stmt -> func_call_stmt .)
    KEYWORD_elsif   reduce using rule 38 (stmt -> func_call_stmt .)
    KEYWORD_else    reduce using rule 38 (stmt -> func_call_stmt .)
    $end            reduce using rule 38 (stmt -> func_call_stmt .)


state 33

    (45) puts_stmt -> KEYWORD_puts . mrhs
    (46) puts_stmt -> KEYWORD_puts . expr
    (86) mrhs -> . expr1
    (87) mrhs -> . str_expr
    (88) mrhs -> . KEYWORD_gets
    (89) mrhs -> . OPEN_BRACKET func_ret_arg CLOSE_BRACKET
    (78) expr -> . MLHS EQUAL MRHS
    (100) expr1 -> . expr3 QUESTION_MARK expr2 COLON expr2
    (101) expr1 -> . expr2
    (90) str_expr -> . str_expr PLUS STRING_CONSTANTS
    (91) str_expr -> . STRING_CONSTANTS
    (79) MLHS -> . mlhs
    (80) MLHS -> . MLHS COMMA mlhs
    (105) expr3 -> . expr3 LOGICALOR expr4
    (106) expr3 -> . expr4
    (102) expr2 -> . expr7 DOUBLEDOT expr7
    (103) expr2 -> . expr7 TRIPLEDOT expr7
    (104) expr2 -> . expr3
    (83) mlhs -> . VARIABLES
    (84) mlhs -> . CONSTANTS
    (85) mlhs -> . array
    (107) expr4 -> . expr4 LOGICALAND expr5
    (108) expr4 -> . expr5
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (109) expr5 -> . expr6 IFF expr6
    (110) expr5 -> . expr6 DOUBLEEQUAL expr6
    (111) expr5 -> . expr6 TRIPLEEQUAL expr6
    (112) expr5 -> . expr6 NOTEQUAL expr6
    (113) expr5 -> . expr6
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (114) expr6 -> . expr7 LESSEQUAL expr7
    (115) expr6 -> . expr7 LESS expr7
    (116) expr6 -> . expr7 GREATER expr7
    (117) expr6 -> . expr7 GREATEREQUAL expr7
    (118) expr6 -> . expr7
    (119) expr6 -> . BOOLEAN_CONSTANTS
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (157) none -> .

    KEYWORD_gets    shift and go to state 95
    OPEN_BRACKET    shift and go to state 93
    STRING_CONSTANTS shift and go to state 99
    VARIABLES       shift and go to state 92
    CONSTANTS       shift and go to state 100
    BOOLEAN_CONSTANTS shift and go to state 12
    OPEN_PAREN      shift and go to state 5
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    mlhs                           shift and go to state 2
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    array                          shift and go to state 26
    str_expr                       shift and go to state 91
    expr2                          shift and go to state 39
    expr3                          shift and go to state 40
    expr1                          shift and go to state 94
    expr6                          shift and go to state 42
    expr7                          shift and go to state 8
    expr4                          shift and go to state 10
    expr5                          shift and go to state 44
    expr8                          shift and go to state 45
    expr9                          shift and go to state 46
    MLHS                           shift and go to state 96
    mrhs                           shift and go to state 97
    uexpr                          shift and go to state 11
    none                           shift and go to state 56
    expr                           shift and go to state 98

state 34

    (5) statements -> none .
    (146) uexpr -> none .

    DELIM           reduce using rule 5 (statements -> none .)
    newline         reduce using rule 5 (statements -> none .)
    $end            reduce using rule 5 (statements -> none .)
    INT_CONSTANTS   reduce using rule 146 (uexpr -> none .)
    FLOAT_CONSTANTS reduce using rule 146 (uexpr -> none .)


state 35

    (33) stmt -> expr .

    KEYWORD_while   reduce using rule 33 (stmt -> expr .)
    KEYWORD_until   reduce using rule 33 (stmt -> expr .)
    DELIM           reduce using rule 33 (stmt -> expr .)
    newline         reduce using rule 33 (stmt -> expr .)
    KEYWORD_end     reduce using rule 33 (stmt -> expr .)
    KEYWORD_elsif   reduce using rule 33 (stmt -> expr .)
    KEYWORD_else    reduce using rule 33 (stmt -> expr .)
    $end            reduce using rule 33 (stmt -> expr .)


state 36

    (7) statement -> func_defn .

    DELIM           reduce using rule 7 (statement -> func_defn .)
    newline         reduce using rule 7 (statement -> func_defn .)
    $end            reduce using rule 7 (statement -> func_defn .)


state 37

    (25) top_stmt -> KEYWORD_begin . gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (28) top_stmt -> KEYWORD_begin . gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (30) gen_stmts -> . top_stmt
    (31) gen_stmts -> . gen_stmts terms top_stmt
    (32) gen_stmts -> . none
    (21) top_stmt -> . stmt
    (22) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (23) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (24) top_stmt -> . top_stmt KEYWORD_while expr3
    (25) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (26) top_stmt -> . top_stmt KEYWORD_until expr3
    (27) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (28) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (29) top_stmt -> . KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (157) none -> .
    (33) stmt -> . expr
    (34) stmt -> . expr1
    (35) stmt -> . puts_stmt
    (36) stmt -> . loop_stmt
    (37) stmt -> . exit_stmt
    (38) stmt -> . func_call_stmt
    (78) expr -> . MLHS EQUAL MRHS
    (100) expr1 -> . expr3 QUESTION_MARK expr2 COLON expr2
    (101) expr1 -> . expr2
    (45) puts_stmt -> . KEYWORD_puts mrhs
    (46) puts_stmt -> . KEYWORD_puts expr
    (41) loop_stmt -> . KEYWORD_break
    (42) loop_stmt -> . KEYWORD_next
    (43) loop_stmt -> . KEYWORD_redo
    (44) exit_stmt -> . KEYWORD_exit
    (39) func_call_stmt -> . fname opt_oparen func_ret_arg opt_cparen
    (40) func_call_stmt -> . MLHS EQUAL fname opt_oparen func_ret_arg opt_cparen
    (79) MLHS -> . mlhs
    (80) MLHS -> . MLHS COMMA mlhs
    (105) expr3 -> . expr3 LOGICALOR expr4
    (106) expr3 -> . expr4
    (102) expr2 -> . expr7 DOUBLEDOT expr7
    (103) expr2 -> . expr7 TRIPLEDOT expr7
    (104) expr2 -> . expr3
    (9) fname -> . VARIABLES
    (10) fname -> . CONSTANTS
    (83) mlhs -> . VARIABLES
    (84) mlhs -> . CONSTANTS
    (85) mlhs -> . array
    (107) expr4 -> . expr4 LOGICALAND expr5
    (108) expr4 -> . expr5
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (109) expr5 -> . expr6 IFF expr6
    (110) expr5 -> . expr6 DOUBLEEQUAL expr6
    (111) expr5 -> . expr6 TRIPLEEQUAL expr6
    (112) expr5 -> . expr6 NOTEQUAL expr6
    (113) expr5 -> . expr6
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (114) expr6 -> . expr7 LESSEQUAL expr7
    (115) expr6 -> . expr7 LESS expr7
    (116) expr6 -> . expr7 GREATER expr7
    (117) expr6 -> . expr7 GREATEREQUAL expr7
    (118) expr6 -> . expr7
    (119) expr6 -> . BOOLEAN_CONSTANTS
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP

    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 37
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 52
    DELIM           reduce using rule 157 (none -> .)
    newline         reduce using rule 157 (none -> .)
    KEYWORD_end     reduce using rule 157 (none -> .)
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 47
    KEYWORD_next    shift and go to state 30
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    VARIABLES       shift and go to state 28
    CONSTANTS       shift and go to state 22
    BOOLEAN_CONSTANTS shift and go to state 12
    OPEN_PAREN      shift and go to state 5
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29

    mlhs                           shift and go to state 2
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    array                          shift and go to state 26
    expr2                          shift and go to state 39
    expr3                          shift and go to state 40
    expr1                          shift and go to state 41
    expr6                          shift and go to state 42
    expr7                          shift and go to state 8
    puts_stmt                      shift and go to state 19
    expr5                          shift and go to state 44
    func_call_stmt                 shift and go to state 32
    expr8                          shift and go to state 45
    expr9                          shift and go to state 46
    expr4                          shift and go to state 10
    exit_stmt                      shift and go to state 48
    MLHS                           shift and go to state 50
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 20
    uexpr                          shift and go to state 11
    none                           shift and go to state 102
    gen_stmts                      shift and go to state 103
    expr                           shift and go to state 35
    fname                          shift and go to state 43
    top_stmt                       shift and go to state 101

state 38

    (149) uexpr -> BITNOT .

    INT_CONSTANTS   reduce using rule 149 (uexpr -> BITNOT .)
    FLOAT_CONSTANTS reduce using rule 149 (uexpr -> BITNOT .)


state 39

    (101) expr1 -> expr2 .

    KEYWORD_while   reduce using rule 101 (expr1 -> expr2 .)
    KEYWORD_until   reduce using rule 101 (expr1 -> expr2 .)
    DELIM           reduce using rule 101 (expr1 -> expr2 .)
    newline         reduce using rule 101 (expr1 -> expr2 .)
    KEYWORD_end     reduce using rule 101 (expr1 -> expr2 .)
    COMMA           reduce using rule 101 (expr1 -> expr2 .)
    $end            reduce using rule 101 (expr1 -> expr2 .)
    KEYWORD_elsif   reduce using rule 101 (expr1 -> expr2 .)
    KEYWORD_else    reduce using rule 101 (expr1 -> expr2 .)
    CLOSE_PAREN     reduce using rule 101 (expr1 -> expr2 .)


state 40

    (100) expr1 -> expr3 . QUESTION_MARK expr2 COLON expr2
    (105) expr3 -> expr3 . LOGICALOR expr4
    (104) expr2 -> expr3 .

    QUESTION_MARK   shift and go to state 105
    LOGICALOR       shift and go to state 104
    KEYWORD_while   reduce using rule 104 (expr2 -> expr3 .)
    KEYWORD_until   reduce using rule 104 (expr2 -> expr3 .)
    DELIM           reduce using rule 104 (expr2 -> expr3 .)
    newline         reduce using rule 104 (expr2 -> expr3 .)
    KEYWORD_elsif   reduce using rule 104 (expr2 -> expr3 .)
    KEYWORD_else    reduce using rule 104 (expr2 -> expr3 .)
    KEYWORD_end     reduce using rule 104 (expr2 -> expr3 .)
    COMMA           reduce using rule 104 (expr2 -> expr3 .)
    $end            reduce using rule 104 (expr2 -> expr3 .)
    CLOSE_PAREN     reduce using rule 104 (expr2 -> expr3 .)


state 41

    (34) stmt -> expr1 .

    KEYWORD_while   reduce using rule 34 (stmt -> expr1 .)
    KEYWORD_until   reduce using rule 34 (stmt -> expr1 .)
    DELIM           reduce using rule 34 (stmt -> expr1 .)
    newline         reduce using rule 34 (stmt -> expr1 .)
    KEYWORD_end     reduce using rule 34 (stmt -> expr1 .)
    KEYWORD_elsif   reduce using rule 34 (stmt -> expr1 .)
    KEYWORD_else    reduce using rule 34 (stmt -> expr1 .)
    $end            reduce using rule 34 (stmt -> expr1 .)


state 42

    (109) expr5 -> expr6 . IFF expr6
    (110) expr5 -> expr6 . DOUBLEEQUAL expr6
    (111) expr5 -> expr6 . TRIPLEEQUAL expr6
    (112) expr5 -> expr6 . NOTEQUAL expr6
    (113) expr5 -> expr6 .

    IFF             shift and go to state 107
    DOUBLEEQUAL     shift and go to state 109
    TRIPLEEQUAL     shift and go to state 108
    NOTEQUAL        shift and go to state 106
    LOGICALAND      reduce using rule 113 (expr5 -> expr6 .)
    QUESTION_MARK   reduce using rule 113 (expr5 -> expr6 .)
    LOGICALOR       reduce using rule 113 (expr5 -> expr6 .)
    KEYWORD_while   reduce using rule 113 (expr5 -> expr6 .)
    KEYWORD_until   reduce using rule 113 (expr5 -> expr6 .)
    DELIM           reduce using rule 113 (expr5 -> expr6 .)
    newline         reduce using rule 113 (expr5 -> expr6 .)
    KEYWORD_end     reduce using rule 113 (expr5 -> expr6 .)
    KEYWORD_elsif   reduce using rule 113 (expr5 -> expr6 .)
    KEYWORD_else    reduce using rule 113 (expr5 -> expr6 .)
    COLON           reduce using rule 113 (expr5 -> expr6 .)
    $end            reduce using rule 113 (expr5 -> expr6 .)
    KEYWORD_do      reduce using rule 113 (expr5 -> expr6 .)
    CLOSE_PAREN     reduce using rule 113 (expr5 -> expr6 .)
    KEYWORD_then    reduce using rule 113 (expr5 -> expr6 .)
    COMMA           reduce using rule 113 (expr5 -> expr6 .)


state 43

    (39) func_call_stmt -> fname . opt_oparen func_ret_arg opt_cparen
    (69) opt_oparen -> . OPEN_PAREN
    (70) opt_oparen -> . none
    (157) none -> .

    OPEN_PAREN      shift and go to state 111
    VARIABLES       reduce using rule 157 (none -> .)
    CONSTANTS       reduce using rule 157 (none -> .)
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)
    STRING_CONSTANTS reduce using rule 157 (none -> .)
    CHAR_CONSTANTS  reduce using rule 157 (none -> .)
    BOOLEAN_CONSTANTS reduce using rule 157 (none -> .)

    opt_oparen                     shift and go to state 112
    none                           shift and go to state 110

state 44

    (108) expr4 -> expr5 .

    LOGICALAND      reduce using rule 108 (expr4 -> expr5 .)
    QUESTION_MARK   reduce using rule 108 (expr4 -> expr5 .)
    LOGICALOR       reduce using rule 108 (expr4 -> expr5 .)
    KEYWORD_while   reduce using rule 108 (expr4 -> expr5 .)
    KEYWORD_until   reduce using rule 108 (expr4 -> expr5 .)
    DELIM           reduce using rule 108 (expr4 -> expr5 .)
    newline         reduce using rule 108 (expr4 -> expr5 .)
    $end            reduce using rule 108 (expr4 -> expr5 .)
    KEYWORD_end     reduce using rule 108 (expr4 -> expr5 .)
    KEYWORD_elsif   reduce using rule 108 (expr4 -> expr5 .)
    KEYWORD_else    reduce using rule 108 (expr4 -> expr5 .)
    COMMA           reduce using rule 108 (expr4 -> expr5 .)
    CLOSE_PAREN     reduce using rule 108 (expr4 -> expr5 .)
    KEYWORD_then    reduce using rule 108 (expr4 -> expr5 .)
    KEYWORD_do      reduce using rule 108 (expr4 -> expr5 .)
    COLON           reduce using rule 108 (expr4 -> expr5 .)


state 45

    (122) expr7 -> expr8 .
    (123) expr8 -> expr8 . BITAND expr9

    LESSEQUAL       reduce using rule 122 (expr7 -> expr8 .)
    LESS            reduce using rule 122 (expr7 -> expr8 .)
    GREATER         reduce using rule 122 (expr7 -> expr8 .)
    GREATEREQUAL    reduce using rule 122 (expr7 -> expr8 .)
    BITXOR          reduce using rule 122 (expr7 -> expr8 .)
    PIPE            reduce using rule 122 (expr7 -> expr8 .)
    IFF             reduce using rule 122 (expr7 -> expr8 .)
    DOUBLEEQUAL     reduce using rule 122 (expr7 -> expr8 .)
    TRIPLEEQUAL     reduce using rule 122 (expr7 -> expr8 .)
    NOTEQUAL        reduce using rule 122 (expr7 -> expr8 .)
    LOGICALAND      reduce using rule 122 (expr7 -> expr8 .)
    LOGICALOR       reduce using rule 122 (expr7 -> expr8 .)
    KEYWORD_do      reduce using rule 122 (expr7 -> expr8 .)
    newline         reduce using rule 122 (expr7 -> expr8 .)
    DOUBLEDOT       reduce using rule 122 (expr7 -> expr8 .)
    TRIPLEDOT       reduce using rule 122 (expr7 -> expr8 .)
    COLON           reduce using rule 122 (expr7 -> expr8 .)
    CLOSE_BRACKET   reduce using rule 122 (expr7 -> expr8 .)
    QUESTION_MARK   reduce using rule 122 (expr7 -> expr8 .)
    KEYWORD_while   reduce using rule 122 (expr7 -> expr8 .)
    KEYWORD_until   reduce using rule 122 (expr7 -> expr8 .)
    DELIM           reduce using rule 122 (expr7 -> expr8 .)
    KEYWORD_end     reduce using rule 122 (expr7 -> expr8 .)
    $end            reduce using rule 122 (expr7 -> expr8 .)
    KEYWORD_elsif   reduce using rule 122 (expr7 -> expr8 .)
    KEYWORD_else    reduce using rule 122 (expr7 -> expr8 .)
    CLOSE_PAREN     reduce using rule 122 (expr7 -> expr8 .)
    KEYWORD_then    reduce using rule 122 (expr7 -> expr8 .)
    COMMA           reduce using rule 122 (expr7 -> expr8 .)
    BITAND          shift and go to state 113


state 46

    (124) expr8 -> expr9 .
    (125) expr9 -> expr9 . SHIFTL expr10
    (126) expr9 -> expr9 . SHIFTR expr10

    BITAND          reduce using rule 124 (expr8 -> expr9 .)
    LESSEQUAL       reduce using rule 124 (expr8 -> expr9 .)
    LESS            reduce using rule 124 (expr8 -> expr9 .)
    GREATER         reduce using rule 124 (expr8 -> expr9 .)
    GREATEREQUAL    reduce using rule 124 (expr8 -> expr9 .)
    BITXOR          reduce using rule 124 (expr8 -> expr9 .)
    PIPE            reduce using rule 124 (expr8 -> expr9 .)
    IFF             reduce using rule 124 (expr8 -> expr9 .)
    DOUBLEEQUAL     reduce using rule 124 (expr8 -> expr9 .)
    TRIPLEEQUAL     reduce using rule 124 (expr8 -> expr9 .)
    NOTEQUAL        reduce using rule 124 (expr8 -> expr9 .)
    LOGICALAND      reduce using rule 124 (expr8 -> expr9 .)
    LOGICALOR       reduce using rule 124 (expr8 -> expr9 .)
    KEYWORD_do      reduce using rule 124 (expr8 -> expr9 .)
    newline         reduce using rule 124 (expr8 -> expr9 .)
    DOUBLEDOT       reduce using rule 124 (expr8 -> expr9 .)
    TRIPLEDOT       reduce using rule 124 (expr8 -> expr9 .)
    QUESTION_MARK   reduce using rule 124 (expr8 -> expr9 .)
    KEYWORD_while   reduce using rule 124 (expr8 -> expr9 .)
    KEYWORD_until   reduce using rule 124 (expr8 -> expr9 .)
    DELIM           reduce using rule 124 (expr8 -> expr9 .)
    KEYWORD_end     reduce using rule 124 (expr8 -> expr9 .)
    $end            reduce using rule 124 (expr8 -> expr9 .)
    KEYWORD_elsif   reduce using rule 124 (expr8 -> expr9 .)
    KEYWORD_else    reduce using rule 124 (expr8 -> expr9 .)
    CLOSE_PAREN     reduce using rule 124 (expr8 -> expr9 .)
    KEYWORD_then    reduce using rule 124 (expr8 -> expr9 .)
    COLON           reduce using rule 124 (expr8 -> expr9 .)
    COMMA           reduce using rule 124 (expr8 -> expr9 .)
    CLOSE_BRACKET   reduce using rule 124 (expr8 -> expr9 .)
    SHIFTL          shift and go to state 115
    SHIFTR          shift and go to state 114


state 47

    (41) loop_stmt -> KEYWORD_break .

    KEYWORD_while   reduce using rule 41 (loop_stmt -> KEYWORD_break .)
    KEYWORD_until   reduce using rule 41 (loop_stmt -> KEYWORD_break .)
    DELIM           reduce using rule 41 (loop_stmt -> KEYWORD_break .)
    newline         reduce using rule 41 (loop_stmt -> KEYWORD_break .)
    KEYWORD_elsif   reduce using rule 41 (loop_stmt -> KEYWORD_break .)
    KEYWORD_else    reduce using rule 41 (loop_stmt -> KEYWORD_break .)
    KEYWORD_end     reduce using rule 41 (loop_stmt -> KEYWORD_break .)
    $end            reduce using rule 41 (loop_stmt -> KEYWORD_break .)


state 48

    (37) stmt -> exit_stmt .

    KEYWORD_while   reduce using rule 37 (stmt -> exit_stmt .)
    KEYWORD_until   reduce using rule 37 (stmt -> exit_stmt .)
    DELIM           reduce using rule 37 (stmt -> exit_stmt .)
    newline         reduce using rule 37 (stmt -> exit_stmt .)
    KEYWORD_end     reduce using rule 37 (stmt -> exit_stmt .)
    KEYWORD_elsif   reduce using rule 37 (stmt -> exit_stmt .)
    KEYWORD_else    reduce using rule 37 (stmt -> exit_stmt .)
    $end            reduce using rule 37 (stmt -> exit_stmt .)


state 49

    (6) statement -> top_compstmt .

    DELIM           reduce using rule 6 (statement -> top_compstmt .)
    newline         reduce using rule 6 (statement -> top_compstmt .)
    $end            reduce using rule 6 (statement -> top_compstmt .)


state 50

    (78) expr -> MLHS . EQUAL MRHS
    (40) func_call_stmt -> MLHS . EQUAL fname opt_oparen func_ret_arg opt_cparen
    (80) MLHS -> MLHS . COMMA mlhs

    EQUAL           shift and go to state 116
    COMMA           shift and go to state 117


state 51

    (1) program -> top_top_compstmt .

    $end            reduce using rule 1 (program -> top_top_compstmt .)


state 52

    (29) top_stmt -> KEYWORD_for . opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (69) opt_oparen -> . OPEN_PAREN
    (70) opt_oparen -> . none
    (157) none -> .

    OPEN_PAREN      shift and go to state 111
    VARIABLES       reduce using rule 157 (none -> .)
    CONSTANTS       reduce using rule 157 (none -> .)

    none                           shift and go to state 110
    opt_oparen                     shift and go to state 118

state 53

    (141) expr13 -> VARIABLES .
    (143) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> VARIABLES . OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> VARIABLES . OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET

    DOUBLESTAR      reduce using rule 141 (expr13 -> VARIABLES .)
    MULTIPLY        reduce using rule 141 (expr13 -> VARIABLES .)
    DIV             reduce using rule 141 (expr13 -> VARIABLES .)
    MOD             reduce using rule 141 (expr13 -> VARIABLES .)
    PLUS            reduce using rule 141 (expr13 -> VARIABLES .)
    MINUS           reduce using rule 141 (expr13 -> VARIABLES .)
    SHIFTL          reduce using rule 141 (expr13 -> VARIABLES .)
    SHIFTR          reduce using rule 141 (expr13 -> VARIABLES .)
    BITAND          reduce using rule 141 (expr13 -> VARIABLES .)
    DOUBLEDOT       reduce using rule 141 (expr13 -> VARIABLES .)
    TRIPLEDOT       reduce using rule 141 (expr13 -> VARIABLES .)
    BITXOR          reduce using rule 141 (expr13 -> VARIABLES .)
    PIPE            reduce using rule 141 (expr13 -> VARIABLES .)
    LESSEQUAL       reduce using rule 141 (expr13 -> VARIABLES .)
    LESS            reduce using rule 141 (expr13 -> VARIABLES .)
    GREATER         reduce using rule 141 (expr13 -> VARIABLES .)
    GREATEREQUAL    reduce using rule 141 (expr13 -> VARIABLES .)
    IFF             reduce using rule 141 (expr13 -> VARIABLES .)
    DOUBLEEQUAL     reduce using rule 141 (expr13 -> VARIABLES .)
    TRIPLEEQUAL     reduce using rule 141 (expr13 -> VARIABLES .)
    NOTEQUAL        reduce using rule 141 (expr13 -> VARIABLES .)
    LOGICALAND      reduce using rule 141 (expr13 -> VARIABLES .)
    QUESTION_MARK   reduce using rule 141 (expr13 -> VARIABLES .)
    LOGICALOR       reduce using rule 141 (expr13 -> VARIABLES .)
    KEYWORD_while   reduce using rule 141 (expr13 -> VARIABLES .)
    KEYWORD_until   reduce using rule 141 (expr13 -> VARIABLES .)
    DELIM           reduce using rule 141 (expr13 -> VARIABLES .)
    newline         reduce using rule 141 (expr13 -> VARIABLES .)
    $end            reduce using rule 141 (expr13 -> VARIABLES .)
    KEYWORD_do      reduce using rule 141 (expr13 -> VARIABLES .)
    CLOSE_PAREN     reduce using rule 141 (expr13 -> VARIABLES .)
    KEYWORD_then    reduce using rule 141 (expr13 -> VARIABLES .)
    KEYWORD_end     reduce using rule 141 (expr13 -> VARIABLES .)
    KEYWORD_elsif   reduce using rule 141 (expr13 -> VARIABLES .)
    KEYWORD_else    reduce using rule 141 (expr13 -> VARIABLES .)
    COLON           reduce using rule 141 (expr13 -> VARIABLES .)
    COMMA           reduce using rule 141 (expr13 -> VARIABLES .)
    CLOSE_BRACKET   reduce using rule 141 (expr13 -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 90


state 54

    (23) top_stmt -> KEYWORD_while expr3 . opt_do gen_stmts opt_terms KEYWORD_end
    (105) expr3 -> expr3 . LOGICALOR expr4
    (62) opt_do -> . KEYWORD_do
    (63) opt_do -> . newline

    LOGICALOR       shift and go to state 104
    KEYWORD_do      shift and go to state 120
    newline         shift and go to state 119

    opt_do                         shift and go to state 121

state 55

    (114) expr6 -> expr7 . LESSEQUAL expr7
    (115) expr6 -> expr7 . LESS expr7
    (116) expr6 -> expr7 . GREATER expr7
    (117) expr6 -> expr7 . GREATEREQUAL expr7
    (118) expr6 -> expr7 .
    (120) expr7 -> expr7 . BITXOR expr8
    (121) expr7 -> expr7 . PIPE expr8

    LESSEQUAL       shift and go to state 67
    LESS            shift and go to state 64
    GREATER         shift and go to state 63
    GREATEREQUAL    shift and go to state 61
    IFF             reduce using rule 118 (expr6 -> expr7 .)
    DOUBLEEQUAL     reduce using rule 118 (expr6 -> expr7 .)
    TRIPLEEQUAL     reduce using rule 118 (expr6 -> expr7 .)
    NOTEQUAL        reduce using rule 118 (expr6 -> expr7 .)
    LOGICALAND      reduce using rule 118 (expr6 -> expr7 .)
    LOGICALOR       reduce using rule 118 (expr6 -> expr7 .)
    KEYWORD_then    reduce using rule 118 (expr6 -> expr7 .)
    newline         reduce using rule 118 (expr6 -> expr7 .)
    KEYWORD_while   reduce using rule 118 (expr6 -> expr7 .)
    KEYWORD_until   reduce using rule 118 (expr6 -> expr7 .)
    DELIM           reduce using rule 118 (expr6 -> expr7 .)
    $end            reduce using rule 118 (expr6 -> expr7 .)
    KEYWORD_end     reduce using rule 118 (expr6 -> expr7 .)
    KEYWORD_elsif   reduce using rule 118 (expr6 -> expr7 .)
    KEYWORD_else    reduce using rule 118 (expr6 -> expr7 .)
    QUESTION_MARK   reduce using rule 118 (expr6 -> expr7 .)
    KEYWORD_do      reduce using rule 118 (expr6 -> expr7 .)
    CLOSE_PAREN     reduce using rule 118 (expr6 -> expr7 .)
    COLON           reduce using rule 118 (expr6 -> expr7 .)
    COMMA           reduce using rule 118 (expr6 -> expr7 .)
    BITXOR          shift and go to state 66
    PIPE            shift and go to state 65


state 56

    (146) uexpr -> none .

    INT_CONSTANTS   reduce using rule 146 (uexpr -> none .)
    FLOAT_CONSTANTS reduce using rule 146 (uexpr -> none .)


state 57

    (142) expr13 -> array .

    DOUBLESTAR      reduce using rule 142 (expr13 -> array .)
    MULTIPLY        reduce using rule 142 (expr13 -> array .)
    DIV             reduce using rule 142 (expr13 -> array .)
    MOD             reduce using rule 142 (expr13 -> array .)
    PLUS            reduce using rule 142 (expr13 -> array .)
    MINUS           reduce using rule 142 (expr13 -> array .)
    SHIFTL          reduce using rule 142 (expr13 -> array .)
    SHIFTR          reduce using rule 142 (expr13 -> array .)
    BITAND          reduce using rule 142 (expr13 -> array .)
    DOUBLEDOT       reduce using rule 142 (expr13 -> array .)
    TRIPLEDOT       reduce using rule 142 (expr13 -> array .)
    BITXOR          reduce using rule 142 (expr13 -> array .)
    PIPE            reduce using rule 142 (expr13 -> array .)
    LESSEQUAL       reduce using rule 142 (expr13 -> array .)
    LESS            reduce using rule 142 (expr13 -> array .)
    GREATER         reduce using rule 142 (expr13 -> array .)
    GREATEREQUAL    reduce using rule 142 (expr13 -> array .)
    IFF             reduce using rule 142 (expr13 -> array .)
    DOUBLEEQUAL     reduce using rule 142 (expr13 -> array .)
    TRIPLEEQUAL     reduce using rule 142 (expr13 -> array .)
    NOTEQUAL        reduce using rule 142 (expr13 -> array .)
    LOGICALAND      reduce using rule 142 (expr13 -> array .)
    QUESTION_MARK   reduce using rule 142 (expr13 -> array .)
    LOGICALOR       reduce using rule 142 (expr13 -> array .)
    KEYWORD_while   reduce using rule 142 (expr13 -> array .)
    KEYWORD_until   reduce using rule 142 (expr13 -> array .)
    DELIM           reduce using rule 142 (expr13 -> array .)
    newline         reduce using rule 142 (expr13 -> array .)
    $end            reduce using rule 142 (expr13 -> array .)
    KEYWORD_do      reduce using rule 142 (expr13 -> array .)
    CLOSE_PAREN     reduce using rule 142 (expr13 -> array .)
    KEYWORD_then    reduce using rule 142 (expr13 -> array .)
    KEYWORD_end     reduce using rule 142 (expr13 -> array .)
    KEYWORD_elsif   reduce using rule 142 (expr13 -> array .)
    KEYWORD_else    reduce using rule 142 (expr13 -> array .)
    COLON           reduce using rule 142 (expr13 -> array .)
    COMMA           reduce using rule 142 (expr13 -> array .)
    CLOSE_BRACKET   reduce using rule 142 (expr13 -> array .)


state 58

    (140) expr13 -> CONSTANTS .

    DOUBLESTAR      reduce using rule 140 (expr13 -> CONSTANTS .)
    MULTIPLY        reduce using rule 140 (expr13 -> CONSTANTS .)
    DIV             reduce using rule 140 (expr13 -> CONSTANTS .)
    MOD             reduce using rule 140 (expr13 -> CONSTANTS .)
    PLUS            reduce using rule 140 (expr13 -> CONSTANTS .)
    MINUS           reduce using rule 140 (expr13 -> CONSTANTS .)
    SHIFTL          reduce using rule 140 (expr13 -> CONSTANTS .)
    SHIFTR          reduce using rule 140 (expr13 -> CONSTANTS .)
    BITAND          reduce using rule 140 (expr13 -> CONSTANTS .)
    DOUBLEDOT       reduce using rule 140 (expr13 -> CONSTANTS .)
    TRIPLEDOT       reduce using rule 140 (expr13 -> CONSTANTS .)
    BITXOR          reduce using rule 140 (expr13 -> CONSTANTS .)
    PIPE            reduce using rule 140 (expr13 -> CONSTANTS .)
    LESSEQUAL       reduce using rule 140 (expr13 -> CONSTANTS .)
    LESS            reduce using rule 140 (expr13 -> CONSTANTS .)
    GREATER         reduce using rule 140 (expr13 -> CONSTANTS .)
    GREATEREQUAL    reduce using rule 140 (expr13 -> CONSTANTS .)
    IFF             reduce using rule 140 (expr13 -> CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 140 (expr13 -> CONSTANTS .)
    TRIPLEEQUAL     reduce using rule 140 (expr13 -> CONSTANTS .)
    NOTEQUAL        reduce using rule 140 (expr13 -> CONSTANTS .)
    LOGICALAND      reduce using rule 140 (expr13 -> CONSTANTS .)
    QUESTION_MARK   reduce using rule 140 (expr13 -> CONSTANTS .)
    LOGICALOR       reduce using rule 140 (expr13 -> CONSTANTS .)
    KEYWORD_while   reduce using rule 140 (expr13 -> CONSTANTS .)
    KEYWORD_until   reduce using rule 140 (expr13 -> CONSTANTS .)
    DELIM           reduce using rule 140 (expr13 -> CONSTANTS .)
    newline         reduce using rule 140 (expr13 -> CONSTANTS .)
    $end            reduce using rule 140 (expr13 -> CONSTANTS .)
    KEYWORD_do      reduce using rule 140 (expr13 -> CONSTANTS .)
    CLOSE_PAREN     reduce using rule 140 (expr13 -> CONSTANTS .)
    KEYWORD_then    reduce using rule 140 (expr13 -> CONSTANTS .)
    KEYWORD_end     reduce using rule 140 (expr13 -> CONSTANTS .)
    KEYWORD_elsif   reduce using rule 140 (expr13 -> CONSTANTS .)
    KEYWORD_else    reduce using rule 140 (expr13 -> CONSTANTS .)
    COLON           reduce using rule 140 (expr13 -> CONSTANTS .)
    COMMA           reduce using rule 140 (expr13 -> CONSTANTS .)
    CLOSE_BRACKET   reduce using rule 140 (expr13 -> CONSTANTS .)


state 59

    (137) expr13 -> OPEN_PAREN expr1 . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 122


state 60

    (102) expr2 -> expr7 DOUBLEDOT . expr7
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (157) none -> .

    OPEN_PAREN      shift and go to state 5
    CONSTANTS       shift and go to state 58
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    uexpr                          shift and go to state 11
    none                           shift and go to state 56
    expr10                         shift and go to state 14
    expr7                          shift and go to state 123
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr8                          shift and go to state 45
    expr9                          shift and go to state 46
    array                          shift and go to state 57
    expr11                         shift and go to state 15

state 61

    (117) expr6 -> expr7 GREATEREQUAL . expr7
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (157) none -> .

    OPEN_PAREN      shift and go to state 5
    CONSTANTS       shift and go to state 58
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    uexpr                          shift and go to state 11
    none                           shift and go to state 56
    expr10                         shift and go to state 14
    expr7                          shift and go to state 124
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr8                          shift and go to state 45
    expr9                          shift and go to state 46
    array                          shift and go to state 57
    expr11                         shift and go to state 15

state 62

    (103) expr2 -> expr7 TRIPLEDOT . expr7
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (157) none -> .

    OPEN_PAREN      shift and go to state 5
    CONSTANTS       shift and go to state 58
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    uexpr                          shift and go to state 11
    none                           shift and go to state 56
    expr10                         shift and go to state 14
    expr7                          shift and go to state 125
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr8                          shift and go to state 45
    expr9                          shift and go to state 46
    array                          shift and go to state 57
    expr11                         shift and go to state 15

state 63

    (116) expr6 -> expr7 GREATER . expr7
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (157) none -> .

    OPEN_PAREN      shift and go to state 5
    CONSTANTS       shift and go to state 58
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    uexpr                          shift and go to state 11
    none                           shift and go to state 56
    expr10                         shift and go to state 14
    expr7                          shift and go to state 126
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr8                          shift and go to state 45
    expr9                          shift and go to state 46
    array                          shift and go to state 57
    expr11                         shift and go to state 15

state 64

    (115) expr6 -> expr7 LESS . expr7
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (157) none -> .

    OPEN_PAREN      shift and go to state 5
    CONSTANTS       shift and go to state 58
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    uexpr                          shift and go to state 11
    none                           shift and go to state 56
    expr10                         shift and go to state 14
    expr7                          shift and go to state 127
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr8                          shift and go to state 45
    expr9                          shift and go to state 46
    array                          shift and go to state 57
    expr11                         shift and go to state 15

state 65

    (121) expr7 -> expr7 PIPE . expr8
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (157) none -> .

    OPEN_PAREN      shift and go to state 5
    CONSTANTS       shift and go to state 58
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    uexpr                          shift and go to state 11
    none                           shift and go to state 56
    expr10                         shift and go to state 14
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr8                          shift and go to state 128
    expr9                          shift and go to state 46
    array                          shift and go to state 57
    expr11                         shift and go to state 15

state 66

    (120) expr7 -> expr7 BITXOR . expr8
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (157) none -> .

    OPEN_PAREN      shift and go to state 5
    CONSTANTS       shift and go to state 58
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    uexpr                          shift and go to state 11
    none                           shift and go to state 56
    expr10                         shift and go to state 14
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr8                          shift and go to state 129
    expr9                          shift and go to state 46
    array                          shift and go to state 57
    expr11                         shift and go to state 15

state 67

    (114) expr6 -> expr7 LESSEQUAL . expr7
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (157) none -> .

    OPEN_PAREN      shift and go to state 5
    CONSTANTS       shift and go to state 58
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    uexpr                          shift and go to state 11
    none                           shift and go to state 56
    expr10                         shift and go to state 14
    expr7                          shift and go to state 130
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr8                          shift and go to state 45
    expr9                          shift and go to state 46
    array                          shift and go to state 57
    expr11                         shift and go to state 15

state 68

    (107) expr4 -> expr4 LOGICALAND . expr5
    (109) expr5 -> . expr6 IFF expr6
    (110) expr5 -> . expr6 DOUBLEEQUAL expr6
    (111) expr5 -> . expr6 TRIPLEEQUAL expr6
    (112) expr5 -> . expr6 NOTEQUAL expr6
    (113) expr5 -> . expr6
    (114) expr6 -> . expr7 LESSEQUAL expr7
    (115) expr6 -> . expr7 LESS expr7
    (116) expr6 -> . expr7 GREATER expr7
    (117) expr6 -> . expr7 GREATEREQUAL expr7
    (118) expr6 -> . expr7
    (119) expr6 -> . BOOLEAN_CONSTANTS
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (157) none -> .

    BOOLEAN_CONSTANTS shift and go to state 12
    OPEN_PAREN      shift and go to state 5
    CONSTANTS       shift and go to state 58
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    uexpr                          shift and go to state 11
    none                           shift and go to state 56
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr6                          shift and go to state 42
    expr7                          shift and go to state 55
    expr5                          shift and go to state 131
    expr10                         shift and go to state 14
    expr8                          shift and go to state 45
    expr9                          shift and go to state 46
    array                          shift and go to state 57
    expr11                         shift and go to state 15

state 69

    (138) expr13 -> uexpr INT_CONSTANTS .

    DOUBLESTAR      reduce using rule 138 (expr13 -> uexpr INT_CONSTANTS .)
    MULTIPLY        reduce using rule 138 (expr13 -> uexpr INT_CONSTANTS .)
    DIV             reduce using rule 138 (expr13 -> uexpr INT_CONSTANTS .)
    MOD             reduce using rule 138 (expr13 -> uexpr INT_CONSTANTS .)
    PLUS            reduce using rule 138 (expr13 -> uexpr INT_CONSTANTS .)
    MINUS           reduce using rule 138 (expr13 -> uexpr INT_CONSTANTS .)
    SHIFTL          reduce using rule 138 (expr13 -> uexpr INT_CONSTANTS .)
    SHIFTR          reduce using rule 138 (expr13 -> uexpr INT_CONSTANTS .)
    BITAND          reduce using rule 138 (expr13 -> uexpr INT_CONSTANTS .)
    DOUBLEDOT       reduce using rule 138 (expr13 -> uexpr INT_CONSTANTS .)
    TRIPLEDOT       reduce using rule 138 (expr13 -> uexpr INT_CONSTANTS .)
    BITXOR          reduce using rule 138 (expr13 -> uexpr INT_CONSTANTS .)
    PIPE            reduce using rule 138 (expr13 -> uexpr INT_CONSTANTS .)
    LESSEQUAL       reduce using rule 138 (expr13 -> uexpr INT_CONSTANTS .)
    LESS            reduce using rule 138 (expr13 -> uexpr INT_CONSTANTS .)
    GREATER         reduce using rule 138 (expr13 -> uexpr INT_CONSTANTS .)
    GREATEREQUAL    reduce using rule 138 (expr13 -> uexpr INT_CONSTANTS .)
    IFF             reduce using rule 138 (expr13 -> uexpr INT_CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 138 (expr13 -> uexpr INT_CONSTANTS .)
    TRIPLEEQUAL     reduce using rule 138 (expr13 -> uexpr INT_CONSTANTS .)
    NOTEQUAL        reduce using rule 138 (expr13 -> uexpr INT_CONSTANTS .)
    LOGICALAND      reduce using rule 138 (expr13 -> uexpr INT_CONSTANTS .)
    QUESTION_MARK   reduce using rule 138 (expr13 -> uexpr INT_CONSTANTS .)
    LOGICALOR       reduce using rule 138 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_while   reduce using rule 138 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_until   reduce using rule 138 (expr13 -> uexpr INT_CONSTANTS .)
    DELIM           reduce using rule 138 (expr13 -> uexpr INT_CONSTANTS .)
    newline         reduce using rule 138 (expr13 -> uexpr INT_CONSTANTS .)
    $end            reduce using rule 138 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_do      reduce using rule 138 (expr13 -> uexpr INT_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 138 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_then    reduce using rule 138 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_end     reduce using rule 138 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 138 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_else    reduce using rule 138 (expr13 -> uexpr INT_CONSTANTS .)
    COLON           reduce using rule 138 (expr13 -> uexpr INT_CONSTANTS .)
    COMMA           reduce using rule 138 (expr13 -> uexpr INT_CONSTANTS .)
    CLOSE_BRACKET   reduce using rule 138 (expr13 -> uexpr INT_CONSTANTS .)


state 70

    (139) expr13 -> uexpr FLOAT_CONSTANTS .

    DOUBLESTAR      reduce using rule 139 (expr13 -> uexpr FLOAT_CONSTANTS .)
    MULTIPLY        reduce using rule 139 (expr13 -> uexpr FLOAT_CONSTANTS .)
    DIV             reduce using rule 139 (expr13 -> uexpr FLOAT_CONSTANTS .)
    MOD             reduce using rule 139 (expr13 -> uexpr FLOAT_CONSTANTS .)
    PLUS            reduce using rule 139 (expr13 -> uexpr FLOAT_CONSTANTS .)
    MINUS           reduce using rule 139 (expr13 -> uexpr FLOAT_CONSTANTS .)
    SHIFTL          reduce using rule 139 (expr13 -> uexpr FLOAT_CONSTANTS .)
    SHIFTR          reduce using rule 139 (expr13 -> uexpr FLOAT_CONSTANTS .)
    BITAND          reduce using rule 139 (expr13 -> uexpr FLOAT_CONSTANTS .)
    DOUBLEDOT       reduce using rule 139 (expr13 -> uexpr FLOAT_CONSTANTS .)
    TRIPLEDOT       reduce using rule 139 (expr13 -> uexpr FLOAT_CONSTANTS .)
    BITXOR          reduce using rule 139 (expr13 -> uexpr FLOAT_CONSTANTS .)
    PIPE            reduce using rule 139 (expr13 -> uexpr FLOAT_CONSTANTS .)
    LESSEQUAL       reduce using rule 139 (expr13 -> uexpr FLOAT_CONSTANTS .)
    LESS            reduce using rule 139 (expr13 -> uexpr FLOAT_CONSTANTS .)
    GREATER         reduce using rule 139 (expr13 -> uexpr FLOAT_CONSTANTS .)
    GREATEREQUAL    reduce using rule 139 (expr13 -> uexpr FLOAT_CONSTANTS .)
    IFF             reduce using rule 139 (expr13 -> uexpr FLOAT_CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 139 (expr13 -> uexpr FLOAT_CONSTANTS .)
    TRIPLEEQUAL     reduce using rule 139 (expr13 -> uexpr FLOAT_CONSTANTS .)
    NOTEQUAL        reduce using rule 139 (expr13 -> uexpr FLOAT_CONSTANTS .)
    LOGICALAND      reduce using rule 139 (expr13 -> uexpr FLOAT_CONSTANTS .)
    QUESTION_MARK   reduce using rule 139 (expr13 -> uexpr FLOAT_CONSTANTS .)
    LOGICALOR       reduce using rule 139 (expr13 -> uexpr FLOAT_CONSTANTS .)
    KEYWORD_while   reduce using rule 139 (expr13 -> uexpr FLOAT_CONSTANTS .)
    KEYWORD_until   reduce using rule 139 (expr13 -> uexpr FLOAT_CONSTANTS .)
    DELIM           reduce using rule 139 (expr13 -> uexpr FLOAT_CONSTANTS .)
    newline         reduce using rule 139 (expr13 -> uexpr FLOAT_CONSTANTS .)
    $end            reduce using rule 139 (expr13 -> uexpr FLOAT_CONSTANTS .)
    KEYWORD_do      reduce using rule 139 (expr13 -> uexpr FLOAT_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 139 (expr13 -> uexpr FLOAT_CONSTANTS .)
    KEYWORD_then    reduce using rule 139 (expr13 -> uexpr FLOAT_CONSTANTS .)
    KEYWORD_end     reduce using rule 139 (expr13 -> uexpr FLOAT_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 139 (expr13 -> uexpr FLOAT_CONSTANTS .)
    KEYWORD_else    reduce using rule 139 (expr13 -> uexpr FLOAT_CONSTANTS .)
    COLON           reduce using rule 139 (expr13 -> uexpr FLOAT_CONSTANTS .)
    COMMA           reduce using rule 139 (expr13 -> uexpr FLOAT_CONSTANTS .)
    CLOSE_BRACKET   reduce using rule 139 (expr13 -> uexpr FLOAT_CONSTANTS .)


state 71

    (24) top_stmt -> top_stmt KEYWORD_while . expr3
    (105) expr3 -> . expr3 LOGICALOR expr4
    (106) expr3 -> . expr4
    (107) expr4 -> . expr4 LOGICALAND expr5
    (108) expr4 -> . expr5
    (109) expr5 -> . expr6 IFF expr6
    (110) expr5 -> . expr6 DOUBLEEQUAL expr6
    (111) expr5 -> . expr6 TRIPLEEQUAL expr6
    (112) expr5 -> . expr6 NOTEQUAL expr6
    (113) expr5 -> . expr6
    (114) expr6 -> . expr7 LESSEQUAL expr7
    (115) expr6 -> . expr7 LESS expr7
    (116) expr6 -> . expr7 GREATER expr7
    (117) expr6 -> . expr7 GREATEREQUAL expr7
    (118) expr6 -> . expr7
    (119) expr6 -> . BOOLEAN_CONSTANTS
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (157) none -> .

    BOOLEAN_CONSTANTS shift and go to state 12
    OPEN_PAREN      shift and go to state 5
    CONSTANTS       shift and go to state 58
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    uexpr                          shift and go to state 11
    none                           shift and go to state 56
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr3                          shift and go to state 132
    expr6                          shift and go to state 42
    expr7                          shift and go to state 55
    expr4                          shift and go to state 10
    expr5                          shift and go to state 44
    expr10                         shift and go to state 14
    expr8                          shift and go to state 45
    expr9                          shift and go to state 46
    array                          shift and go to state 57
    expr11                         shift and go to state 15

state 72

    (26) top_stmt -> top_stmt KEYWORD_until . expr3
    (105) expr3 -> . expr3 LOGICALOR expr4
    (106) expr3 -> . expr4
    (107) expr4 -> . expr4 LOGICALAND expr5
    (108) expr4 -> . expr5
    (109) expr5 -> . expr6 IFF expr6
    (110) expr5 -> . expr6 DOUBLEEQUAL expr6
    (111) expr5 -> . expr6 TRIPLEEQUAL expr6
    (112) expr5 -> . expr6 NOTEQUAL expr6
    (113) expr5 -> . expr6
    (114) expr6 -> . expr7 LESSEQUAL expr7
    (115) expr6 -> . expr7 LESS expr7
    (116) expr6 -> . expr7 GREATER expr7
    (117) expr6 -> . expr7 GREATEREQUAL expr7
    (118) expr6 -> . expr7
    (119) expr6 -> . BOOLEAN_CONSTANTS
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (157) none -> .

    BOOLEAN_CONSTANTS shift and go to state 12
    OPEN_PAREN      shift and go to state 5
    CONSTANTS       shift and go to state 58
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    uexpr                          shift and go to state 11
    none                           shift and go to state 56
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr3                          shift and go to state 133
    expr6                          shift and go to state 42
    expr7                          shift and go to state 55
    expr4                          shift and go to state 10
    expr5                          shift and go to state 44
    expr10                         shift and go to state 14
    expr8                          shift and go to state 45
    expr9                          shift and go to state 46
    array                          shift and go to state 57
    expr11                         shift and go to state 15

state 73

    (128) expr10 -> expr10 PLUS . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (157) none -> .

    OPEN_PAREN      shift and go to state 5
    CONSTANTS       shift and go to state 58
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    uexpr                          shift and go to state 11
    none                           shift and go to state 56
    expr11                         shift and go to state 134
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    array                          shift and go to state 57

state 74

    (129) expr10 -> expr10 MINUS . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (157) none -> .

    OPEN_PAREN      shift and go to state 5
    CONSTANTS       shift and go to state 58
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    uexpr                          shift and go to state 11
    none                           shift and go to state 56
    expr11                         shift and go to state 135
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    array                          shift and go to state 57

state 75

    (131) expr11 -> expr11 MULTIPLY . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (157) none -> .

    OPEN_PAREN      shift and go to state 5
    CONSTANTS       shift and go to state 58
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    uexpr                          shift and go to state 11
    none                           shift and go to state 56
    expr12                         shift and go to state 136
    expr13                         shift and go to state 17
    array                          shift and go to state 57

state 76

    (132) expr11 -> expr11 DIV . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (157) none -> .

    OPEN_PAREN      shift and go to state 5
    CONSTANTS       shift and go to state 58
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    uexpr                          shift and go to state 11
    none                           shift and go to state 56
    expr12                         shift and go to state 137
    expr13                         shift and go to state 17
    array                          shift and go to state 57

state 77

    (133) expr11 -> expr11 MOD . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (157) none -> .

    OPEN_PAREN      shift and go to state 5
    CONSTANTS       shift and go to state 58
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    uexpr                          shift and go to state 11
    none                           shift and go to state 56
    expr12                         shift and go to state 138
    expr13                         shift and go to state 17
    array                          shift and go to state 57

state 78

    (135) expr12 -> expr13 DOUBLESTAR . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (157) none -> .

    OPEN_PAREN      shift and go to state 5
    CONSTANTS       shift and go to state 58
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    uexpr                          shift and go to state 11
    none                           shift and go to state 56
    expr12                         shift and go to state 139
    expr13                         shift and go to state 17
    array                          shift and go to state 57

state 79

    (9) fname -> VARIABLES .

    OPEN_PAREN      reduce using rule 9 (fname -> VARIABLES .)
    VARIABLES       reduce using rule 9 (fname -> VARIABLES .)
    CONSTANTS       reduce using rule 9 (fname -> VARIABLES .)


state 80

    (8) func_defn -> KEYWORD_def fname . opt_oparen arguments opt_cparen func_stmts opt_terms KEYWORD_end
    (69) opt_oparen -> . OPEN_PAREN
    (70) opt_oparen -> . none
    (157) none -> .

    OPEN_PAREN      shift and go to state 111
    VARIABLES       reduce using rule 157 (none -> .)
    CONSTANTS       reduce using rule 157 (none -> .)

    none                           shift and go to state 110
    opt_oparen                     shift and go to state 140

state 81

    (10) fname -> CONSTANTS .

    OPEN_PAREN      reduce using rule 10 (fname -> CONSTANTS .)
    VARIABLES       reduce using rule 10 (fname -> CONSTANTS .)
    CONSTANTS       reduce using rule 10 (fname -> CONSTANTS .)


state 82

    (153) terms -> term .

    KEYWORD_return  reduce using rule 153 (terms -> term .)
    DELIM           reduce using rule 153 (terms -> term .)
    newline         reduce using rule 153 (terms -> term .)
    KEYWORD_if      reduce using rule 153 (terms -> term .)
    KEYWORD_while   reduce using rule 153 (terms -> term .)
    KEYWORD_begin   reduce using rule 153 (terms -> term .)
    KEYWORD_until   reduce using rule 153 (terms -> term .)
    KEYWORD_for     reduce using rule 153 (terms -> term .)
    KEYWORD_puts    reduce using rule 153 (terms -> term .)
    KEYWORD_break   reduce using rule 153 (terms -> term .)
    KEYWORD_next    reduce using rule 153 (terms -> term .)
    KEYWORD_redo    reduce using rule 153 (terms -> term .)
    KEYWORD_exit    reduce using rule 153 (terms -> term .)
    VARIABLES       reduce using rule 153 (terms -> term .)
    CONSTANTS       reduce using rule 153 (terms -> term .)
    BOOLEAN_CONSTANTS reduce using rule 153 (terms -> term .)
    OPEN_PAREN      reduce using rule 153 (terms -> term .)
    PLUS            reduce using rule 153 (terms -> term .)
    MINUS           reduce using rule 153 (terms -> term .)
    BITNOT          reduce using rule 153 (terms -> term .)
    BITCOMP         reduce using rule 153 (terms -> term .)
    INT_CONSTANTS   reduce using rule 153 (terms -> term .)
    FLOAT_CONSTANTS reduce using rule 153 (terms -> term .)
    KEYWORD_end     reduce using rule 153 (terms -> term .)
    KEYWORD_elsif   reduce using rule 153 (terms -> term .)
    KEYWORD_else    reduce using rule 153 (terms -> term .)
    KEYWORD_def     reduce using rule 153 (terms -> term .)
    $end            reduce using rule 153 (terms -> term .)


state 83

    (4) statements -> statements terms . statement
    (152) opt_terms -> terms .
    (154) terms -> terms . term
    (6) statement -> . top_compstmt
    (7) statement -> . func_defn
    (155) term -> . DELIM
    (156) term -> . newline
    (19) top_compstmt -> . top_stmts
    (8) func_defn -> . KEYWORD_def fname opt_oparen arguments opt_cparen func_stmts opt_terms KEYWORD_end
    (20) top_stmts -> . top_stmt
    (21) top_stmt -> . stmt
    (22) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (23) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (24) top_stmt -> . top_stmt KEYWORD_while expr3
    (25) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (26) top_stmt -> . top_stmt KEYWORD_until expr3
    (27) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (28) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (29) top_stmt -> . KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (33) stmt -> . expr
    (34) stmt -> . expr1
    (35) stmt -> . puts_stmt
    (36) stmt -> . loop_stmt
    (37) stmt -> . exit_stmt
    (38) stmt -> . func_call_stmt
    (78) expr -> . MLHS EQUAL MRHS
    (100) expr1 -> . expr3 QUESTION_MARK expr2 COLON expr2
    (101) expr1 -> . expr2
    (45) puts_stmt -> . KEYWORD_puts mrhs
    (46) puts_stmt -> . KEYWORD_puts expr
    (41) loop_stmt -> . KEYWORD_break
    (42) loop_stmt -> . KEYWORD_next
    (43) loop_stmt -> . KEYWORD_redo
    (44) exit_stmt -> . KEYWORD_exit
    (39) func_call_stmt -> . fname opt_oparen func_ret_arg opt_cparen
    (40) func_call_stmt -> . MLHS EQUAL fname opt_oparen func_ret_arg opt_cparen
    (79) MLHS -> . mlhs
    (80) MLHS -> . MLHS COMMA mlhs
    (105) expr3 -> . expr3 LOGICALOR expr4
    (106) expr3 -> . expr4
    (102) expr2 -> . expr7 DOUBLEDOT expr7
    (103) expr2 -> . expr7 TRIPLEDOT expr7
    (104) expr2 -> . expr3
    (9) fname -> . VARIABLES
    (10) fname -> . CONSTANTS
    (83) mlhs -> . VARIABLES
    (84) mlhs -> . CONSTANTS
    (85) mlhs -> . array
    (107) expr4 -> . expr4 LOGICALAND expr5
    (108) expr4 -> . expr5
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (109) expr5 -> . expr6 IFF expr6
    (110) expr5 -> . expr6 DOUBLEEQUAL expr6
    (111) expr5 -> . expr6 TRIPLEEQUAL expr6
    (112) expr5 -> . expr6 NOTEQUAL expr6
    (113) expr5 -> . expr6
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (114) expr6 -> . expr7 LESSEQUAL expr7
    (115) expr6 -> . expr7 LESS expr7
    (116) expr6 -> . expr7 GREATER expr7
    (117) expr6 -> . expr7 GREATEREQUAL expr7
    (118) expr6 -> . expr7
    (119) expr6 -> . BOOLEAN_CONSTANTS
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (157) none -> .

    $end            reduce using rule 152 (opt_terms -> terms .)
    DELIM           shift and go to state 85
    newline         shift and go to state 84
    KEYWORD_def     shift and go to state 21
    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 37
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 52
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 47
    KEYWORD_next    shift and go to state 30
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    VARIABLES       shift and go to state 28
    CONSTANTS       shift and go to state 22
    BOOLEAN_CONSTANTS shift and go to state 12
    OPEN_PAREN      shift and go to state 5
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    mlhs                           shift and go to state 2
    func_defn                      shift and go to state 36
    puts_stmt                      shift and go to state 19
    expr11                         shift and go to state 15
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    top_stmts                      shift and go to state 18
    array                          shift and go to state 26
    expr2                          shift and go to state 39
    expr3                          shift and go to state 40
    expr1                          shift and go to state 41
    expr6                          shift and go to state 42
    fname                          shift and go to state 43
    expr5                          shift and go to state 44
    func_call_stmt                 shift and go to state 32
    expr8                          shift and go to state 45
    expr9                          shift and go to state 46
    expr4                          shift and go to state 10
    statement                      shift and go to state 142
    exit_stmt                      shift and go to state 48
    top_compstmt                   shift and go to state 49
    MLHS                           shift and go to state 50
    none                           shift and go to state 56
    stmt                           shift and go to state 20
    expr7                          shift and go to state 8
    loop_stmt                      shift and go to state 9
    uexpr                          shift and go to state 11
    term                           shift and go to state 141
    expr                           shift and go to state 35
    expr10                         shift and go to state 14
    top_stmt                       shift and go to state 13

state 84

    (156) term -> newline .

    KEYWORD_if      reduce using rule 156 (term -> newline .)
    KEYWORD_while   reduce using rule 156 (term -> newline .)
    KEYWORD_begin   reduce using rule 156 (term -> newline .)
    KEYWORD_until   reduce using rule 156 (term -> newline .)
    KEYWORD_for     reduce using rule 156 (term -> newline .)
    DELIM           reduce using rule 156 (term -> newline .)
    newline         reduce using rule 156 (term -> newline .)
    KEYWORD_puts    reduce using rule 156 (term -> newline .)
    KEYWORD_break   reduce using rule 156 (term -> newline .)
    KEYWORD_next    reduce using rule 156 (term -> newline .)
    KEYWORD_redo    reduce using rule 156 (term -> newline .)
    KEYWORD_exit    reduce using rule 156 (term -> newline .)
    VARIABLES       reduce using rule 156 (term -> newline .)
    CONSTANTS       reduce using rule 156 (term -> newline .)
    BOOLEAN_CONSTANTS reduce using rule 156 (term -> newline .)
    OPEN_PAREN      reduce using rule 156 (term -> newline .)
    PLUS            reduce using rule 156 (term -> newline .)
    MINUS           reduce using rule 156 (term -> newline .)
    BITNOT          reduce using rule 156 (term -> newline .)
    BITCOMP         reduce using rule 156 (term -> newline .)
    INT_CONSTANTS   reduce using rule 156 (term -> newline .)
    FLOAT_CONSTANTS reduce using rule 156 (term -> newline .)
    KEYWORD_end     reduce using rule 156 (term -> newline .)
    KEYWORD_return  reduce using rule 156 (term -> newline .)
    KEYWORD_def     reduce using rule 156 (term -> newline .)
    $end            reduce using rule 156 (term -> newline .)
    KEYWORD_elsif   reduce using rule 156 (term -> newline .)
    KEYWORD_else    reduce using rule 156 (term -> newline .)


state 85

    (155) term -> DELIM .

    KEYWORD_if      reduce using rule 155 (term -> DELIM .)
    KEYWORD_while   reduce using rule 155 (term -> DELIM .)
    KEYWORD_begin   reduce using rule 155 (term -> DELIM .)
    KEYWORD_until   reduce using rule 155 (term -> DELIM .)
    KEYWORD_for     reduce using rule 155 (term -> DELIM .)
    DELIM           reduce using rule 155 (term -> DELIM .)
    newline         reduce using rule 155 (term -> DELIM .)
    KEYWORD_puts    reduce using rule 155 (term -> DELIM .)
    KEYWORD_break   reduce using rule 155 (term -> DELIM .)
    KEYWORD_next    reduce using rule 155 (term -> DELIM .)
    KEYWORD_redo    reduce using rule 155 (term -> DELIM .)
    KEYWORD_exit    reduce using rule 155 (term -> DELIM .)
    VARIABLES       reduce using rule 155 (term -> DELIM .)
    CONSTANTS       reduce using rule 155 (term -> DELIM .)
    BOOLEAN_CONSTANTS reduce using rule 155 (term -> DELIM .)
    OPEN_PAREN      reduce using rule 155 (term -> DELIM .)
    PLUS            reduce using rule 155 (term -> DELIM .)
    MINUS           reduce using rule 155 (term -> DELIM .)
    BITNOT          reduce using rule 155 (term -> DELIM .)
    BITCOMP         reduce using rule 155 (term -> DELIM .)
    INT_CONSTANTS   reduce using rule 155 (term -> DELIM .)
    FLOAT_CONSTANTS reduce using rule 155 (term -> DELIM .)
    KEYWORD_end     reduce using rule 155 (term -> DELIM .)
    KEYWORD_return  reduce using rule 155 (term -> DELIM .)
    KEYWORD_def     reduce using rule 155 (term -> DELIM .)
    $end            reduce using rule 155 (term -> DELIM .)
    KEYWORD_elsif   reduce using rule 155 (term -> DELIM .)
    KEYWORD_else    reduce using rule 155 (term -> DELIM .)


state 86

    (151) opt_terms -> none .

    KEYWORD_end     reduce using rule 151 (opt_terms -> none .)
    $end            reduce using rule 151 (opt_terms -> none .)
    KEYWORD_elsif   reduce using rule 151 (opt_terms -> none .)
    KEYWORD_else    reduce using rule 151 (opt_terms -> none .)


state 87

    (2) top_top_compstmt -> statements opt_terms .

    $end            reduce using rule 2 (top_top_compstmt -> statements opt_terms .)


state 88

    (27) top_stmt -> KEYWORD_until expr3 . opt_do gen_stmts opt_terms KEYWORD_end
    (105) expr3 -> expr3 . LOGICALOR expr4
    (62) opt_do -> . KEYWORD_do
    (63) opt_do -> . newline

    LOGICALOR       shift and go to state 104
    KEYWORD_do      shift and go to state 120
    newline         shift and go to state 119

    opt_do                         shift and go to state 143

state 89

    (22) top_stmt -> KEYWORD_if expr3 . opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (105) expr3 -> expr3 . LOGICALOR expr4
    (60) opt_then -> . KEYWORD_then
    (61) opt_then -> . newline

    LOGICALOR       shift and go to state 104
    KEYWORD_then    shift and go to state 145
    newline         shift and go to state 144

    opt_then                       shift and go to state 146

state 90

    (143) array -> VARIABLES OPEN_BRACKET . expr7 CLOSE_BRACKET
    (144) array -> VARIABLES OPEN_BRACKET . expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> VARIABLES OPEN_BRACKET . expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (157) none -> .

    OPEN_PAREN      shift and go to state 5
    CONSTANTS       shift and go to state 58
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    uexpr                          shift and go to state 11
    none                           shift and go to state 56
    expr10                         shift and go to state 14
    expr7                          shift and go to state 147
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr8                          shift and go to state 45
    expr9                          shift and go to state 46
    array                          shift and go to state 57
    expr11                         shift and go to state 15

state 91

    (87) mrhs -> str_expr .
    (90) str_expr -> str_expr . PLUS STRING_CONSTANTS

    COMMA           reduce using rule 87 (mrhs -> str_expr .)
    KEYWORD_while   reduce using rule 87 (mrhs -> str_expr .)
    KEYWORD_until   reduce using rule 87 (mrhs -> str_expr .)
    DELIM           reduce using rule 87 (mrhs -> str_expr .)
    newline         reduce using rule 87 (mrhs -> str_expr .)
    $end            reduce using rule 87 (mrhs -> str_expr .)
    KEYWORD_end     reduce using rule 87 (mrhs -> str_expr .)
    KEYWORD_elsif   reduce using rule 87 (mrhs -> str_expr .)
    KEYWORD_else    reduce using rule 87 (mrhs -> str_expr .)
    PLUS            shift and go to state 148


state 92

    (83) mlhs -> VARIABLES .
    (143) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> VARIABLES . OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> VARIABLES . OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (141) expr13 -> VARIABLES .

    EQUAL           reduce using rule 83 (mlhs -> VARIABLES .)
    COMMA           reduce using rule 83 (mlhs -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 90
    DOUBLESTAR      reduce using rule 141 (expr13 -> VARIABLES .)
    MULTIPLY        reduce using rule 141 (expr13 -> VARIABLES .)
    DIV             reduce using rule 141 (expr13 -> VARIABLES .)
    MOD             reduce using rule 141 (expr13 -> VARIABLES .)
    PLUS            reduce using rule 141 (expr13 -> VARIABLES .)
    MINUS           reduce using rule 141 (expr13 -> VARIABLES .)
    SHIFTL          reduce using rule 141 (expr13 -> VARIABLES .)
    SHIFTR          reduce using rule 141 (expr13 -> VARIABLES .)
    BITAND          reduce using rule 141 (expr13 -> VARIABLES .)
    DOUBLEDOT       reduce using rule 141 (expr13 -> VARIABLES .)
    TRIPLEDOT       reduce using rule 141 (expr13 -> VARIABLES .)
    BITXOR          reduce using rule 141 (expr13 -> VARIABLES .)
    PIPE            reduce using rule 141 (expr13 -> VARIABLES .)
    LESSEQUAL       reduce using rule 141 (expr13 -> VARIABLES .)
    LESS            reduce using rule 141 (expr13 -> VARIABLES .)
    GREATER         reduce using rule 141 (expr13 -> VARIABLES .)
    GREATEREQUAL    reduce using rule 141 (expr13 -> VARIABLES .)
    IFF             reduce using rule 141 (expr13 -> VARIABLES .)
    DOUBLEEQUAL     reduce using rule 141 (expr13 -> VARIABLES .)
    TRIPLEEQUAL     reduce using rule 141 (expr13 -> VARIABLES .)
    NOTEQUAL        reduce using rule 141 (expr13 -> VARIABLES .)
    LOGICALAND      reduce using rule 141 (expr13 -> VARIABLES .)
    QUESTION_MARK   reduce using rule 141 (expr13 -> VARIABLES .)
    LOGICALOR       reduce using rule 141 (expr13 -> VARIABLES .)
    KEYWORD_while   reduce using rule 141 (expr13 -> VARIABLES .)
    KEYWORD_until   reduce using rule 141 (expr13 -> VARIABLES .)
    DELIM           reduce using rule 141 (expr13 -> VARIABLES .)
    newline         reduce using rule 141 (expr13 -> VARIABLES .)
    $end            reduce using rule 141 (expr13 -> VARIABLES .)
    KEYWORD_end     reduce using rule 141 (expr13 -> VARIABLES .)
    KEYWORD_elsif   reduce using rule 141 (expr13 -> VARIABLES .)
    KEYWORD_else    reduce using rule 141 (expr13 -> VARIABLES .)


state 93

    (89) mrhs -> OPEN_BRACKET . func_ret_arg CLOSE_BRACKET
    (52) func_ret_arg -> . func_arg_expr
    (53) func_ret_arg -> . primary
    (54) func_ret_arg -> . func_ret_arg COMMA func_arg_expr
    (55) func_ret_arg -> . func_ret_arg COMMA primary
    (17) func_arg_expr -> . VARIABLES EQUAL primary
    (18) func_arg_expr -> . CONSTANTS EQUAL primary
    (92) primary -> . INT_CONSTANTS
    (93) primary -> . FLOAT_CONSTANTS
    (94) primary -> . STRING_CONSTANTS
    (95) primary -> . CHAR_CONSTANTS
    (96) primary -> . BOOLEAN_CONSTANTS
    (97) primary -> . CONSTANTS
    (98) primary -> . VARIABLES
    (99) primary -> . array
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET

    VARIABLES       shift and go to state 158
    CONSTANTS       shift and go to state 159
    INT_CONSTANTS   shift and go to state 150
    FLOAT_CONSTANTS shift and go to state 151
    STRING_CONSTANTS shift and go to state 154
    CHAR_CONSTANTS  shift and go to state 157
    BOOLEAN_CONSTANTS shift and go to state 149

    func_arg_expr                  shift and go to state 152
    func_ret_arg                   shift and go to state 155
    array                          shift and go to state 156
    primary                        shift and go to state 153

state 94

    (86) mrhs -> expr1 .

    COMMA           reduce using rule 86 (mrhs -> expr1 .)
    KEYWORD_while   reduce using rule 86 (mrhs -> expr1 .)
    KEYWORD_until   reduce using rule 86 (mrhs -> expr1 .)
    DELIM           reduce using rule 86 (mrhs -> expr1 .)
    newline         reduce using rule 86 (mrhs -> expr1 .)
    $end            reduce using rule 86 (mrhs -> expr1 .)
    KEYWORD_end     reduce using rule 86 (mrhs -> expr1 .)
    KEYWORD_elsif   reduce using rule 86 (mrhs -> expr1 .)
    KEYWORD_else    reduce using rule 86 (mrhs -> expr1 .)


state 95

    (88) mrhs -> KEYWORD_gets .

    COMMA           reduce using rule 88 (mrhs -> KEYWORD_gets .)
    KEYWORD_while   reduce using rule 88 (mrhs -> KEYWORD_gets .)
    KEYWORD_until   reduce using rule 88 (mrhs -> KEYWORD_gets .)
    DELIM           reduce using rule 88 (mrhs -> KEYWORD_gets .)
    newline         reduce using rule 88 (mrhs -> KEYWORD_gets .)
    $end            reduce using rule 88 (mrhs -> KEYWORD_gets .)
    KEYWORD_end     reduce using rule 88 (mrhs -> KEYWORD_gets .)
    KEYWORD_elsif   reduce using rule 88 (mrhs -> KEYWORD_gets .)
    KEYWORD_else    reduce using rule 88 (mrhs -> KEYWORD_gets .)


state 96

    (78) expr -> MLHS . EQUAL MRHS
    (80) MLHS -> MLHS . COMMA mlhs

    EQUAL           shift and go to state 160
    COMMA           shift and go to state 117


state 97

    (45) puts_stmt -> KEYWORD_puts mrhs .

    KEYWORD_while   reduce using rule 45 (puts_stmt -> KEYWORD_puts mrhs .)
    KEYWORD_until   reduce using rule 45 (puts_stmt -> KEYWORD_puts mrhs .)
    DELIM           reduce using rule 45 (puts_stmt -> KEYWORD_puts mrhs .)
    newline         reduce using rule 45 (puts_stmt -> KEYWORD_puts mrhs .)
    KEYWORD_end     reduce using rule 45 (puts_stmt -> KEYWORD_puts mrhs .)
    $end            reduce using rule 45 (puts_stmt -> KEYWORD_puts mrhs .)
    KEYWORD_elsif   reduce using rule 45 (puts_stmt -> KEYWORD_puts mrhs .)
    KEYWORD_else    reduce using rule 45 (puts_stmt -> KEYWORD_puts mrhs .)


state 98

    (46) puts_stmt -> KEYWORD_puts expr .

    KEYWORD_while   reduce using rule 46 (puts_stmt -> KEYWORD_puts expr .)
    KEYWORD_until   reduce using rule 46 (puts_stmt -> KEYWORD_puts expr .)
    DELIM           reduce using rule 46 (puts_stmt -> KEYWORD_puts expr .)
    newline         reduce using rule 46 (puts_stmt -> KEYWORD_puts expr .)
    KEYWORD_end     reduce using rule 46 (puts_stmt -> KEYWORD_puts expr .)
    $end            reduce using rule 46 (puts_stmt -> KEYWORD_puts expr .)
    KEYWORD_elsif   reduce using rule 46 (puts_stmt -> KEYWORD_puts expr .)
    KEYWORD_else    reduce using rule 46 (puts_stmt -> KEYWORD_puts expr .)


state 99

    (91) str_expr -> STRING_CONSTANTS .

    PLUS            reduce using rule 91 (str_expr -> STRING_CONSTANTS .)
    COMMA           reduce using rule 91 (str_expr -> STRING_CONSTANTS .)
    KEYWORD_while   reduce using rule 91 (str_expr -> STRING_CONSTANTS .)
    KEYWORD_until   reduce using rule 91 (str_expr -> STRING_CONSTANTS .)
    DELIM           reduce using rule 91 (str_expr -> STRING_CONSTANTS .)
    newline         reduce using rule 91 (str_expr -> STRING_CONSTANTS .)
    $end            reduce using rule 91 (str_expr -> STRING_CONSTANTS .)
    KEYWORD_end     reduce using rule 91 (str_expr -> STRING_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 91 (str_expr -> STRING_CONSTANTS .)
    KEYWORD_else    reduce using rule 91 (str_expr -> STRING_CONSTANTS .)


state 100

    (84) mlhs -> CONSTANTS .
    (140) expr13 -> CONSTANTS .

    EQUAL           reduce using rule 84 (mlhs -> CONSTANTS .)
    COMMA           reduce using rule 84 (mlhs -> CONSTANTS .)
    DOUBLESTAR      reduce using rule 140 (expr13 -> CONSTANTS .)
    MULTIPLY        reduce using rule 140 (expr13 -> CONSTANTS .)
    DIV             reduce using rule 140 (expr13 -> CONSTANTS .)
    MOD             reduce using rule 140 (expr13 -> CONSTANTS .)
    PLUS            reduce using rule 140 (expr13 -> CONSTANTS .)
    MINUS           reduce using rule 140 (expr13 -> CONSTANTS .)
    SHIFTL          reduce using rule 140 (expr13 -> CONSTANTS .)
    SHIFTR          reduce using rule 140 (expr13 -> CONSTANTS .)
    BITAND          reduce using rule 140 (expr13 -> CONSTANTS .)
    DOUBLEDOT       reduce using rule 140 (expr13 -> CONSTANTS .)
    TRIPLEDOT       reduce using rule 140 (expr13 -> CONSTANTS .)
    BITXOR          reduce using rule 140 (expr13 -> CONSTANTS .)
    PIPE            reduce using rule 140 (expr13 -> CONSTANTS .)
    LESSEQUAL       reduce using rule 140 (expr13 -> CONSTANTS .)
    LESS            reduce using rule 140 (expr13 -> CONSTANTS .)
    GREATER         reduce using rule 140 (expr13 -> CONSTANTS .)
    GREATEREQUAL    reduce using rule 140 (expr13 -> CONSTANTS .)
    IFF             reduce using rule 140 (expr13 -> CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 140 (expr13 -> CONSTANTS .)
    TRIPLEEQUAL     reduce using rule 140 (expr13 -> CONSTANTS .)
    NOTEQUAL        reduce using rule 140 (expr13 -> CONSTANTS .)
    LOGICALAND      reduce using rule 140 (expr13 -> CONSTANTS .)
    QUESTION_MARK   reduce using rule 140 (expr13 -> CONSTANTS .)
    LOGICALOR       reduce using rule 140 (expr13 -> CONSTANTS .)
    KEYWORD_while   reduce using rule 140 (expr13 -> CONSTANTS .)
    KEYWORD_until   reduce using rule 140 (expr13 -> CONSTANTS .)
    DELIM           reduce using rule 140 (expr13 -> CONSTANTS .)
    newline         reduce using rule 140 (expr13 -> CONSTANTS .)
    $end            reduce using rule 140 (expr13 -> CONSTANTS .)
    KEYWORD_end     reduce using rule 140 (expr13 -> CONSTANTS .)
    KEYWORD_elsif   reduce using rule 140 (expr13 -> CONSTANTS .)
    KEYWORD_else    reduce using rule 140 (expr13 -> CONSTANTS .)


state 101

    (30) gen_stmts -> top_stmt .
    (24) top_stmt -> top_stmt . KEYWORD_while expr3
    (26) top_stmt -> top_stmt . KEYWORD_until expr3

    DELIM           reduce using rule 30 (gen_stmts -> top_stmt .)
    newline         reduce using rule 30 (gen_stmts -> top_stmt .)
    KEYWORD_elsif   reduce using rule 30 (gen_stmts -> top_stmt .)
    KEYWORD_else    reduce using rule 30 (gen_stmts -> top_stmt .)
    KEYWORD_end     reduce using rule 30 (gen_stmts -> top_stmt .)
    KEYWORD_while   shift and go to state 71
    KEYWORD_until   shift and go to state 72


state 102

    (32) gen_stmts -> none .
    (146) uexpr -> none .

    DELIM           reduce using rule 32 (gen_stmts -> none .)
    newline         reduce using rule 32 (gen_stmts -> none .)
    KEYWORD_elsif   reduce using rule 32 (gen_stmts -> none .)
    KEYWORD_else    reduce using rule 32 (gen_stmts -> none .)
    KEYWORD_end     reduce using rule 32 (gen_stmts -> none .)
    INT_CONSTANTS   reduce using rule 146 (uexpr -> none .)
    FLOAT_CONSTANTS reduce using rule 146 (uexpr -> none .)


state 103

    (25) top_stmt -> KEYWORD_begin gen_stmts . opt_terms KEYWORD_end KEYWORD_while expr3
    (28) top_stmt -> KEYWORD_begin gen_stmts . opt_terms KEYWORD_end KEYWORD_until expr3
    (31) gen_stmts -> gen_stmts . terms top_stmt
    (151) opt_terms -> . none
    (152) opt_terms -> . terms
    (153) terms -> . term
    (154) terms -> . terms term
    (157) none -> .
    (155) term -> . DELIM
    (156) term -> . newline

    KEYWORD_end     reduce using rule 157 (none -> .)
    DELIM           shift and go to state 85
    newline         shift and go to state 84

    none                           shift and go to state 86
    terms                          shift and go to state 161
    term                           shift and go to state 82
    opt_terms                      shift and go to state 162

state 104

    (105) expr3 -> expr3 LOGICALOR . expr4
    (107) expr4 -> . expr4 LOGICALAND expr5
    (108) expr4 -> . expr5
    (109) expr5 -> . expr6 IFF expr6
    (110) expr5 -> . expr6 DOUBLEEQUAL expr6
    (111) expr5 -> . expr6 TRIPLEEQUAL expr6
    (112) expr5 -> . expr6 NOTEQUAL expr6
    (113) expr5 -> . expr6
    (114) expr6 -> . expr7 LESSEQUAL expr7
    (115) expr6 -> . expr7 LESS expr7
    (116) expr6 -> . expr7 GREATER expr7
    (117) expr6 -> . expr7 GREATEREQUAL expr7
    (118) expr6 -> . expr7
    (119) expr6 -> . BOOLEAN_CONSTANTS
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (157) none -> .

    BOOLEAN_CONSTANTS shift and go to state 12
    OPEN_PAREN      shift and go to state 5
    CONSTANTS       shift and go to state 58
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    uexpr                          shift and go to state 11
    none                           shift and go to state 56
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr6                          shift and go to state 42
    expr7                          shift and go to state 55
    expr4                          shift and go to state 163
    expr5                          shift and go to state 44
    expr10                         shift and go to state 14
    expr8                          shift and go to state 45
    expr9                          shift and go to state 46
    array                          shift and go to state 57
    expr11                         shift and go to state 15

state 105

    (100) expr1 -> expr3 QUESTION_MARK . expr2 COLON expr2
    (102) expr2 -> . expr7 DOUBLEDOT expr7
    (103) expr2 -> . expr7 TRIPLEDOT expr7
    (104) expr2 -> . expr3
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (105) expr3 -> . expr3 LOGICALOR expr4
    (106) expr3 -> . expr4
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (107) expr4 -> . expr4 LOGICALAND expr5
    (108) expr4 -> . expr5
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (109) expr5 -> . expr6 IFF expr6
    (110) expr5 -> . expr6 DOUBLEEQUAL expr6
    (111) expr5 -> . expr6 TRIPLEEQUAL expr6
    (112) expr5 -> . expr6 NOTEQUAL expr6
    (113) expr5 -> . expr6
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (114) expr6 -> . expr7 LESSEQUAL expr7
    (115) expr6 -> . expr7 LESS expr7
    (116) expr6 -> . expr7 GREATER expr7
    (117) expr6 -> . expr7 GREATEREQUAL expr7
    (118) expr6 -> . expr7
    (119) expr6 -> . BOOLEAN_CONSTANTS
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (157) none -> .

    BOOLEAN_CONSTANTS shift and go to state 12
    OPEN_PAREN      shift and go to state 5
    CONSTANTS       shift and go to state 58
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    uexpr                          shift and go to state 11
    none                           shift and go to state 56
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr2                          shift and go to state 164
    expr3                          shift and go to state 165
    expr10                         shift and go to state 14
    expr7                          shift and go to state 8
    expr4                          shift and go to state 10
    expr5                          shift and go to state 44
    expr6                          shift and go to state 42
    expr8                          shift and go to state 45
    expr9                          shift and go to state 46
    array                          shift and go to state 57
    expr11                         shift and go to state 15

state 106

    (112) expr5 -> expr6 NOTEQUAL . expr6
    (114) expr6 -> . expr7 LESSEQUAL expr7
    (115) expr6 -> . expr7 LESS expr7
    (116) expr6 -> . expr7 GREATER expr7
    (117) expr6 -> . expr7 GREATEREQUAL expr7
    (118) expr6 -> . expr7
    (119) expr6 -> . BOOLEAN_CONSTANTS
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (157) none -> .

    BOOLEAN_CONSTANTS shift and go to state 12
    OPEN_PAREN      shift and go to state 5
    CONSTANTS       shift and go to state 58
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    uexpr                          shift and go to state 11
    none                           shift and go to state 56
    expr10                         shift and go to state 14
    expr7                          shift and go to state 55
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr6                          shift and go to state 166
    expr8                          shift and go to state 45
    expr9                          shift and go to state 46
    array                          shift and go to state 57
    expr11                         shift and go to state 15

state 107

    (109) expr5 -> expr6 IFF . expr6
    (114) expr6 -> . expr7 LESSEQUAL expr7
    (115) expr6 -> . expr7 LESS expr7
    (116) expr6 -> . expr7 GREATER expr7
    (117) expr6 -> . expr7 GREATEREQUAL expr7
    (118) expr6 -> . expr7
    (119) expr6 -> . BOOLEAN_CONSTANTS
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (157) none -> .

    BOOLEAN_CONSTANTS shift and go to state 12
    OPEN_PAREN      shift and go to state 5
    CONSTANTS       shift and go to state 58
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    uexpr                          shift and go to state 11
    none                           shift and go to state 56
    expr10                         shift and go to state 14
    expr7                          shift and go to state 55
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr6                          shift and go to state 167
    expr8                          shift and go to state 45
    expr9                          shift and go to state 46
    array                          shift and go to state 57
    expr11                         shift and go to state 15

state 108

    (111) expr5 -> expr6 TRIPLEEQUAL . expr6
    (114) expr6 -> . expr7 LESSEQUAL expr7
    (115) expr6 -> . expr7 LESS expr7
    (116) expr6 -> . expr7 GREATER expr7
    (117) expr6 -> . expr7 GREATEREQUAL expr7
    (118) expr6 -> . expr7
    (119) expr6 -> . BOOLEAN_CONSTANTS
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (157) none -> .

    BOOLEAN_CONSTANTS shift and go to state 12
    OPEN_PAREN      shift and go to state 5
    CONSTANTS       shift and go to state 58
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    uexpr                          shift and go to state 11
    none                           shift and go to state 56
    expr10                         shift and go to state 14
    expr7                          shift and go to state 55
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr6                          shift and go to state 168
    expr8                          shift and go to state 45
    expr9                          shift and go to state 46
    array                          shift and go to state 57
    expr11                         shift and go to state 15

state 109

    (110) expr5 -> expr6 DOUBLEEQUAL . expr6
    (114) expr6 -> . expr7 LESSEQUAL expr7
    (115) expr6 -> . expr7 LESS expr7
    (116) expr6 -> . expr7 GREATER expr7
    (117) expr6 -> . expr7 GREATEREQUAL expr7
    (118) expr6 -> . expr7
    (119) expr6 -> . BOOLEAN_CONSTANTS
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (157) none -> .

    BOOLEAN_CONSTANTS shift and go to state 12
    OPEN_PAREN      shift and go to state 5
    CONSTANTS       shift and go to state 58
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    uexpr                          shift and go to state 11
    none                           shift and go to state 56
    expr10                         shift and go to state 14
    expr7                          shift and go to state 55
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr6                          shift and go to state 169
    expr8                          shift and go to state 45
    expr9                          shift and go to state 46
    array                          shift and go to state 57
    expr11                         shift and go to state 15

state 110

    (70) opt_oparen -> none .

    VARIABLES       reduce using rule 70 (opt_oparen -> none .)
    CONSTANTS       reduce using rule 70 (opt_oparen -> none .)
    INT_CONSTANTS   reduce using rule 70 (opt_oparen -> none .)
    FLOAT_CONSTANTS reduce using rule 70 (opt_oparen -> none .)
    STRING_CONSTANTS reduce using rule 70 (opt_oparen -> none .)
    CHAR_CONSTANTS  reduce using rule 70 (opt_oparen -> none .)
    BOOLEAN_CONSTANTS reduce using rule 70 (opt_oparen -> none .)


state 111

    (69) opt_oparen -> OPEN_PAREN .

    VARIABLES       reduce using rule 69 (opt_oparen -> OPEN_PAREN .)
    CONSTANTS       reduce using rule 69 (opt_oparen -> OPEN_PAREN .)
    INT_CONSTANTS   reduce using rule 69 (opt_oparen -> OPEN_PAREN .)
    FLOAT_CONSTANTS reduce using rule 69 (opt_oparen -> OPEN_PAREN .)
    STRING_CONSTANTS reduce using rule 69 (opt_oparen -> OPEN_PAREN .)
    CHAR_CONSTANTS  reduce using rule 69 (opt_oparen -> OPEN_PAREN .)
    BOOLEAN_CONSTANTS reduce using rule 69 (opt_oparen -> OPEN_PAREN .)


state 112

    (39) func_call_stmt -> fname opt_oparen . func_ret_arg opt_cparen
    (52) func_ret_arg -> . func_arg_expr
    (53) func_ret_arg -> . primary
    (54) func_ret_arg -> . func_ret_arg COMMA func_arg_expr
    (55) func_ret_arg -> . func_ret_arg COMMA primary
    (17) func_arg_expr -> . VARIABLES EQUAL primary
    (18) func_arg_expr -> . CONSTANTS EQUAL primary
    (92) primary -> . INT_CONSTANTS
    (93) primary -> . FLOAT_CONSTANTS
    (94) primary -> . STRING_CONSTANTS
    (95) primary -> . CHAR_CONSTANTS
    (96) primary -> . BOOLEAN_CONSTANTS
    (97) primary -> . CONSTANTS
    (98) primary -> . VARIABLES
    (99) primary -> . array
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET

    VARIABLES       shift and go to state 158
    CONSTANTS       shift and go to state 159
    INT_CONSTANTS   shift and go to state 150
    FLOAT_CONSTANTS shift and go to state 151
    STRING_CONSTANTS shift and go to state 154
    CHAR_CONSTANTS  shift and go to state 157
    BOOLEAN_CONSTANTS shift and go to state 149

    func_arg_expr                  shift and go to state 152
    primary                        shift and go to state 153
    func_ret_arg                   shift and go to state 170
    array                          shift and go to state 156

state 113

    (123) expr8 -> expr8 BITAND . expr9
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (157) none -> .

    OPEN_PAREN      shift and go to state 5
    CONSTANTS       shift and go to state 58
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    uexpr                          shift and go to state 11
    none                           shift and go to state 56
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr9                          shift and go to state 171
    array                          shift and go to state 57

state 114

    (126) expr9 -> expr9 SHIFTR . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (157) none -> .

    OPEN_PAREN      shift and go to state 5
    CONSTANTS       shift and go to state 58
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    uexpr                          shift and go to state 11
    none                           shift and go to state 56
    expr10                         shift and go to state 172
    expr11                         shift and go to state 15
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    array                          shift and go to state 57

state 115

    (125) expr9 -> expr9 SHIFTL . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (157) none -> .

    OPEN_PAREN      shift and go to state 5
    CONSTANTS       shift and go to state 58
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    uexpr                          shift and go to state 11
    none                           shift and go to state 56
    expr10                         shift and go to state 173
    expr11                         shift and go to state 15
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    array                          shift and go to state 57

state 116

    (78) expr -> MLHS EQUAL . MRHS
    (40) func_call_stmt -> MLHS EQUAL . fname opt_oparen func_ret_arg opt_cparen
    (81) MRHS -> . mrhs
    (82) MRHS -> . MRHS COMMA mrhs
    (9) fname -> . VARIABLES
    (10) fname -> . CONSTANTS
    (86) mrhs -> . expr1
    (87) mrhs -> . str_expr
    (88) mrhs -> . KEYWORD_gets
    (89) mrhs -> . OPEN_BRACKET func_ret_arg CLOSE_BRACKET
    (100) expr1 -> . expr3 QUESTION_MARK expr2 COLON expr2
    (101) expr1 -> . expr2
    (90) str_expr -> . str_expr PLUS STRING_CONSTANTS
    (91) str_expr -> . STRING_CONSTANTS
    (105) expr3 -> . expr3 LOGICALOR expr4
    (106) expr3 -> . expr4
    (102) expr2 -> . expr7 DOUBLEDOT expr7
    (103) expr2 -> . expr7 TRIPLEDOT expr7
    (104) expr2 -> . expr3
    (107) expr4 -> . expr4 LOGICALAND expr5
    (108) expr4 -> . expr5
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (109) expr5 -> . expr6 IFF expr6
    (110) expr5 -> . expr6 DOUBLEEQUAL expr6
    (111) expr5 -> . expr6 TRIPLEEQUAL expr6
    (112) expr5 -> . expr6 NOTEQUAL expr6
    (113) expr5 -> . expr6
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (114) expr6 -> . expr7 LESSEQUAL expr7
    (115) expr6 -> . expr7 LESS expr7
    (116) expr6 -> . expr7 GREATER expr7
    (117) expr6 -> . expr7 GREATEREQUAL expr7
    (118) expr6 -> . expr7
    (119) expr6 -> . BOOLEAN_CONSTANTS
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (157) none -> .

    VARIABLES       shift and go to state 175
    CONSTANTS       shift and go to state 178
    KEYWORD_gets    shift and go to state 95
    OPEN_BRACKET    shift and go to state 93
    STRING_CONSTANTS shift and go to state 99
    BOOLEAN_CONSTANTS shift and go to state 12
    OPEN_PAREN      shift and go to state 5
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    MRHS                           shift and go to state 174
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    array                          shift and go to state 57
    str_expr                       shift and go to state 91
    expr2                          shift and go to state 39
    expr3                          shift and go to state 40
    expr1                          shift and go to state 94
    expr6                          shift and go to state 42
    expr7                          shift and go to state 8
    fname                          shift and go to state 176
    expr5                          shift and go to state 44
    expr8                          shift and go to state 45
    expr9                          shift and go to state 46
    mrhs                           shift and go to state 177
    expr4                          shift and go to state 10
    uexpr                          shift and go to state 11
    none                           shift and go to state 56

state 117

    (80) MLHS -> MLHS COMMA . mlhs
    (83) mlhs -> . VARIABLES
    (84) mlhs -> . CONSTANTS
    (85) mlhs -> . array
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET

    VARIABLES       shift and go to state 180
    CONSTANTS       shift and go to state 182

    mlhs                           shift and go to state 179
    array                          shift and go to state 181

state 118

    (29) top_stmt -> KEYWORD_for opt_oparen . multi_var opt_cparen KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (64) multi_var -> . VARIABLES
    (65) multi_var -> . CONSTANTS
    (66) multi_var -> . array
    (67) multi_var -> . multi_var COMMA VARIABLES
    (68) multi_var -> . multi_var COMMA CONSTANTS
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET

    VARIABLES       shift and go to state 183
    CONSTANTS       shift and go to state 186

    multi_var                      shift and go to state 184
    array                          shift and go to state 185

state 119

    (63) opt_do -> newline .

    KEYWORD_if      reduce using rule 63 (opt_do -> newline .)
    KEYWORD_while   reduce using rule 63 (opt_do -> newline .)
    KEYWORD_begin   reduce using rule 63 (opt_do -> newline .)
    KEYWORD_until   reduce using rule 63 (opt_do -> newline .)
    KEYWORD_for     reduce using rule 63 (opt_do -> newline .)
    KEYWORD_puts    reduce using rule 63 (opt_do -> newline .)
    KEYWORD_break   reduce using rule 63 (opt_do -> newline .)
    KEYWORD_next    reduce using rule 63 (opt_do -> newline .)
    KEYWORD_redo    reduce using rule 63 (opt_do -> newline .)
    KEYWORD_exit    reduce using rule 63 (opt_do -> newline .)
    VARIABLES       reduce using rule 63 (opt_do -> newline .)
    CONSTANTS       reduce using rule 63 (opt_do -> newline .)
    BOOLEAN_CONSTANTS reduce using rule 63 (opt_do -> newline .)
    OPEN_PAREN      reduce using rule 63 (opt_do -> newline .)
    PLUS            reduce using rule 63 (opt_do -> newline .)
    MINUS           reduce using rule 63 (opt_do -> newline .)
    BITNOT          reduce using rule 63 (opt_do -> newline .)
    BITCOMP         reduce using rule 63 (opt_do -> newline .)
    DELIM           reduce using rule 63 (opt_do -> newline .)
    newline         reduce using rule 63 (opt_do -> newline .)
    KEYWORD_end     reduce using rule 63 (opt_do -> newline .)
    INT_CONSTANTS   reduce using rule 63 (opt_do -> newline .)
    FLOAT_CONSTANTS reduce using rule 63 (opt_do -> newline .)


state 120

    (62) opt_do -> KEYWORD_do .

    KEYWORD_if      reduce using rule 62 (opt_do -> KEYWORD_do .)
    KEYWORD_while   reduce using rule 62 (opt_do -> KEYWORD_do .)
    KEYWORD_begin   reduce using rule 62 (opt_do -> KEYWORD_do .)
    KEYWORD_until   reduce using rule 62 (opt_do -> KEYWORD_do .)
    KEYWORD_for     reduce using rule 62 (opt_do -> KEYWORD_do .)
    KEYWORD_puts    reduce using rule 62 (opt_do -> KEYWORD_do .)
    KEYWORD_break   reduce using rule 62 (opt_do -> KEYWORD_do .)
    KEYWORD_next    reduce using rule 62 (opt_do -> KEYWORD_do .)
    KEYWORD_redo    reduce using rule 62 (opt_do -> KEYWORD_do .)
    KEYWORD_exit    reduce using rule 62 (opt_do -> KEYWORD_do .)
    VARIABLES       reduce using rule 62 (opt_do -> KEYWORD_do .)
    CONSTANTS       reduce using rule 62 (opt_do -> KEYWORD_do .)
    BOOLEAN_CONSTANTS reduce using rule 62 (opt_do -> KEYWORD_do .)
    OPEN_PAREN      reduce using rule 62 (opt_do -> KEYWORD_do .)
    PLUS            reduce using rule 62 (opt_do -> KEYWORD_do .)
    MINUS           reduce using rule 62 (opt_do -> KEYWORD_do .)
    BITNOT          reduce using rule 62 (opt_do -> KEYWORD_do .)
    BITCOMP         reduce using rule 62 (opt_do -> KEYWORD_do .)
    DELIM           reduce using rule 62 (opt_do -> KEYWORD_do .)
    newline         reduce using rule 62 (opt_do -> KEYWORD_do .)
    KEYWORD_end     reduce using rule 62 (opt_do -> KEYWORD_do .)
    INT_CONSTANTS   reduce using rule 62 (opt_do -> KEYWORD_do .)
    FLOAT_CONSTANTS reduce using rule 62 (opt_do -> KEYWORD_do .)


state 121

    (23) top_stmt -> KEYWORD_while expr3 opt_do . gen_stmts opt_terms KEYWORD_end
    (30) gen_stmts -> . top_stmt
    (31) gen_stmts -> . gen_stmts terms top_stmt
    (32) gen_stmts -> . none
    (21) top_stmt -> . stmt
    (22) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (23) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (24) top_stmt -> . top_stmt KEYWORD_while expr3
    (25) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (26) top_stmt -> . top_stmt KEYWORD_until expr3
    (27) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (28) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (29) top_stmt -> . KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (157) none -> .
    (33) stmt -> . expr
    (34) stmt -> . expr1
    (35) stmt -> . puts_stmt
    (36) stmt -> . loop_stmt
    (37) stmt -> . exit_stmt
    (38) stmt -> . func_call_stmt
    (78) expr -> . MLHS EQUAL MRHS
    (100) expr1 -> . expr3 QUESTION_MARK expr2 COLON expr2
    (101) expr1 -> . expr2
    (45) puts_stmt -> . KEYWORD_puts mrhs
    (46) puts_stmt -> . KEYWORD_puts expr
    (41) loop_stmt -> . KEYWORD_break
    (42) loop_stmt -> . KEYWORD_next
    (43) loop_stmt -> . KEYWORD_redo
    (44) exit_stmt -> . KEYWORD_exit
    (39) func_call_stmt -> . fname opt_oparen func_ret_arg opt_cparen
    (40) func_call_stmt -> . MLHS EQUAL fname opt_oparen func_ret_arg opt_cparen
    (79) MLHS -> . mlhs
    (80) MLHS -> . MLHS COMMA mlhs
    (105) expr3 -> . expr3 LOGICALOR expr4
    (106) expr3 -> . expr4
    (102) expr2 -> . expr7 DOUBLEDOT expr7
    (103) expr2 -> . expr7 TRIPLEDOT expr7
    (104) expr2 -> . expr3
    (9) fname -> . VARIABLES
    (10) fname -> . CONSTANTS
    (83) mlhs -> . VARIABLES
    (84) mlhs -> . CONSTANTS
    (85) mlhs -> . array
    (107) expr4 -> . expr4 LOGICALAND expr5
    (108) expr4 -> . expr5
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (109) expr5 -> . expr6 IFF expr6
    (110) expr5 -> . expr6 DOUBLEEQUAL expr6
    (111) expr5 -> . expr6 TRIPLEEQUAL expr6
    (112) expr5 -> . expr6 NOTEQUAL expr6
    (113) expr5 -> . expr6
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (114) expr6 -> . expr7 LESSEQUAL expr7
    (115) expr6 -> . expr7 LESS expr7
    (116) expr6 -> . expr7 GREATER expr7
    (117) expr6 -> . expr7 GREATEREQUAL expr7
    (118) expr6 -> . expr7
    (119) expr6 -> . BOOLEAN_CONSTANTS
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP

    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 37
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 52
    DELIM           reduce using rule 157 (none -> .)
    newline         reduce using rule 157 (none -> .)
    KEYWORD_end     reduce using rule 157 (none -> .)
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 47
    KEYWORD_next    shift and go to state 30
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    VARIABLES       shift and go to state 28
    CONSTANTS       shift and go to state 22
    BOOLEAN_CONSTANTS shift and go to state 12
    OPEN_PAREN      shift and go to state 5
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29

    mlhs                           shift and go to state 2
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    array                          shift and go to state 26
    expr2                          shift and go to state 39
    expr3                          shift and go to state 40
    expr1                          shift and go to state 41
    expr6                          shift and go to state 42
    expr7                          shift and go to state 8
    puts_stmt                      shift and go to state 19
    expr5                          shift and go to state 44
    func_call_stmt                 shift and go to state 32
    expr8                          shift and go to state 45
    expr9                          shift and go to state 46
    expr4                          shift and go to state 10
    exit_stmt                      shift and go to state 48
    MLHS                           shift and go to state 50
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 20
    uexpr                          shift and go to state 11
    none                           shift and go to state 102
    gen_stmts                      shift and go to state 187
    expr                           shift and go to state 35
    fname                          shift and go to state 43
    top_stmt                       shift and go to state 101

state 122

    (137) expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .

    DOUBLESTAR      reduce using rule 137 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    MULTIPLY        reduce using rule 137 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    DIV             reduce using rule 137 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    MOD             reduce using rule 137 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    PLUS            reduce using rule 137 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    MINUS           reduce using rule 137 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    SHIFTL          reduce using rule 137 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    SHIFTR          reduce using rule 137 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    BITAND          reduce using rule 137 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    DOUBLEDOT       reduce using rule 137 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    TRIPLEDOT       reduce using rule 137 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    BITXOR          reduce using rule 137 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    PIPE            reduce using rule 137 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    LESSEQUAL       reduce using rule 137 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    LESS            reduce using rule 137 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    GREATER         reduce using rule 137 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    GREATEREQUAL    reduce using rule 137 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    IFF             reduce using rule 137 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    DOUBLEEQUAL     reduce using rule 137 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    TRIPLEEQUAL     reduce using rule 137 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    NOTEQUAL        reduce using rule 137 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    LOGICALAND      reduce using rule 137 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    QUESTION_MARK   reduce using rule 137 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    LOGICALOR       reduce using rule 137 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_while   reduce using rule 137 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_until   reduce using rule 137 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    DELIM           reduce using rule 137 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    newline         reduce using rule 137 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    $end            reduce using rule 137 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_do      reduce using rule 137 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 137 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_then    reduce using rule 137 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_end     reduce using rule 137 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_elsif   reduce using rule 137 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_else    reduce using rule 137 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    COLON           reduce using rule 137 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    COMMA           reduce using rule 137 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 137 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)


state 123

    (102) expr2 -> expr7 DOUBLEDOT expr7 .
    (120) expr7 -> expr7 . BITXOR expr8
    (121) expr7 -> expr7 . PIPE expr8

    KEYWORD_while   reduce using rule 102 (expr2 -> expr7 DOUBLEDOT expr7 .)
    KEYWORD_until   reduce using rule 102 (expr2 -> expr7 DOUBLEDOT expr7 .)
    DELIM           reduce using rule 102 (expr2 -> expr7 DOUBLEDOT expr7 .)
    newline         reduce using rule 102 (expr2 -> expr7 DOUBLEDOT expr7 .)
    KEYWORD_elsif   reduce using rule 102 (expr2 -> expr7 DOUBLEDOT expr7 .)
    KEYWORD_else    reduce using rule 102 (expr2 -> expr7 DOUBLEDOT expr7 .)
    KEYWORD_end     reduce using rule 102 (expr2 -> expr7 DOUBLEDOT expr7 .)
    COMMA           reduce using rule 102 (expr2 -> expr7 DOUBLEDOT expr7 .)
    $end            reduce using rule 102 (expr2 -> expr7 DOUBLEDOT expr7 .)
    COLON           reduce using rule 102 (expr2 -> expr7 DOUBLEDOT expr7 .)
    CLOSE_PAREN     reduce using rule 102 (expr2 -> expr7 DOUBLEDOT expr7 .)
    BITXOR          shift and go to state 66
    PIPE            shift and go to state 65


state 124

    (117) expr6 -> expr7 GREATEREQUAL expr7 .
    (120) expr7 -> expr7 . BITXOR expr8
    (121) expr7 -> expr7 . PIPE expr8

    IFF             reduce using rule 117 (expr6 -> expr7 GREATEREQUAL expr7 .)
    DOUBLEEQUAL     reduce using rule 117 (expr6 -> expr7 GREATEREQUAL expr7 .)
    TRIPLEEQUAL     reduce using rule 117 (expr6 -> expr7 GREATEREQUAL expr7 .)
    NOTEQUAL        reduce using rule 117 (expr6 -> expr7 GREATEREQUAL expr7 .)
    LOGICALAND      reduce using rule 117 (expr6 -> expr7 GREATEREQUAL expr7 .)
    LOGICALOR       reduce using rule 117 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_then    reduce using rule 117 (expr6 -> expr7 GREATEREQUAL expr7 .)
    newline         reduce using rule 117 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_while   reduce using rule 117 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_until   reduce using rule 117 (expr6 -> expr7 GREATEREQUAL expr7 .)
    DELIM           reduce using rule 117 (expr6 -> expr7 GREATEREQUAL expr7 .)
    $end            reduce using rule 117 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_end     reduce using rule 117 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_elsif   reduce using rule 117 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_else    reduce using rule 117 (expr6 -> expr7 GREATEREQUAL expr7 .)
    QUESTION_MARK   reduce using rule 117 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_do      reduce using rule 117 (expr6 -> expr7 GREATEREQUAL expr7 .)
    CLOSE_PAREN     reduce using rule 117 (expr6 -> expr7 GREATEREQUAL expr7 .)
    COLON           reduce using rule 117 (expr6 -> expr7 GREATEREQUAL expr7 .)
    COMMA           reduce using rule 117 (expr6 -> expr7 GREATEREQUAL expr7 .)
    BITXOR          shift and go to state 66
    PIPE            shift and go to state 65


state 125

    (103) expr2 -> expr7 TRIPLEDOT expr7 .
    (120) expr7 -> expr7 . BITXOR expr8
    (121) expr7 -> expr7 . PIPE expr8

    KEYWORD_while   reduce using rule 103 (expr2 -> expr7 TRIPLEDOT expr7 .)
    KEYWORD_until   reduce using rule 103 (expr2 -> expr7 TRIPLEDOT expr7 .)
    DELIM           reduce using rule 103 (expr2 -> expr7 TRIPLEDOT expr7 .)
    newline         reduce using rule 103 (expr2 -> expr7 TRIPLEDOT expr7 .)
    KEYWORD_elsif   reduce using rule 103 (expr2 -> expr7 TRIPLEDOT expr7 .)
    KEYWORD_else    reduce using rule 103 (expr2 -> expr7 TRIPLEDOT expr7 .)
    KEYWORD_end     reduce using rule 103 (expr2 -> expr7 TRIPLEDOT expr7 .)
    COMMA           reduce using rule 103 (expr2 -> expr7 TRIPLEDOT expr7 .)
    $end            reduce using rule 103 (expr2 -> expr7 TRIPLEDOT expr7 .)
    COLON           reduce using rule 103 (expr2 -> expr7 TRIPLEDOT expr7 .)
    CLOSE_PAREN     reduce using rule 103 (expr2 -> expr7 TRIPLEDOT expr7 .)
    BITXOR          shift and go to state 66
    PIPE            shift and go to state 65


state 126

    (116) expr6 -> expr7 GREATER expr7 .
    (120) expr7 -> expr7 . BITXOR expr8
    (121) expr7 -> expr7 . PIPE expr8

    IFF             reduce using rule 116 (expr6 -> expr7 GREATER expr7 .)
    DOUBLEEQUAL     reduce using rule 116 (expr6 -> expr7 GREATER expr7 .)
    TRIPLEEQUAL     reduce using rule 116 (expr6 -> expr7 GREATER expr7 .)
    NOTEQUAL        reduce using rule 116 (expr6 -> expr7 GREATER expr7 .)
    LOGICALAND      reduce using rule 116 (expr6 -> expr7 GREATER expr7 .)
    LOGICALOR       reduce using rule 116 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_then    reduce using rule 116 (expr6 -> expr7 GREATER expr7 .)
    newline         reduce using rule 116 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_while   reduce using rule 116 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_until   reduce using rule 116 (expr6 -> expr7 GREATER expr7 .)
    DELIM           reduce using rule 116 (expr6 -> expr7 GREATER expr7 .)
    $end            reduce using rule 116 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_end     reduce using rule 116 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_elsif   reduce using rule 116 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_else    reduce using rule 116 (expr6 -> expr7 GREATER expr7 .)
    QUESTION_MARK   reduce using rule 116 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_do      reduce using rule 116 (expr6 -> expr7 GREATER expr7 .)
    CLOSE_PAREN     reduce using rule 116 (expr6 -> expr7 GREATER expr7 .)
    COLON           reduce using rule 116 (expr6 -> expr7 GREATER expr7 .)
    COMMA           reduce using rule 116 (expr6 -> expr7 GREATER expr7 .)
    BITXOR          shift and go to state 66
    PIPE            shift and go to state 65


state 127

    (115) expr6 -> expr7 LESS expr7 .
    (120) expr7 -> expr7 . BITXOR expr8
    (121) expr7 -> expr7 . PIPE expr8

    IFF             reduce using rule 115 (expr6 -> expr7 LESS expr7 .)
    DOUBLEEQUAL     reduce using rule 115 (expr6 -> expr7 LESS expr7 .)
    TRIPLEEQUAL     reduce using rule 115 (expr6 -> expr7 LESS expr7 .)
    NOTEQUAL        reduce using rule 115 (expr6 -> expr7 LESS expr7 .)
    LOGICALAND      reduce using rule 115 (expr6 -> expr7 LESS expr7 .)
    LOGICALOR       reduce using rule 115 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_then    reduce using rule 115 (expr6 -> expr7 LESS expr7 .)
    newline         reduce using rule 115 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_while   reduce using rule 115 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_until   reduce using rule 115 (expr6 -> expr7 LESS expr7 .)
    DELIM           reduce using rule 115 (expr6 -> expr7 LESS expr7 .)
    $end            reduce using rule 115 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_end     reduce using rule 115 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_elsif   reduce using rule 115 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_else    reduce using rule 115 (expr6 -> expr7 LESS expr7 .)
    QUESTION_MARK   reduce using rule 115 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_do      reduce using rule 115 (expr6 -> expr7 LESS expr7 .)
    CLOSE_PAREN     reduce using rule 115 (expr6 -> expr7 LESS expr7 .)
    COLON           reduce using rule 115 (expr6 -> expr7 LESS expr7 .)
    COMMA           reduce using rule 115 (expr6 -> expr7 LESS expr7 .)
    BITXOR          shift and go to state 66
    PIPE            shift and go to state 65


state 128

    (121) expr7 -> expr7 PIPE expr8 .
    (123) expr8 -> expr8 . BITAND expr9

    LESSEQUAL       reduce using rule 121 (expr7 -> expr7 PIPE expr8 .)
    LESS            reduce using rule 121 (expr7 -> expr7 PIPE expr8 .)
    GREATER         reduce using rule 121 (expr7 -> expr7 PIPE expr8 .)
    GREATEREQUAL    reduce using rule 121 (expr7 -> expr7 PIPE expr8 .)
    BITXOR          reduce using rule 121 (expr7 -> expr7 PIPE expr8 .)
    PIPE            reduce using rule 121 (expr7 -> expr7 PIPE expr8 .)
    IFF             reduce using rule 121 (expr7 -> expr7 PIPE expr8 .)
    DOUBLEEQUAL     reduce using rule 121 (expr7 -> expr7 PIPE expr8 .)
    TRIPLEEQUAL     reduce using rule 121 (expr7 -> expr7 PIPE expr8 .)
    NOTEQUAL        reduce using rule 121 (expr7 -> expr7 PIPE expr8 .)
    LOGICALAND      reduce using rule 121 (expr7 -> expr7 PIPE expr8 .)
    LOGICALOR       reduce using rule 121 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_do      reduce using rule 121 (expr7 -> expr7 PIPE expr8 .)
    newline         reduce using rule 121 (expr7 -> expr7 PIPE expr8 .)
    DOUBLEDOT       reduce using rule 121 (expr7 -> expr7 PIPE expr8 .)
    TRIPLEDOT       reduce using rule 121 (expr7 -> expr7 PIPE expr8 .)
    COLON           reduce using rule 121 (expr7 -> expr7 PIPE expr8 .)
    CLOSE_BRACKET   reduce using rule 121 (expr7 -> expr7 PIPE expr8 .)
    QUESTION_MARK   reduce using rule 121 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_while   reduce using rule 121 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_until   reduce using rule 121 (expr7 -> expr7 PIPE expr8 .)
    DELIM           reduce using rule 121 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_end     reduce using rule 121 (expr7 -> expr7 PIPE expr8 .)
    $end            reduce using rule 121 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_elsif   reduce using rule 121 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_else    reduce using rule 121 (expr7 -> expr7 PIPE expr8 .)
    CLOSE_PAREN     reduce using rule 121 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_then    reduce using rule 121 (expr7 -> expr7 PIPE expr8 .)
    COMMA           reduce using rule 121 (expr7 -> expr7 PIPE expr8 .)
    BITAND          shift and go to state 113


state 129

    (120) expr7 -> expr7 BITXOR expr8 .
    (123) expr8 -> expr8 . BITAND expr9

    LESSEQUAL       reduce using rule 120 (expr7 -> expr7 BITXOR expr8 .)
    LESS            reduce using rule 120 (expr7 -> expr7 BITXOR expr8 .)
    GREATER         reduce using rule 120 (expr7 -> expr7 BITXOR expr8 .)
    GREATEREQUAL    reduce using rule 120 (expr7 -> expr7 BITXOR expr8 .)
    BITXOR          reduce using rule 120 (expr7 -> expr7 BITXOR expr8 .)
    PIPE            reduce using rule 120 (expr7 -> expr7 BITXOR expr8 .)
    IFF             reduce using rule 120 (expr7 -> expr7 BITXOR expr8 .)
    DOUBLEEQUAL     reduce using rule 120 (expr7 -> expr7 BITXOR expr8 .)
    TRIPLEEQUAL     reduce using rule 120 (expr7 -> expr7 BITXOR expr8 .)
    NOTEQUAL        reduce using rule 120 (expr7 -> expr7 BITXOR expr8 .)
    LOGICALAND      reduce using rule 120 (expr7 -> expr7 BITXOR expr8 .)
    LOGICALOR       reduce using rule 120 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_do      reduce using rule 120 (expr7 -> expr7 BITXOR expr8 .)
    newline         reduce using rule 120 (expr7 -> expr7 BITXOR expr8 .)
    DOUBLEDOT       reduce using rule 120 (expr7 -> expr7 BITXOR expr8 .)
    TRIPLEDOT       reduce using rule 120 (expr7 -> expr7 BITXOR expr8 .)
    COLON           reduce using rule 120 (expr7 -> expr7 BITXOR expr8 .)
    CLOSE_BRACKET   reduce using rule 120 (expr7 -> expr7 BITXOR expr8 .)
    QUESTION_MARK   reduce using rule 120 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_while   reduce using rule 120 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_until   reduce using rule 120 (expr7 -> expr7 BITXOR expr8 .)
    DELIM           reduce using rule 120 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_end     reduce using rule 120 (expr7 -> expr7 BITXOR expr8 .)
    $end            reduce using rule 120 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_elsif   reduce using rule 120 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_else    reduce using rule 120 (expr7 -> expr7 BITXOR expr8 .)
    CLOSE_PAREN     reduce using rule 120 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_then    reduce using rule 120 (expr7 -> expr7 BITXOR expr8 .)
    COMMA           reduce using rule 120 (expr7 -> expr7 BITXOR expr8 .)
    BITAND          shift and go to state 113


state 130

    (114) expr6 -> expr7 LESSEQUAL expr7 .
    (120) expr7 -> expr7 . BITXOR expr8
    (121) expr7 -> expr7 . PIPE expr8

    IFF             reduce using rule 114 (expr6 -> expr7 LESSEQUAL expr7 .)
    DOUBLEEQUAL     reduce using rule 114 (expr6 -> expr7 LESSEQUAL expr7 .)
    TRIPLEEQUAL     reduce using rule 114 (expr6 -> expr7 LESSEQUAL expr7 .)
    NOTEQUAL        reduce using rule 114 (expr6 -> expr7 LESSEQUAL expr7 .)
    LOGICALAND      reduce using rule 114 (expr6 -> expr7 LESSEQUAL expr7 .)
    LOGICALOR       reduce using rule 114 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_then    reduce using rule 114 (expr6 -> expr7 LESSEQUAL expr7 .)
    newline         reduce using rule 114 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_while   reduce using rule 114 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_until   reduce using rule 114 (expr6 -> expr7 LESSEQUAL expr7 .)
    DELIM           reduce using rule 114 (expr6 -> expr7 LESSEQUAL expr7 .)
    $end            reduce using rule 114 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_end     reduce using rule 114 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_elsif   reduce using rule 114 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_else    reduce using rule 114 (expr6 -> expr7 LESSEQUAL expr7 .)
    QUESTION_MARK   reduce using rule 114 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_do      reduce using rule 114 (expr6 -> expr7 LESSEQUAL expr7 .)
    CLOSE_PAREN     reduce using rule 114 (expr6 -> expr7 LESSEQUAL expr7 .)
    COLON           reduce using rule 114 (expr6 -> expr7 LESSEQUAL expr7 .)
    COMMA           reduce using rule 114 (expr6 -> expr7 LESSEQUAL expr7 .)
    BITXOR          shift and go to state 66
    PIPE            shift and go to state 65


state 131

    (107) expr4 -> expr4 LOGICALAND expr5 .

    LOGICALAND      reduce using rule 107 (expr4 -> expr4 LOGICALAND expr5 .)
    QUESTION_MARK   reduce using rule 107 (expr4 -> expr4 LOGICALAND expr5 .)
    LOGICALOR       reduce using rule 107 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_while   reduce using rule 107 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_until   reduce using rule 107 (expr4 -> expr4 LOGICALAND expr5 .)
    DELIM           reduce using rule 107 (expr4 -> expr4 LOGICALAND expr5 .)
    newline         reduce using rule 107 (expr4 -> expr4 LOGICALAND expr5 .)
    $end            reduce using rule 107 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_end     reduce using rule 107 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_elsif   reduce using rule 107 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_else    reduce using rule 107 (expr4 -> expr4 LOGICALAND expr5 .)
    COMMA           reduce using rule 107 (expr4 -> expr4 LOGICALAND expr5 .)
    CLOSE_PAREN     reduce using rule 107 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_then    reduce using rule 107 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_do      reduce using rule 107 (expr4 -> expr4 LOGICALAND expr5 .)
    COLON           reduce using rule 107 (expr4 -> expr4 LOGICALAND expr5 .)


state 132

    (24) top_stmt -> top_stmt KEYWORD_while expr3 .
    (105) expr3 -> expr3 . LOGICALOR expr4

    KEYWORD_while   reduce using rule 24 (top_stmt -> top_stmt KEYWORD_while expr3 .)
    KEYWORD_until   reduce using rule 24 (top_stmt -> top_stmt KEYWORD_while expr3 .)
    DELIM           reduce using rule 24 (top_stmt -> top_stmt KEYWORD_while expr3 .)
    newline         reduce using rule 24 (top_stmt -> top_stmt KEYWORD_while expr3 .)
    KEYWORD_end     reduce using rule 24 (top_stmt -> top_stmt KEYWORD_while expr3 .)
    KEYWORD_elsif   reduce using rule 24 (top_stmt -> top_stmt KEYWORD_while expr3 .)
    KEYWORD_else    reduce using rule 24 (top_stmt -> top_stmt KEYWORD_while expr3 .)
    $end            reduce using rule 24 (top_stmt -> top_stmt KEYWORD_while expr3 .)
    LOGICALOR       shift and go to state 104


state 133

    (26) top_stmt -> top_stmt KEYWORD_until expr3 .
    (105) expr3 -> expr3 . LOGICALOR expr4

    KEYWORD_while   reduce using rule 26 (top_stmt -> top_stmt KEYWORD_until expr3 .)
    KEYWORD_until   reduce using rule 26 (top_stmt -> top_stmt KEYWORD_until expr3 .)
    DELIM           reduce using rule 26 (top_stmt -> top_stmt KEYWORD_until expr3 .)
    newline         reduce using rule 26 (top_stmt -> top_stmt KEYWORD_until expr3 .)
    KEYWORD_end     reduce using rule 26 (top_stmt -> top_stmt KEYWORD_until expr3 .)
    KEYWORD_elsif   reduce using rule 26 (top_stmt -> top_stmt KEYWORD_until expr3 .)
    KEYWORD_else    reduce using rule 26 (top_stmt -> top_stmt KEYWORD_until expr3 .)
    $end            reduce using rule 26 (top_stmt -> top_stmt KEYWORD_until expr3 .)
    LOGICALOR       shift and go to state 104


state 134

    (128) expr10 -> expr10 PLUS expr11 .
    (131) expr11 -> expr11 . MULTIPLY expr12
    (132) expr11 -> expr11 . DIV expr12
    (133) expr11 -> expr11 . MOD expr12

    PLUS            reduce using rule 128 (expr10 -> expr10 PLUS expr11 .)
    MINUS           reduce using rule 128 (expr10 -> expr10 PLUS expr11 .)
    SHIFTL          reduce using rule 128 (expr10 -> expr10 PLUS expr11 .)
    SHIFTR          reduce using rule 128 (expr10 -> expr10 PLUS expr11 .)
    BITAND          reduce using rule 128 (expr10 -> expr10 PLUS expr11 .)
    DOUBLEDOT       reduce using rule 128 (expr10 -> expr10 PLUS expr11 .)
    TRIPLEDOT       reduce using rule 128 (expr10 -> expr10 PLUS expr11 .)
    BITXOR          reduce using rule 128 (expr10 -> expr10 PLUS expr11 .)
    PIPE            reduce using rule 128 (expr10 -> expr10 PLUS expr11 .)
    LESSEQUAL       reduce using rule 128 (expr10 -> expr10 PLUS expr11 .)
    LESS            reduce using rule 128 (expr10 -> expr10 PLUS expr11 .)
    GREATER         reduce using rule 128 (expr10 -> expr10 PLUS expr11 .)
    GREATEREQUAL    reduce using rule 128 (expr10 -> expr10 PLUS expr11 .)
    IFF             reduce using rule 128 (expr10 -> expr10 PLUS expr11 .)
    DOUBLEEQUAL     reduce using rule 128 (expr10 -> expr10 PLUS expr11 .)
    TRIPLEEQUAL     reduce using rule 128 (expr10 -> expr10 PLUS expr11 .)
    NOTEQUAL        reduce using rule 128 (expr10 -> expr10 PLUS expr11 .)
    LOGICALAND      reduce using rule 128 (expr10 -> expr10 PLUS expr11 .)
    QUESTION_MARK   reduce using rule 128 (expr10 -> expr10 PLUS expr11 .)
    LOGICALOR       reduce using rule 128 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_while   reduce using rule 128 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_until   reduce using rule 128 (expr10 -> expr10 PLUS expr11 .)
    DELIM           reduce using rule 128 (expr10 -> expr10 PLUS expr11 .)
    newline         reduce using rule 128 (expr10 -> expr10 PLUS expr11 .)
    $end            reduce using rule 128 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_do      reduce using rule 128 (expr10 -> expr10 PLUS expr11 .)
    CLOSE_PAREN     reduce using rule 128 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_then    reduce using rule 128 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_end     reduce using rule 128 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_elsif   reduce using rule 128 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_else    reduce using rule 128 (expr10 -> expr10 PLUS expr11 .)
    COLON           reduce using rule 128 (expr10 -> expr10 PLUS expr11 .)
    COMMA           reduce using rule 128 (expr10 -> expr10 PLUS expr11 .)
    CLOSE_BRACKET   reduce using rule 128 (expr10 -> expr10 PLUS expr11 .)
    MULTIPLY        shift and go to state 75
    DIV             shift and go to state 76
    MOD             shift and go to state 77


state 135

    (129) expr10 -> expr10 MINUS expr11 .
    (131) expr11 -> expr11 . MULTIPLY expr12
    (132) expr11 -> expr11 . DIV expr12
    (133) expr11 -> expr11 . MOD expr12

    PLUS            reduce using rule 129 (expr10 -> expr10 MINUS expr11 .)
    MINUS           reduce using rule 129 (expr10 -> expr10 MINUS expr11 .)
    SHIFTL          reduce using rule 129 (expr10 -> expr10 MINUS expr11 .)
    SHIFTR          reduce using rule 129 (expr10 -> expr10 MINUS expr11 .)
    BITAND          reduce using rule 129 (expr10 -> expr10 MINUS expr11 .)
    DOUBLEDOT       reduce using rule 129 (expr10 -> expr10 MINUS expr11 .)
    TRIPLEDOT       reduce using rule 129 (expr10 -> expr10 MINUS expr11 .)
    BITXOR          reduce using rule 129 (expr10 -> expr10 MINUS expr11 .)
    PIPE            reduce using rule 129 (expr10 -> expr10 MINUS expr11 .)
    LESSEQUAL       reduce using rule 129 (expr10 -> expr10 MINUS expr11 .)
    LESS            reduce using rule 129 (expr10 -> expr10 MINUS expr11 .)
    GREATER         reduce using rule 129 (expr10 -> expr10 MINUS expr11 .)
    GREATEREQUAL    reduce using rule 129 (expr10 -> expr10 MINUS expr11 .)
    IFF             reduce using rule 129 (expr10 -> expr10 MINUS expr11 .)
    DOUBLEEQUAL     reduce using rule 129 (expr10 -> expr10 MINUS expr11 .)
    TRIPLEEQUAL     reduce using rule 129 (expr10 -> expr10 MINUS expr11 .)
    NOTEQUAL        reduce using rule 129 (expr10 -> expr10 MINUS expr11 .)
    LOGICALAND      reduce using rule 129 (expr10 -> expr10 MINUS expr11 .)
    QUESTION_MARK   reduce using rule 129 (expr10 -> expr10 MINUS expr11 .)
    LOGICALOR       reduce using rule 129 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_while   reduce using rule 129 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_until   reduce using rule 129 (expr10 -> expr10 MINUS expr11 .)
    DELIM           reduce using rule 129 (expr10 -> expr10 MINUS expr11 .)
    newline         reduce using rule 129 (expr10 -> expr10 MINUS expr11 .)
    $end            reduce using rule 129 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_do      reduce using rule 129 (expr10 -> expr10 MINUS expr11 .)
    CLOSE_PAREN     reduce using rule 129 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_then    reduce using rule 129 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_end     reduce using rule 129 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_elsif   reduce using rule 129 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_else    reduce using rule 129 (expr10 -> expr10 MINUS expr11 .)
    COLON           reduce using rule 129 (expr10 -> expr10 MINUS expr11 .)
    COMMA           reduce using rule 129 (expr10 -> expr10 MINUS expr11 .)
    CLOSE_BRACKET   reduce using rule 129 (expr10 -> expr10 MINUS expr11 .)
    MULTIPLY        shift and go to state 75
    DIV             shift and go to state 76
    MOD             shift and go to state 77


state 136

    (131) expr11 -> expr11 MULTIPLY expr12 .

    MULTIPLY        reduce using rule 131 (expr11 -> expr11 MULTIPLY expr12 .)
    DIV             reduce using rule 131 (expr11 -> expr11 MULTIPLY expr12 .)
    MOD             reduce using rule 131 (expr11 -> expr11 MULTIPLY expr12 .)
    PLUS            reduce using rule 131 (expr11 -> expr11 MULTIPLY expr12 .)
    MINUS           reduce using rule 131 (expr11 -> expr11 MULTIPLY expr12 .)
    SHIFTL          reduce using rule 131 (expr11 -> expr11 MULTIPLY expr12 .)
    SHIFTR          reduce using rule 131 (expr11 -> expr11 MULTIPLY expr12 .)
    BITAND          reduce using rule 131 (expr11 -> expr11 MULTIPLY expr12 .)
    DOUBLEDOT       reduce using rule 131 (expr11 -> expr11 MULTIPLY expr12 .)
    TRIPLEDOT       reduce using rule 131 (expr11 -> expr11 MULTIPLY expr12 .)
    BITXOR          reduce using rule 131 (expr11 -> expr11 MULTIPLY expr12 .)
    PIPE            reduce using rule 131 (expr11 -> expr11 MULTIPLY expr12 .)
    LESSEQUAL       reduce using rule 131 (expr11 -> expr11 MULTIPLY expr12 .)
    LESS            reduce using rule 131 (expr11 -> expr11 MULTIPLY expr12 .)
    GREATER         reduce using rule 131 (expr11 -> expr11 MULTIPLY expr12 .)
    GREATEREQUAL    reduce using rule 131 (expr11 -> expr11 MULTIPLY expr12 .)
    IFF             reduce using rule 131 (expr11 -> expr11 MULTIPLY expr12 .)
    DOUBLEEQUAL     reduce using rule 131 (expr11 -> expr11 MULTIPLY expr12 .)
    TRIPLEEQUAL     reduce using rule 131 (expr11 -> expr11 MULTIPLY expr12 .)
    NOTEQUAL        reduce using rule 131 (expr11 -> expr11 MULTIPLY expr12 .)
    LOGICALAND      reduce using rule 131 (expr11 -> expr11 MULTIPLY expr12 .)
    QUESTION_MARK   reduce using rule 131 (expr11 -> expr11 MULTIPLY expr12 .)
    LOGICALOR       reduce using rule 131 (expr11 -> expr11 MULTIPLY expr12 .)
    KEYWORD_while   reduce using rule 131 (expr11 -> expr11 MULTIPLY expr12 .)
    KEYWORD_until   reduce using rule 131 (expr11 -> expr11 MULTIPLY expr12 .)
    DELIM           reduce using rule 131 (expr11 -> expr11 MULTIPLY expr12 .)
    newline         reduce using rule 131 (expr11 -> expr11 MULTIPLY expr12 .)
    $end            reduce using rule 131 (expr11 -> expr11 MULTIPLY expr12 .)
    KEYWORD_do      reduce using rule 131 (expr11 -> expr11 MULTIPLY expr12 .)
    CLOSE_PAREN     reduce using rule 131 (expr11 -> expr11 MULTIPLY expr12 .)
    KEYWORD_then    reduce using rule 131 (expr11 -> expr11 MULTIPLY expr12 .)
    KEYWORD_end     reduce using rule 131 (expr11 -> expr11 MULTIPLY expr12 .)
    KEYWORD_elsif   reduce using rule 131 (expr11 -> expr11 MULTIPLY expr12 .)
    KEYWORD_else    reduce using rule 131 (expr11 -> expr11 MULTIPLY expr12 .)
    COLON           reduce using rule 131 (expr11 -> expr11 MULTIPLY expr12 .)
    COMMA           reduce using rule 131 (expr11 -> expr11 MULTIPLY expr12 .)
    CLOSE_BRACKET   reduce using rule 131 (expr11 -> expr11 MULTIPLY expr12 .)


state 137

    (132) expr11 -> expr11 DIV expr12 .

    MULTIPLY        reduce using rule 132 (expr11 -> expr11 DIV expr12 .)
    DIV             reduce using rule 132 (expr11 -> expr11 DIV expr12 .)
    MOD             reduce using rule 132 (expr11 -> expr11 DIV expr12 .)
    PLUS            reduce using rule 132 (expr11 -> expr11 DIV expr12 .)
    MINUS           reduce using rule 132 (expr11 -> expr11 DIV expr12 .)
    SHIFTL          reduce using rule 132 (expr11 -> expr11 DIV expr12 .)
    SHIFTR          reduce using rule 132 (expr11 -> expr11 DIV expr12 .)
    BITAND          reduce using rule 132 (expr11 -> expr11 DIV expr12 .)
    DOUBLEDOT       reduce using rule 132 (expr11 -> expr11 DIV expr12 .)
    TRIPLEDOT       reduce using rule 132 (expr11 -> expr11 DIV expr12 .)
    BITXOR          reduce using rule 132 (expr11 -> expr11 DIV expr12 .)
    PIPE            reduce using rule 132 (expr11 -> expr11 DIV expr12 .)
    LESSEQUAL       reduce using rule 132 (expr11 -> expr11 DIV expr12 .)
    LESS            reduce using rule 132 (expr11 -> expr11 DIV expr12 .)
    GREATER         reduce using rule 132 (expr11 -> expr11 DIV expr12 .)
    GREATEREQUAL    reduce using rule 132 (expr11 -> expr11 DIV expr12 .)
    IFF             reduce using rule 132 (expr11 -> expr11 DIV expr12 .)
    DOUBLEEQUAL     reduce using rule 132 (expr11 -> expr11 DIV expr12 .)
    TRIPLEEQUAL     reduce using rule 132 (expr11 -> expr11 DIV expr12 .)
    NOTEQUAL        reduce using rule 132 (expr11 -> expr11 DIV expr12 .)
    LOGICALAND      reduce using rule 132 (expr11 -> expr11 DIV expr12 .)
    QUESTION_MARK   reduce using rule 132 (expr11 -> expr11 DIV expr12 .)
    LOGICALOR       reduce using rule 132 (expr11 -> expr11 DIV expr12 .)
    KEYWORD_while   reduce using rule 132 (expr11 -> expr11 DIV expr12 .)
    KEYWORD_until   reduce using rule 132 (expr11 -> expr11 DIV expr12 .)
    DELIM           reduce using rule 132 (expr11 -> expr11 DIV expr12 .)
    newline         reduce using rule 132 (expr11 -> expr11 DIV expr12 .)
    $end            reduce using rule 132 (expr11 -> expr11 DIV expr12 .)
    KEYWORD_do      reduce using rule 132 (expr11 -> expr11 DIV expr12 .)
    CLOSE_PAREN     reduce using rule 132 (expr11 -> expr11 DIV expr12 .)
    KEYWORD_then    reduce using rule 132 (expr11 -> expr11 DIV expr12 .)
    KEYWORD_end     reduce using rule 132 (expr11 -> expr11 DIV expr12 .)
    KEYWORD_elsif   reduce using rule 132 (expr11 -> expr11 DIV expr12 .)
    KEYWORD_else    reduce using rule 132 (expr11 -> expr11 DIV expr12 .)
    COLON           reduce using rule 132 (expr11 -> expr11 DIV expr12 .)
    COMMA           reduce using rule 132 (expr11 -> expr11 DIV expr12 .)
    CLOSE_BRACKET   reduce using rule 132 (expr11 -> expr11 DIV expr12 .)


state 138

    (133) expr11 -> expr11 MOD expr12 .

    MULTIPLY        reduce using rule 133 (expr11 -> expr11 MOD expr12 .)
    DIV             reduce using rule 133 (expr11 -> expr11 MOD expr12 .)
    MOD             reduce using rule 133 (expr11 -> expr11 MOD expr12 .)
    PLUS            reduce using rule 133 (expr11 -> expr11 MOD expr12 .)
    MINUS           reduce using rule 133 (expr11 -> expr11 MOD expr12 .)
    SHIFTL          reduce using rule 133 (expr11 -> expr11 MOD expr12 .)
    SHIFTR          reduce using rule 133 (expr11 -> expr11 MOD expr12 .)
    BITAND          reduce using rule 133 (expr11 -> expr11 MOD expr12 .)
    DOUBLEDOT       reduce using rule 133 (expr11 -> expr11 MOD expr12 .)
    TRIPLEDOT       reduce using rule 133 (expr11 -> expr11 MOD expr12 .)
    BITXOR          reduce using rule 133 (expr11 -> expr11 MOD expr12 .)
    PIPE            reduce using rule 133 (expr11 -> expr11 MOD expr12 .)
    LESSEQUAL       reduce using rule 133 (expr11 -> expr11 MOD expr12 .)
    LESS            reduce using rule 133 (expr11 -> expr11 MOD expr12 .)
    GREATER         reduce using rule 133 (expr11 -> expr11 MOD expr12 .)
    GREATEREQUAL    reduce using rule 133 (expr11 -> expr11 MOD expr12 .)
    IFF             reduce using rule 133 (expr11 -> expr11 MOD expr12 .)
    DOUBLEEQUAL     reduce using rule 133 (expr11 -> expr11 MOD expr12 .)
    TRIPLEEQUAL     reduce using rule 133 (expr11 -> expr11 MOD expr12 .)
    NOTEQUAL        reduce using rule 133 (expr11 -> expr11 MOD expr12 .)
    LOGICALAND      reduce using rule 133 (expr11 -> expr11 MOD expr12 .)
    QUESTION_MARK   reduce using rule 133 (expr11 -> expr11 MOD expr12 .)
    LOGICALOR       reduce using rule 133 (expr11 -> expr11 MOD expr12 .)
    KEYWORD_while   reduce using rule 133 (expr11 -> expr11 MOD expr12 .)
    KEYWORD_until   reduce using rule 133 (expr11 -> expr11 MOD expr12 .)
    DELIM           reduce using rule 133 (expr11 -> expr11 MOD expr12 .)
    newline         reduce using rule 133 (expr11 -> expr11 MOD expr12 .)
    $end            reduce using rule 133 (expr11 -> expr11 MOD expr12 .)
    KEYWORD_do      reduce using rule 133 (expr11 -> expr11 MOD expr12 .)
    CLOSE_PAREN     reduce using rule 133 (expr11 -> expr11 MOD expr12 .)
    KEYWORD_then    reduce using rule 133 (expr11 -> expr11 MOD expr12 .)
    KEYWORD_end     reduce using rule 133 (expr11 -> expr11 MOD expr12 .)
    KEYWORD_elsif   reduce using rule 133 (expr11 -> expr11 MOD expr12 .)
    KEYWORD_else    reduce using rule 133 (expr11 -> expr11 MOD expr12 .)
    COLON           reduce using rule 133 (expr11 -> expr11 MOD expr12 .)
    COMMA           reduce using rule 133 (expr11 -> expr11 MOD expr12 .)
    CLOSE_BRACKET   reduce using rule 133 (expr11 -> expr11 MOD expr12 .)


state 139

    (135) expr12 -> expr13 DOUBLESTAR expr12 .

    MULTIPLY        reduce using rule 135 (expr12 -> expr13 DOUBLESTAR expr12 .)
    DIV             reduce using rule 135 (expr12 -> expr13 DOUBLESTAR expr12 .)
    MOD             reduce using rule 135 (expr12 -> expr13 DOUBLESTAR expr12 .)
    PLUS            reduce using rule 135 (expr12 -> expr13 DOUBLESTAR expr12 .)
    MINUS           reduce using rule 135 (expr12 -> expr13 DOUBLESTAR expr12 .)
    SHIFTL          reduce using rule 135 (expr12 -> expr13 DOUBLESTAR expr12 .)
    SHIFTR          reduce using rule 135 (expr12 -> expr13 DOUBLESTAR expr12 .)
    BITAND          reduce using rule 135 (expr12 -> expr13 DOUBLESTAR expr12 .)
    CLOSE_BRACKET   reduce using rule 135 (expr12 -> expr13 DOUBLESTAR expr12 .)
    BITXOR          reduce using rule 135 (expr12 -> expr13 DOUBLESTAR expr12 .)
    PIPE            reduce using rule 135 (expr12 -> expr13 DOUBLESTAR expr12 .)
    DOUBLEDOT       reduce using rule 135 (expr12 -> expr13 DOUBLESTAR expr12 .)
    TRIPLEDOT       reduce using rule 135 (expr12 -> expr13 DOUBLESTAR expr12 .)
    LESSEQUAL       reduce using rule 135 (expr12 -> expr13 DOUBLESTAR expr12 .)
    LESS            reduce using rule 135 (expr12 -> expr13 DOUBLESTAR expr12 .)
    GREATER         reduce using rule 135 (expr12 -> expr13 DOUBLESTAR expr12 .)
    GREATEREQUAL    reduce using rule 135 (expr12 -> expr13 DOUBLESTAR expr12 .)
    IFF             reduce using rule 135 (expr12 -> expr13 DOUBLESTAR expr12 .)
    DOUBLEEQUAL     reduce using rule 135 (expr12 -> expr13 DOUBLESTAR expr12 .)
    TRIPLEEQUAL     reduce using rule 135 (expr12 -> expr13 DOUBLESTAR expr12 .)
    NOTEQUAL        reduce using rule 135 (expr12 -> expr13 DOUBLESTAR expr12 .)
    LOGICALAND      reduce using rule 135 (expr12 -> expr13 DOUBLESTAR expr12 .)
    QUESTION_MARK   reduce using rule 135 (expr12 -> expr13 DOUBLESTAR expr12 .)
    LOGICALOR       reduce using rule 135 (expr12 -> expr13 DOUBLESTAR expr12 .)
    KEYWORD_while   reduce using rule 135 (expr12 -> expr13 DOUBLESTAR expr12 .)
    KEYWORD_until   reduce using rule 135 (expr12 -> expr13 DOUBLESTAR expr12 .)
    DELIM           reduce using rule 135 (expr12 -> expr13 DOUBLESTAR expr12 .)
    newline         reduce using rule 135 (expr12 -> expr13 DOUBLESTAR expr12 .)
    KEYWORD_end     reduce using rule 135 (expr12 -> expr13 DOUBLESTAR expr12 .)
    KEYWORD_do      reduce using rule 135 (expr12 -> expr13 DOUBLESTAR expr12 .)
    $end            reduce using rule 135 (expr12 -> expr13 DOUBLESTAR expr12 .)
    CLOSE_PAREN     reduce using rule 135 (expr12 -> expr13 DOUBLESTAR expr12 .)
    KEYWORD_then    reduce using rule 135 (expr12 -> expr13 DOUBLESTAR expr12 .)
    KEYWORD_elsif   reduce using rule 135 (expr12 -> expr13 DOUBLESTAR expr12 .)
    KEYWORD_else    reduce using rule 135 (expr12 -> expr13 DOUBLESTAR expr12 .)
    COLON           reduce using rule 135 (expr12 -> expr13 DOUBLESTAR expr12 .)
    COMMA           reduce using rule 135 (expr12 -> expr13 DOUBLESTAR expr12 .)


state 140

    (8) func_defn -> KEYWORD_def fname opt_oparen . arguments opt_cparen func_stmts opt_terms KEYWORD_end
    (11) arguments -> . arguments COMMA VARIABLES
    (12) arguments -> . arguments COMMA CONSTANTS
    (13) arguments -> . arguments COMMA func_arg_expr
    (14) arguments -> . VARIABLES
    (15) arguments -> . CONSTANTS
    (16) arguments -> . func_arg_expr
    (17) func_arg_expr -> . VARIABLES EQUAL primary
    (18) func_arg_expr -> . CONSTANTS EQUAL primary

    VARIABLES       shift and go to state 188
    CONSTANTS       shift and go to state 191

    func_arg_expr                  shift and go to state 190
    arguments                      shift and go to state 189

state 141

    (154) terms -> terms term .

    KEYWORD_return  reduce using rule 154 (terms -> terms term .)
    DELIM           reduce using rule 154 (terms -> terms term .)
    newline         reduce using rule 154 (terms -> terms term .)
    KEYWORD_if      reduce using rule 154 (terms -> terms term .)
    KEYWORD_while   reduce using rule 154 (terms -> terms term .)
    KEYWORD_begin   reduce using rule 154 (terms -> terms term .)
    KEYWORD_until   reduce using rule 154 (terms -> terms term .)
    KEYWORD_for     reduce using rule 154 (terms -> terms term .)
    KEYWORD_puts    reduce using rule 154 (terms -> terms term .)
    KEYWORD_break   reduce using rule 154 (terms -> terms term .)
    KEYWORD_next    reduce using rule 154 (terms -> terms term .)
    KEYWORD_redo    reduce using rule 154 (terms -> terms term .)
    KEYWORD_exit    reduce using rule 154 (terms -> terms term .)
    VARIABLES       reduce using rule 154 (terms -> terms term .)
    CONSTANTS       reduce using rule 154 (terms -> terms term .)
    BOOLEAN_CONSTANTS reduce using rule 154 (terms -> terms term .)
    OPEN_PAREN      reduce using rule 154 (terms -> terms term .)
    PLUS            reduce using rule 154 (terms -> terms term .)
    MINUS           reduce using rule 154 (terms -> terms term .)
    BITNOT          reduce using rule 154 (terms -> terms term .)
    BITCOMP         reduce using rule 154 (terms -> terms term .)
    INT_CONSTANTS   reduce using rule 154 (terms -> terms term .)
    FLOAT_CONSTANTS reduce using rule 154 (terms -> terms term .)
    KEYWORD_end     reduce using rule 154 (terms -> terms term .)
    KEYWORD_elsif   reduce using rule 154 (terms -> terms term .)
    KEYWORD_else    reduce using rule 154 (terms -> terms term .)
    KEYWORD_def     reduce using rule 154 (terms -> terms term .)
    $end            reduce using rule 154 (terms -> terms term .)


state 142

    (4) statements -> statements terms statement .

    DELIM           reduce using rule 4 (statements -> statements terms statement .)
    newline         reduce using rule 4 (statements -> statements terms statement .)
    $end            reduce using rule 4 (statements -> statements terms statement .)


state 143

    (27) top_stmt -> KEYWORD_until expr3 opt_do . gen_stmts opt_terms KEYWORD_end
    (30) gen_stmts -> . top_stmt
    (31) gen_stmts -> . gen_stmts terms top_stmt
    (32) gen_stmts -> . none
    (21) top_stmt -> . stmt
    (22) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (23) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (24) top_stmt -> . top_stmt KEYWORD_while expr3
    (25) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (26) top_stmt -> . top_stmt KEYWORD_until expr3
    (27) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (28) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (29) top_stmt -> . KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (157) none -> .
    (33) stmt -> . expr
    (34) stmt -> . expr1
    (35) stmt -> . puts_stmt
    (36) stmt -> . loop_stmt
    (37) stmt -> . exit_stmt
    (38) stmt -> . func_call_stmt
    (78) expr -> . MLHS EQUAL MRHS
    (100) expr1 -> . expr3 QUESTION_MARK expr2 COLON expr2
    (101) expr1 -> . expr2
    (45) puts_stmt -> . KEYWORD_puts mrhs
    (46) puts_stmt -> . KEYWORD_puts expr
    (41) loop_stmt -> . KEYWORD_break
    (42) loop_stmt -> . KEYWORD_next
    (43) loop_stmt -> . KEYWORD_redo
    (44) exit_stmt -> . KEYWORD_exit
    (39) func_call_stmt -> . fname opt_oparen func_ret_arg opt_cparen
    (40) func_call_stmt -> . MLHS EQUAL fname opt_oparen func_ret_arg opt_cparen
    (79) MLHS -> . mlhs
    (80) MLHS -> . MLHS COMMA mlhs
    (105) expr3 -> . expr3 LOGICALOR expr4
    (106) expr3 -> . expr4
    (102) expr2 -> . expr7 DOUBLEDOT expr7
    (103) expr2 -> . expr7 TRIPLEDOT expr7
    (104) expr2 -> . expr3
    (9) fname -> . VARIABLES
    (10) fname -> . CONSTANTS
    (83) mlhs -> . VARIABLES
    (84) mlhs -> . CONSTANTS
    (85) mlhs -> . array
    (107) expr4 -> . expr4 LOGICALAND expr5
    (108) expr4 -> . expr5
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (109) expr5 -> . expr6 IFF expr6
    (110) expr5 -> . expr6 DOUBLEEQUAL expr6
    (111) expr5 -> . expr6 TRIPLEEQUAL expr6
    (112) expr5 -> . expr6 NOTEQUAL expr6
    (113) expr5 -> . expr6
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (114) expr6 -> . expr7 LESSEQUAL expr7
    (115) expr6 -> . expr7 LESS expr7
    (116) expr6 -> . expr7 GREATER expr7
    (117) expr6 -> . expr7 GREATEREQUAL expr7
    (118) expr6 -> . expr7
    (119) expr6 -> . BOOLEAN_CONSTANTS
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP

    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 37
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 52
    DELIM           reduce using rule 157 (none -> .)
    newline         reduce using rule 157 (none -> .)
    KEYWORD_end     reduce using rule 157 (none -> .)
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 47
    KEYWORD_next    shift and go to state 30
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    VARIABLES       shift and go to state 28
    CONSTANTS       shift and go to state 22
    BOOLEAN_CONSTANTS shift and go to state 12
    OPEN_PAREN      shift and go to state 5
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29

    mlhs                           shift and go to state 2
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    array                          shift and go to state 26
    expr2                          shift and go to state 39
    expr3                          shift and go to state 40
    expr1                          shift and go to state 41
    expr6                          shift and go to state 42
    expr7                          shift and go to state 8
    puts_stmt                      shift and go to state 19
    expr5                          shift and go to state 44
    func_call_stmt                 shift and go to state 32
    expr8                          shift and go to state 45
    expr9                          shift and go to state 46
    expr4                          shift and go to state 10
    exit_stmt                      shift and go to state 48
    MLHS                           shift and go to state 50
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 20
    uexpr                          shift and go to state 11
    none                           shift and go to state 102
    gen_stmts                      shift and go to state 192
    expr                           shift and go to state 35
    fname                          shift and go to state 43
    top_stmt                       shift and go to state 101

state 144

    (61) opt_then -> newline .

    KEYWORD_if      reduce using rule 61 (opt_then -> newline .)
    KEYWORD_while   reduce using rule 61 (opt_then -> newline .)
    KEYWORD_begin   reduce using rule 61 (opt_then -> newline .)
    KEYWORD_until   reduce using rule 61 (opt_then -> newline .)
    KEYWORD_for     reduce using rule 61 (opt_then -> newline .)
    KEYWORD_puts    reduce using rule 61 (opt_then -> newline .)
    KEYWORD_break   reduce using rule 61 (opt_then -> newline .)
    KEYWORD_next    reduce using rule 61 (opt_then -> newline .)
    KEYWORD_redo    reduce using rule 61 (opt_then -> newline .)
    KEYWORD_exit    reduce using rule 61 (opt_then -> newline .)
    VARIABLES       reduce using rule 61 (opt_then -> newline .)
    CONSTANTS       reduce using rule 61 (opt_then -> newline .)
    BOOLEAN_CONSTANTS reduce using rule 61 (opt_then -> newline .)
    OPEN_PAREN      reduce using rule 61 (opt_then -> newline .)
    PLUS            reduce using rule 61 (opt_then -> newline .)
    MINUS           reduce using rule 61 (opt_then -> newline .)
    BITNOT          reduce using rule 61 (opt_then -> newline .)
    BITCOMP         reduce using rule 61 (opt_then -> newline .)
    KEYWORD_elsif   reduce using rule 61 (opt_then -> newline .)
    DELIM           reduce using rule 61 (opt_then -> newline .)
    newline         reduce using rule 61 (opt_then -> newline .)
    INT_CONSTANTS   reduce using rule 61 (opt_then -> newline .)
    FLOAT_CONSTANTS reduce using rule 61 (opt_then -> newline .)
    KEYWORD_else    reduce using rule 61 (opt_then -> newline .)
    KEYWORD_end     reduce using rule 61 (opt_then -> newline .)


state 145

    (60) opt_then -> KEYWORD_then .

    KEYWORD_if      reduce using rule 60 (opt_then -> KEYWORD_then .)
    KEYWORD_while   reduce using rule 60 (opt_then -> KEYWORD_then .)
    KEYWORD_begin   reduce using rule 60 (opt_then -> KEYWORD_then .)
    KEYWORD_until   reduce using rule 60 (opt_then -> KEYWORD_then .)
    KEYWORD_for     reduce using rule 60 (opt_then -> KEYWORD_then .)
    KEYWORD_puts    reduce using rule 60 (opt_then -> KEYWORD_then .)
    KEYWORD_break   reduce using rule 60 (opt_then -> KEYWORD_then .)
    KEYWORD_next    reduce using rule 60 (opt_then -> KEYWORD_then .)
    KEYWORD_redo    reduce using rule 60 (opt_then -> KEYWORD_then .)
    KEYWORD_exit    reduce using rule 60 (opt_then -> KEYWORD_then .)
    VARIABLES       reduce using rule 60 (opt_then -> KEYWORD_then .)
    CONSTANTS       reduce using rule 60 (opt_then -> KEYWORD_then .)
    BOOLEAN_CONSTANTS reduce using rule 60 (opt_then -> KEYWORD_then .)
    OPEN_PAREN      reduce using rule 60 (opt_then -> KEYWORD_then .)
    PLUS            reduce using rule 60 (opt_then -> KEYWORD_then .)
    MINUS           reduce using rule 60 (opt_then -> KEYWORD_then .)
    BITNOT          reduce using rule 60 (opt_then -> KEYWORD_then .)
    BITCOMP         reduce using rule 60 (opt_then -> KEYWORD_then .)
    KEYWORD_elsif   reduce using rule 60 (opt_then -> KEYWORD_then .)
    DELIM           reduce using rule 60 (opt_then -> KEYWORD_then .)
    newline         reduce using rule 60 (opt_then -> KEYWORD_then .)
    INT_CONSTANTS   reduce using rule 60 (opt_then -> KEYWORD_then .)
    FLOAT_CONSTANTS reduce using rule 60 (opt_then -> KEYWORD_then .)
    KEYWORD_else    reduce using rule 60 (opt_then -> KEYWORD_then .)
    KEYWORD_end     reduce using rule 60 (opt_then -> KEYWORD_then .)


state 146

    (22) top_stmt -> KEYWORD_if expr3 opt_then . gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (30) gen_stmts -> . top_stmt
    (31) gen_stmts -> . gen_stmts terms top_stmt
    (32) gen_stmts -> . none
    (21) top_stmt -> . stmt
    (22) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (23) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (24) top_stmt -> . top_stmt KEYWORD_while expr3
    (25) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (26) top_stmt -> . top_stmt KEYWORD_until expr3
    (27) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (28) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (29) top_stmt -> . KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (157) none -> .
    (33) stmt -> . expr
    (34) stmt -> . expr1
    (35) stmt -> . puts_stmt
    (36) stmt -> . loop_stmt
    (37) stmt -> . exit_stmt
    (38) stmt -> . func_call_stmt
    (78) expr -> . MLHS EQUAL MRHS
    (100) expr1 -> . expr3 QUESTION_MARK expr2 COLON expr2
    (101) expr1 -> . expr2
    (45) puts_stmt -> . KEYWORD_puts mrhs
    (46) puts_stmt -> . KEYWORD_puts expr
    (41) loop_stmt -> . KEYWORD_break
    (42) loop_stmt -> . KEYWORD_next
    (43) loop_stmt -> . KEYWORD_redo
    (44) exit_stmt -> . KEYWORD_exit
    (39) func_call_stmt -> . fname opt_oparen func_ret_arg opt_cparen
    (40) func_call_stmt -> . MLHS EQUAL fname opt_oparen func_ret_arg opt_cparen
    (79) MLHS -> . mlhs
    (80) MLHS -> . MLHS COMMA mlhs
    (105) expr3 -> . expr3 LOGICALOR expr4
    (106) expr3 -> . expr4
    (102) expr2 -> . expr7 DOUBLEDOT expr7
    (103) expr2 -> . expr7 TRIPLEDOT expr7
    (104) expr2 -> . expr3
    (9) fname -> . VARIABLES
    (10) fname -> . CONSTANTS
    (83) mlhs -> . VARIABLES
    (84) mlhs -> . CONSTANTS
    (85) mlhs -> . array
    (107) expr4 -> . expr4 LOGICALAND expr5
    (108) expr4 -> . expr5
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (109) expr5 -> . expr6 IFF expr6
    (110) expr5 -> . expr6 DOUBLEEQUAL expr6
    (111) expr5 -> . expr6 TRIPLEEQUAL expr6
    (112) expr5 -> . expr6 NOTEQUAL expr6
    (113) expr5 -> . expr6
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (114) expr6 -> . expr7 LESSEQUAL expr7
    (115) expr6 -> . expr7 LESS expr7
    (116) expr6 -> . expr7 GREATER expr7
    (117) expr6 -> . expr7 GREATEREQUAL expr7
    (118) expr6 -> . expr7
    (119) expr6 -> . BOOLEAN_CONSTANTS
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP

    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 37
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 52
    DELIM           reduce using rule 157 (none -> .)
    newline         reduce using rule 157 (none -> .)
    KEYWORD_elsif   reduce using rule 157 (none -> .)
    KEYWORD_else    reduce using rule 157 (none -> .)
    KEYWORD_end     reduce using rule 157 (none -> .)
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 47
    KEYWORD_next    shift and go to state 30
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    VARIABLES       shift and go to state 28
    CONSTANTS       shift and go to state 22
    BOOLEAN_CONSTANTS shift and go to state 12
    OPEN_PAREN      shift and go to state 5
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29

    mlhs                           shift and go to state 2
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    array                          shift and go to state 26
    expr2                          shift and go to state 39
    expr3                          shift and go to state 40
    expr1                          shift and go to state 41
    expr6                          shift and go to state 42
    expr7                          shift and go to state 8
    puts_stmt                      shift and go to state 19
    expr5                          shift and go to state 44
    func_call_stmt                 shift and go to state 32
    expr8                          shift and go to state 45
    expr9                          shift and go to state 46
    expr4                          shift and go to state 10
    exit_stmt                      shift and go to state 48
    MLHS                           shift and go to state 50
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 20
    uexpr                          shift and go to state 11
    none                           shift and go to state 102
    gen_stmts                      shift and go to state 193
    expr                           shift and go to state 35
    fname                          shift and go to state 43
    top_stmt                       shift and go to state 101

state 147

    (143) array -> VARIABLES OPEN_BRACKET expr7 . CLOSE_BRACKET
    (144) array -> VARIABLES OPEN_BRACKET expr7 . DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> VARIABLES OPEN_BRACKET expr7 . TRIPLEDOT expr7 CLOSE_BRACKET
    (120) expr7 -> expr7 . BITXOR expr8
    (121) expr7 -> expr7 . PIPE expr8

    CLOSE_BRACKET   shift and go to state 194
    DOUBLEDOT       shift and go to state 195
    TRIPLEDOT       shift and go to state 196
    BITXOR          shift and go to state 66
    PIPE            shift and go to state 65


state 148

    (90) str_expr -> str_expr PLUS . STRING_CONSTANTS

    STRING_CONSTANTS shift and go to state 197


state 149

    (96) primary -> BOOLEAN_CONSTANTS .

    COMMA           reduce using rule 96 (primary -> BOOLEAN_CONSTANTS .)
    DELIM           reduce using rule 96 (primary -> BOOLEAN_CONSTANTS .)
    newline         reduce using rule 96 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_end     reduce using rule 96 (primary -> BOOLEAN_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 96 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_while   reduce using rule 96 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_until   reduce using rule 96 (primary -> BOOLEAN_CONSTANTS .)
    $end            reduce using rule 96 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 96 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_else    reduce using rule 96 (primary -> BOOLEAN_CONSTANTS .)
    CLOSE_BRACKET   reduce using rule 96 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_return  reduce using rule 96 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_if      reduce using rule 96 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_begin   reduce using rule 96 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_for     reduce using rule 96 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_puts    reduce using rule 96 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_break   reduce using rule 96 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_next    reduce using rule 96 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_redo    reduce using rule 96 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_exit    reduce using rule 96 (primary -> BOOLEAN_CONSTANTS .)
    VARIABLES       reduce using rule 96 (primary -> BOOLEAN_CONSTANTS .)
    CONSTANTS       reduce using rule 96 (primary -> BOOLEAN_CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 96 (primary -> BOOLEAN_CONSTANTS .)
    OPEN_PAREN      reduce using rule 96 (primary -> BOOLEAN_CONSTANTS .)
    PLUS            reduce using rule 96 (primary -> BOOLEAN_CONSTANTS .)
    MINUS           reduce using rule 96 (primary -> BOOLEAN_CONSTANTS .)
    BITNOT          reduce using rule 96 (primary -> BOOLEAN_CONSTANTS .)
    BITCOMP         reduce using rule 96 (primary -> BOOLEAN_CONSTANTS .)
    INT_CONSTANTS   reduce using rule 96 (primary -> BOOLEAN_CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 96 (primary -> BOOLEAN_CONSTANTS .)


state 150

    (92) primary -> INT_CONSTANTS .

    COMMA           reduce using rule 92 (primary -> INT_CONSTANTS .)
    DELIM           reduce using rule 92 (primary -> INT_CONSTANTS .)
    newline         reduce using rule 92 (primary -> INT_CONSTANTS .)
    KEYWORD_end     reduce using rule 92 (primary -> INT_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 92 (primary -> INT_CONSTANTS .)
    KEYWORD_while   reduce using rule 92 (primary -> INT_CONSTANTS .)
    KEYWORD_until   reduce using rule 92 (primary -> INT_CONSTANTS .)
    $end            reduce using rule 92 (primary -> INT_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 92 (primary -> INT_CONSTANTS .)
    KEYWORD_else    reduce using rule 92 (primary -> INT_CONSTANTS .)
    CLOSE_BRACKET   reduce using rule 92 (primary -> INT_CONSTANTS .)
    KEYWORD_return  reduce using rule 92 (primary -> INT_CONSTANTS .)
    KEYWORD_if      reduce using rule 92 (primary -> INT_CONSTANTS .)
    KEYWORD_begin   reduce using rule 92 (primary -> INT_CONSTANTS .)
    KEYWORD_for     reduce using rule 92 (primary -> INT_CONSTANTS .)
    KEYWORD_puts    reduce using rule 92 (primary -> INT_CONSTANTS .)
    KEYWORD_break   reduce using rule 92 (primary -> INT_CONSTANTS .)
    KEYWORD_next    reduce using rule 92 (primary -> INT_CONSTANTS .)
    KEYWORD_redo    reduce using rule 92 (primary -> INT_CONSTANTS .)
    KEYWORD_exit    reduce using rule 92 (primary -> INT_CONSTANTS .)
    VARIABLES       reduce using rule 92 (primary -> INT_CONSTANTS .)
    CONSTANTS       reduce using rule 92 (primary -> INT_CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 92 (primary -> INT_CONSTANTS .)
    OPEN_PAREN      reduce using rule 92 (primary -> INT_CONSTANTS .)
    PLUS            reduce using rule 92 (primary -> INT_CONSTANTS .)
    MINUS           reduce using rule 92 (primary -> INT_CONSTANTS .)
    BITNOT          reduce using rule 92 (primary -> INT_CONSTANTS .)
    BITCOMP         reduce using rule 92 (primary -> INT_CONSTANTS .)
    INT_CONSTANTS   reduce using rule 92 (primary -> INT_CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 92 (primary -> INT_CONSTANTS .)


state 151

    (93) primary -> FLOAT_CONSTANTS .

    COMMA           reduce using rule 93 (primary -> FLOAT_CONSTANTS .)
    DELIM           reduce using rule 93 (primary -> FLOAT_CONSTANTS .)
    newline         reduce using rule 93 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_end     reduce using rule 93 (primary -> FLOAT_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 93 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_while   reduce using rule 93 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_until   reduce using rule 93 (primary -> FLOAT_CONSTANTS .)
    $end            reduce using rule 93 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 93 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_else    reduce using rule 93 (primary -> FLOAT_CONSTANTS .)
    CLOSE_BRACKET   reduce using rule 93 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_return  reduce using rule 93 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_if      reduce using rule 93 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_begin   reduce using rule 93 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_for     reduce using rule 93 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_puts    reduce using rule 93 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_break   reduce using rule 93 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_next    reduce using rule 93 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_redo    reduce using rule 93 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_exit    reduce using rule 93 (primary -> FLOAT_CONSTANTS .)
    VARIABLES       reduce using rule 93 (primary -> FLOAT_CONSTANTS .)
    CONSTANTS       reduce using rule 93 (primary -> FLOAT_CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 93 (primary -> FLOAT_CONSTANTS .)
    OPEN_PAREN      reduce using rule 93 (primary -> FLOAT_CONSTANTS .)
    PLUS            reduce using rule 93 (primary -> FLOAT_CONSTANTS .)
    MINUS           reduce using rule 93 (primary -> FLOAT_CONSTANTS .)
    BITNOT          reduce using rule 93 (primary -> FLOAT_CONSTANTS .)
    BITCOMP         reduce using rule 93 (primary -> FLOAT_CONSTANTS .)
    INT_CONSTANTS   reduce using rule 93 (primary -> FLOAT_CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 93 (primary -> FLOAT_CONSTANTS .)


state 152

    (52) func_ret_arg -> func_arg_expr .

    CLOSE_BRACKET   reduce using rule 52 (func_ret_arg -> func_arg_expr .)
    COMMA           reduce using rule 52 (func_ret_arg -> func_arg_expr .)
    CLOSE_PAREN     reduce using rule 52 (func_ret_arg -> func_arg_expr .)
    KEYWORD_while   reduce using rule 52 (func_ret_arg -> func_arg_expr .)
    KEYWORD_until   reduce using rule 52 (func_ret_arg -> func_arg_expr .)
    DELIM           reduce using rule 52 (func_ret_arg -> func_arg_expr .)
    newline         reduce using rule 52 (func_ret_arg -> func_arg_expr .)
    $end            reduce using rule 52 (func_ret_arg -> func_arg_expr .)
    KEYWORD_end     reduce using rule 52 (func_ret_arg -> func_arg_expr .)
    KEYWORD_elsif   reduce using rule 52 (func_ret_arg -> func_arg_expr .)
    KEYWORD_else    reduce using rule 52 (func_ret_arg -> func_arg_expr .)


state 153

    (53) func_ret_arg -> primary .

    CLOSE_BRACKET   reduce using rule 53 (func_ret_arg -> primary .)
    COMMA           reduce using rule 53 (func_ret_arg -> primary .)
    CLOSE_PAREN     reduce using rule 53 (func_ret_arg -> primary .)
    KEYWORD_while   reduce using rule 53 (func_ret_arg -> primary .)
    KEYWORD_until   reduce using rule 53 (func_ret_arg -> primary .)
    DELIM           reduce using rule 53 (func_ret_arg -> primary .)
    newline         reduce using rule 53 (func_ret_arg -> primary .)
    $end            reduce using rule 53 (func_ret_arg -> primary .)
    KEYWORD_end     reduce using rule 53 (func_ret_arg -> primary .)
    KEYWORD_elsif   reduce using rule 53 (func_ret_arg -> primary .)
    KEYWORD_else    reduce using rule 53 (func_ret_arg -> primary .)


state 154

    (94) primary -> STRING_CONSTANTS .

    COMMA           reduce using rule 94 (primary -> STRING_CONSTANTS .)
    DELIM           reduce using rule 94 (primary -> STRING_CONSTANTS .)
    newline         reduce using rule 94 (primary -> STRING_CONSTANTS .)
    KEYWORD_end     reduce using rule 94 (primary -> STRING_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 94 (primary -> STRING_CONSTANTS .)
    KEYWORD_while   reduce using rule 94 (primary -> STRING_CONSTANTS .)
    KEYWORD_until   reduce using rule 94 (primary -> STRING_CONSTANTS .)
    $end            reduce using rule 94 (primary -> STRING_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 94 (primary -> STRING_CONSTANTS .)
    KEYWORD_else    reduce using rule 94 (primary -> STRING_CONSTANTS .)
    CLOSE_BRACKET   reduce using rule 94 (primary -> STRING_CONSTANTS .)
    KEYWORD_return  reduce using rule 94 (primary -> STRING_CONSTANTS .)
    KEYWORD_if      reduce using rule 94 (primary -> STRING_CONSTANTS .)
    KEYWORD_begin   reduce using rule 94 (primary -> STRING_CONSTANTS .)
    KEYWORD_for     reduce using rule 94 (primary -> STRING_CONSTANTS .)
    KEYWORD_puts    reduce using rule 94 (primary -> STRING_CONSTANTS .)
    KEYWORD_break   reduce using rule 94 (primary -> STRING_CONSTANTS .)
    KEYWORD_next    reduce using rule 94 (primary -> STRING_CONSTANTS .)
    KEYWORD_redo    reduce using rule 94 (primary -> STRING_CONSTANTS .)
    KEYWORD_exit    reduce using rule 94 (primary -> STRING_CONSTANTS .)
    VARIABLES       reduce using rule 94 (primary -> STRING_CONSTANTS .)
    CONSTANTS       reduce using rule 94 (primary -> STRING_CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 94 (primary -> STRING_CONSTANTS .)
    OPEN_PAREN      reduce using rule 94 (primary -> STRING_CONSTANTS .)
    PLUS            reduce using rule 94 (primary -> STRING_CONSTANTS .)
    MINUS           reduce using rule 94 (primary -> STRING_CONSTANTS .)
    BITNOT          reduce using rule 94 (primary -> STRING_CONSTANTS .)
    BITCOMP         reduce using rule 94 (primary -> STRING_CONSTANTS .)
    INT_CONSTANTS   reduce using rule 94 (primary -> STRING_CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 94 (primary -> STRING_CONSTANTS .)


state 155

    (89) mrhs -> OPEN_BRACKET func_ret_arg . CLOSE_BRACKET
    (54) func_ret_arg -> func_ret_arg . COMMA func_arg_expr
    (55) func_ret_arg -> func_ret_arg . COMMA primary

    CLOSE_BRACKET   shift and go to state 198
    COMMA           shift and go to state 199


state 156

    (99) primary -> array .

    COMMA           reduce using rule 99 (primary -> array .)
    DELIM           reduce using rule 99 (primary -> array .)
    newline         reduce using rule 99 (primary -> array .)
    KEYWORD_end     reduce using rule 99 (primary -> array .)
    CLOSE_PAREN     reduce using rule 99 (primary -> array .)
    KEYWORD_while   reduce using rule 99 (primary -> array .)
    KEYWORD_until   reduce using rule 99 (primary -> array .)
    $end            reduce using rule 99 (primary -> array .)
    KEYWORD_elsif   reduce using rule 99 (primary -> array .)
    KEYWORD_else    reduce using rule 99 (primary -> array .)
    CLOSE_BRACKET   reduce using rule 99 (primary -> array .)
    KEYWORD_return  reduce using rule 99 (primary -> array .)
    KEYWORD_if      reduce using rule 99 (primary -> array .)
    KEYWORD_begin   reduce using rule 99 (primary -> array .)
    KEYWORD_for     reduce using rule 99 (primary -> array .)
    KEYWORD_puts    reduce using rule 99 (primary -> array .)
    KEYWORD_break   reduce using rule 99 (primary -> array .)
    KEYWORD_next    reduce using rule 99 (primary -> array .)
    KEYWORD_redo    reduce using rule 99 (primary -> array .)
    KEYWORD_exit    reduce using rule 99 (primary -> array .)
    VARIABLES       reduce using rule 99 (primary -> array .)
    CONSTANTS       reduce using rule 99 (primary -> array .)
    BOOLEAN_CONSTANTS reduce using rule 99 (primary -> array .)
    OPEN_PAREN      reduce using rule 99 (primary -> array .)
    PLUS            reduce using rule 99 (primary -> array .)
    MINUS           reduce using rule 99 (primary -> array .)
    BITNOT          reduce using rule 99 (primary -> array .)
    BITCOMP         reduce using rule 99 (primary -> array .)
    INT_CONSTANTS   reduce using rule 99 (primary -> array .)
    FLOAT_CONSTANTS reduce using rule 99 (primary -> array .)


state 157

    (95) primary -> CHAR_CONSTANTS .

    COMMA           reduce using rule 95 (primary -> CHAR_CONSTANTS .)
    DELIM           reduce using rule 95 (primary -> CHAR_CONSTANTS .)
    newline         reduce using rule 95 (primary -> CHAR_CONSTANTS .)
    KEYWORD_end     reduce using rule 95 (primary -> CHAR_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 95 (primary -> CHAR_CONSTANTS .)
    KEYWORD_while   reduce using rule 95 (primary -> CHAR_CONSTANTS .)
    KEYWORD_until   reduce using rule 95 (primary -> CHAR_CONSTANTS .)
    $end            reduce using rule 95 (primary -> CHAR_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 95 (primary -> CHAR_CONSTANTS .)
    KEYWORD_else    reduce using rule 95 (primary -> CHAR_CONSTANTS .)
    CLOSE_BRACKET   reduce using rule 95 (primary -> CHAR_CONSTANTS .)
    KEYWORD_return  reduce using rule 95 (primary -> CHAR_CONSTANTS .)
    KEYWORD_if      reduce using rule 95 (primary -> CHAR_CONSTANTS .)
    KEYWORD_begin   reduce using rule 95 (primary -> CHAR_CONSTANTS .)
    KEYWORD_for     reduce using rule 95 (primary -> CHAR_CONSTANTS .)
    KEYWORD_puts    reduce using rule 95 (primary -> CHAR_CONSTANTS .)
    KEYWORD_break   reduce using rule 95 (primary -> CHAR_CONSTANTS .)
    KEYWORD_next    reduce using rule 95 (primary -> CHAR_CONSTANTS .)
    KEYWORD_redo    reduce using rule 95 (primary -> CHAR_CONSTANTS .)
    KEYWORD_exit    reduce using rule 95 (primary -> CHAR_CONSTANTS .)
    VARIABLES       reduce using rule 95 (primary -> CHAR_CONSTANTS .)
    CONSTANTS       reduce using rule 95 (primary -> CHAR_CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 95 (primary -> CHAR_CONSTANTS .)
    OPEN_PAREN      reduce using rule 95 (primary -> CHAR_CONSTANTS .)
    PLUS            reduce using rule 95 (primary -> CHAR_CONSTANTS .)
    MINUS           reduce using rule 95 (primary -> CHAR_CONSTANTS .)
    BITNOT          reduce using rule 95 (primary -> CHAR_CONSTANTS .)
    BITCOMP         reduce using rule 95 (primary -> CHAR_CONSTANTS .)
    INT_CONSTANTS   reduce using rule 95 (primary -> CHAR_CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 95 (primary -> CHAR_CONSTANTS .)


state 158

    (17) func_arg_expr -> VARIABLES . EQUAL primary
    (98) primary -> VARIABLES .
    (143) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> VARIABLES . OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> VARIABLES . OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET

    EQUAL           shift and go to state 200
    COMMA           reduce using rule 98 (primary -> VARIABLES .)
    DELIM           reduce using rule 98 (primary -> VARIABLES .)
    newline         reduce using rule 98 (primary -> VARIABLES .)
    KEYWORD_end     reduce using rule 98 (primary -> VARIABLES .)
    CLOSE_PAREN     reduce using rule 98 (primary -> VARIABLES .)
    KEYWORD_while   reduce using rule 98 (primary -> VARIABLES .)
    KEYWORD_until   reduce using rule 98 (primary -> VARIABLES .)
    $end            reduce using rule 98 (primary -> VARIABLES .)
    KEYWORD_elsif   reduce using rule 98 (primary -> VARIABLES .)
    KEYWORD_else    reduce using rule 98 (primary -> VARIABLES .)
    CLOSE_BRACKET   reduce using rule 98 (primary -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 90


state 159

    (18) func_arg_expr -> CONSTANTS . EQUAL primary
    (97) primary -> CONSTANTS .

    EQUAL           shift and go to state 201
    COMMA           reduce using rule 97 (primary -> CONSTANTS .)
    DELIM           reduce using rule 97 (primary -> CONSTANTS .)
    newline         reduce using rule 97 (primary -> CONSTANTS .)
    KEYWORD_end     reduce using rule 97 (primary -> CONSTANTS .)
    CLOSE_PAREN     reduce using rule 97 (primary -> CONSTANTS .)
    KEYWORD_while   reduce using rule 97 (primary -> CONSTANTS .)
    KEYWORD_until   reduce using rule 97 (primary -> CONSTANTS .)
    $end            reduce using rule 97 (primary -> CONSTANTS .)
    KEYWORD_elsif   reduce using rule 97 (primary -> CONSTANTS .)
    KEYWORD_else    reduce using rule 97 (primary -> CONSTANTS .)
    CLOSE_BRACKET   reduce using rule 97 (primary -> CONSTANTS .)


state 160

    (78) expr -> MLHS EQUAL . MRHS
    (81) MRHS -> . mrhs
    (82) MRHS -> . MRHS COMMA mrhs
    (86) mrhs -> . expr1
    (87) mrhs -> . str_expr
    (88) mrhs -> . KEYWORD_gets
    (89) mrhs -> . OPEN_BRACKET func_ret_arg CLOSE_BRACKET
    (100) expr1 -> . expr3 QUESTION_MARK expr2 COLON expr2
    (101) expr1 -> . expr2
    (90) str_expr -> . str_expr PLUS STRING_CONSTANTS
    (91) str_expr -> . STRING_CONSTANTS
    (105) expr3 -> . expr3 LOGICALOR expr4
    (106) expr3 -> . expr4
    (102) expr2 -> . expr7 DOUBLEDOT expr7
    (103) expr2 -> . expr7 TRIPLEDOT expr7
    (104) expr2 -> . expr3
    (107) expr4 -> . expr4 LOGICALAND expr5
    (108) expr4 -> . expr5
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (109) expr5 -> . expr6 IFF expr6
    (110) expr5 -> . expr6 DOUBLEEQUAL expr6
    (111) expr5 -> . expr6 TRIPLEEQUAL expr6
    (112) expr5 -> . expr6 NOTEQUAL expr6
    (113) expr5 -> . expr6
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (114) expr6 -> . expr7 LESSEQUAL expr7
    (115) expr6 -> . expr7 LESS expr7
    (116) expr6 -> . expr7 GREATER expr7
    (117) expr6 -> . expr7 GREATEREQUAL expr7
    (118) expr6 -> . expr7
    (119) expr6 -> . BOOLEAN_CONSTANTS
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (157) none -> .

    KEYWORD_gets    shift and go to state 95
    OPEN_BRACKET    shift and go to state 93
    STRING_CONSTANTS shift and go to state 99
    BOOLEAN_CONSTANTS shift and go to state 12
    OPEN_PAREN      shift and go to state 5
    CONSTANTS       shift and go to state 58
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    uexpr                          shift and go to state 11
    none                           shift and go to state 56
    str_expr                       shift and go to state 91
    expr5                          shift and go to state 44
    mrhs                           shift and go to state 177
    expr2                          shift and go to state 39
    expr3                          shift and go to state 40
    MRHS                           shift and go to state 174
    expr1                          shift and go to state 94
    expr6                          shift and go to state 42
    expr7                          shift and go to state 8
    expr4                          shift and go to state 10
    expr10                         shift and go to state 14
    expr8                          shift and go to state 45
    expr9                          shift and go to state 46
    expr13                         shift and go to state 17
    array                          shift and go to state 57
    expr12                         shift and go to state 16
    expr11                         shift and go to state 15

state 161

    (31) gen_stmts -> gen_stmts terms . top_stmt
    (152) opt_terms -> terms .
    (154) terms -> terms . term
    (21) top_stmt -> . stmt
    (22) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (23) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (24) top_stmt -> . top_stmt KEYWORD_while expr3
    (25) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (26) top_stmt -> . top_stmt KEYWORD_until expr3
    (27) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (28) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (29) top_stmt -> . KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (155) term -> . DELIM
    (156) term -> . newline
    (33) stmt -> . expr
    (34) stmt -> . expr1
    (35) stmt -> . puts_stmt
    (36) stmt -> . loop_stmt
    (37) stmt -> . exit_stmt
    (38) stmt -> . func_call_stmt
    (78) expr -> . MLHS EQUAL MRHS
    (100) expr1 -> . expr3 QUESTION_MARK expr2 COLON expr2
    (101) expr1 -> . expr2
    (45) puts_stmt -> . KEYWORD_puts mrhs
    (46) puts_stmt -> . KEYWORD_puts expr
    (41) loop_stmt -> . KEYWORD_break
    (42) loop_stmt -> . KEYWORD_next
    (43) loop_stmt -> . KEYWORD_redo
    (44) exit_stmt -> . KEYWORD_exit
    (39) func_call_stmt -> . fname opt_oparen func_ret_arg opt_cparen
    (40) func_call_stmt -> . MLHS EQUAL fname opt_oparen func_ret_arg opt_cparen
    (79) MLHS -> . mlhs
    (80) MLHS -> . MLHS COMMA mlhs
    (105) expr3 -> . expr3 LOGICALOR expr4
    (106) expr3 -> . expr4
    (102) expr2 -> . expr7 DOUBLEDOT expr7
    (103) expr2 -> . expr7 TRIPLEDOT expr7
    (104) expr2 -> . expr3
    (9) fname -> . VARIABLES
    (10) fname -> . CONSTANTS
    (83) mlhs -> . VARIABLES
    (84) mlhs -> . CONSTANTS
    (85) mlhs -> . array
    (107) expr4 -> . expr4 LOGICALAND expr5
    (108) expr4 -> . expr5
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (109) expr5 -> . expr6 IFF expr6
    (110) expr5 -> . expr6 DOUBLEEQUAL expr6
    (111) expr5 -> . expr6 TRIPLEEQUAL expr6
    (112) expr5 -> . expr6 NOTEQUAL expr6
    (113) expr5 -> . expr6
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (114) expr6 -> . expr7 LESSEQUAL expr7
    (115) expr6 -> . expr7 LESS expr7
    (116) expr6 -> . expr7 GREATER expr7
    (117) expr6 -> . expr7 GREATEREQUAL expr7
    (118) expr6 -> . expr7
    (119) expr6 -> . BOOLEAN_CONSTANTS
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (157) none -> .

    KEYWORD_end     reduce using rule 152 (opt_terms -> terms .)
    KEYWORD_elsif   reduce using rule 152 (opt_terms -> terms .)
    KEYWORD_else    reduce using rule 152 (opt_terms -> terms .)
    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 37
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 52
    DELIM           shift and go to state 85
    newline         shift and go to state 84
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 47
    KEYWORD_next    shift and go to state 30
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    VARIABLES       shift and go to state 28
    CONSTANTS       shift and go to state 22
    BOOLEAN_CONSTANTS shift and go to state 12
    OPEN_PAREN      shift and go to state 5
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    mlhs                           shift and go to state 2
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    array                          shift and go to state 26
    expr2                          shift and go to state 39
    expr3                          shift and go to state 40
    expr1                          shift and go to state 41
    expr6                          shift and go to state 42
    expr7                          shift and go to state 8
    puts_stmt                      shift and go to state 19
    expr5                          shift and go to state 44
    func_call_stmt                 shift and go to state 32
    expr8                          shift and go to state 45
    expr9                          shift and go to state 46
    expr4                          shift and go to state 10
    exit_stmt                      shift and go to state 48
    MLHS                           shift and go to state 50
    none                           shift and go to state 56
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 20
    uexpr                          shift and go to state 11
    term                           shift and go to state 141
    expr                           shift and go to state 35
    fname                          shift and go to state 43
    top_stmt                       shift and go to state 202

state 162

    (25) top_stmt -> KEYWORD_begin gen_stmts opt_terms . KEYWORD_end KEYWORD_while expr3
    (28) top_stmt -> KEYWORD_begin gen_stmts opt_terms . KEYWORD_end KEYWORD_until expr3

    KEYWORD_end     shift and go to state 203


state 163

    (105) expr3 -> expr3 LOGICALOR expr4 .
    (107) expr4 -> expr4 . LOGICALAND expr5

    QUESTION_MARK   reduce using rule 105 (expr3 -> expr3 LOGICALOR expr4 .)
    LOGICALOR       reduce using rule 105 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_while   reduce using rule 105 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_until   reduce using rule 105 (expr3 -> expr3 LOGICALOR expr4 .)
    DELIM           reduce using rule 105 (expr3 -> expr3 LOGICALOR expr4 .)
    newline         reduce using rule 105 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_end     reduce using rule 105 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_then    reduce using rule 105 (expr3 -> expr3 LOGICALOR expr4 .)
    $end            reduce using rule 105 (expr3 -> expr3 LOGICALOR expr4 .)
    CLOSE_PAREN     reduce using rule 105 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_elsif   reduce using rule 105 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_else    reduce using rule 105 (expr3 -> expr3 LOGICALOR expr4 .)
    COMMA           reduce using rule 105 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_do      reduce using rule 105 (expr3 -> expr3 LOGICALOR expr4 .)
    COLON           reduce using rule 105 (expr3 -> expr3 LOGICALOR expr4 .)
    LOGICALAND      shift and go to state 68


state 164

    (100) expr1 -> expr3 QUESTION_MARK expr2 . COLON expr2

    COLON           shift and go to state 204


state 165

    (104) expr2 -> expr3 .
    (105) expr3 -> expr3 . LOGICALOR expr4

    COLON           reduce using rule 104 (expr2 -> expr3 .)
    KEYWORD_while   reduce using rule 104 (expr2 -> expr3 .)
    KEYWORD_until   reduce using rule 104 (expr2 -> expr3 .)
    DELIM           reduce using rule 104 (expr2 -> expr3 .)
    newline         reduce using rule 104 (expr2 -> expr3 .)
    $end            reduce using rule 104 (expr2 -> expr3 .)
    CLOSE_PAREN     reduce using rule 104 (expr2 -> expr3 .)
    KEYWORD_end     reduce using rule 104 (expr2 -> expr3 .)
    KEYWORD_elsif   reduce using rule 104 (expr2 -> expr3 .)
    KEYWORD_else    reduce using rule 104 (expr2 -> expr3 .)
    COMMA           reduce using rule 104 (expr2 -> expr3 .)
    LOGICALOR       shift and go to state 104


state 166

    (112) expr5 -> expr6 NOTEQUAL expr6 .

    LOGICALAND      reduce using rule 112 (expr5 -> expr6 NOTEQUAL expr6 .)
    QUESTION_MARK   reduce using rule 112 (expr5 -> expr6 NOTEQUAL expr6 .)
    LOGICALOR       reduce using rule 112 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_while   reduce using rule 112 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_until   reduce using rule 112 (expr5 -> expr6 NOTEQUAL expr6 .)
    DELIM           reduce using rule 112 (expr5 -> expr6 NOTEQUAL expr6 .)
    newline         reduce using rule 112 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_end     reduce using rule 112 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_elsif   reduce using rule 112 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_else    reduce using rule 112 (expr5 -> expr6 NOTEQUAL expr6 .)
    COLON           reduce using rule 112 (expr5 -> expr6 NOTEQUAL expr6 .)
    $end            reduce using rule 112 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_do      reduce using rule 112 (expr5 -> expr6 NOTEQUAL expr6 .)
    CLOSE_PAREN     reduce using rule 112 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_then    reduce using rule 112 (expr5 -> expr6 NOTEQUAL expr6 .)
    COMMA           reduce using rule 112 (expr5 -> expr6 NOTEQUAL expr6 .)


state 167

    (109) expr5 -> expr6 IFF expr6 .

    LOGICALAND      reduce using rule 109 (expr5 -> expr6 IFF expr6 .)
    QUESTION_MARK   reduce using rule 109 (expr5 -> expr6 IFF expr6 .)
    LOGICALOR       reduce using rule 109 (expr5 -> expr6 IFF expr6 .)
    KEYWORD_while   reduce using rule 109 (expr5 -> expr6 IFF expr6 .)
    KEYWORD_until   reduce using rule 109 (expr5 -> expr6 IFF expr6 .)
    DELIM           reduce using rule 109 (expr5 -> expr6 IFF expr6 .)
    newline         reduce using rule 109 (expr5 -> expr6 IFF expr6 .)
    KEYWORD_end     reduce using rule 109 (expr5 -> expr6 IFF expr6 .)
    KEYWORD_elsif   reduce using rule 109 (expr5 -> expr6 IFF expr6 .)
    KEYWORD_else    reduce using rule 109 (expr5 -> expr6 IFF expr6 .)
    COLON           reduce using rule 109 (expr5 -> expr6 IFF expr6 .)
    $end            reduce using rule 109 (expr5 -> expr6 IFF expr6 .)
    KEYWORD_do      reduce using rule 109 (expr5 -> expr6 IFF expr6 .)
    CLOSE_PAREN     reduce using rule 109 (expr5 -> expr6 IFF expr6 .)
    KEYWORD_then    reduce using rule 109 (expr5 -> expr6 IFF expr6 .)
    COMMA           reduce using rule 109 (expr5 -> expr6 IFF expr6 .)


state 168

    (111) expr5 -> expr6 TRIPLEEQUAL expr6 .

    LOGICALAND      reduce using rule 111 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    QUESTION_MARK   reduce using rule 111 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    LOGICALOR       reduce using rule 111 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    KEYWORD_while   reduce using rule 111 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    KEYWORD_until   reduce using rule 111 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    DELIM           reduce using rule 111 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    newline         reduce using rule 111 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    KEYWORD_end     reduce using rule 111 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    KEYWORD_elsif   reduce using rule 111 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    KEYWORD_else    reduce using rule 111 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    COLON           reduce using rule 111 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    $end            reduce using rule 111 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    KEYWORD_do      reduce using rule 111 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    CLOSE_PAREN     reduce using rule 111 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    KEYWORD_then    reduce using rule 111 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    COMMA           reduce using rule 111 (expr5 -> expr6 TRIPLEEQUAL expr6 .)


state 169

    (110) expr5 -> expr6 DOUBLEEQUAL expr6 .

    LOGICALAND      reduce using rule 110 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    QUESTION_MARK   reduce using rule 110 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    LOGICALOR       reduce using rule 110 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_while   reduce using rule 110 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_until   reduce using rule 110 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    DELIM           reduce using rule 110 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    newline         reduce using rule 110 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_end     reduce using rule 110 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_elsif   reduce using rule 110 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_else    reduce using rule 110 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    COLON           reduce using rule 110 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    $end            reduce using rule 110 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_do      reduce using rule 110 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    CLOSE_PAREN     reduce using rule 110 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_then    reduce using rule 110 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    COMMA           reduce using rule 110 (expr5 -> expr6 DOUBLEEQUAL expr6 .)


state 170

    (39) func_call_stmt -> fname opt_oparen func_ret_arg . opt_cparen
    (54) func_ret_arg -> func_ret_arg . COMMA func_arg_expr
    (55) func_ret_arg -> func_ret_arg . COMMA primary
    (71) opt_cparen -> . CLOSE_PAREN
    (72) opt_cparen -> . none
    (157) none -> .

    COMMA           shift and go to state 199
    CLOSE_PAREN     shift and go to state 207
    KEYWORD_while   reduce using rule 157 (none -> .)
    KEYWORD_until   reduce using rule 157 (none -> .)
    DELIM           reduce using rule 157 (none -> .)
    newline         reduce using rule 157 (none -> .)
    $end            reduce using rule 157 (none -> .)
    KEYWORD_end     reduce using rule 157 (none -> .)
    KEYWORD_elsif   reduce using rule 157 (none -> .)
    KEYWORD_else    reduce using rule 157 (none -> .)

    none                           shift and go to state 205
    opt_cparen                     shift and go to state 206

state 171

    (123) expr8 -> expr8 BITAND expr9 .
    (125) expr9 -> expr9 . SHIFTL expr10
    (126) expr9 -> expr9 . SHIFTR expr10

    BITAND          reduce using rule 123 (expr8 -> expr8 BITAND expr9 .)
    LESSEQUAL       reduce using rule 123 (expr8 -> expr8 BITAND expr9 .)
    LESS            reduce using rule 123 (expr8 -> expr8 BITAND expr9 .)
    GREATER         reduce using rule 123 (expr8 -> expr8 BITAND expr9 .)
    GREATEREQUAL    reduce using rule 123 (expr8 -> expr8 BITAND expr9 .)
    BITXOR          reduce using rule 123 (expr8 -> expr8 BITAND expr9 .)
    PIPE            reduce using rule 123 (expr8 -> expr8 BITAND expr9 .)
    IFF             reduce using rule 123 (expr8 -> expr8 BITAND expr9 .)
    DOUBLEEQUAL     reduce using rule 123 (expr8 -> expr8 BITAND expr9 .)
    TRIPLEEQUAL     reduce using rule 123 (expr8 -> expr8 BITAND expr9 .)
    NOTEQUAL        reduce using rule 123 (expr8 -> expr8 BITAND expr9 .)
    LOGICALAND      reduce using rule 123 (expr8 -> expr8 BITAND expr9 .)
    LOGICALOR       reduce using rule 123 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_do      reduce using rule 123 (expr8 -> expr8 BITAND expr9 .)
    newline         reduce using rule 123 (expr8 -> expr8 BITAND expr9 .)
    DOUBLEDOT       reduce using rule 123 (expr8 -> expr8 BITAND expr9 .)
    TRIPLEDOT       reduce using rule 123 (expr8 -> expr8 BITAND expr9 .)
    QUESTION_MARK   reduce using rule 123 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_while   reduce using rule 123 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_until   reduce using rule 123 (expr8 -> expr8 BITAND expr9 .)
    DELIM           reduce using rule 123 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_end     reduce using rule 123 (expr8 -> expr8 BITAND expr9 .)
    $end            reduce using rule 123 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_elsif   reduce using rule 123 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_else    reduce using rule 123 (expr8 -> expr8 BITAND expr9 .)
    CLOSE_PAREN     reduce using rule 123 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_then    reduce using rule 123 (expr8 -> expr8 BITAND expr9 .)
    COLON           reduce using rule 123 (expr8 -> expr8 BITAND expr9 .)
    COMMA           reduce using rule 123 (expr8 -> expr8 BITAND expr9 .)
    CLOSE_BRACKET   reduce using rule 123 (expr8 -> expr8 BITAND expr9 .)
    SHIFTL          shift and go to state 115
    SHIFTR          shift and go to state 114


state 172

    (126) expr9 -> expr9 SHIFTR expr10 .
    (128) expr10 -> expr10 . PLUS expr11
    (129) expr10 -> expr10 . MINUS expr11

    SHIFTL          reduce using rule 126 (expr9 -> expr9 SHIFTR expr10 .)
    SHIFTR          reduce using rule 126 (expr9 -> expr9 SHIFTR expr10 .)
    BITAND          reduce using rule 126 (expr9 -> expr9 SHIFTR expr10 .)
    LESSEQUAL       reduce using rule 126 (expr9 -> expr9 SHIFTR expr10 .)
    LESS            reduce using rule 126 (expr9 -> expr9 SHIFTR expr10 .)
    GREATER         reduce using rule 126 (expr9 -> expr9 SHIFTR expr10 .)
    GREATEREQUAL    reduce using rule 126 (expr9 -> expr9 SHIFTR expr10 .)
    BITXOR          reduce using rule 126 (expr9 -> expr9 SHIFTR expr10 .)
    PIPE            reduce using rule 126 (expr9 -> expr9 SHIFTR expr10 .)
    IFF             reduce using rule 126 (expr9 -> expr9 SHIFTR expr10 .)
    DOUBLEEQUAL     reduce using rule 126 (expr9 -> expr9 SHIFTR expr10 .)
    TRIPLEEQUAL     reduce using rule 126 (expr9 -> expr9 SHIFTR expr10 .)
    NOTEQUAL        reduce using rule 126 (expr9 -> expr9 SHIFTR expr10 .)
    LOGICALAND      reduce using rule 126 (expr9 -> expr9 SHIFTR expr10 .)
    QUESTION_MARK   reduce using rule 126 (expr9 -> expr9 SHIFTR expr10 .)
    LOGICALOR       reduce using rule 126 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_while   reduce using rule 126 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_until   reduce using rule 126 (expr9 -> expr9 SHIFTR expr10 .)
    DELIM           reduce using rule 126 (expr9 -> expr9 SHIFTR expr10 .)
    newline         reduce using rule 126 (expr9 -> expr9 SHIFTR expr10 .)
    $end            reduce using rule 126 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_do      reduce using rule 126 (expr9 -> expr9 SHIFTR expr10 .)
    CLOSE_PAREN     reduce using rule 126 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_then    reduce using rule 126 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_end     reduce using rule 126 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_elsif   reduce using rule 126 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_else    reduce using rule 126 (expr9 -> expr9 SHIFTR expr10 .)
    COLON           reduce using rule 126 (expr9 -> expr9 SHIFTR expr10 .)
    COMMA           reduce using rule 126 (expr9 -> expr9 SHIFTR expr10 .)
    DOUBLEDOT       reduce using rule 126 (expr9 -> expr9 SHIFTR expr10 .)
    TRIPLEDOT       reduce using rule 126 (expr9 -> expr9 SHIFTR expr10 .)
    CLOSE_BRACKET   reduce using rule 126 (expr9 -> expr9 SHIFTR expr10 .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74


state 173

    (125) expr9 -> expr9 SHIFTL expr10 .
    (128) expr10 -> expr10 . PLUS expr11
    (129) expr10 -> expr10 . MINUS expr11

    SHIFTL          reduce using rule 125 (expr9 -> expr9 SHIFTL expr10 .)
    SHIFTR          reduce using rule 125 (expr9 -> expr9 SHIFTL expr10 .)
    BITAND          reduce using rule 125 (expr9 -> expr9 SHIFTL expr10 .)
    LESSEQUAL       reduce using rule 125 (expr9 -> expr9 SHIFTL expr10 .)
    LESS            reduce using rule 125 (expr9 -> expr9 SHIFTL expr10 .)
    GREATER         reduce using rule 125 (expr9 -> expr9 SHIFTL expr10 .)
    GREATEREQUAL    reduce using rule 125 (expr9 -> expr9 SHIFTL expr10 .)
    BITXOR          reduce using rule 125 (expr9 -> expr9 SHIFTL expr10 .)
    PIPE            reduce using rule 125 (expr9 -> expr9 SHIFTL expr10 .)
    IFF             reduce using rule 125 (expr9 -> expr9 SHIFTL expr10 .)
    DOUBLEEQUAL     reduce using rule 125 (expr9 -> expr9 SHIFTL expr10 .)
    TRIPLEEQUAL     reduce using rule 125 (expr9 -> expr9 SHIFTL expr10 .)
    NOTEQUAL        reduce using rule 125 (expr9 -> expr9 SHIFTL expr10 .)
    LOGICALAND      reduce using rule 125 (expr9 -> expr9 SHIFTL expr10 .)
    QUESTION_MARK   reduce using rule 125 (expr9 -> expr9 SHIFTL expr10 .)
    LOGICALOR       reduce using rule 125 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_while   reduce using rule 125 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_until   reduce using rule 125 (expr9 -> expr9 SHIFTL expr10 .)
    DELIM           reduce using rule 125 (expr9 -> expr9 SHIFTL expr10 .)
    newline         reduce using rule 125 (expr9 -> expr9 SHIFTL expr10 .)
    $end            reduce using rule 125 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_do      reduce using rule 125 (expr9 -> expr9 SHIFTL expr10 .)
    CLOSE_PAREN     reduce using rule 125 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_then    reduce using rule 125 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_end     reduce using rule 125 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_elsif   reduce using rule 125 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_else    reduce using rule 125 (expr9 -> expr9 SHIFTL expr10 .)
    COLON           reduce using rule 125 (expr9 -> expr9 SHIFTL expr10 .)
    COMMA           reduce using rule 125 (expr9 -> expr9 SHIFTL expr10 .)
    DOUBLEDOT       reduce using rule 125 (expr9 -> expr9 SHIFTL expr10 .)
    TRIPLEDOT       reduce using rule 125 (expr9 -> expr9 SHIFTL expr10 .)
    CLOSE_BRACKET   reduce using rule 125 (expr9 -> expr9 SHIFTL expr10 .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74


state 174

    (78) expr -> MLHS EQUAL MRHS .
    (82) MRHS -> MRHS . COMMA mrhs

    KEYWORD_while   reduce using rule 78 (expr -> MLHS EQUAL MRHS .)
    KEYWORD_until   reduce using rule 78 (expr -> MLHS EQUAL MRHS .)
    DELIM           reduce using rule 78 (expr -> MLHS EQUAL MRHS .)
    newline         reduce using rule 78 (expr -> MLHS EQUAL MRHS .)
    KEYWORD_end     reduce using rule 78 (expr -> MLHS EQUAL MRHS .)
    KEYWORD_elsif   reduce using rule 78 (expr -> MLHS EQUAL MRHS .)
    KEYWORD_else    reduce using rule 78 (expr -> MLHS EQUAL MRHS .)
    $end            reduce using rule 78 (expr -> MLHS EQUAL MRHS .)
    COMMA           shift and go to state 208


state 175

    (9) fname -> VARIABLES .
    (141) expr13 -> VARIABLES .
    (143) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> VARIABLES . OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> VARIABLES . OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET

    OPEN_PAREN      reduce using rule 9 (fname -> VARIABLES .)
    VARIABLES       reduce using rule 9 (fname -> VARIABLES .)
    CONSTANTS       reduce using rule 9 (fname -> VARIABLES .)
    INT_CONSTANTS   reduce using rule 9 (fname -> VARIABLES .)
    FLOAT_CONSTANTS reduce using rule 9 (fname -> VARIABLES .)
    STRING_CONSTANTS reduce using rule 9 (fname -> VARIABLES .)
    CHAR_CONSTANTS  reduce using rule 9 (fname -> VARIABLES .)
    BOOLEAN_CONSTANTS reduce using rule 9 (fname -> VARIABLES .)
    DOUBLESTAR      reduce using rule 141 (expr13 -> VARIABLES .)
    MULTIPLY        reduce using rule 141 (expr13 -> VARIABLES .)
    DIV             reduce using rule 141 (expr13 -> VARIABLES .)
    MOD             reduce using rule 141 (expr13 -> VARIABLES .)
    PLUS            reduce using rule 141 (expr13 -> VARIABLES .)
    MINUS           reduce using rule 141 (expr13 -> VARIABLES .)
    SHIFTL          reduce using rule 141 (expr13 -> VARIABLES .)
    SHIFTR          reduce using rule 141 (expr13 -> VARIABLES .)
    BITAND          reduce using rule 141 (expr13 -> VARIABLES .)
    DOUBLEDOT       reduce using rule 141 (expr13 -> VARIABLES .)
    TRIPLEDOT       reduce using rule 141 (expr13 -> VARIABLES .)
    BITXOR          reduce using rule 141 (expr13 -> VARIABLES .)
    PIPE            reduce using rule 141 (expr13 -> VARIABLES .)
    LESSEQUAL       reduce using rule 141 (expr13 -> VARIABLES .)
    LESS            reduce using rule 141 (expr13 -> VARIABLES .)
    GREATER         reduce using rule 141 (expr13 -> VARIABLES .)
    GREATEREQUAL    reduce using rule 141 (expr13 -> VARIABLES .)
    IFF             reduce using rule 141 (expr13 -> VARIABLES .)
    DOUBLEEQUAL     reduce using rule 141 (expr13 -> VARIABLES .)
    TRIPLEEQUAL     reduce using rule 141 (expr13 -> VARIABLES .)
    NOTEQUAL        reduce using rule 141 (expr13 -> VARIABLES .)
    LOGICALAND      reduce using rule 141 (expr13 -> VARIABLES .)
    QUESTION_MARK   reduce using rule 141 (expr13 -> VARIABLES .)
    LOGICALOR       reduce using rule 141 (expr13 -> VARIABLES .)
    COMMA           reduce using rule 141 (expr13 -> VARIABLES .)
    KEYWORD_while   reduce using rule 141 (expr13 -> VARIABLES .)
    KEYWORD_until   reduce using rule 141 (expr13 -> VARIABLES .)
    DELIM           reduce using rule 141 (expr13 -> VARIABLES .)
    newline         reduce using rule 141 (expr13 -> VARIABLES .)
    $end            reduce using rule 141 (expr13 -> VARIABLES .)
    KEYWORD_end     reduce using rule 141 (expr13 -> VARIABLES .)
    KEYWORD_elsif   reduce using rule 141 (expr13 -> VARIABLES .)
    KEYWORD_else    reduce using rule 141 (expr13 -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 90


state 176

    (40) func_call_stmt -> MLHS EQUAL fname . opt_oparen func_ret_arg opt_cparen
    (69) opt_oparen -> . OPEN_PAREN
    (70) opt_oparen -> . none
    (157) none -> .

    OPEN_PAREN      shift and go to state 111
    VARIABLES       reduce using rule 157 (none -> .)
    CONSTANTS       reduce using rule 157 (none -> .)
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)
    STRING_CONSTANTS reduce using rule 157 (none -> .)
    CHAR_CONSTANTS  reduce using rule 157 (none -> .)
    BOOLEAN_CONSTANTS reduce using rule 157 (none -> .)

    none                           shift and go to state 110
    opt_oparen                     shift and go to state 209

state 177

    (81) MRHS -> mrhs .

    COMMA           reduce using rule 81 (MRHS -> mrhs .)
    KEYWORD_while   reduce using rule 81 (MRHS -> mrhs .)
    KEYWORD_until   reduce using rule 81 (MRHS -> mrhs .)
    DELIM           reduce using rule 81 (MRHS -> mrhs .)
    newline         reduce using rule 81 (MRHS -> mrhs .)
    $end            reduce using rule 81 (MRHS -> mrhs .)
    KEYWORD_end     reduce using rule 81 (MRHS -> mrhs .)
    KEYWORD_elsif   reduce using rule 81 (MRHS -> mrhs .)
    KEYWORD_else    reduce using rule 81 (MRHS -> mrhs .)


state 178

    (10) fname -> CONSTANTS .
    (140) expr13 -> CONSTANTS .

    OPEN_PAREN      reduce using rule 10 (fname -> CONSTANTS .)
    VARIABLES       reduce using rule 10 (fname -> CONSTANTS .)
    CONSTANTS       reduce using rule 10 (fname -> CONSTANTS .)
    INT_CONSTANTS   reduce using rule 10 (fname -> CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 10 (fname -> CONSTANTS .)
    STRING_CONSTANTS reduce using rule 10 (fname -> CONSTANTS .)
    CHAR_CONSTANTS  reduce using rule 10 (fname -> CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 10 (fname -> CONSTANTS .)
    DOUBLESTAR      reduce using rule 140 (expr13 -> CONSTANTS .)
    MULTIPLY        reduce using rule 140 (expr13 -> CONSTANTS .)
    DIV             reduce using rule 140 (expr13 -> CONSTANTS .)
    MOD             reduce using rule 140 (expr13 -> CONSTANTS .)
    PLUS            reduce using rule 140 (expr13 -> CONSTANTS .)
    MINUS           reduce using rule 140 (expr13 -> CONSTANTS .)
    SHIFTL          reduce using rule 140 (expr13 -> CONSTANTS .)
    SHIFTR          reduce using rule 140 (expr13 -> CONSTANTS .)
    BITAND          reduce using rule 140 (expr13 -> CONSTANTS .)
    DOUBLEDOT       reduce using rule 140 (expr13 -> CONSTANTS .)
    TRIPLEDOT       reduce using rule 140 (expr13 -> CONSTANTS .)
    BITXOR          reduce using rule 140 (expr13 -> CONSTANTS .)
    PIPE            reduce using rule 140 (expr13 -> CONSTANTS .)
    LESSEQUAL       reduce using rule 140 (expr13 -> CONSTANTS .)
    LESS            reduce using rule 140 (expr13 -> CONSTANTS .)
    GREATER         reduce using rule 140 (expr13 -> CONSTANTS .)
    GREATEREQUAL    reduce using rule 140 (expr13 -> CONSTANTS .)
    IFF             reduce using rule 140 (expr13 -> CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 140 (expr13 -> CONSTANTS .)
    TRIPLEEQUAL     reduce using rule 140 (expr13 -> CONSTANTS .)
    NOTEQUAL        reduce using rule 140 (expr13 -> CONSTANTS .)
    LOGICALAND      reduce using rule 140 (expr13 -> CONSTANTS .)
    QUESTION_MARK   reduce using rule 140 (expr13 -> CONSTANTS .)
    LOGICALOR       reduce using rule 140 (expr13 -> CONSTANTS .)
    COMMA           reduce using rule 140 (expr13 -> CONSTANTS .)
    KEYWORD_while   reduce using rule 140 (expr13 -> CONSTANTS .)
    KEYWORD_until   reduce using rule 140 (expr13 -> CONSTANTS .)
    DELIM           reduce using rule 140 (expr13 -> CONSTANTS .)
    newline         reduce using rule 140 (expr13 -> CONSTANTS .)
    $end            reduce using rule 140 (expr13 -> CONSTANTS .)
    KEYWORD_end     reduce using rule 140 (expr13 -> CONSTANTS .)
    KEYWORD_elsif   reduce using rule 140 (expr13 -> CONSTANTS .)
    KEYWORD_else    reduce using rule 140 (expr13 -> CONSTANTS .)


state 179

    (80) MLHS -> MLHS COMMA mlhs .

    EQUAL           reduce using rule 80 (MLHS -> MLHS COMMA mlhs .)
    COMMA           reduce using rule 80 (MLHS -> MLHS COMMA mlhs .)


state 180

    (83) mlhs -> VARIABLES .
    (143) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> VARIABLES . OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> VARIABLES . OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET

    EQUAL           reduce using rule 83 (mlhs -> VARIABLES .)
    COMMA           reduce using rule 83 (mlhs -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 90


state 181

    (85) mlhs -> array .

    EQUAL           reduce using rule 85 (mlhs -> array .)
    COMMA           reduce using rule 85 (mlhs -> array .)


state 182

    (84) mlhs -> CONSTANTS .

    EQUAL           reduce using rule 84 (mlhs -> CONSTANTS .)
    COMMA           reduce using rule 84 (mlhs -> CONSTANTS .)


state 183

    (64) multi_var -> VARIABLES .
    (143) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> VARIABLES . OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> VARIABLES . OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET

    COMMA           reduce using rule 64 (multi_var -> VARIABLES .)
    CLOSE_PAREN     reduce using rule 64 (multi_var -> VARIABLES .)
    KEYWORD_in      reduce using rule 64 (multi_var -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 90


state 184

    (29) top_stmt -> KEYWORD_for opt_oparen multi_var . opt_cparen KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (67) multi_var -> multi_var . COMMA VARIABLES
    (68) multi_var -> multi_var . COMMA CONSTANTS
    (71) opt_cparen -> . CLOSE_PAREN
    (72) opt_cparen -> . none
    (157) none -> .

    COMMA           shift and go to state 211
    CLOSE_PAREN     shift and go to state 207
    KEYWORD_in      reduce using rule 157 (none -> .)

    none                           shift and go to state 205
    opt_cparen                     shift and go to state 210

state 185

    (66) multi_var -> array .

    COMMA           reduce using rule 66 (multi_var -> array .)
    CLOSE_PAREN     reduce using rule 66 (multi_var -> array .)
    KEYWORD_in      reduce using rule 66 (multi_var -> array .)


state 186

    (65) multi_var -> CONSTANTS .

    COMMA           reduce using rule 65 (multi_var -> CONSTANTS .)
    CLOSE_PAREN     reduce using rule 65 (multi_var -> CONSTANTS .)
    KEYWORD_in      reduce using rule 65 (multi_var -> CONSTANTS .)


state 187

    (23) top_stmt -> KEYWORD_while expr3 opt_do gen_stmts . opt_terms KEYWORD_end
    (31) gen_stmts -> gen_stmts . terms top_stmt
    (151) opt_terms -> . none
    (152) opt_terms -> . terms
    (153) terms -> . term
    (154) terms -> . terms term
    (157) none -> .
    (155) term -> . DELIM
    (156) term -> . newline

    KEYWORD_end     reduce using rule 157 (none -> .)
    DELIM           shift and go to state 85
    newline         shift and go to state 84

    none                           shift and go to state 86
    terms                          shift and go to state 161
    term                           shift and go to state 82
    opt_terms                      shift and go to state 212

state 188

    (14) arguments -> VARIABLES .
    (17) func_arg_expr -> VARIABLES . EQUAL primary

    COMMA           reduce using rule 14 (arguments -> VARIABLES .)
    CLOSE_PAREN     reduce using rule 14 (arguments -> VARIABLES .)
    KEYWORD_return  reduce using rule 14 (arguments -> VARIABLES .)
    KEYWORD_if      reduce using rule 14 (arguments -> VARIABLES .)
    KEYWORD_while   reduce using rule 14 (arguments -> VARIABLES .)
    KEYWORD_begin   reduce using rule 14 (arguments -> VARIABLES .)
    KEYWORD_until   reduce using rule 14 (arguments -> VARIABLES .)
    KEYWORD_for     reduce using rule 14 (arguments -> VARIABLES .)
    KEYWORD_puts    reduce using rule 14 (arguments -> VARIABLES .)
    KEYWORD_break   reduce using rule 14 (arguments -> VARIABLES .)
    KEYWORD_next    reduce using rule 14 (arguments -> VARIABLES .)
    KEYWORD_redo    reduce using rule 14 (arguments -> VARIABLES .)
    KEYWORD_exit    reduce using rule 14 (arguments -> VARIABLES .)
    VARIABLES       reduce using rule 14 (arguments -> VARIABLES .)
    CONSTANTS       reduce using rule 14 (arguments -> VARIABLES .)
    BOOLEAN_CONSTANTS reduce using rule 14 (arguments -> VARIABLES .)
    OPEN_PAREN      reduce using rule 14 (arguments -> VARIABLES .)
    PLUS            reduce using rule 14 (arguments -> VARIABLES .)
    MINUS           reduce using rule 14 (arguments -> VARIABLES .)
    BITNOT          reduce using rule 14 (arguments -> VARIABLES .)
    BITCOMP         reduce using rule 14 (arguments -> VARIABLES .)
    DELIM           reduce using rule 14 (arguments -> VARIABLES .)
    newline         reduce using rule 14 (arguments -> VARIABLES .)
    KEYWORD_end     reduce using rule 14 (arguments -> VARIABLES .)
    INT_CONSTANTS   reduce using rule 14 (arguments -> VARIABLES .)
    FLOAT_CONSTANTS reduce using rule 14 (arguments -> VARIABLES .)
    EQUAL           shift and go to state 200


state 189

    (8) func_defn -> KEYWORD_def fname opt_oparen arguments . opt_cparen func_stmts opt_terms KEYWORD_end
    (11) arguments -> arguments . COMMA VARIABLES
    (12) arguments -> arguments . COMMA CONSTANTS
    (13) arguments -> arguments . COMMA func_arg_expr
    (71) opt_cparen -> . CLOSE_PAREN
    (72) opt_cparen -> . none
    (157) none -> .

    COMMA           shift and go to state 214
    CLOSE_PAREN     shift and go to state 207
    KEYWORD_return  reduce using rule 157 (none -> .)
    KEYWORD_if      reduce using rule 157 (none -> .)
    KEYWORD_while   reduce using rule 157 (none -> .)
    KEYWORD_begin   reduce using rule 157 (none -> .)
    KEYWORD_until   reduce using rule 157 (none -> .)
    KEYWORD_for     reduce using rule 157 (none -> .)
    KEYWORD_puts    reduce using rule 157 (none -> .)
    KEYWORD_break   reduce using rule 157 (none -> .)
    KEYWORD_next    reduce using rule 157 (none -> .)
    KEYWORD_redo    reduce using rule 157 (none -> .)
    KEYWORD_exit    reduce using rule 157 (none -> .)
    VARIABLES       reduce using rule 157 (none -> .)
    CONSTANTS       reduce using rule 157 (none -> .)
    BOOLEAN_CONSTANTS reduce using rule 157 (none -> .)
    OPEN_PAREN      reduce using rule 157 (none -> .)
    PLUS            reduce using rule 157 (none -> .)
    MINUS           reduce using rule 157 (none -> .)
    BITNOT          reduce using rule 157 (none -> .)
    BITCOMP         reduce using rule 157 (none -> .)
    DELIM           reduce using rule 157 (none -> .)
    newline         reduce using rule 157 (none -> .)
    KEYWORD_end     reduce using rule 157 (none -> .)
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    none                           shift and go to state 205
    opt_cparen                     shift and go to state 213

state 190

    (16) arguments -> func_arg_expr .

    COMMA           reduce using rule 16 (arguments -> func_arg_expr .)
    CLOSE_PAREN     reduce using rule 16 (arguments -> func_arg_expr .)
    KEYWORD_return  reduce using rule 16 (arguments -> func_arg_expr .)
    KEYWORD_if      reduce using rule 16 (arguments -> func_arg_expr .)
    KEYWORD_while   reduce using rule 16 (arguments -> func_arg_expr .)
    KEYWORD_begin   reduce using rule 16 (arguments -> func_arg_expr .)
    KEYWORD_until   reduce using rule 16 (arguments -> func_arg_expr .)
    KEYWORD_for     reduce using rule 16 (arguments -> func_arg_expr .)
    KEYWORD_puts    reduce using rule 16 (arguments -> func_arg_expr .)
    KEYWORD_break   reduce using rule 16 (arguments -> func_arg_expr .)
    KEYWORD_next    reduce using rule 16 (arguments -> func_arg_expr .)
    KEYWORD_redo    reduce using rule 16 (arguments -> func_arg_expr .)
    KEYWORD_exit    reduce using rule 16 (arguments -> func_arg_expr .)
    VARIABLES       reduce using rule 16 (arguments -> func_arg_expr .)
    CONSTANTS       reduce using rule 16 (arguments -> func_arg_expr .)
    BOOLEAN_CONSTANTS reduce using rule 16 (arguments -> func_arg_expr .)
    OPEN_PAREN      reduce using rule 16 (arguments -> func_arg_expr .)
    PLUS            reduce using rule 16 (arguments -> func_arg_expr .)
    MINUS           reduce using rule 16 (arguments -> func_arg_expr .)
    BITNOT          reduce using rule 16 (arguments -> func_arg_expr .)
    BITCOMP         reduce using rule 16 (arguments -> func_arg_expr .)
    DELIM           reduce using rule 16 (arguments -> func_arg_expr .)
    newline         reduce using rule 16 (arguments -> func_arg_expr .)
    KEYWORD_end     reduce using rule 16 (arguments -> func_arg_expr .)
    INT_CONSTANTS   reduce using rule 16 (arguments -> func_arg_expr .)
    FLOAT_CONSTANTS reduce using rule 16 (arguments -> func_arg_expr .)


state 191

    (15) arguments -> CONSTANTS .
    (18) func_arg_expr -> CONSTANTS . EQUAL primary

    COMMA           reduce using rule 15 (arguments -> CONSTANTS .)
    CLOSE_PAREN     reduce using rule 15 (arguments -> CONSTANTS .)
    KEYWORD_return  reduce using rule 15 (arguments -> CONSTANTS .)
    KEYWORD_if      reduce using rule 15 (arguments -> CONSTANTS .)
    KEYWORD_while   reduce using rule 15 (arguments -> CONSTANTS .)
    KEYWORD_begin   reduce using rule 15 (arguments -> CONSTANTS .)
    KEYWORD_until   reduce using rule 15 (arguments -> CONSTANTS .)
    KEYWORD_for     reduce using rule 15 (arguments -> CONSTANTS .)
    KEYWORD_puts    reduce using rule 15 (arguments -> CONSTANTS .)
    KEYWORD_break   reduce using rule 15 (arguments -> CONSTANTS .)
    KEYWORD_next    reduce using rule 15 (arguments -> CONSTANTS .)
    KEYWORD_redo    reduce using rule 15 (arguments -> CONSTANTS .)
    KEYWORD_exit    reduce using rule 15 (arguments -> CONSTANTS .)
    VARIABLES       reduce using rule 15 (arguments -> CONSTANTS .)
    CONSTANTS       reduce using rule 15 (arguments -> CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 15 (arguments -> CONSTANTS .)
    OPEN_PAREN      reduce using rule 15 (arguments -> CONSTANTS .)
    PLUS            reduce using rule 15 (arguments -> CONSTANTS .)
    MINUS           reduce using rule 15 (arguments -> CONSTANTS .)
    BITNOT          reduce using rule 15 (arguments -> CONSTANTS .)
    BITCOMP         reduce using rule 15 (arguments -> CONSTANTS .)
    DELIM           reduce using rule 15 (arguments -> CONSTANTS .)
    newline         reduce using rule 15 (arguments -> CONSTANTS .)
    KEYWORD_end     reduce using rule 15 (arguments -> CONSTANTS .)
    INT_CONSTANTS   reduce using rule 15 (arguments -> CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 15 (arguments -> CONSTANTS .)
    EQUAL           shift and go to state 201


state 192

    (27) top_stmt -> KEYWORD_until expr3 opt_do gen_stmts . opt_terms KEYWORD_end
    (31) gen_stmts -> gen_stmts . terms top_stmt
    (151) opt_terms -> . none
    (152) opt_terms -> . terms
    (153) terms -> . term
    (154) terms -> . terms term
    (157) none -> .
    (155) term -> . DELIM
    (156) term -> . newline

    KEYWORD_end     reduce using rule 157 (none -> .)
    DELIM           shift and go to state 85
    newline         shift and go to state 84

    none                           shift and go to state 86
    terms                          shift and go to state 161
    term                           shift and go to state 82
    opt_terms                      shift and go to state 215

state 193

    (22) top_stmt -> KEYWORD_if expr3 opt_then gen_stmts . opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (31) gen_stmts -> gen_stmts . terms top_stmt
    (151) opt_terms -> . none
    (152) opt_terms -> . terms
    (153) terms -> . term
    (154) terms -> . terms term
    (157) none -> .
    (155) term -> . DELIM
    (156) term -> . newline

    KEYWORD_elsif   reduce using rule 157 (none -> .)
    KEYWORD_else    reduce using rule 157 (none -> .)
    KEYWORD_end     reduce using rule 157 (none -> .)
    DELIM           shift and go to state 85
    newline         shift and go to state 84

    none                           shift and go to state 86
    terms                          shift and go to state 161
    term                           shift and go to state 82
    opt_terms                      shift and go to state 216

state 194

    (143) array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .

    EQUAL           reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    COMMA           reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    DOUBLESTAR      reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    MULTIPLY        reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    DIV             reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    MOD             reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    PLUS            reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    MINUS           reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    SHIFTL          reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    SHIFTR          reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    BITAND          reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    DOUBLEDOT       reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    TRIPLEDOT       reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    BITXOR          reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    PIPE            reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    LESSEQUAL       reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    LESS            reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    GREATER         reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    GREATEREQUAL    reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    IFF             reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    DOUBLEEQUAL     reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    TRIPLEEQUAL     reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    NOTEQUAL        reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    LOGICALAND      reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    QUESTION_MARK   reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    LOGICALOR       reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_while   reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_until   reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    DELIM           reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    newline         reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_end     reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_then    reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    $end            reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_do      reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    CLOSE_PAREN     reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_elsif   reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_else    reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    COLON           reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_return  reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_if      reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_begin   reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_for     reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_puts    reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_break   reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_next    reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_redo    reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_exit    reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    VARIABLES       reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    CONSTANTS       reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    BOOLEAN_CONSTANTS reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    OPEN_PAREN      reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    BITNOT          reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    BITCOMP         reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    INT_CONSTANTS   reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    FLOAT_CONSTANTS reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_in      reduce using rule 143 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)


state 195

    (144) array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT . expr7 CLOSE_BRACKET
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (157) none -> .

    OPEN_PAREN      shift and go to state 5
    CONSTANTS       shift and go to state 58
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    uexpr                          shift and go to state 11
    none                           shift and go to state 56
    expr10                         shift and go to state 14
    expr7                          shift and go to state 217
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr8                          shift and go to state 45
    expr9                          shift and go to state 46
    array                          shift and go to state 57
    expr11                         shift and go to state 15

state 196

    (145) array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT . expr7 CLOSE_BRACKET
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (157) none -> .

    OPEN_PAREN      shift and go to state 5
    CONSTANTS       shift and go to state 58
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    uexpr                          shift and go to state 11
    none                           shift and go to state 56
    expr10                         shift and go to state 14
    expr7                          shift and go to state 218
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr8                          shift and go to state 45
    expr9                          shift and go to state 46
    array                          shift and go to state 57
    expr11                         shift and go to state 15

state 197

    (90) str_expr -> str_expr PLUS STRING_CONSTANTS .

    PLUS            reduce using rule 90 (str_expr -> str_expr PLUS STRING_CONSTANTS .)
    COMMA           reduce using rule 90 (str_expr -> str_expr PLUS STRING_CONSTANTS .)
    KEYWORD_while   reduce using rule 90 (str_expr -> str_expr PLUS STRING_CONSTANTS .)
    KEYWORD_until   reduce using rule 90 (str_expr -> str_expr PLUS STRING_CONSTANTS .)
    DELIM           reduce using rule 90 (str_expr -> str_expr PLUS STRING_CONSTANTS .)
    newline         reduce using rule 90 (str_expr -> str_expr PLUS STRING_CONSTANTS .)
    $end            reduce using rule 90 (str_expr -> str_expr PLUS STRING_CONSTANTS .)
    KEYWORD_end     reduce using rule 90 (str_expr -> str_expr PLUS STRING_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 90 (str_expr -> str_expr PLUS STRING_CONSTANTS .)
    KEYWORD_else    reduce using rule 90 (str_expr -> str_expr PLUS STRING_CONSTANTS .)


state 198

    (89) mrhs -> OPEN_BRACKET func_ret_arg CLOSE_BRACKET .

    COMMA           reduce using rule 89 (mrhs -> OPEN_BRACKET func_ret_arg CLOSE_BRACKET .)
    KEYWORD_while   reduce using rule 89 (mrhs -> OPEN_BRACKET func_ret_arg CLOSE_BRACKET .)
    KEYWORD_until   reduce using rule 89 (mrhs -> OPEN_BRACKET func_ret_arg CLOSE_BRACKET .)
    DELIM           reduce using rule 89 (mrhs -> OPEN_BRACKET func_ret_arg CLOSE_BRACKET .)
    newline         reduce using rule 89 (mrhs -> OPEN_BRACKET func_ret_arg CLOSE_BRACKET .)
    $end            reduce using rule 89 (mrhs -> OPEN_BRACKET func_ret_arg CLOSE_BRACKET .)
    KEYWORD_end     reduce using rule 89 (mrhs -> OPEN_BRACKET func_ret_arg CLOSE_BRACKET .)
    KEYWORD_elsif   reduce using rule 89 (mrhs -> OPEN_BRACKET func_ret_arg CLOSE_BRACKET .)
    KEYWORD_else    reduce using rule 89 (mrhs -> OPEN_BRACKET func_ret_arg CLOSE_BRACKET .)


state 199

    (54) func_ret_arg -> func_ret_arg COMMA . func_arg_expr
    (55) func_ret_arg -> func_ret_arg COMMA . primary
    (17) func_arg_expr -> . VARIABLES EQUAL primary
    (18) func_arg_expr -> . CONSTANTS EQUAL primary
    (92) primary -> . INT_CONSTANTS
    (93) primary -> . FLOAT_CONSTANTS
    (94) primary -> . STRING_CONSTANTS
    (95) primary -> . CHAR_CONSTANTS
    (96) primary -> . BOOLEAN_CONSTANTS
    (97) primary -> . CONSTANTS
    (98) primary -> . VARIABLES
    (99) primary -> . array
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET

    VARIABLES       shift and go to state 158
    CONSTANTS       shift and go to state 159
    INT_CONSTANTS   shift and go to state 150
    FLOAT_CONSTANTS shift and go to state 151
    STRING_CONSTANTS shift and go to state 154
    CHAR_CONSTANTS  shift and go to state 157
    BOOLEAN_CONSTANTS shift and go to state 149

    func_arg_expr                  shift and go to state 219
    array                          shift and go to state 156
    primary                        shift and go to state 220

state 200

    (17) func_arg_expr -> VARIABLES EQUAL . primary
    (92) primary -> . INT_CONSTANTS
    (93) primary -> . FLOAT_CONSTANTS
    (94) primary -> . STRING_CONSTANTS
    (95) primary -> . CHAR_CONSTANTS
    (96) primary -> . BOOLEAN_CONSTANTS
    (97) primary -> . CONSTANTS
    (98) primary -> . VARIABLES
    (99) primary -> . array
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET

    INT_CONSTANTS   shift and go to state 150
    FLOAT_CONSTANTS shift and go to state 151
    STRING_CONSTANTS shift and go to state 154
    CHAR_CONSTANTS  shift and go to state 157
    BOOLEAN_CONSTANTS shift and go to state 149
    CONSTANTS       shift and go to state 223
    VARIABLES       shift and go to state 221

    array                          shift and go to state 156
    primary                        shift and go to state 222

state 201

    (18) func_arg_expr -> CONSTANTS EQUAL . primary
    (92) primary -> . INT_CONSTANTS
    (93) primary -> . FLOAT_CONSTANTS
    (94) primary -> . STRING_CONSTANTS
    (95) primary -> . CHAR_CONSTANTS
    (96) primary -> . BOOLEAN_CONSTANTS
    (97) primary -> . CONSTANTS
    (98) primary -> . VARIABLES
    (99) primary -> . array
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET

    INT_CONSTANTS   shift and go to state 150
    FLOAT_CONSTANTS shift and go to state 151
    STRING_CONSTANTS shift and go to state 154
    CHAR_CONSTANTS  shift and go to state 157
    BOOLEAN_CONSTANTS shift and go to state 149
    CONSTANTS       shift and go to state 223
    VARIABLES       shift and go to state 221

    array                          shift and go to state 156
    primary                        shift and go to state 224

state 202

    (31) gen_stmts -> gen_stmts terms top_stmt .
    (24) top_stmt -> top_stmt . KEYWORD_while expr3
    (26) top_stmt -> top_stmt . KEYWORD_until expr3

    DELIM           reduce using rule 31 (gen_stmts -> gen_stmts terms top_stmt .)
    newline         reduce using rule 31 (gen_stmts -> gen_stmts terms top_stmt .)
    KEYWORD_elsif   reduce using rule 31 (gen_stmts -> gen_stmts terms top_stmt .)
    KEYWORD_else    reduce using rule 31 (gen_stmts -> gen_stmts terms top_stmt .)
    KEYWORD_end     reduce using rule 31 (gen_stmts -> gen_stmts terms top_stmt .)
    KEYWORD_while   shift and go to state 71
    KEYWORD_until   shift and go to state 72


state 203

    (25) top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end . KEYWORD_while expr3
    (28) top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end . KEYWORD_until expr3

    KEYWORD_while   shift and go to state 226
    KEYWORD_until   shift and go to state 225


state 204

    (100) expr1 -> expr3 QUESTION_MARK expr2 COLON . expr2
    (102) expr2 -> . expr7 DOUBLEDOT expr7
    (103) expr2 -> . expr7 TRIPLEDOT expr7
    (104) expr2 -> . expr3
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (105) expr3 -> . expr3 LOGICALOR expr4
    (106) expr3 -> . expr4
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (107) expr4 -> . expr4 LOGICALAND expr5
    (108) expr4 -> . expr5
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (109) expr5 -> . expr6 IFF expr6
    (110) expr5 -> . expr6 DOUBLEEQUAL expr6
    (111) expr5 -> . expr6 TRIPLEEQUAL expr6
    (112) expr5 -> . expr6 NOTEQUAL expr6
    (113) expr5 -> . expr6
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (114) expr6 -> . expr7 LESSEQUAL expr7
    (115) expr6 -> . expr7 LESS expr7
    (116) expr6 -> . expr7 GREATER expr7
    (117) expr6 -> . expr7 GREATEREQUAL expr7
    (118) expr6 -> . expr7
    (119) expr6 -> . BOOLEAN_CONSTANTS
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (157) none -> .

    BOOLEAN_CONSTANTS shift and go to state 12
    OPEN_PAREN      shift and go to state 5
    CONSTANTS       shift and go to state 58
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    uexpr                          shift and go to state 11
    none                           shift and go to state 56
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr2                          shift and go to state 227
    expr3                          shift and go to state 165
    expr10                         shift and go to state 14
    expr7                          shift and go to state 8
    expr4                          shift and go to state 10
    expr5                          shift and go to state 44
    expr6                          shift and go to state 42
    expr8                          shift and go to state 45
    expr9                          shift and go to state 46
    array                          shift and go to state 57
    expr11                         shift and go to state 15

state 205

    (72) opt_cparen -> none .

    KEYWORD_in      reduce using rule 72 (opt_cparen -> none .)
    KEYWORD_while   reduce using rule 72 (opt_cparen -> none .)
    KEYWORD_until   reduce using rule 72 (opt_cparen -> none .)
    DELIM           reduce using rule 72 (opt_cparen -> none .)
    newline         reduce using rule 72 (opt_cparen -> none .)
    $end            reduce using rule 72 (opt_cparen -> none .)
    KEYWORD_end     reduce using rule 72 (opt_cparen -> none .)
    KEYWORD_elsif   reduce using rule 72 (opt_cparen -> none .)
    KEYWORD_else    reduce using rule 72 (opt_cparen -> none .)
    KEYWORD_return  reduce using rule 72 (opt_cparen -> none .)
    KEYWORD_if      reduce using rule 72 (opt_cparen -> none .)
    KEYWORD_begin   reduce using rule 72 (opt_cparen -> none .)
    KEYWORD_for     reduce using rule 72 (opt_cparen -> none .)
    KEYWORD_puts    reduce using rule 72 (opt_cparen -> none .)
    KEYWORD_break   reduce using rule 72 (opt_cparen -> none .)
    KEYWORD_next    reduce using rule 72 (opt_cparen -> none .)
    KEYWORD_redo    reduce using rule 72 (opt_cparen -> none .)
    KEYWORD_exit    reduce using rule 72 (opt_cparen -> none .)
    VARIABLES       reduce using rule 72 (opt_cparen -> none .)
    CONSTANTS       reduce using rule 72 (opt_cparen -> none .)
    BOOLEAN_CONSTANTS reduce using rule 72 (opt_cparen -> none .)
    OPEN_PAREN      reduce using rule 72 (opt_cparen -> none .)
    PLUS            reduce using rule 72 (opt_cparen -> none .)
    MINUS           reduce using rule 72 (opt_cparen -> none .)
    BITNOT          reduce using rule 72 (opt_cparen -> none .)
    BITCOMP         reduce using rule 72 (opt_cparen -> none .)
    INT_CONSTANTS   reduce using rule 72 (opt_cparen -> none .)
    FLOAT_CONSTANTS reduce using rule 72 (opt_cparen -> none .)


state 206

    (39) func_call_stmt -> fname opt_oparen func_ret_arg opt_cparen .

    KEYWORD_while   reduce using rule 39 (func_call_stmt -> fname opt_oparen func_ret_arg opt_cparen .)
    KEYWORD_until   reduce using rule 39 (func_call_stmt -> fname opt_oparen func_ret_arg opt_cparen .)
    DELIM           reduce using rule 39 (func_call_stmt -> fname opt_oparen func_ret_arg opt_cparen .)
    newline         reduce using rule 39 (func_call_stmt -> fname opt_oparen func_ret_arg opt_cparen .)
    KEYWORD_end     reduce using rule 39 (func_call_stmt -> fname opt_oparen func_ret_arg opt_cparen .)
    KEYWORD_elsif   reduce using rule 39 (func_call_stmt -> fname opt_oparen func_ret_arg opt_cparen .)
    KEYWORD_else    reduce using rule 39 (func_call_stmt -> fname opt_oparen func_ret_arg opt_cparen .)
    $end            reduce using rule 39 (func_call_stmt -> fname opt_oparen func_ret_arg opt_cparen .)


state 207

    (71) opt_cparen -> CLOSE_PAREN .

    KEYWORD_in      reduce using rule 71 (opt_cparen -> CLOSE_PAREN .)
    KEYWORD_while   reduce using rule 71 (opt_cparen -> CLOSE_PAREN .)
    KEYWORD_until   reduce using rule 71 (opt_cparen -> CLOSE_PAREN .)
    DELIM           reduce using rule 71 (opt_cparen -> CLOSE_PAREN .)
    newline         reduce using rule 71 (opt_cparen -> CLOSE_PAREN .)
    $end            reduce using rule 71 (opt_cparen -> CLOSE_PAREN .)
    KEYWORD_end     reduce using rule 71 (opt_cparen -> CLOSE_PAREN .)
    KEYWORD_elsif   reduce using rule 71 (opt_cparen -> CLOSE_PAREN .)
    KEYWORD_else    reduce using rule 71 (opt_cparen -> CLOSE_PAREN .)
    KEYWORD_return  reduce using rule 71 (opt_cparen -> CLOSE_PAREN .)
    KEYWORD_if      reduce using rule 71 (opt_cparen -> CLOSE_PAREN .)
    KEYWORD_begin   reduce using rule 71 (opt_cparen -> CLOSE_PAREN .)
    KEYWORD_for     reduce using rule 71 (opt_cparen -> CLOSE_PAREN .)
    KEYWORD_puts    reduce using rule 71 (opt_cparen -> CLOSE_PAREN .)
    KEYWORD_break   reduce using rule 71 (opt_cparen -> CLOSE_PAREN .)
    KEYWORD_next    reduce using rule 71 (opt_cparen -> CLOSE_PAREN .)
    KEYWORD_redo    reduce using rule 71 (opt_cparen -> CLOSE_PAREN .)
    KEYWORD_exit    reduce using rule 71 (opt_cparen -> CLOSE_PAREN .)
    VARIABLES       reduce using rule 71 (opt_cparen -> CLOSE_PAREN .)
    CONSTANTS       reduce using rule 71 (opt_cparen -> CLOSE_PAREN .)
    BOOLEAN_CONSTANTS reduce using rule 71 (opt_cparen -> CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 71 (opt_cparen -> CLOSE_PAREN .)
    PLUS            reduce using rule 71 (opt_cparen -> CLOSE_PAREN .)
    MINUS           reduce using rule 71 (opt_cparen -> CLOSE_PAREN .)
    BITNOT          reduce using rule 71 (opt_cparen -> CLOSE_PAREN .)
    BITCOMP         reduce using rule 71 (opt_cparen -> CLOSE_PAREN .)
    INT_CONSTANTS   reduce using rule 71 (opt_cparen -> CLOSE_PAREN .)
    FLOAT_CONSTANTS reduce using rule 71 (opt_cparen -> CLOSE_PAREN .)


state 208

    (82) MRHS -> MRHS COMMA . mrhs
    (86) mrhs -> . expr1
    (87) mrhs -> . str_expr
    (88) mrhs -> . KEYWORD_gets
    (89) mrhs -> . OPEN_BRACKET func_ret_arg CLOSE_BRACKET
    (100) expr1 -> . expr3 QUESTION_MARK expr2 COLON expr2
    (101) expr1 -> . expr2
    (90) str_expr -> . str_expr PLUS STRING_CONSTANTS
    (91) str_expr -> . STRING_CONSTANTS
    (105) expr3 -> . expr3 LOGICALOR expr4
    (106) expr3 -> . expr4
    (102) expr2 -> . expr7 DOUBLEDOT expr7
    (103) expr2 -> . expr7 TRIPLEDOT expr7
    (104) expr2 -> . expr3
    (107) expr4 -> . expr4 LOGICALAND expr5
    (108) expr4 -> . expr5
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (109) expr5 -> . expr6 IFF expr6
    (110) expr5 -> . expr6 DOUBLEEQUAL expr6
    (111) expr5 -> . expr6 TRIPLEEQUAL expr6
    (112) expr5 -> . expr6 NOTEQUAL expr6
    (113) expr5 -> . expr6
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (114) expr6 -> . expr7 LESSEQUAL expr7
    (115) expr6 -> . expr7 LESS expr7
    (116) expr6 -> . expr7 GREATER expr7
    (117) expr6 -> . expr7 GREATEREQUAL expr7
    (118) expr6 -> . expr7
    (119) expr6 -> . BOOLEAN_CONSTANTS
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (157) none -> .

    KEYWORD_gets    shift and go to state 95
    OPEN_BRACKET    shift and go to state 93
    STRING_CONSTANTS shift and go to state 99
    BOOLEAN_CONSTANTS shift and go to state 12
    OPEN_PAREN      shift and go to state 5
    CONSTANTS       shift and go to state 58
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    uexpr                          shift and go to state 11
    none                           shift and go to state 56
    str_expr                       shift and go to state 91
    expr5                          shift and go to state 44
    mrhs                           shift and go to state 228
    expr2                          shift and go to state 39
    expr3                          shift and go to state 40
    expr1                          shift and go to state 94
    expr6                          shift and go to state 42
    expr7                          shift and go to state 8
    expr4                          shift and go to state 10
    expr10                         shift and go to state 14
    expr8                          shift and go to state 45
    expr9                          shift and go to state 46
    expr13                         shift and go to state 17
    array                          shift and go to state 57
    expr12                         shift and go to state 16
    expr11                         shift and go to state 15

state 209

    (40) func_call_stmt -> MLHS EQUAL fname opt_oparen . func_ret_arg opt_cparen
    (52) func_ret_arg -> . func_arg_expr
    (53) func_ret_arg -> . primary
    (54) func_ret_arg -> . func_ret_arg COMMA func_arg_expr
    (55) func_ret_arg -> . func_ret_arg COMMA primary
    (17) func_arg_expr -> . VARIABLES EQUAL primary
    (18) func_arg_expr -> . CONSTANTS EQUAL primary
    (92) primary -> . INT_CONSTANTS
    (93) primary -> . FLOAT_CONSTANTS
    (94) primary -> . STRING_CONSTANTS
    (95) primary -> . CHAR_CONSTANTS
    (96) primary -> . BOOLEAN_CONSTANTS
    (97) primary -> . CONSTANTS
    (98) primary -> . VARIABLES
    (99) primary -> . array
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET

    VARIABLES       shift and go to state 158
    CONSTANTS       shift and go to state 159
    INT_CONSTANTS   shift and go to state 150
    FLOAT_CONSTANTS shift and go to state 151
    STRING_CONSTANTS shift and go to state 154
    CHAR_CONSTANTS  shift and go to state 157
    BOOLEAN_CONSTANTS shift and go to state 149

    func_arg_expr                  shift and go to state 152
    primary                        shift and go to state 153
    func_ret_arg                   shift and go to state 229
    array                          shift and go to state 156

state 210

    (29) top_stmt -> KEYWORD_for opt_oparen multi_var opt_cparen . KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end

    KEYWORD_in      shift and go to state 230


state 211

    (67) multi_var -> multi_var COMMA . VARIABLES
    (68) multi_var -> multi_var COMMA . CONSTANTS

    VARIABLES       shift and go to state 231
    CONSTANTS       shift and go to state 232


state 212

    (23) top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 233


state 213

    (8) func_defn -> KEYWORD_def fname opt_oparen arguments opt_cparen . func_stmts opt_terms KEYWORD_end
    (47) func_stmts -> . func_stmt
    (48) func_stmts -> . func_stmts terms func_stmt
    (49) func_stmts -> . none
    (50) func_stmt -> . top_stmt
    (51) func_stmt -> . KEYWORD_return func_ret_arg
    (157) none -> .
    (21) top_stmt -> . stmt
    (22) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (23) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (24) top_stmt -> . top_stmt KEYWORD_while expr3
    (25) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (26) top_stmt -> . top_stmt KEYWORD_until expr3
    (27) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (28) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (29) top_stmt -> . KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (33) stmt -> . expr
    (34) stmt -> . expr1
    (35) stmt -> . puts_stmt
    (36) stmt -> . loop_stmt
    (37) stmt -> . exit_stmt
    (38) stmt -> . func_call_stmt
    (78) expr -> . MLHS EQUAL MRHS
    (100) expr1 -> . expr3 QUESTION_MARK expr2 COLON expr2
    (101) expr1 -> . expr2
    (45) puts_stmt -> . KEYWORD_puts mrhs
    (46) puts_stmt -> . KEYWORD_puts expr
    (41) loop_stmt -> . KEYWORD_break
    (42) loop_stmt -> . KEYWORD_next
    (43) loop_stmt -> . KEYWORD_redo
    (44) exit_stmt -> . KEYWORD_exit
    (39) func_call_stmt -> . fname opt_oparen func_ret_arg opt_cparen
    (40) func_call_stmt -> . MLHS EQUAL fname opt_oparen func_ret_arg opt_cparen
    (79) MLHS -> . mlhs
    (80) MLHS -> . MLHS COMMA mlhs
    (105) expr3 -> . expr3 LOGICALOR expr4
    (106) expr3 -> . expr4
    (102) expr2 -> . expr7 DOUBLEDOT expr7
    (103) expr2 -> . expr7 TRIPLEDOT expr7
    (104) expr2 -> . expr3
    (9) fname -> . VARIABLES
    (10) fname -> . CONSTANTS
    (83) mlhs -> . VARIABLES
    (84) mlhs -> . CONSTANTS
    (85) mlhs -> . array
    (107) expr4 -> . expr4 LOGICALAND expr5
    (108) expr4 -> . expr5
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (109) expr5 -> . expr6 IFF expr6
    (110) expr5 -> . expr6 DOUBLEEQUAL expr6
    (111) expr5 -> . expr6 TRIPLEEQUAL expr6
    (112) expr5 -> . expr6 NOTEQUAL expr6
    (113) expr5 -> . expr6
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (114) expr6 -> . expr7 LESSEQUAL expr7
    (115) expr6 -> . expr7 LESS expr7
    (116) expr6 -> . expr7 GREATER expr7
    (117) expr6 -> . expr7 GREATEREQUAL expr7
    (118) expr6 -> . expr7
    (119) expr6 -> . BOOLEAN_CONSTANTS
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP

    KEYWORD_return  shift and go to state 236
    DELIM           reduce using rule 157 (none -> .)
    newline         reduce using rule 157 (none -> .)
    KEYWORD_end     reduce using rule 157 (none -> .)
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)
    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 37
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 52
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 47
    KEYWORD_next    shift and go to state 30
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    VARIABLES       shift and go to state 28
    CONSTANTS       shift and go to state 22
    BOOLEAN_CONSTANTS shift and go to state 12
    OPEN_PAREN      shift and go to state 5
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29

    func_stmt                      shift and go to state 238
    mlhs                           shift and go to state 2
    puts_stmt                      shift and go to state 19
    func_stmts                     shift and go to state 234
    expr11                         shift and go to state 15
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    array                          shift and go to state 26
    expr2                          shift and go to state 39
    expr3                          shift and go to state 40
    expr1                          shift and go to state 41
    expr6                          shift and go to state 42
    fname                          shift and go to state 43
    expr5                          shift and go to state 44
    func_call_stmt                 shift and go to state 32
    expr8                          shift and go to state 45
    expr9                          shift and go to state 46
    expr4                          shift and go to state 10
    exit_stmt                      shift and go to state 48
    MLHS                           shift and go to state 50
    stmt                           shift and go to state 20
    expr7                          shift and go to state 8
    loop_stmt                      shift and go to state 9
    uexpr                          shift and go to state 11
    none                           shift and go to state 237
    expr                           shift and go to state 35
    expr10                         shift and go to state 14
    top_stmt                       shift and go to state 235

state 214

    (11) arguments -> arguments COMMA . VARIABLES
    (12) arguments -> arguments COMMA . CONSTANTS
    (13) arguments -> arguments COMMA . func_arg_expr
    (17) func_arg_expr -> . VARIABLES EQUAL primary
    (18) func_arg_expr -> . CONSTANTS EQUAL primary

    VARIABLES       shift and go to state 239
    CONSTANTS       shift and go to state 241

    func_arg_expr                  shift and go to state 240

state 215

    (27) top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 242


state 216

    (22) top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms . elsif_tail opt_else_stmt KEYWORD_end
    (58) elsif_tail -> . none
    (59) elsif_tail -> . KEYWORD_elsif expr3 opt_then gen_stmts elsif_tail
    (157) none -> .

    KEYWORD_elsif   shift and go to state 244
    KEYWORD_else    reduce using rule 157 (none -> .)
    KEYWORD_end     reduce using rule 157 (none -> .)

    none                           shift and go to state 243
    elsif_tail                     shift and go to state 245

state 217

    (144) array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 . CLOSE_BRACKET
    (120) expr7 -> expr7 . BITXOR expr8
    (121) expr7 -> expr7 . PIPE expr8

    CLOSE_BRACKET   shift and go to state 246
    BITXOR          shift and go to state 66
    PIPE            shift and go to state 65


state 218

    (145) array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 . CLOSE_BRACKET
    (120) expr7 -> expr7 . BITXOR expr8
    (121) expr7 -> expr7 . PIPE expr8

    CLOSE_BRACKET   shift and go to state 247
    BITXOR          shift and go to state 66
    PIPE            shift and go to state 65


state 219

    (54) func_ret_arg -> func_ret_arg COMMA func_arg_expr .

    CLOSE_BRACKET   reduce using rule 54 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)
    COMMA           reduce using rule 54 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)
    CLOSE_PAREN     reduce using rule 54 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)
    KEYWORD_while   reduce using rule 54 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)
    KEYWORD_until   reduce using rule 54 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)
    DELIM           reduce using rule 54 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)
    newline         reduce using rule 54 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)
    $end            reduce using rule 54 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)
    KEYWORD_end     reduce using rule 54 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)
    KEYWORD_elsif   reduce using rule 54 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)
    KEYWORD_else    reduce using rule 54 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)


state 220

    (55) func_ret_arg -> func_ret_arg COMMA primary .

    CLOSE_BRACKET   reduce using rule 55 (func_ret_arg -> func_ret_arg COMMA primary .)
    COMMA           reduce using rule 55 (func_ret_arg -> func_ret_arg COMMA primary .)
    CLOSE_PAREN     reduce using rule 55 (func_ret_arg -> func_ret_arg COMMA primary .)
    KEYWORD_while   reduce using rule 55 (func_ret_arg -> func_ret_arg COMMA primary .)
    KEYWORD_until   reduce using rule 55 (func_ret_arg -> func_ret_arg COMMA primary .)
    DELIM           reduce using rule 55 (func_ret_arg -> func_ret_arg COMMA primary .)
    newline         reduce using rule 55 (func_ret_arg -> func_ret_arg COMMA primary .)
    $end            reduce using rule 55 (func_ret_arg -> func_ret_arg COMMA primary .)
    KEYWORD_end     reduce using rule 55 (func_ret_arg -> func_ret_arg COMMA primary .)
    KEYWORD_elsif   reduce using rule 55 (func_ret_arg -> func_ret_arg COMMA primary .)
    KEYWORD_else    reduce using rule 55 (func_ret_arg -> func_ret_arg COMMA primary .)


state 221

    (98) primary -> VARIABLES .
    (143) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> VARIABLES . OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> VARIABLES . OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET

    CLOSE_BRACKET   reduce using rule 98 (primary -> VARIABLES .)
    COMMA           reduce using rule 98 (primary -> VARIABLES .)
    CLOSE_PAREN     reduce using rule 98 (primary -> VARIABLES .)
    KEYWORD_while   reduce using rule 98 (primary -> VARIABLES .)
    KEYWORD_until   reduce using rule 98 (primary -> VARIABLES .)
    DELIM           reduce using rule 98 (primary -> VARIABLES .)
    newline         reduce using rule 98 (primary -> VARIABLES .)
    $end            reduce using rule 98 (primary -> VARIABLES .)
    KEYWORD_end     reduce using rule 98 (primary -> VARIABLES .)
    KEYWORD_elsif   reduce using rule 98 (primary -> VARIABLES .)
    KEYWORD_else    reduce using rule 98 (primary -> VARIABLES .)
    KEYWORD_return  reduce using rule 98 (primary -> VARIABLES .)
    KEYWORD_if      reduce using rule 98 (primary -> VARIABLES .)
    KEYWORD_begin   reduce using rule 98 (primary -> VARIABLES .)
    KEYWORD_for     reduce using rule 98 (primary -> VARIABLES .)
    KEYWORD_puts    reduce using rule 98 (primary -> VARIABLES .)
    KEYWORD_break   reduce using rule 98 (primary -> VARIABLES .)
    KEYWORD_next    reduce using rule 98 (primary -> VARIABLES .)
    KEYWORD_redo    reduce using rule 98 (primary -> VARIABLES .)
    KEYWORD_exit    reduce using rule 98 (primary -> VARIABLES .)
    VARIABLES       reduce using rule 98 (primary -> VARIABLES .)
    CONSTANTS       reduce using rule 98 (primary -> VARIABLES .)
    BOOLEAN_CONSTANTS reduce using rule 98 (primary -> VARIABLES .)
    OPEN_PAREN      reduce using rule 98 (primary -> VARIABLES .)
    PLUS            reduce using rule 98 (primary -> VARIABLES .)
    MINUS           reduce using rule 98 (primary -> VARIABLES .)
    BITNOT          reduce using rule 98 (primary -> VARIABLES .)
    BITCOMP         reduce using rule 98 (primary -> VARIABLES .)
    INT_CONSTANTS   reduce using rule 98 (primary -> VARIABLES .)
    FLOAT_CONSTANTS reduce using rule 98 (primary -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 90


state 222

    (17) func_arg_expr -> VARIABLES EQUAL primary .

    COMMA           reduce using rule 17 (func_arg_expr -> VARIABLES EQUAL primary .)
    CLOSE_PAREN     reduce using rule 17 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_return  reduce using rule 17 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_if      reduce using rule 17 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_while   reduce using rule 17 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_begin   reduce using rule 17 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_until   reduce using rule 17 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_for     reduce using rule 17 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_puts    reduce using rule 17 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_break   reduce using rule 17 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_next    reduce using rule 17 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_redo    reduce using rule 17 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_exit    reduce using rule 17 (func_arg_expr -> VARIABLES EQUAL primary .)
    VARIABLES       reduce using rule 17 (func_arg_expr -> VARIABLES EQUAL primary .)
    CONSTANTS       reduce using rule 17 (func_arg_expr -> VARIABLES EQUAL primary .)
    BOOLEAN_CONSTANTS reduce using rule 17 (func_arg_expr -> VARIABLES EQUAL primary .)
    OPEN_PAREN      reduce using rule 17 (func_arg_expr -> VARIABLES EQUAL primary .)
    PLUS            reduce using rule 17 (func_arg_expr -> VARIABLES EQUAL primary .)
    MINUS           reduce using rule 17 (func_arg_expr -> VARIABLES EQUAL primary .)
    BITNOT          reduce using rule 17 (func_arg_expr -> VARIABLES EQUAL primary .)
    BITCOMP         reduce using rule 17 (func_arg_expr -> VARIABLES EQUAL primary .)
    DELIM           reduce using rule 17 (func_arg_expr -> VARIABLES EQUAL primary .)
    newline         reduce using rule 17 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_end     reduce using rule 17 (func_arg_expr -> VARIABLES EQUAL primary .)
    INT_CONSTANTS   reduce using rule 17 (func_arg_expr -> VARIABLES EQUAL primary .)
    FLOAT_CONSTANTS reduce using rule 17 (func_arg_expr -> VARIABLES EQUAL primary .)
    $end            reduce using rule 17 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_elsif   reduce using rule 17 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_else    reduce using rule 17 (func_arg_expr -> VARIABLES EQUAL primary .)
    CLOSE_BRACKET   reduce using rule 17 (func_arg_expr -> VARIABLES EQUAL primary .)


state 223

    (97) primary -> CONSTANTS .

    CLOSE_BRACKET   reduce using rule 97 (primary -> CONSTANTS .)
    COMMA           reduce using rule 97 (primary -> CONSTANTS .)
    CLOSE_PAREN     reduce using rule 97 (primary -> CONSTANTS .)
    KEYWORD_while   reduce using rule 97 (primary -> CONSTANTS .)
    KEYWORD_until   reduce using rule 97 (primary -> CONSTANTS .)
    DELIM           reduce using rule 97 (primary -> CONSTANTS .)
    newline         reduce using rule 97 (primary -> CONSTANTS .)
    $end            reduce using rule 97 (primary -> CONSTANTS .)
    KEYWORD_end     reduce using rule 97 (primary -> CONSTANTS .)
    KEYWORD_elsif   reduce using rule 97 (primary -> CONSTANTS .)
    KEYWORD_else    reduce using rule 97 (primary -> CONSTANTS .)
    KEYWORD_return  reduce using rule 97 (primary -> CONSTANTS .)
    KEYWORD_if      reduce using rule 97 (primary -> CONSTANTS .)
    KEYWORD_begin   reduce using rule 97 (primary -> CONSTANTS .)
    KEYWORD_for     reduce using rule 97 (primary -> CONSTANTS .)
    KEYWORD_puts    reduce using rule 97 (primary -> CONSTANTS .)
    KEYWORD_break   reduce using rule 97 (primary -> CONSTANTS .)
    KEYWORD_next    reduce using rule 97 (primary -> CONSTANTS .)
    KEYWORD_redo    reduce using rule 97 (primary -> CONSTANTS .)
    KEYWORD_exit    reduce using rule 97 (primary -> CONSTANTS .)
    VARIABLES       reduce using rule 97 (primary -> CONSTANTS .)
    CONSTANTS       reduce using rule 97 (primary -> CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 97 (primary -> CONSTANTS .)
    OPEN_PAREN      reduce using rule 97 (primary -> CONSTANTS .)
    PLUS            reduce using rule 97 (primary -> CONSTANTS .)
    MINUS           reduce using rule 97 (primary -> CONSTANTS .)
    BITNOT          reduce using rule 97 (primary -> CONSTANTS .)
    BITCOMP         reduce using rule 97 (primary -> CONSTANTS .)
    INT_CONSTANTS   reduce using rule 97 (primary -> CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 97 (primary -> CONSTANTS .)


state 224

    (18) func_arg_expr -> CONSTANTS EQUAL primary .

    COMMA           reduce using rule 18 (func_arg_expr -> CONSTANTS EQUAL primary .)
    CLOSE_PAREN     reduce using rule 18 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_return  reduce using rule 18 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_if      reduce using rule 18 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_while   reduce using rule 18 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_begin   reduce using rule 18 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_until   reduce using rule 18 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_for     reduce using rule 18 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_puts    reduce using rule 18 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_break   reduce using rule 18 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_next    reduce using rule 18 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_redo    reduce using rule 18 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_exit    reduce using rule 18 (func_arg_expr -> CONSTANTS EQUAL primary .)
    VARIABLES       reduce using rule 18 (func_arg_expr -> CONSTANTS EQUAL primary .)
    CONSTANTS       reduce using rule 18 (func_arg_expr -> CONSTANTS EQUAL primary .)
    BOOLEAN_CONSTANTS reduce using rule 18 (func_arg_expr -> CONSTANTS EQUAL primary .)
    OPEN_PAREN      reduce using rule 18 (func_arg_expr -> CONSTANTS EQUAL primary .)
    PLUS            reduce using rule 18 (func_arg_expr -> CONSTANTS EQUAL primary .)
    MINUS           reduce using rule 18 (func_arg_expr -> CONSTANTS EQUAL primary .)
    BITNOT          reduce using rule 18 (func_arg_expr -> CONSTANTS EQUAL primary .)
    BITCOMP         reduce using rule 18 (func_arg_expr -> CONSTANTS EQUAL primary .)
    DELIM           reduce using rule 18 (func_arg_expr -> CONSTANTS EQUAL primary .)
    newline         reduce using rule 18 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_end     reduce using rule 18 (func_arg_expr -> CONSTANTS EQUAL primary .)
    INT_CONSTANTS   reduce using rule 18 (func_arg_expr -> CONSTANTS EQUAL primary .)
    FLOAT_CONSTANTS reduce using rule 18 (func_arg_expr -> CONSTANTS EQUAL primary .)
    $end            reduce using rule 18 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_elsif   reduce using rule 18 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_else    reduce using rule 18 (func_arg_expr -> CONSTANTS EQUAL primary .)
    CLOSE_BRACKET   reduce using rule 18 (func_arg_expr -> CONSTANTS EQUAL primary .)


state 225

    (28) top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until . expr3
    (105) expr3 -> . expr3 LOGICALOR expr4
    (106) expr3 -> . expr4
    (107) expr4 -> . expr4 LOGICALAND expr5
    (108) expr4 -> . expr5
    (109) expr5 -> . expr6 IFF expr6
    (110) expr5 -> . expr6 DOUBLEEQUAL expr6
    (111) expr5 -> . expr6 TRIPLEEQUAL expr6
    (112) expr5 -> . expr6 NOTEQUAL expr6
    (113) expr5 -> . expr6
    (114) expr6 -> . expr7 LESSEQUAL expr7
    (115) expr6 -> . expr7 LESS expr7
    (116) expr6 -> . expr7 GREATER expr7
    (117) expr6 -> . expr7 GREATEREQUAL expr7
    (118) expr6 -> . expr7
    (119) expr6 -> . BOOLEAN_CONSTANTS
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (157) none -> .

    BOOLEAN_CONSTANTS shift and go to state 12
    OPEN_PAREN      shift and go to state 5
    CONSTANTS       shift and go to state 58
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    uexpr                          shift and go to state 11
    none                           shift and go to state 56
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr3                          shift and go to state 248
    expr6                          shift and go to state 42
    expr7                          shift and go to state 55
    expr4                          shift and go to state 10
    expr5                          shift and go to state 44
    expr10                         shift and go to state 14
    expr8                          shift and go to state 45
    expr9                          shift and go to state 46
    array                          shift and go to state 57
    expr11                         shift and go to state 15

state 226

    (25) top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while . expr3
    (105) expr3 -> . expr3 LOGICALOR expr4
    (106) expr3 -> . expr4
    (107) expr4 -> . expr4 LOGICALAND expr5
    (108) expr4 -> . expr5
    (109) expr5 -> . expr6 IFF expr6
    (110) expr5 -> . expr6 DOUBLEEQUAL expr6
    (111) expr5 -> . expr6 TRIPLEEQUAL expr6
    (112) expr5 -> . expr6 NOTEQUAL expr6
    (113) expr5 -> . expr6
    (114) expr6 -> . expr7 LESSEQUAL expr7
    (115) expr6 -> . expr7 LESS expr7
    (116) expr6 -> . expr7 GREATER expr7
    (117) expr6 -> . expr7 GREATEREQUAL expr7
    (118) expr6 -> . expr7
    (119) expr6 -> . BOOLEAN_CONSTANTS
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (157) none -> .

    BOOLEAN_CONSTANTS shift and go to state 12
    OPEN_PAREN      shift and go to state 5
    CONSTANTS       shift and go to state 58
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    uexpr                          shift and go to state 11
    none                           shift and go to state 56
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr3                          shift and go to state 249
    expr6                          shift and go to state 42
    expr7                          shift and go to state 55
    expr4                          shift and go to state 10
    expr5                          shift and go to state 44
    expr10                         shift and go to state 14
    expr8                          shift and go to state 45
    expr9                          shift and go to state 46
    array                          shift and go to state 57
    expr11                         shift and go to state 15

state 227

    (100) expr1 -> expr3 QUESTION_MARK expr2 COLON expr2 .

    KEYWORD_while   reduce using rule 100 (expr1 -> expr3 QUESTION_MARK expr2 COLON expr2 .)
    KEYWORD_until   reduce using rule 100 (expr1 -> expr3 QUESTION_MARK expr2 COLON expr2 .)
    DELIM           reduce using rule 100 (expr1 -> expr3 QUESTION_MARK expr2 COLON expr2 .)
    newline         reduce using rule 100 (expr1 -> expr3 QUESTION_MARK expr2 COLON expr2 .)
    KEYWORD_end     reduce using rule 100 (expr1 -> expr3 QUESTION_MARK expr2 COLON expr2 .)
    COMMA           reduce using rule 100 (expr1 -> expr3 QUESTION_MARK expr2 COLON expr2 .)
    $end            reduce using rule 100 (expr1 -> expr3 QUESTION_MARK expr2 COLON expr2 .)
    KEYWORD_elsif   reduce using rule 100 (expr1 -> expr3 QUESTION_MARK expr2 COLON expr2 .)
    KEYWORD_else    reduce using rule 100 (expr1 -> expr3 QUESTION_MARK expr2 COLON expr2 .)
    CLOSE_PAREN     reduce using rule 100 (expr1 -> expr3 QUESTION_MARK expr2 COLON expr2 .)


state 228

    (82) MRHS -> MRHS COMMA mrhs .

    COMMA           reduce using rule 82 (MRHS -> MRHS COMMA mrhs .)
    KEYWORD_while   reduce using rule 82 (MRHS -> MRHS COMMA mrhs .)
    KEYWORD_until   reduce using rule 82 (MRHS -> MRHS COMMA mrhs .)
    DELIM           reduce using rule 82 (MRHS -> MRHS COMMA mrhs .)
    newline         reduce using rule 82 (MRHS -> MRHS COMMA mrhs .)
    $end            reduce using rule 82 (MRHS -> MRHS COMMA mrhs .)
    KEYWORD_end     reduce using rule 82 (MRHS -> MRHS COMMA mrhs .)
    KEYWORD_elsif   reduce using rule 82 (MRHS -> MRHS COMMA mrhs .)
    KEYWORD_else    reduce using rule 82 (MRHS -> MRHS COMMA mrhs .)


state 229

    (40) func_call_stmt -> MLHS EQUAL fname opt_oparen func_ret_arg . opt_cparen
    (54) func_ret_arg -> func_ret_arg . COMMA func_arg_expr
    (55) func_ret_arg -> func_ret_arg . COMMA primary
    (71) opt_cparen -> . CLOSE_PAREN
    (72) opt_cparen -> . none
    (157) none -> .

    COMMA           shift and go to state 199
    CLOSE_PAREN     shift and go to state 207
    KEYWORD_while   reduce using rule 157 (none -> .)
    KEYWORD_until   reduce using rule 157 (none -> .)
    DELIM           reduce using rule 157 (none -> .)
    newline         reduce using rule 157 (none -> .)
    $end            reduce using rule 157 (none -> .)
    KEYWORD_end     reduce using rule 157 (none -> .)
    KEYWORD_elsif   reduce using rule 157 (none -> .)
    KEYWORD_else    reduce using rule 157 (none -> .)

    none                           shift and go to state 205
    opt_cparen                     shift and go to state 250

state 230

    (29) top_stmt -> KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in . for_range opt_do gen_stmts opt_terms KEYWORD_end
    (73) for_range -> . INT_CONSTANTS DOUBLEDOT INT_CONSTANTS
    (74) for_range -> . INT_CONSTANTS TRIPLEDOT INT_CONSTANTS
    (75) for_range -> . VARIABLES
    (76) for_range -> . array
    (77) for_range -> . CONSTANTS
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET

    INT_CONSTANTS   shift and go to state 251
    VARIABLES       shift and go to state 252
    CONSTANTS       shift and go to state 255

    for_range                      shift and go to state 253
    array                          shift and go to state 254

state 231

    (67) multi_var -> multi_var COMMA VARIABLES .

    COMMA           reduce using rule 67 (multi_var -> multi_var COMMA VARIABLES .)
    CLOSE_PAREN     reduce using rule 67 (multi_var -> multi_var COMMA VARIABLES .)
    KEYWORD_in      reduce using rule 67 (multi_var -> multi_var COMMA VARIABLES .)


state 232

    (68) multi_var -> multi_var COMMA CONSTANTS .

    COMMA           reduce using rule 68 (multi_var -> multi_var COMMA CONSTANTS .)
    CLOSE_PAREN     reduce using rule 68 (multi_var -> multi_var COMMA CONSTANTS .)
    KEYWORD_in      reduce using rule 68 (multi_var -> multi_var COMMA CONSTANTS .)


state 233

    (23) top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end .

    KEYWORD_while   reduce using rule 23 (top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_until   reduce using rule 23 (top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    DELIM           reduce using rule 23 (top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 23 (top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_end     reduce using rule 23 (top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_elsif   reduce using rule 23 (top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_else    reduce using rule 23 (top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    $end            reduce using rule 23 (top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end .)


state 234

    (8) func_defn -> KEYWORD_def fname opt_oparen arguments opt_cparen func_stmts . opt_terms KEYWORD_end
    (48) func_stmts -> func_stmts . terms func_stmt
    (151) opt_terms -> . none
    (152) opt_terms -> . terms
    (153) terms -> . term
    (154) terms -> . terms term
    (157) none -> .
    (155) term -> . DELIM
    (156) term -> . newline

    KEYWORD_end     reduce using rule 157 (none -> .)
    DELIM           shift and go to state 85
    newline         shift and go to state 84

    none                           shift and go to state 86
    terms                          shift and go to state 256
    term                           shift and go to state 82
    opt_terms                      shift and go to state 257

state 235

    (50) func_stmt -> top_stmt .
    (24) top_stmt -> top_stmt . KEYWORD_while expr3
    (26) top_stmt -> top_stmt . KEYWORD_until expr3

    DELIM           reduce using rule 50 (func_stmt -> top_stmt .)
    newline         reduce using rule 50 (func_stmt -> top_stmt .)
    KEYWORD_end     reduce using rule 50 (func_stmt -> top_stmt .)
    KEYWORD_while   shift and go to state 71
    KEYWORD_until   shift and go to state 72


state 236

    (51) func_stmt -> KEYWORD_return . func_ret_arg
    (52) func_ret_arg -> . func_arg_expr
    (53) func_ret_arg -> . primary
    (54) func_ret_arg -> . func_ret_arg COMMA func_arg_expr
    (55) func_ret_arg -> . func_ret_arg COMMA primary
    (17) func_arg_expr -> . VARIABLES EQUAL primary
    (18) func_arg_expr -> . CONSTANTS EQUAL primary
    (92) primary -> . INT_CONSTANTS
    (93) primary -> . FLOAT_CONSTANTS
    (94) primary -> . STRING_CONSTANTS
    (95) primary -> . CHAR_CONSTANTS
    (96) primary -> . BOOLEAN_CONSTANTS
    (97) primary -> . CONSTANTS
    (98) primary -> . VARIABLES
    (99) primary -> . array
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET

    VARIABLES       shift and go to state 158
    CONSTANTS       shift and go to state 159
    INT_CONSTANTS   shift and go to state 150
    FLOAT_CONSTANTS shift and go to state 151
    STRING_CONSTANTS shift and go to state 154
    CHAR_CONSTANTS  shift and go to state 157
    BOOLEAN_CONSTANTS shift and go to state 149

    func_arg_expr                  shift and go to state 152
    func_ret_arg                   shift and go to state 258
    array                          shift and go to state 156
    primary                        shift and go to state 153

state 237

    (49) func_stmts -> none .
    (146) uexpr -> none .

    DELIM           reduce using rule 49 (func_stmts -> none .)
    newline         reduce using rule 49 (func_stmts -> none .)
    KEYWORD_end     reduce using rule 49 (func_stmts -> none .)
    INT_CONSTANTS   reduce using rule 146 (uexpr -> none .)
    FLOAT_CONSTANTS reduce using rule 146 (uexpr -> none .)


state 238

    (47) func_stmts -> func_stmt .

    DELIM           reduce using rule 47 (func_stmts -> func_stmt .)
    newline         reduce using rule 47 (func_stmts -> func_stmt .)
    KEYWORD_end     reduce using rule 47 (func_stmts -> func_stmt .)


state 239

    (11) arguments -> arguments COMMA VARIABLES .
    (17) func_arg_expr -> VARIABLES . EQUAL primary

    COMMA           reduce using rule 11 (arguments -> arguments COMMA VARIABLES .)
    CLOSE_PAREN     reduce using rule 11 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_return  reduce using rule 11 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_if      reduce using rule 11 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_while   reduce using rule 11 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_begin   reduce using rule 11 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_until   reduce using rule 11 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_for     reduce using rule 11 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_puts    reduce using rule 11 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_break   reduce using rule 11 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_next    reduce using rule 11 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_redo    reduce using rule 11 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_exit    reduce using rule 11 (arguments -> arguments COMMA VARIABLES .)
    VARIABLES       reduce using rule 11 (arguments -> arguments COMMA VARIABLES .)
    CONSTANTS       reduce using rule 11 (arguments -> arguments COMMA VARIABLES .)
    BOOLEAN_CONSTANTS reduce using rule 11 (arguments -> arguments COMMA VARIABLES .)
    OPEN_PAREN      reduce using rule 11 (arguments -> arguments COMMA VARIABLES .)
    PLUS            reduce using rule 11 (arguments -> arguments COMMA VARIABLES .)
    MINUS           reduce using rule 11 (arguments -> arguments COMMA VARIABLES .)
    BITNOT          reduce using rule 11 (arguments -> arguments COMMA VARIABLES .)
    BITCOMP         reduce using rule 11 (arguments -> arguments COMMA VARIABLES .)
    DELIM           reduce using rule 11 (arguments -> arguments COMMA VARIABLES .)
    newline         reduce using rule 11 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_end     reduce using rule 11 (arguments -> arguments COMMA VARIABLES .)
    INT_CONSTANTS   reduce using rule 11 (arguments -> arguments COMMA VARIABLES .)
    FLOAT_CONSTANTS reduce using rule 11 (arguments -> arguments COMMA VARIABLES .)
    EQUAL           shift and go to state 200


state 240

    (13) arguments -> arguments COMMA func_arg_expr .

    COMMA           reduce using rule 13 (arguments -> arguments COMMA func_arg_expr .)
    CLOSE_PAREN     reduce using rule 13 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_return  reduce using rule 13 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_if      reduce using rule 13 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_while   reduce using rule 13 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_begin   reduce using rule 13 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_until   reduce using rule 13 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_for     reduce using rule 13 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_puts    reduce using rule 13 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_break   reduce using rule 13 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_next    reduce using rule 13 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_redo    reduce using rule 13 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_exit    reduce using rule 13 (arguments -> arguments COMMA func_arg_expr .)
    VARIABLES       reduce using rule 13 (arguments -> arguments COMMA func_arg_expr .)
    CONSTANTS       reduce using rule 13 (arguments -> arguments COMMA func_arg_expr .)
    BOOLEAN_CONSTANTS reduce using rule 13 (arguments -> arguments COMMA func_arg_expr .)
    OPEN_PAREN      reduce using rule 13 (arguments -> arguments COMMA func_arg_expr .)
    PLUS            reduce using rule 13 (arguments -> arguments COMMA func_arg_expr .)
    MINUS           reduce using rule 13 (arguments -> arguments COMMA func_arg_expr .)
    BITNOT          reduce using rule 13 (arguments -> arguments COMMA func_arg_expr .)
    BITCOMP         reduce using rule 13 (arguments -> arguments COMMA func_arg_expr .)
    DELIM           reduce using rule 13 (arguments -> arguments COMMA func_arg_expr .)
    newline         reduce using rule 13 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_end     reduce using rule 13 (arguments -> arguments COMMA func_arg_expr .)
    INT_CONSTANTS   reduce using rule 13 (arguments -> arguments COMMA func_arg_expr .)
    FLOAT_CONSTANTS reduce using rule 13 (arguments -> arguments COMMA func_arg_expr .)


state 241

    (12) arguments -> arguments COMMA CONSTANTS .
    (18) func_arg_expr -> CONSTANTS . EQUAL primary

    COMMA           reduce using rule 12 (arguments -> arguments COMMA CONSTANTS .)
    CLOSE_PAREN     reduce using rule 12 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_return  reduce using rule 12 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_if      reduce using rule 12 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_while   reduce using rule 12 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_begin   reduce using rule 12 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_until   reduce using rule 12 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_for     reduce using rule 12 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_puts    reduce using rule 12 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_break   reduce using rule 12 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_next    reduce using rule 12 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_redo    reduce using rule 12 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_exit    reduce using rule 12 (arguments -> arguments COMMA CONSTANTS .)
    VARIABLES       reduce using rule 12 (arguments -> arguments COMMA CONSTANTS .)
    CONSTANTS       reduce using rule 12 (arguments -> arguments COMMA CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 12 (arguments -> arguments COMMA CONSTANTS .)
    OPEN_PAREN      reduce using rule 12 (arguments -> arguments COMMA CONSTANTS .)
    PLUS            reduce using rule 12 (arguments -> arguments COMMA CONSTANTS .)
    MINUS           reduce using rule 12 (arguments -> arguments COMMA CONSTANTS .)
    BITNOT          reduce using rule 12 (arguments -> arguments COMMA CONSTANTS .)
    BITCOMP         reduce using rule 12 (arguments -> arguments COMMA CONSTANTS .)
    DELIM           reduce using rule 12 (arguments -> arguments COMMA CONSTANTS .)
    newline         reduce using rule 12 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_end     reduce using rule 12 (arguments -> arguments COMMA CONSTANTS .)
    INT_CONSTANTS   reduce using rule 12 (arguments -> arguments COMMA CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 12 (arguments -> arguments COMMA CONSTANTS .)
    EQUAL           shift and go to state 201


state 242

    (27) top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end .

    KEYWORD_while   reduce using rule 27 (top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_until   reduce using rule 27 (top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    DELIM           reduce using rule 27 (top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 27 (top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_end     reduce using rule 27 (top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_elsif   reduce using rule 27 (top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_else    reduce using rule 27 (top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    $end            reduce using rule 27 (top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end .)


state 243

    (58) elsif_tail -> none .

    KEYWORD_else    reduce using rule 58 (elsif_tail -> none .)
    KEYWORD_end     reduce using rule 58 (elsif_tail -> none .)


state 244

    (59) elsif_tail -> KEYWORD_elsif . expr3 opt_then gen_stmts elsif_tail
    (105) expr3 -> . expr3 LOGICALOR expr4
    (106) expr3 -> . expr4
    (107) expr4 -> . expr4 LOGICALAND expr5
    (108) expr4 -> . expr5
    (109) expr5 -> . expr6 IFF expr6
    (110) expr5 -> . expr6 DOUBLEEQUAL expr6
    (111) expr5 -> . expr6 TRIPLEEQUAL expr6
    (112) expr5 -> . expr6 NOTEQUAL expr6
    (113) expr5 -> . expr6
    (114) expr6 -> . expr7 LESSEQUAL expr7
    (115) expr6 -> . expr7 LESS expr7
    (116) expr6 -> . expr7 GREATER expr7
    (117) expr6 -> . expr7 GREATEREQUAL expr7
    (118) expr6 -> . expr7
    (119) expr6 -> . BOOLEAN_CONSTANTS
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (157) none -> .

    BOOLEAN_CONSTANTS shift and go to state 12
    OPEN_PAREN      shift and go to state 5
    CONSTANTS       shift and go to state 58
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    uexpr                          shift and go to state 11
    none                           shift and go to state 56
    expr3                          shift and go to state 259
    expr6                          shift and go to state 42
    expr7                          shift and go to state 55
    expr4                          shift and go to state 10
    expr5                          shift and go to state 44
    expr10                         shift and go to state 14
    expr8                          shift and go to state 45
    expr9                          shift and go to state 46
    expr13                         shift and go to state 17
    array                          shift and go to state 57
    expr12                         shift and go to state 16
    expr11                         shift and go to state 15

state 245

    (22) top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail . opt_else_stmt KEYWORD_end
    (56) opt_else_stmt -> . KEYWORD_else gen_stmts
    (57) opt_else_stmt -> . none
    (157) none -> .

    KEYWORD_else    shift and go to state 261
    KEYWORD_end     reduce using rule 157 (none -> .)

    none                           shift and go to state 260
    opt_else_stmt                  shift and go to state 262

state 246

    (144) array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .

    EQUAL           reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    COMMA           reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    DOUBLESTAR      reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    MULTIPLY        reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    DIV             reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    MOD             reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    PLUS            reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    MINUS           reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    SHIFTL          reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    SHIFTR          reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    BITAND          reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    DOUBLEDOT       reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    TRIPLEDOT       reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    BITXOR          reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    PIPE            reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    LESSEQUAL       reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    LESS            reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    GREATER         reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    GREATEREQUAL    reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    IFF             reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    DOUBLEEQUAL     reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    TRIPLEEQUAL     reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    NOTEQUAL        reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    LOGICALAND      reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    QUESTION_MARK   reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    LOGICALOR       reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_while   reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_until   reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    DELIM           reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    newline         reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_end     reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_then    reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    $end            reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_do      reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    CLOSE_PAREN     reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_elsif   reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_else    reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    COLON           reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_return  reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_if      reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_begin   reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_for     reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_puts    reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_break   reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_next    reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_redo    reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_exit    reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    VARIABLES       reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    CONSTANTS       reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    BOOLEAN_CONSTANTS reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    OPEN_PAREN      reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    BITNOT          reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    BITCOMP         reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    INT_CONSTANTS   reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    FLOAT_CONSTANTS reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_in      reduce using rule 144 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)


state 247

    (145) array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .

    EQUAL           reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    COMMA           reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    DOUBLESTAR      reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    MULTIPLY        reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    DIV             reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    MOD             reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    PLUS            reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    MINUS           reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    SHIFTL          reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    SHIFTR          reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    BITAND          reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    DOUBLEDOT       reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    TRIPLEDOT       reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    BITXOR          reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    PIPE            reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    LESSEQUAL       reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    LESS            reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    GREATER         reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    GREATEREQUAL    reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    IFF             reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    DOUBLEEQUAL     reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    TRIPLEEQUAL     reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    NOTEQUAL        reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    LOGICALAND      reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    QUESTION_MARK   reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    LOGICALOR       reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_while   reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_until   reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    DELIM           reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    newline         reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_end     reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_then    reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    $end            reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_do      reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    CLOSE_PAREN     reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_elsif   reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_else    reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    COLON           reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_return  reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_if      reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_begin   reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_for     reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_puts    reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_break   reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_next    reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_redo    reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_exit    reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    VARIABLES       reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    CONSTANTS       reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    BOOLEAN_CONSTANTS reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    OPEN_PAREN      reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    BITNOT          reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    BITCOMP         reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    INT_CONSTANTS   reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    FLOAT_CONSTANTS reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_in      reduce using rule 145 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)


state 248

    (28) top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3 .
    (105) expr3 -> expr3 . LOGICALOR expr4

    KEYWORD_while   reduce using rule 28 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3 .)
    KEYWORD_until   reduce using rule 28 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3 .)
    DELIM           reduce using rule 28 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3 .)
    newline         reduce using rule 28 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3 .)
    KEYWORD_end     reduce using rule 28 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3 .)
    KEYWORD_elsif   reduce using rule 28 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3 .)
    KEYWORD_else    reduce using rule 28 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3 .)
    $end            reduce using rule 28 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3 .)
    LOGICALOR       shift and go to state 104


state 249

    (25) top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3 .
    (105) expr3 -> expr3 . LOGICALOR expr4

    KEYWORD_while   reduce using rule 25 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3 .)
    KEYWORD_until   reduce using rule 25 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3 .)
    DELIM           reduce using rule 25 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3 .)
    newline         reduce using rule 25 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3 .)
    KEYWORD_end     reduce using rule 25 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3 .)
    KEYWORD_elsif   reduce using rule 25 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3 .)
    KEYWORD_else    reduce using rule 25 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3 .)
    $end            reduce using rule 25 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3 .)
    LOGICALOR       shift and go to state 104


state 250

    (40) func_call_stmt -> MLHS EQUAL fname opt_oparen func_ret_arg opt_cparen .

    KEYWORD_while   reduce using rule 40 (func_call_stmt -> MLHS EQUAL fname opt_oparen func_ret_arg opt_cparen .)
    KEYWORD_until   reduce using rule 40 (func_call_stmt -> MLHS EQUAL fname opt_oparen func_ret_arg opt_cparen .)
    DELIM           reduce using rule 40 (func_call_stmt -> MLHS EQUAL fname opt_oparen func_ret_arg opt_cparen .)
    newline         reduce using rule 40 (func_call_stmt -> MLHS EQUAL fname opt_oparen func_ret_arg opt_cparen .)
    KEYWORD_end     reduce using rule 40 (func_call_stmt -> MLHS EQUAL fname opt_oparen func_ret_arg opt_cparen .)
    KEYWORD_elsif   reduce using rule 40 (func_call_stmt -> MLHS EQUAL fname opt_oparen func_ret_arg opt_cparen .)
    KEYWORD_else    reduce using rule 40 (func_call_stmt -> MLHS EQUAL fname opt_oparen func_ret_arg opt_cparen .)
    $end            reduce using rule 40 (func_call_stmt -> MLHS EQUAL fname opt_oparen func_ret_arg opt_cparen .)


state 251

    (73) for_range -> INT_CONSTANTS . DOUBLEDOT INT_CONSTANTS
    (74) for_range -> INT_CONSTANTS . TRIPLEDOT INT_CONSTANTS

    DOUBLEDOT       shift and go to state 263
    TRIPLEDOT       shift and go to state 264


state 252

    (75) for_range -> VARIABLES .
    (143) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> VARIABLES . OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> VARIABLES . OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET

    KEYWORD_do      reduce using rule 75 (for_range -> VARIABLES .)
    newline         reduce using rule 75 (for_range -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 90


state 253

    (29) top_stmt -> KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range . opt_do gen_stmts opt_terms KEYWORD_end
    (62) opt_do -> . KEYWORD_do
    (63) opt_do -> . newline

    KEYWORD_do      shift and go to state 120
    newline         shift and go to state 119

    opt_do                         shift and go to state 265

state 254

    (76) for_range -> array .

    KEYWORD_do      reduce using rule 76 (for_range -> array .)
    newline         reduce using rule 76 (for_range -> array .)


state 255

    (77) for_range -> CONSTANTS .

    KEYWORD_do      reduce using rule 77 (for_range -> CONSTANTS .)
    newline         reduce using rule 77 (for_range -> CONSTANTS .)


state 256

    (48) func_stmts -> func_stmts terms . func_stmt
    (152) opt_terms -> terms .
    (154) terms -> terms . term
    (50) func_stmt -> . top_stmt
    (51) func_stmt -> . KEYWORD_return func_ret_arg
    (155) term -> . DELIM
    (156) term -> . newline
    (21) top_stmt -> . stmt
    (22) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (23) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (24) top_stmt -> . top_stmt KEYWORD_while expr3
    (25) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (26) top_stmt -> . top_stmt KEYWORD_until expr3
    (27) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (28) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (29) top_stmt -> . KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (33) stmt -> . expr
    (34) stmt -> . expr1
    (35) stmt -> . puts_stmt
    (36) stmt -> . loop_stmt
    (37) stmt -> . exit_stmt
    (38) stmt -> . func_call_stmt
    (78) expr -> . MLHS EQUAL MRHS
    (100) expr1 -> . expr3 QUESTION_MARK expr2 COLON expr2
    (101) expr1 -> . expr2
    (45) puts_stmt -> . KEYWORD_puts mrhs
    (46) puts_stmt -> . KEYWORD_puts expr
    (41) loop_stmt -> . KEYWORD_break
    (42) loop_stmt -> . KEYWORD_next
    (43) loop_stmt -> . KEYWORD_redo
    (44) exit_stmt -> . KEYWORD_exit
    (39) func_call_stmt -> . fname opt_oparen func_ret_arg opt_cparen
    (40) func_call_stmt -> . MLHS EQUAL fname opt_oparen func_ret_arg opt_cparen
    (79) MLHS -> . mlhs
    (80) MLHS -> . MLHS COMMA mlhs
    (105) expr3 -> . expr3 LOGICALOR expr4
    (106) expr3 -> . expr4
    (102) expr2 -> . expr7 DOUBLEDOT expr7
    (103) expr2 -> . expr7 TRIPLEDOT expr7
    (104) expr2 -> . expr3
    (9) fname -> . VARIABLES
    (10) fname -> . CONSTANTS
    (83) mlhs -> . VARIABLES
    (84) mlhs -> . CONSTANTS
    (85) mlhs -> . array
    (107) expr4 -> . expr4 LOGICALAND expr5
    (108) expr4 -> . expr5
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (109) expr5 -> . expr6 IFF expr6
    (110) expr5 -> . expr6 DOUBLEEQUAL expr6
    (111) expr5 -> . expr6 TRIPLEEQUAL expr6
    (112) expr5 -> . expr6 NOTEQUAL expr6
    (113) expr5 -> . expr6
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (114) expr6 -> . expr7 LESSEQUAL expr7
    (115) expr6 -> . expr7 LESS expr7
    (116) expr6 -> . expr7 GREATER expr7
    (117) expr6 -> . expr7 GREATEREQUAL expr7
    (118) expr6 -> . expr7
    (119) expr6 -> . BOOLEAN_CONSTANTS
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (157) none -> .

    KEYWORD_end     reduce using rule 152 (opt_terms -> terms .)
    KEYWORD_return  shift and go to state 236
    DELIM           shift and go to state 85
    newline         shift and go to state 84
    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 37
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 52
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 47
    KEYWORD_next    shift and go to state 30
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    VARIABLES       shift and go to state 28
    CONSTANTS       shift and go to state 22
    BOOLEAN_CONSTANTS shift and go to state 12
    OPEN_PAREN      shift and go to state 5
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    func_stmt                      shift and go to state 266
    mlhs                           shift and go to state 2
    expr11                         shift and go to state 15
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    array                          shift and go to state 26
    expr2                          shift and go to state 39
    expr3                          shift and go to state 40
    expr1                          shift and go to state 41
    expr6                          shift and go to state 42
    expr7                          shift and go to state 8
    puts_stmt                      shift and go to state 19
    expr5                          shift and go to state 44
    func_call_stmt                 shift and go to state 32
    expr8                          shift and go to state 45
    expr9                          shift and go to state 46
    expr4                          shift and go to state 10
    exit_stmt                      shift and go to state 48
    MLHS                           shift and go to state 50
    none                           shift and go to state 56
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 20
    uexpr                          shift and go to state 11
    term                           shift and go to state 141
    expr                           shift and go to state 35
    fname                          shift and go to state 43
    expr10                         shift and go to state 14
    top_stmt                       shift and go to state 235

state 257

    (8) func_defn -> KEYWORD_def fname opt_oparen arguments opt_cparen func_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 267


state 258

    (51) func_stmt -> KEYWORD_return func_ret_arg .
    (54) func_ret_arg -> func_ret_arg . COMMA func_arg_expr
    (55) func_ret_arg -> func_ret_arg . COMMA primary

    DELIM           reduce using rule 51 (func_stmt -> KEYWORD_return func_ret_arg .)
    newline         reduce using rule 51 (func_stmt -> KEYWORD_return func_ret_arg .)
    KEYWORD_end     reduce using rule 51 (func_stmt -> KEYWORD_return func_ret_arg .)
    COMMA           shift and go to state 199


state 259

    (59) elsif_tail -> KEYWORD_elsif expr3 . opt_then gen_stmts elsif_tail
    (105) expr3 -> expr3 . LOGICALOR expr4
    (60) opt_then -> . KEYWORD_then
    (61) opt_then -> . newline

    LOGICALOR       shift and go to state 104
    KEYWORD_then    shift and go to state 145
    newline         shift and go to state 144

    opt_then                       shift and go to state 268

state 260

    (57) opt_else_stmt -> none .

    KEYWORD_end     reduce using rule 57 (opt_else_stmt -> none .)


state 261

    (56) opt_else_stmt -> KEYWORD_else . gen_stmts
    (30) gen_stmts -> . top_stmt
    (31) gen_stmts -> . gen_stmts terms top_stmt
    (32) gen_stmts -> . none
    (21) top_stmt -> . stmt
    (22) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (23) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (24) top_stmt -> . top_stmt KEYWORD_while expr3
    (25) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (26) top_stmt -> . top_stmt KEYWORD_until expr3
    (27) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (28) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (29) top_stmt -> . KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (157) none -> .
    (33) stmt -> . expr
    (34) stmt -> . expr1
    (35) stmt -> . puts_stmt
    (36) stmt -> . loop_stmt
    (37) stmt -> . exit_stmt
    (38) stmt -> . func_call_stmt
    (78) expr -> . MLHS EQUAL MRHS
    (100) expr1 -> . expr3 QUESTION_MARK expr2 COLON expr2
    (101) expr1 -> . expr2
    (45) puts_stmt -> . KEYWORD_puts mrhs
    (46) puts_stmt -> . KEYWORD_puts expr
    (41) loop_stmt -> . KEYWORD_break
    (42) loop_stmt -> . KEYWORD_next
    (43) loop_stmt -> . KEYWORD_redo
    (44) exit_stmt -> . KEYWORD_exit
    (39) func_call_stmt -> . fname opt_oparen func_ret_arg opt_cparen
    (40) func_call_stmt -> . MLHS EQUAL fname opt_oparen func_ret_arg opt_cparen
    (79) MLHS -> . mlhs
    (80) MLHS -> . MLHS COMMA mlhs
    (105) expr3 -> . expr3 LOGICALOR expr4
    (106) expr3 -> . expr4
    (102) expr2 -> . expr7 DOUBLEDOT expr7
    (103) expr2 -> . expr7 TRIPLEDOT expr7
    (104) expr2 -> . expr3
    (9) fname -> . VARIABLES
    (10) fname -> . CONSTANTS
    (83) mlhs -> . VARIABLES
    (84) mlhs -> . CONSTANTS
    (85) mlhs -> . array
    (107) expr4 -> . expr4 LOGICALAND expr5
    (108) expr4 -> . expr5
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (109) expr5 -> . expr6 IFF expr6
    (110) expr5 -> . expr6 DOUBLEEQUAL expr6
    (111) expr5 -> . expr6 TRIPLEEQUAL expr6
    (112) expr5 -> . expr6 NOTEQUAL expr6
    (113) expr5 -> . expr6
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (114) expr6 -> . expr7 LESSEQUAL expr7
    (115) expr6 -> . expr7 LESS expr7
    (116) expr6 -> . expr7 GREATER expr7
    (117) expr6 -> . expr7 GREATEREQUAL expr7
    (118) expr6 -> . expr7
    (119) expr6 -> . BOOLEAN_CONSTANTS
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP

    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 37
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 52
    DELIM           reduce using rule 157 (none -> .)
    newline         reduce using rule 157 (none -> .)
    KEYWORD_end     reduce using rule 157 (none -> .)
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 47
    KEYWORD_next    shift and go to state 30
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    VARIABLES       shift and go to state 28
    CONSTANTS       shift and go to state 22
    BOOLEAN_CONSTANTS shift and go to state 12
    OPEN_PAREN      shift and go to state 5
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29

    mlhs                           shift and go to state 2
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    array                          shift and go to state 26
    expr2                          shift and go to state 39
    expr3                          shift and go to state 40
    expr1                          shift and go to state 41
    expr6                          shift and go to state 42
    expr7                          shift and go to state 8
    puts_stmt                      shift and go to state 19
    expr5                          shift and go to state 44
    func_call_stmt                 shift and go to state 32
    expr8                          shift and go to state 45
    expr9                          shift and go to state 46
    expr4                          shift and go to state 10
    exit_stmt                      shift and go to state 48
    MLHS                           shift and go to state 50
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 20
    uexpr                          shift and go to state 11
    none                           shift and go to state 102
    gen_stmts                      shift and go to state 269
    expr                           shift and go to state 35
    fname                          shift and go to state 43
    top_stmt                       shift and go to state 101

state 262

    (22) top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt . KEYWORD_end

    KEYWORD_end     shift and go to state 270


state 263

    (73) for_range -> INT_CONSTANTS DOUBLEDOT . INT_CONSTANTS

    INT_CONSTANTS   shift and go to state 271


state 264

    (74) for_range -> INT_CONSTANTS TRIPLEDOT . INT_CONSTANTS

    INT_CONSTANTS   shift and go to state 272


state 265

    (29) top_stmt -> KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do . gen_stmts opt_terms KEYWORD_end
    (30) gen_stmts -> . top_stmt
    (31) gen_stmts -> . gen_stmts terms top_stmt
    (32) gen_stmts -> . none
    (21) top_stmt -> . stmt
    (22) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (23) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (24) top_stmt -> . top_stmt KEYWORD_while expr3
    (25) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (26) top_stmt -> . top_stmt KEYWORD_until expr3
    (27) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (28) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (29) top_stmt -> . KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (157) none -> .
    (33) stmt -> . expr
    (34) stmt -> . expr1
    (35) stmt -> . puts_stmt
    (36) stmt -> . loop_stmt
    (37) stmt -> . exit_stmt
    (38) stmt -> . func_call_stmt
    (78) expr -> . MLHS EQUAL MRHS
    (100) expr1 -> . expr3 QUESTION_MARK expr2 COLON expr2
    (101) expr1 -> . expr2
    (45) puts_stmt -> . KEYWORD_puts mrhs
    (46) puts_stmt -> . KEYWORD_puts expr
    (41) loop_stmt -> . KEYWORD_break
    (42) loop_stmt -> . KEYWORD_next
    (43) loop_stmt -> . KEYWORD_redo
    (44) exit_stmt -> . KEYWORD_exit
    (39) func_call_stmt -> . fname opt_oparen func_ret_arg opt_cparen
    (40) func_call_stmt -> . MLHS EQUAL fname opt_oparen func_ret_arg opt_cparen
    (79) MLHS -> . mlhs
    (80) MLHS -> . MLHS COMMA mlhs
    (105) expr3 -> . expr3 LOGICALOR expr4
    (106) expr3 -> . expr4
    (102) expr2 -> . expr7 DOUBLEDOT expr7
    (103) expr2 -> . expr7 TRIPLEDOT expr7
    (104) expr2 -> . expr3
    (9) fname -> . VARIABLES
    (10) fname -> . CONSTANTS
    (83) mlhs -> . VARIABLES
    (84) mlhs -> . CONSTANTS
    (85) mlhs -> . array
    (107) expr4 -> . expr4 LOGICALAND expr5
    (108) expr4 -> . expr5
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (109) expr5 -> . expr6 IFF expr6
    (110) expr5 -> . expr6 DOUBLEEQUAL expr6
    (111) expr5 -> . expr6 TRIPLEEQUAL expr6
    (112) expr5 -> . expr6 NOTEQUAL expr6
    (113) expr5 -> . expr6
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (114) expr6 -> . expr7 LESSEQUAL expr7
    (115) expr6 -> . expr7 LESS expr7
    (116) expr6 -> . expr7 GREATER expr7
    (117) expr6 -> . expr7 GREATEREQUAL expr7
    (118) expr6 -> . expr7
    (119) expr6 -> . BOOLEAN_CONSTANTS
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP

    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 37
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 52
    DELIM           reduce using rule 157 (none -> .)
    newline         reduce using rule 157 (none -> .)
    KEYWORD_end     reduce using rule 157 (none -> .)
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 47
    KEYWORD_next    shift and go to state 30
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    VARIABLES       shift and go to state 28
    CONSTANTS       shift and go to state 22
    BOOLEAN_CONSTANTS shift and go to state 12
    OPEN_PAREN      shift and go to state 5
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29

    mlhs                           shift and go to state 2
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    array                          shift and go to state 26
    expr2                          shift and go to state 39
    expr3                          shift and go to state 40
    expr1                          shift and go to state 41
    expr6                          shift and go to state 42
    expr7                          shift and go to state 8
    puts_stmt                      shift and go to state 19
    expr5                          shift and go to state 44
    func_call_stmt                 shift and go to state 32
    expr8                          shift and go to state 45
    expr9                          shift and go to state 46
    expr4                          shift and go to state 10
    exit_stmt                      shift and go to state 48
    MLHS                           shift and go to state 50
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 20
    uexpr                          shift and go to state 11
    none                           shift and go to state 102
    gen_stmts                      shift and go to state 273
    expr                           shift and go to state 35
    fname                          shift and go to state 43
    top_stmt                       shift and go to state 101

state 266

    (48) func_stmts -> func_stmts terms func_stmt .

    DELIM           reduce using rule 48 (func_stmts -> func_stmts terms func_stmt .)
    newline         reduce using rule 48 (func_stmts -> func_stmts terms func_stmt .)
    KEYWORD_end     reduce using rule 48 (func_stmts -> func_stmts terms func_stmt .)


state 267

    (8) func_defn -> KEYWORD_def fname opt_oparen arguments opt_cparen func_stmts opt_terms KEYWORD_end .

    DELIM           reduce using rule 8 (func_defn -> KEYWORD_def fname opt_oparen arguments opt_cparen func_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 8 (func_defn -> KEYWORD_def fname opt_oparen arguments opt_cparen func_stmts opt_terms KEYWORD_end .)
    $end            reduce using rule 8 (func_defn -> KEYWORD_def fname opt_oparen arguments opt_cparen func_stmts opt_terms KEYWORD_end .)


state 268

    (59) elsif_tail -> KEYWORD_elsif expr3 opt_then . gen_stmts elsif_tail
    (30) gen_stmts -> . top_stmt
    (31) gen_stmts -> . gen_stmts terms top_stmt
    (32) gen_stmts -> . none
    (21) top_stmt -> . stmt
    (22) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (23) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (24) top_stmt -> . top_stmt KEYWORD_while expr3
    (25) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (26) top_stmt -> . top_stmt KEYWORD_until expr3
    (27) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (28) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (29) top_stmt -> . KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (157) none -> .
    (33) stmt -> . expr
    (34) stmt -> . expr1
    (35) stmt -> . puts_stmt
    (36) stmt -> . loop_stmt
    (37) stmt -> . exit_stmt
    (38) stmt -> . func_call_stmt
    (78) expr -> . MLHS EQUAL MRHS
    (100) expr1 -> . expr3 QUESTION_MARK expr2 COLON expr2
    (101) expr1 -> . expr2
    (45) puts_stmt -> . KEYWORD_puts mrhs
    (46) puts_stmt -> . KEYWORD_puts expr
    (41) loop_stmt -> . KEYWORD_break
    (42) loop_stmt -> . KEYWORD_next
    (43) loop_stmt -> . KEYWORD_redo
    (44) exit_stmt -> . KEYWORD_exit
    (39) func_call_stmt -> . fname opt_oparen func_ret_arg opt_cparen
    (40) func_call_stmt -> . MLHS EQUAL fname opt_oparen func_ret_arg opt_cparen
    (79) MLHS -> . mlhs
    (80) MLHS -> . MLHS COMMA mlhs
    (105) expr3 -> . expr3 LOGICALOR expr4
    (106) expr3 -> . expr4
    (102) expr2 -> . expr7 DOUBLEDOT expr7
    (103) expr2 -> . expr7 TRIPLEDOT expr7
    (104) expr2 -> . expr3
    (9) fname -> . VARIABLES
    (10) fname -> . CONSTANTS
    (83) mlhs -> . VARIABLES
    (84) mlhs -> . CONSTANTS
    (85) mlhs -> . array
    (107) expr4 -> . expr4 LOGICALAND expr5
    (108) expr4 -> . expr5
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (109) expr5 -> . expr6 IFF expr6
    (110) expr5 -> . expr6 DOUBLEEQUAL expr6
    (111) expr5 -> . expr6 TRIPLEEQUAL expr6
    (112) expr5 -> . expr6 NOTEQUAL expr6
    (113) expr5 -> . expr6
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (114) expr6 -> . expr7 LESSEQUAL expr7
    (115) expr6 -> . expr7 LESS expr7
    (116) expr6 -> . expr7 GREATER expr7
    (117) expr6 -> . expr7 GREATEREQUAL expr7
    (118) expr6 -> . expr7
    (119) expr6 -> . BOOLEAN_CONSTANTS
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP

    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 37
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 52
    KEYWORD_elsif   reduce using rule 157 (none -> .)
    DELIM           reduce using rule 157 (none -> .)
    newline         reduce using rule 157 (none -> .)
    KEYWORD_else    reduce using rule 157 (none -> .)
    KEYWORD_end     reduce using rule 157 (none -> .)
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 47
    KEYWORD_next    shift and go to state 30
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    VARIABLES       shift and go to state 28
    CONSTANTS       shift and go to state 22
    BOOLEAN_CONSTANTS shift and go to state 12
    OPEN_PAREN      shift and go to state 5
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29

    mlhs                           shift and go to state 2
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    array                          shift and go to state 26
    expr2                          shift and go to state 39
    expr3                          shift and go to state 40
    expr1                          shift and go to state 41
    expr6                          shift and go to state 42
    expr7                          shift and go to state 8
    puts_stmt                      shift and go to state 19
    expr5                          shift and go to state 44
    func_call_stmt                 shift and go to state 32
    expr8                          shift and go to state 45
    expr9                          shift and go to state 46
    expr4                          shift and go to state 10
    exit_stmt                      shift and go to state 48
    MLHS                           shift and go to state 50
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 20
    uexpr                          shift and go to state 11
    none                           shift and go to state 102
    gen_stmts                      shift and go to state 274
    expr                           shift and go to state 35
    fname                          shift and go to state 43
    top_stmt                       shift and go to state 101

state 269

    (56) opt_else_stmt -> KEYWORD_else gen_stmts .
    (31) gen_stmts -> gen_stmts . terms top_stmt
    (153) terms -> . term
    (154) terms -> . terms term
    (155) term -> . DELIM
    (156) term -> . newline

    KEYWORD_end     reduce using rule 56 (opt_else_stmt -> KEYWORD_else gen_stmts .)
    DELIM           shift and go to state 85
    newline         shift and go to state 84

    term                           shift and go to state 82
    terms                          shift and go to state 275

state 270

    (22) top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end .

    KEYWORD_while   reduce using rule 22 (top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end .)
    KEYWORD_until   reduce using rule 22 (top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end .)
    DELIM           reduce using rule 22 (top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end .)
    newline         reduce using rule 22 (top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end .)
    KEYWORD_end     reduce using rule 22 (top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end .)
    KEYWORD_elsif   reduce using rule 22 (top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end .)
    KEYWORD_else    reduce using rule 22 (top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end .)
    $end            reduce using rule 22 (top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end .)


state 271

    (73) for_range -> INT_CONSTANTS DOUBLEDOT INT_CONSTANTS .

    KEYWORD_do      reduce using rule 73 (for_range -> INT_CONSTANTS DOUBLEDOT INT_CONSTANTS .)
    newline         reduce using rule 73 (for_range -> INT_CONSTANTS DOUBLEDOT INT_CONSTANTS .)


state 272

    (74) for_range -> INT_CONSTANTS TRIPLEDOT INT_CONSTANTS .

    KEYWORD_do      reduce using rule 74 (for_range -> INT_CONSTANTS TRIPLEDOT INT_CONSTANTS .)
    newline         reduce using rule 74 (for_range -> INT_CONSTANTS TRIPLEDOT INT_CONSTANTS .)


state 273

    (29) top_stmt -> KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do gen_stmts . opt_terms KEYWORD_end
    (31) gen_stmts -> gen_stmts . terms top_stmt
    (151) opt_terms -> . none
    (152) opt_terms -> . terms
    (153) terms -> . term
    (154) terms -> . terms term
    (157) none -> .
    (155) term -> . DELIM
    (156) term -> . newline

    KEYWORD_end     reduce using rule 157 (none -> .)
    DELIM           shift and go to state 85
    newline         shift and go to state 84

    none                           shift and go to state 86
    terms                          shift and go to state 161
    term                           shift and go to state 82
    opt_terms                      shift and go to state 276

state 274

    (59) elsif_tail -> KEYWORD_elsif expr3 opt_then gen_stmts . elsif_tail
    (31) gen_stmts -> gen_stmts . terms top_stmt
    (58) elsif_tail -> . none
    (59) elsif_tail -> . KEYWORD_elsif expr3 opt_then gen_stmts elsif_tail
    (153) terms -> . term
    (154) terms -> . terms term
    (157) none -> .
    (155) term -> . DELIM
    (156) term -> . newline

    KEYWORD_elsif   shift and go to state 244
    KEYWORD_else    reduce using rule 157 (none -> .)
    KEYWORD_end     reduce using rule 157 (none -> .)
    DELIM           shift and go to state 85
    newline         shift and go to state 84

    none                           shift and go to state 243
    terms                          shift and go to state 275
    term                           shift and go to state 82
    elsif_tail                     shift and go to state 277

state 275

    (31) gen_stmts -> gen_stmts terms . top_stmt
    (154) terms -> terms . term
    (21) top_stmt -> . stmt
    (22) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (23) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (24) top_stmt -> . top_stmt KEYWORD_while expr3
    (25) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (26) top_stmt -> . top_stmt KEYWORD_until expr3
    (27) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (28) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (29) top_stmt -> . KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (155) term -> . DELIM
    (156) term -> . newline
    (33) stmt -> . expr
    (34) stmt -> . expr1
    (35) stmt -> . puts_stmt
    (36) stmt -> . loop_stmt
    (37) stmt -> . exit_stmt
    (38) stmt -> . func_call_stmt
    (78) expr -> . MLHS EQUAL MRHS
    (100) expr1 -> . expr3 QUESTION_MARK expr2 COLON expr2
    (101) expr1 -> . expr2
    (45) puts_stmt -> . KEYWORD_puts mrhs
    (46) puts_stmt -> . KEYWORD_puts expr
    (41) loop_stmt -> . KEYWORD_break
    (42) loop_stmt -> . KEYWORD_next
    (43) loop_stmt -> . KEYWORD_redo
    (44) exit_stmt -> . KEYWORD_exit
    (39) func_call_stmt -> . fname opt_oparen func_ret_arg opt_cparen
    (40) func_call_stmt -> . MLHS EQUAL fname opt_oparen func_ret_arg opt_cparen
    (79) MLHS -> . mlhs
    (80) MLHS -> . MLHS COMMA mlhs
    (105) expr3 -> . expr3 LOGICALOR expr4
    (106) expr3 -> . expr4
    (102) expr2 -> . expr7 DOUBLEDOT expr7
    (103) expr2 -> . expr7 TRIPLEDOT expr7
    (104) expr2 -> . expr3
    (9) fname -> . VARIABLES
    (10) fname -> . CONSTANTS
    (83) mlhs -> . VARIABLES
    (84) mlhs -> . CONSTANTS
    (85) mlhs -> . array
    (107) expr4 -> . expr4 LOGICALAND expr5
    (108) expr4 -> . expr5
    (120) expr7 -> . expr7 BITXOR expr8
    (121) expr7 -> . expr7 PIPE expr8
    (122) expr7 -> . expr8
    (143) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (144) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (145) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (109) expr5 -> . expr6 IFF expr6
    (110) expr5 -> . expr6 DOUBLEEQUAL expr6
    (111) expr5 -> . expr6 TRIPLEEQUAL expr6
    (112) expr5 -> . expr6 NOTEQUAL expr6
    (113) expr5 -> . expr6
    (123) expr8 -> . expr8 BITAND expr9
    (124) expr8 -> . expr9
    (114) expr6 -> . expr7 LESSEQUAL expr7
    (115) expr6 -> . expr7 LESS expr7
    (116) expr6 -> . expr7 GREATER expr7
    (117) expr6 -> . expr7 GREATEREQUAL expr7
    (118) expr6 -> . expr7
    (119) expr6 -> . BOOLEAN_CONSTANTS
    (125) expr9 -> . expr9 SHIFTL expr10
    (126) expr9 -> . expr9 SHIFTR expr10
    (127) expr9 -> . expr10
    (128) expr10 -> . expr10 PLUS expr11
    (129) expr10 -> . expr10 MINUS expr11
    (130) expr10 -> . expr11
    (131) expr11 -> . expr11 MULTIPLY expr12
    (132) expr11 -> . expr11 DIV expr12
    (133) expr11 -> . expr11 MOD expr12
    (134) expr11 -> . expr12
    (135) expr12 -> . expr13 DOUBLESTAR expr12
    (136) expr12 -> . expr13
    (137) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (138) expr13 -> . uexpr INT_CONSTANTS
    (139) expr13 -> . uexpr FLOAT_CONSTANTS
    (140) expr13 -> . CONSTANTS
    (141) expr13 -> . VARIABLES
    (142) expr13 -> . array
    (146) uexpr -> . none
    (147) uexpr -> . PLUS
    (148) uexpr -> . MINUS
    (149) uexpr -> . BITNOT
    (150) uexpr -> . BITCOMP
    (157) none -> .

    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 37
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 52
    DELIM           shift and go to state 85
    newline         shift and go to state 84
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 47
    KEYWORD_next    shift and go to state 30
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    VARIABLES       shift and go to state 28
    CONSTANTS       shift and go to state 22
    BOOLEAN_CONSTANTS shift and go to state 12
    OPEN_PAREN      shift and go to state 5
    PLUS            shift and go to state 7
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 38
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 157 (none -> .)
    FLOAT_CONSTANTS reduce using rule 157 (none -> .)

    mlhs                           shift and go to state 2
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    array                          shift and go to state 26
    expr2                          shift and go to state 39
    expr3                          shift and go to state 40
    expr1                          shift and go to state 41
    expr6                          shift and go to state 42
    expr7                          shift and go to state 8
    puts_stmt                      shift and go to state 19
    expr5                          shift and go to state 44
    func_call_stmt                 shift and go to state 32
    expr8                          shift and go to state 45
    expr9                          shift and go to state 46
    expr4                          shift and go to state 10
    exit_stmt                      shift and go to state 48
    MLHS                           shift and go to state 50
    none                           shift and go to state 56
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 20
    uexpr                          shift and go to state 11
    term                           shift and go to state 141
    expr                           shift and go to state 35
    fname                          shift and go to state 43
    top_stmt                       shift and go to state 202

state 276

    (29) top_stmt -> KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do gen_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 278


state 277

    (59) elsif_tail -> KEYWORD_elsif expr3 opt_then gen_stmts elsif_tail .

    KEYWORD_else    reduce using rule 59 (elsif_tail -> KEYWORD_elsif expr3 opt_then gen_stmts elsif_tail .)
    KEYWORD_end     reduce using rule 59 (elsif_tail -> KEYWORD_elsif expr3 opt_then gen_stmts elsif_tail .)


state 278

    (29) top_stmt -> KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .

    KEYWORD_while   reduce using rule 29 (top_stmt -> KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_until   reduce using rule 29 (top_stmt -> KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    DELIM           reduce using rule 29 (top_stmt -> KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 29 (top_stmt -> KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_end     reduce using rule 29 (top_stmt -> KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_elsif   reduce using rule 29 (top_stmt -> KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_else    reduce using rule 29 (top_stmt -> KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    $end            reduce using rule 29 (top_stmt -> KEYWORD_for opt_oparen multi_var opt_cparen KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)

