Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    KEYWORD_unless
    BLOCK_END
    KEYWORD___ENCODING__
    BITANDEQUAL
    SQUOTES
    KEYWORD_END
    KEYWORD_self
    KEYWORD_when
    MINUSEQUAL
    KEYWORD_nil
    OR
    DIVEQUAL
    KEYWORD_or
    LOGICALANDEQUAL
    KEYWORD_retry
    KEYWORD_undef
    SIGIL_DOLLAR
    DOUBLE_COLON
    DOUBLESTAREQUAL
    KEYWORD_false
    KEYWORD_definedQ
    SHIFTLEQUAL
    AND
    NOT
    KEYWORD_not
    KEYWORD_yield
    KEYWORD_ensure
    MODEQUAL
    QUESTIONCOLON
    KEYWORD_true
    LOGICALOREQUAL
    KEYWORD___END__
    PLUSEQUAL
    KEYWORD_super
    KEYWORD_alias
    MULTIPLYEQUAL
    SHIFTREQUAL
    KEYWORD___LINE__
    KEYWORD_BEGIN
    BLOCK_BEGIN
    DQUOTES
    PIPEEQUAL
    KEYWORD_and
    KEYWORD___FILE__
    KEYWORD_rescue
    KEYWORD_module
    DOLLAR
    BACK_SLASH
    KEYWORD_case
    BITXOREQUAL

Grammar

Rule 0     S' -> program
Rule 1     program -> top_top_compstmt
Rule 2     top_top_compstmt -> statements opt_terms
Rule 3     statements -> statement
Rule 4     statements -> statements terms statement
Rule 5     statement -> top_compstmt
Rule 6     statement -> func_defn
Rule 7     statement -> class_defn
Rule 8     statement -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
Rule 9     statement -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN
Rule 10    statement -> VARIABLES DOT VARIABLES arguments
Rule 11    statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
Rule 12    statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
Rule 13    statement -> CONSTANTS DOT KEYWORD_new arguments
Rule 14    func_defn -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN func_stmts opt_terms KEYWORD_end
Rule 15    func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN func_stmts opt_terms KEYWORD_end
Rule 16    func_defn -> KEYWORD_def fname arguments func_stmts opt_terms KEYWORD_end
Rule 17    class_defn -> KEYWORD_class CONSTANTS newline class_stmts opt_terms KEYWORD_end
Rule 18    class_stmts -> class_stmt
Rule 19    class_stmts -> class_stmts terms class_stmt
Rule 20    class_stmts -> none
Rule 21    class_stmt -> class_mlhs EQUAL class_mrhs
Rule 22    class_stmt -> class_func
Rule 23    class_mrhs -> literal
Rule 24    literal -> INT_CONSTANTS
Rule 25    literal -> FLOAT_CONSTANTS
Rule 26    literal -> STRING_CONSTANTS
Rule 27    literal -> BOOLEAN_CONSTANTS
Rule 28    literal -> CHAR_CONSTANTS
Rule 29    literal -> SIGIL_AT
Rule 30    literal -> SIGIL_DOUBLE_AT
Rule 31    class_mlhs -> class_mlhs terms SIGIL_DOUBLE_AT
Rule 32    class_mlhs -> SIGIL_DOUBLE_AT
Rule 33    class_func -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
Rule 34    class_func -> KEYWORD_def fname arguments class_method_stmts opt_terms KEYWORD_end
Rule 35    class_func -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
Rule 36    class_method_stmts -> class_method_stmt
Rule 37    class_method_stmts -> class_method_stmts terms class_method_stmt
Rule 38    class_method_stmts -> none
Rule 39    class_method_stmt -> class_method_mlhs EQUAL class_method_mrhs
Rule 40    class_method_stmt -> KEYWORD_return class_method_ret_arg
Rule 41    class_method_stmt -> puts_stmt
Rule 42    class_method_mlhs -> class_method_mlhs terms SIGIL_AT
Rule 43    class_method_mlhs -> SIGIL_AT
Rule 44    class_method_mlhs -> SIGIL_DOUBLE_AT
Rule 45    class_method_mrhs -> literal
Rule 46    class_method_mrhs -> VARIABLES
Rule 47    class_method_ret_arg -> class_method_arg_expr
Rule 48    class_method_ret_arg -> literal
Rule 49    class_method_ret_arg -> class_method_ret_arg COMMA class_method_arg_expr
Rule 50    class_method_ret_arg -> class_method_ret_arg COMMA literal
Rule 51    class_method_arg_expr -> SIGIL_AT EQUAL literal
Rule 52    class_method_arg_expr -> SIGIL_DOUBLE_AT EQUAL literal
Rule 53    fname -> VARIABLES
Rule 54    fname -> CONSTANTS
Rule 55    arguments -> arguments COMMA VARIABLES
Rule 56    arguments -> arguments COMMA CONSTANTS
Rule 57    arguments -> arguments COMMA func_arg_expr
Rule 58    arguments -> VARIABLES
Rule 59    arguments -> CONSTANTS
Rule 60    arguments -> func_arg_expr
Rule 61    arguments -> newline
Rule 62    func_arg_expr -> VARIABLES EQUAL primary
Rule 63    func_arg_expr -> CONSTANTS EQUAL primary
Rule 64    top_compstmt -> top_stmts
Rule 65    top_stmts -> top_stmt
Rule 66    top_stmt -> stmt
Rule 67    top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
Rule 68    top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
Rule 69    top_stmt -> top_stmt KEYWORD_while expr3
Rule 70    top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
Rule 71    top_stmt -> top_stmt KEYWORD_until expr3
Rule 72    top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
Rule 73    top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
Rule 74    top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
Rule 75    top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
Rule 76    gen_stmts -> top_stmt
Rule 77    gen_stmts -> gen_stmts terms top_stmt
Rule 78    gen_stmts -> none
Rule 79    stmt -> expr
Rule 80    stmt -> expr1
Rule 81    stmt -> puts_stmt
Rule 82    stmt -> loop_stmt
Rule 83    stmt -> exit_stmt
Rule 84    stmt -> func_call_stmt
Rule 85    func_call_stmt -> fname OPEN_PAREN func_ret_arg CLOSE_PAREN
Rule 86    func_call_stmt -> fname func_ret_arg
Rule 87    func_call_stmt -> MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
Rule 88    func_call_stmt -> MLHS EQUAL fname func_ret_arg
Rule 89    loop_stmt -> KEYWORD_break
Rule 90    loop_stmt -> KEYWORD_next
Rule 91    loop_stmt -> KEYWORD_redo
Rule 92    exit_stmt -> KEYWORD_exit
Rule 93    puts_stmt -> KEYWORD_puts mrhs
Rule 94    puts_stmt -> KEYWORD_puts expr
Rule 95    func_stmts -> func_stmt
Rule 96    func_stmts -> func_stmts terms func_stmt
Rule 97    func_stmts -> none
Rule 98    func_stmt -> top_stmt
Rule 99    func_stmt -> KEYWORD_return func_ret_arg
Rule 100   func_ret_arg -> func_arg_expr
Rule 101   func_ret_arg -> primary
Rule 102   func_ret_arg -> func_ret_arg COMMA func_arg_expr
Rule 103   func_ret_arg -> func_ret_arg COMMA primary
Rule 104   opt_else_stmt -> KEYWORD_else gen_stmts opt_terms
Rule 105   opt_else_stmt -> none
Rule 106   elsif_tail -> none
Rule 107   elsif_tail -> KEYWORD_elsif expr3 opt_then gen_stmts opt_terms elsif_tail
Rule 108   opt_then -> KEYWORD_then
Rule 109   opt_then -> newline
Rule 110   opt_do -> KEYWORD_do
Rule 111   opt_do -> newline
Rule 112   multi_var -> VARIABLES
Rule 113   multi_var -> CONSTANTS
Rule 114   multi_var -> array
Rule 115   multi_var -> multi_var COMMA VARIABLES
Rule 116   multi_var -> multi_var COMMA CONSTANTS
Rule 117   for_range -> OPEN_PAREN INT_CONSTANTS DOUBLEDOT INT_CONSTANTS CLOSE_PAREN
Rule 118   for_range -> INT_CONSTANTS DOUBLEDOT INT_CONSTANTS
Rule 119   for_range -> OPEN_PAREN INT_CONSTANTS TRIPLEDOT INT_CONSTANTS CLOSE_PAREN
Rule 120   for_range -> INT_CONSTANTS TRIPLEDOT INT_CONSTANTS
Rule 121   for_range -> VARIABLES
Rule 122   for_range -> array
Rule 123   for_range -> CONSTANTS
Rule 124   expr -> MLHS EQUAL MRHS
Rule 125   MLHS -> mlhs
Rule 126   MLHS -> MLHS COMMA mlhs
Rule 127   MRHS -> mrhs
Rule 128   MRHS -> MRHS COMMA mrhs
Rule 129   mlhs -> VARIABLES
Rule 130   mlhs -> CONSTANTS
Rule 131   mlhs -> array
Rule 132   mrhs -> expr1
Rule 133   mrhs -> str_expr
Rule 134   mrhs -> KEYWORD_gets
Rule 135   mrhs -> OPEN_BRACKET func_ret_arg CLOSE_BRACKET
Rule 136   mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
Rule 137   mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN
Rule 138   mrhs -> VARIABLES DOT VARIABLES
Rule 139   mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
Rule 140   mrhs -> CONSTANTS DOT KEYWORD_new
Rule 141   mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
Rule 142   str_expr -> str_expr PLUS STRING_CONSTANTS
Rule 143   str_expr -> STRING_CONSTANTS
Rule 144   primary -> INT_CONSTANTS
Rule 145   primary -> FLOAT_CONSTANTS
Rule 146   primary -> STRING_CONSTANTS
Rule 147   primary -> CHAR_CONSTANTS
Rule 148   primary -> BOOLEAN_CONSTANTS
Rule 149   primary -> CONSTANTS
Rule 150   primary -> VARIABLES
Rule 151   primary -> array
Rule 152   expr1 -> expr3 QUESTION_MARK expr2 COLON expr2
Rule 153   expr1 -> expr2
Rule 154   expr2 -> expr7 DOUBLEDOT expr7
Rule 155   expr2 -> expr7 TRIPLEDOT expr7
Rule 156   expr2 -> expr3
Rule 157   expr3 -> expr3 LOGICALOR expr4
Rule 158   expr3 -> expr4
Rule 159   expr4 -> expr4 LOGICALAND expr5
Rule 160   expr4 -> expr5
Rule 161   expr5 -> expr6 IFF expr6
Rule 162   expr5 -> expr6 DOUBLEEQUAL expr6
Rule 163   expr5 -> expr6 TRIPLEEQUAL expr6
Rule 164   expr5 -> expr6 NOTEQUAL expr6
Rule 165   expr5 -> expr6
Rule 166   expr6 -> expr7 LESSEQUAL expr7
Rule 167   expr6 -> expr7 LESS expr7
Rule 168   expr6 -> expr7 GREATER expr7
Rule 169   expr6 -> expr7 GREATEREQUAL expr7
Rule 170   expr6 -> expr7
Rule 171   expr6 -> BOOLEAN_CONSTANTS
Rule 172   expr7 -> expr7 BITXOR expr8
Rule 173   expr7 -> expr7 PIPE expr8
Rule 174   expr7 -> expr8
Rule 175   expr8 -> expr8 BITAND expr9
Rule 176   expr8 -> expr9
Rule 177   expr9 -> expr9 SHIFTL expr10
Rule 178   expr9 -> expr9 SHIFTR expr10
Rule 179   expr9 -> expr10
Rule 180   expr10 -> expr10 PLUS expr11
Rule 181   expr10 -> expr10 MINUS expr11
Rule 182   expr10 -> expr11
Rule 183   expr11 -> expr11 MULTIPLY expr12
Rule 184   expr11 -> expr11 DIV expr12
Rule 185   expr11 -> expr11 MOD expr12
Rule 186   expr11 -> expr12
Rule 187   expr12 -> expr13 DOUBLESTAR expr12
Rule 188   expr12 -> expr13
Rule 189   expr13 -> OPEN_PAREN expr1 CLOSE_PAREN
Rule 190   expr13 -> uexpr INT_CONSTANTS
Rule 191   expr13 -> uexpr FLOAT_CONSTANTS
Rule 192   expr13 -> CONSTANTS
Rule 193   expr13 -> VARIABLES
Rule 194   expr13 -> array
Rule 195   array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
Rule 196   array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
Rule 197   array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
Rule 198   uexpr -> none
Rule 199   uexpr -> PLUS
Rule 200   uexpr -> MINUS
Rule 201   uexpr -> BITNOT
Rule 202   uexpr -> BITCOMP
Rule 203   opt_terms -> none
Rule 204   opt_terms -> terms
Rule 205   terms -> term
Rule 206   terms -> terms term
Rule 207   term -> DELIM
Rule 208   term -> newline
Rule 209   none -> <empty>

Terminals, with rules where they appear

AND                  : 
BACK_SLASH           : 
BITAND               : 175
BITANDEQUAL          : 
BITCOMP              : 202
BITNOT               : 201
BITXOR               : 172
BITXOREQUAL          : 
BLOCK_BEGIN          : 
BLOCK_END            : 
BOOLEAN_CONSTANTS    : 27 148 171
CHAR_CONSTANTS       : 28 147
CLOSE_BRACKET        : 135 195 196 197
CLOSE_PAREN          : 8 9 11 12 14 15 33 35 74 85 87 117 119 136 137 139 141 189
COLON                : 152
COMMA                : 49 50 55 56 57 102 103 115 116 126 128
CONSTANTS            : 11 12 13 17 54 56 59 63 113 116 123 130 139 140 141 149 192
DELIM                : 207
DIV                  : 184
DIVEQUAL             : 
DOLLAR               : 
DOT                  : 8 9 10 11 12 13 136 137 138 139 140 141
DOUBLEDOT            : 117 118 154 196
DOUBLEEQUAL          : 162
DOUBLESTAR           : 187
DOUBLESTAREQUAL      : 
DOUBLE_COLON         : 
DQUOTES              : 
EQUAL                : 21 39 51 52 62 63 87 88 124
FLOAT_CONSTANTS      : 25 145 191
GREATER              : 168
GREATEREQUAL         : 169
IFF                  : 161
INT_CONSTANTS        : 24 117 117 118 118 119 119 120 120 144 190
KEYWORD_BEGIN        : 
KEYWORD_END          : 
KEYWORD___ENCODING__ : 
KEYWORD___END__      : 
KEYWORD___FILE__     : 
KEYWORD___LINE__     : 
KEYWORD_alias        : 
KEYWORD_and          : 
KEYWORD_begin        : 70 73
KEYWORD_break        : 89
KEYWORD_case         : 
KEYWORD_class        : 17
KEYWORD_def          : 14 15 16 33 34 35
KEYWORD_definedQ     : 
KEYWORD_do           : 110
KEYWORD_else         : 104
KEYWORD_elsif        : 107
KEYWORD_end          : 14 15 16 17 33 34 35 67 68 70 72 73 74 75
KEYWORD_ensure       : 
KEYWORD_exit         : 92
KEYWORD_false        : 
KEYWORD_for          : 74 75
KEYWORD_gets         : 134
KEYWORD_if           : 67
KEYWORD_in           : 74 75
KEYWORD_module       : 
KEYWORD_new          : 11 12 13 139 140 141
KEYWORD_next         : 90
KEYWORD_nil          : 
KEYWORD_not          : 
KEYWORD_or           : 
KEYWORD_puts         : 93 94
KEYWORD_redo         : 91
KEYWORD_rescue       : 
KEYWORD_retry        : 
KEYWORD_return       : 40 99
KEYWORD_self         : 
KEYWORD_super        : 
KEYWORD_then         : 108
KEYWORD_true         : 
KEYWORD_undef        : 
KEYWORD_unless       : 
KEYWORD_until        : 71 72 73
KEYWORD_when         : 
KEYWORD_while        : 68 69 70
KEYWORD_yield        : 
LESS                 : 167
LESSEQUAL            : 166
LOGICALAND           : 159
LOGICALANDEQUAL      : 
LOGICALOR            : 157
LOGICALOREQUAL       : 
MINUS                : 181 200
MINUSEQUAL           : 
MOD                  : 185
MODEQUAL             : 
MULTIPLY             : 183
MULTIPLYEQUAL        : 
NOT                  : 
NOTEQUAL             : 164
OPEN_BRACKET         : 135 195 196 197
OPEN_PAREN           : 8 9 11 12 14 15 33 35 74 85 87 117 119 136 137 139 141 189
OR                   : 
PIPE                 : 173
PIPEEQUAL            : 
PLUS                 : 142 180 199
PLUSEQUAL            : 
QUESTIONCOLON        : 
QUESTION_MARK        : 152
SHIFTL               : 177
SHIFTLEQUAL          : 
SHIFTR               : 178
SHIFTREQUAL          : 
SIGIL_AT             : 29 42 43 51
SIGIL_DOLLAR         : 
SIGIL_DOUBLE_AT      : 30 31 32 44 52
SQUOTES              : 
STRING_CONSTANTS     : 26 142 143 146
TRIPLEDOT            : 119 120 155 197
TRIPLEEQUAL          : 163
VARIABLES            : 8 8 9 9 10 10 46 53 55 58 62 112 115 121 129 136 136 137 137 138 138 150 193 195 196 197
error                : 
newline              : 17 61 109 111 208

Nonterminals, with rules where they appear

MLHS                 : 87 88 124 126
MRHS                 : 124 128
arguments            : 8 10 11 13 14 16 33 34 55 56 57 136 139
array                : 114 122 131 151 194
class_defn           : 7
class_func           : 22
class_method_arg_expr : 47 49
class_method_mlhs    : 39 42
class_method_mrhs    : 39
class_method_ret_arg : 40 49 50
class_method_stmt    : 36 37
class_method_stmts   : 33 34 35 37
class_mlhs           : 21 31
class_mrhs           : 21
class_stmt           : 18 19
class_stmts          : 17 19
elsif_tail           : 67 107
exit_stmt            : 83
expr                 : 79 94
expr1                : 80 132 189
expr10               : 177 178 179 180 181
expr11               : 180 181 182 183 184 185
expr12               : 183 184 185 186 187
expr13               : 187 188
expr2                : 152 152 153
expr3                : 67 68 69 70 71 72 73 107 152 156 157
expr4                : 157 158 159
expr5                : 159 160
expr6                : 161 161 162 162 163 163 164 164 165
expr7                : 154 154 155 155 166 166 167 167 168 168 169 169 170 172 173 195 196 196 197 197
expr8                : 172 173 174 175
expr9                : 175 176 177 178
fname                : 14 15 16 33 34 35 85 86 87 88
for_range            : 74 75
func_arg_expr        : 57 60 100 102
func_call_stmt       : 84
func_defn            : 6
func_ret_arg         : 85 86 87 88 99 102 103 135
func_stmt            : 95 96
func_stmts           : 14 15 16 96
gen_stmts            : 67 68 70 72 73 74 75 77 104 107
literal              : 23 45 48 50 51 52
loop_stmt            : 82
mlhs                 : 125 126
mrhs                 : 93 127 128
multi_var            : 74 75 115 116
none                 : 20 38 78 97 105 106 198 203
opt_do               : 68 72 74 75
opt_else_stmt        : 67
opt_terms            : 2 14 15 16 17 33 34 35 67 68 70 72 73 74 75 104 107
opt_then             : 67 107
primary              : 62 63 101 103
program              : 0
puts_stmt            : 41 81
statement            : 3 4
statements           : 2 4
stmt                 : 66
str_expr             : 133 142
term                 : 205 206
terms                : 4 19 31 37 42 77 96 204 206
top_compstmt         : 5
top_stmt             : 65 69 71 76 77 98
top_stmts            : 64
top_top_compstmt     : 1
uexpr                : 190 191

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . top_top_compstmt
    (2) top_top_compstmt -> . statements opt_terms
    (3) statements -> . statement
    (4) statements -> . statements terms statement
    (5) statement -> . top_compstmt
    (6) statement -> . func_defn
    (7) statement -> . class_defn
    (8) statement -> . VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (9) statement -> . VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (10) statement -> . VARIABLES DOT VARIABLES arguments
    (11) statement -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (12) statement -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (13) statement -> . CONSTANTS DOT KEYWORD_new arguments
    (64) top_compstmt -> . top_stmts
    (14) func_defn -> . KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN func_stmts opt_terms KEYWORD_end
    (15) func_defn -> . KEYWORD_def fname OPEN_PAREN CLOSE_PAREN func_stmts opt_terms KEYWORD_end
    (16) func_defn -> . KEYWORD_def fname arguments func_stmts opt_terms KEYWORD_end
    (17) class_defn -> . KEYWORD_class CONSTANTS newline class_stmts opt_terms KEYWORD_end
    (65) top_stmts -> . top_stmt
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . MLHS EQUAL MRHS
    (152) expr1 -> . expr3 QUESTION_MARK expr2 COLON expr2
    (153) expr1 -> . expr2
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . MLHS EQUAL fname func_ret_arg
    (125) MLHS -> . mlhs
    (126) MLHS -> . MLHS COMMA mlhs
    (157) expr3 -> . expr3 LOGICALOR expr4
    (158) expr3 -> . expr4
    (154) expr2 -> . expr7 DOUBLEDOT expr7
    (155) expr2 -> . expr7 TRIPLEDOT expr7
    (156) expr2 -> . expr3
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (129) mlhs -> . VARIABLES
    (130) mlhs -> . CONSTANTS
    (131) mlhs -> . array
    (159) expr4 -> . expr4 LOGICALAND expr5
    (160) expr4 -> . expr5
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (161) expr5 -> . expr6 IFF expr6
    (162) expr5 -> . expr6 DOUBLEEQUAL expr6
    (163) expr5 -> . expr6 TRIPLEEQUAL expr6
    (164) expr5 -> . expr6 NOTEQUAL expr6
    (165) expr5 -> . expr6
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (166) expr6 -> . expr7 LESSEQUAL expr7
    (167) expr6 -> . expr7 LESS expr7
    (168) expr6 -> . expr7 GREATER expr7
    (169) expr6 -> . expr7 GREATEREQUAL expr7
    (170) expr6 -> . expr7
    (171) expr6 -> . BOOLEAN_CONSTANTS
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (209) none -> .

    VARIABLES       shift and go to state 29
    CONSTANTS       shift and go to state 23
    KEYWORD_def     shift and go to state 22
    KEYWORD_class   shift and go to state 40
    KEYWORD_if      shift and go to state 28
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 39
    KEYWORD_until   shift and go to state 26
    KEYWORD_for     shift and go to state 54
    KEYWORD_puts    shift and go to state 34
    KEYWORD_break   shift and go to state 50
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 24
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 31
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    statements                     shift and go to state 25
    mlhs                           shift and go to state 2
    func_defn                      shift and go to state 38
    puts_stmt                      shift and go to state 19
    expr11                         shift and go to state 15
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    top_stmts                      shift and go to state 18
    array                          shift and go to state 27
    expr2                          shift and go to state 42
    expr3                          shift and go to state 43
    program                        shift and go to state 5
    expr6                          shift and go to state 45
    fname                          shift and go to state 46
    expr5                          shift and go to state 47
    func_call_stmt                 shift and go to state 33
    expr7                          shift and go to state 7
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    expr4                          shift and go to state 8
    statement                      shift and go to state 32
    exit_stmt                      shift and go to state 51
    top_compstmt                   shift and go to state 20
    MLHS                           shift and go to state 52
    stmt                           shift and go to state 21
    loop_stmt                      shift and go to state 9
    uexpr                          shift and go to state 10
    none                           shift and go to state 35
    expr                           shift and go to state 36
    top_top_compstmt               shift and go to state 53
    class_defn                     shift and go to state 37
    expr10                         shift and go to state 14
    expr1                          shift and go to state 44
    top_stmt                       shift and go to state 13

state 1

    (91) loop_stmt -> KEYWORD_redo .

    KEYWORD_while   reduce using rule 91 (loop_stmt -> KEYWORD_redo .)
    KEYWORD_until   reduce using rule 91 (loop_stmt -> KEYWORD_redo .)
    DELIM           reduce using rule 91 (loop_stmt -> KEYWORD_redo .)
    newline         reduce using rule 91 (loop_stmt -> KEYWORD_redo .)
    KEYWORD_end     reduce using rule 91 (loop_stmt -> KEYWORD_redo .)
    $end            reduce using rule 91 (loop_stmt -> KEYWORD_redo .)
    KEYWORD_elsif   reduce using rule 91 (loop_stmt -> KEYWORD_redo .)
    KEYWORD_else    reduce using rule 91 (loop_stmt -> KEYWORD_redo .)


state 2

    (125) MLHS -> mlhs .

    EQUAL           reduce using rule 125 (MLHS -> mlhs .)
    COMMA           reduce using rule 125 (MLHS -> mlhs .)


state 3

    (200) uexpr -> MINUS .

    INT_CONSTANTS   reduce using rule 200 (uexpr -> MINUS .)
    FLOAT_CONSTANTS reduce using rule 200 (uexpr -> MINUS .)


state 4

    (68) top_stmt -> KEYWORD_while . expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (157) expr3 -> . expr3 LOGICALOR expr4
    (158) expr3 -> . expr4
    (159) expr4 -> . expr4 LOGICALAND expr5
    (160) expr4 -> . expr5
    (161) expr5 -> . expr6 IFF expr6
    (162) expr5 -> . expr6 DOUBLEEQUAL expr6
    (163) expr5 -> . expr6 TRIPLEEQUAL expr6
    (164) expr5 -> . expr6 NOTEQUAL expr6
    (165) expr5 -> . expr6
    (166) expr6 -> . expr7 LESSEQUAL expr7
    (167) expr6 -> . expr7 LESS expr7
    (168) expr6 -> . expr7 GREATER expr7
    (169) expr6 -> . expr7 GREATEREQUAL expr7
    (170) expr6 -> . expr7
    (171) expr6 -> . BOOLEAN_CONSTANTS
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (209) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 31
    CONSTANTS       shift and go to state 59
    VARIABLES       shift and go to state 55
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 35
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr9                          shift and go to state 49
    expr3                          shift and go to state 56
    expr6                          shift and go to state 45
    expr7                          shift and go to state 57
    expr4                          shift and go to state 8
    expr5                          shift and go to state 47
    expr10                         shift and go to state 14
    expr8                          shift and go to state 48
    array                          shift and go to state 58
    expr11                         shift and go to state 15

state 5

    (0) S' -> program .



state 6

    (199) uexpr -> PLUS .

    INT_CONSTANTS   reduce using rule 199 (uexpr -> PLUS .)
    FLOAT_CONSTANTS reduce using rule 199 (uexpr -> PLUS .)


state 7

    (154) expr2 -> expr7 . DOUBLEDOT expr7
    (155) expr2 -> expr7 . TRIPLEDOT expr7
    (172) expr7 -> expr7 . BITXOR expr8
    (173) expr7 -> expr7 . PIPE expr8
    (166) expr6 -> expr7 . LESSEQUAL expr7
    (167) expr6 -> expr7 . LESS expr7
    (168) expr6 -> expr7 . GREATER expr7
    (169) expr6 -> expr7 . GREATEREQUAL expr7
    (170) expr6 -> expr7 .

    DOUBLEDOT       shift and go to state 60
    TRIPLEDOT       shift and go to state 62
    BITXOR          shift and go to state 66
    PIPE            shift and go to state 65
    LESSEQUAL       shift and go to state 67
    LESS            shift and go to state 64
    GREATER         shift and go to state 63
    GREATEREQUAL    shift and go to state 61
    IFF             reduce using rule 170 (expr6 -> expr7 .)
    DOUBLEEQUAL     reduce using rule 170 (expr6 -> expr7 .)
    TRIPLEEQUAL     reduce using rule 170 (expr6 -> expr7 .)
    NOTEQUAL        reduce using rule 170 (expr6 -> expr7 .)
    LOGICALAND      reduce using rule 170 (expr6 -> expr7 .)
    QUESTION_MARK   reduce using rule 170 (expr6 -> expr7 .)
    LOGICALOR       reduce using rule 170 (expr6 -> expr7 .)
    COMMA           reduce using rule 170 (expr6 -> expr7 .)
    KEYWORD_while   reduce using rule 170 (expr6 -> expr7 .)
    KEYWORD_until   reduce using rule 170 (expr6 -> expr7 .)
    DELIM           reduce using rule 170 (expr6 -> expr7 .)
    newline         reduce using rule 170 (expr6 -> expr7 .)
    $end            reduce using rule 170 (expr6 -> expr7 .)
    KEYWORD_end     reduce using rule 170 (expr6 -> expr7 .)
    KEYWORD_elsif   reduce using rule 170 (expr6 -> expr7 .)
    KEYWORD_else    reduce using rule 170 (expr6 -> expr7 .)
    CLOSE_PAREN     reduce using rule 170 (expr6 -> expr7 .)
    COLON           reduce using rule 170 (expr6 -> expr7 .)


state 8

    (158) expr3 -> expr4 .
    (159) expr4 -> expr4 . LOGICALAND expr5

    QUESTION_MARK   reduce using rule 158 (expr3 -> expr4 .)
    LOGICALOR       reduce using rule 158 (expr3 -> expr4 .)
    KEYWORD_while   reduce using rule 158 (expr3 -> expr4 .)
    KEYWORD_until   reduce using rule 158 (expr3 -> expr4 .)
    DELIM           reduce using rule 158 (expr3 -> expr4 .)
    newline         reduce using rule 158 (expr3 -> expr4 .)
    KEYWORD_end     reduce using rule 158 (expr3 -> expr4 .)
    KEYWORD_elsif   reduce using rule 158 (expr3 -> expr4 .)
    KEYWORD_else    reduce using rule 158 (expr3 -> expr4 .)
    KEYWORD_then    reduce using rule 158 (expr3 -> expr4 .)
    $end            reduce using rule 158 (expr3 -> expr4 .)
    COLON           reduce using rule 158 (expr3 -> expr4 .)
    COMMA           reduce using rule 158 (expr3 -> expr4 .)
    KEYWORD_do      reduce using rule 158 (expr3 -> expr4 .)
    CLOSE_PAREN     reduce using rule 158 (expr3 -> expr4 .)
    LOGICALAND      shift and go to state 68


state 9

    (82) stmt -> loop_stmt .

    KEYWORD_while   reduce using rule 82 (stmt -> loop_stmt .)
    KEYWORD_until   reduce using rule 82 (stmt -> loop_stmt .)
    DELIM           reduce using rule 82 (stmt -> loop_stmt .)
    newline         reduce using rule 82 (stmt -> loop_stmt .)
    KEYWORD_end     reduce using rule 82 (stmt -> loop_stmt .)
    KEYWORD_elsif   reduce using rule 82 (stmt -> loop_stmt .)
    KEYWORD_else    reduce using rule 82 (stmt -> loop_stmt .)
    $end            reduce using rule 82 (stmt -> loop_stmt .)


state 10

    (190) expr13 -> uexpr . INT_CONSTANTS
    (191) expr13 -> uexpr . FLOAT_CONSTANTS

    INT_CONSTANTS   shift and go to state 69
    FLOAT_CONSTANTS shift and go to state 70


state 11

    (171) expr6 -> BOOLEAN_CONSTANTS .

    IFF             reduce using rule 171 (expr6 -> BOOLEAN_CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 171 (expr6 -> BOOLEAN_CONSTANTS .)
    TRIPLEEQUAL     reduce using rule 171 (expr6 -> BOOLEAN_CONSTANTS .)
    NOTEQUAL        reduce using rule 171 (expr6 -> BOOLEAN_CONSTANTS .)
    LOGICALAND      reduce using rule 171 (expr6 -> BOOLEAN_CONSTANTS .)
    LOGICALOR       reduce using rule 171 (expr6 -> BOOLEAN_CONSTANTS .)
    KEYWORD_do      reduce using rule 171 (expr6 -> BOOLEAN_CONSTANTS .)
    newline         reduce using rule 171 (expr6 -> BOOLEAN_CONSTANTS .)
    KEYWORD_while   reduce using rule 171 (expr6 -> BOOLEAN_CONSTANTS .)
    KEYWORD_until   reduce using rule 171 (expr6 -> BOOLEAN_CONSTANTS .)
    DELIM           reduce using rule 171 (expr6 -> BOOLEAN_CONSTANTS .)
    $end            reduce using rule 171 (expr6 -> BOOLEAN_CONSTANTS .)
    KEYWORD_end     reduce using rule 171 (expr6 -> BOOLEAN_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 171 (expr6 -> BOOLEAN_CONSTANTS .)
    KEYWORD_else    reduce using rule 171 (expr6 -> BOOLEAN_CONSTANTS .)
    QUESTION_MARK   reduce using rule 171 (expr6 -> BOOLEAN_CONSTANTS .)
    KEYWORD_then    reduce using rule 171 (expr6 -> BOOLEAN_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 171 (expr6 -> BOOLEAN_CONSTANTS .)
    COLON           reduce using rule 171 (expr6 -> BOOLEAN_CONSTANTS .)
    COMMA           reduce using rule 171 (expr6 -> BOOLEAN_CONSTANTS .)


state 12

    (90) loop_stmt -> KEYWORD_next .

    KEYWORD_while   reduce using rule 90 (loop_stmt -> KEYWORD_next .)
    KEYWORD_until   reduce using rule 90 (loop_stmt -> KEYWORD_next .)
    DELIM           reduce using rule 90 (loop_stmt -> KEYWORD_next .)
    newline         reduce using rule 90 (loop_stmt -> KEYWORD_next .)
    KEYWORD_end     reduce using rule 90 (loop_stmt -> KEYWORD_next .)
    $end            reduce using rule 90 (loop_stmt -> KEYWORD_next .)
    KEYWORD_elsif   reduce using rule 90 (loop_stmt -> KEYWORD_next .)
    KEYWORD_else    reduce using rule 90 (loop_stmt -> KEYWORD_next .)


state 13

    (65) top_stmts -> top_stmt .
    (69) top_stmt -> top_stmt . KEYWORD_while expr3
    (71) top_stmt -> top_stmt . KEYWORD_until expr3

    DELIM           reduce using rule 65 (top_stmts -> top_stmt .)
    newline         reduce using rule 65 (top_stmts -> top_stmt .)
    $end            reduce using rule 65 (top_stmts -> top_stmt .)
    KEYWORD_while   shift and go to state 71
    KEYWORD_until   shift and go to state 72


state 14

    (179) expr9 -> expr10 .
    (180) expr10 -> expr10 . PLUS expr11
    (181) expr10 -> expr10 . MINUS expr11

    SHIFTL          reduce using rule 179 (expr9 -> expr10 .)
    SHIFTR          reduce using rule 179 (expr9 -> expr10 .)
    BITAND          reduce using rule 179 (expr9 -> expr10 .)
    LESSEQUAL       reduce using rule 179 (expr9 -> expr10 .)
    LESS            reduce using rule 179 (expr9 -> expr10 .)
    GREATER         reduce using rule 179 (expr9 -> expr10 .)
    GREATEREQUAL    reduce using rule 179 (expr9 -> expr10 .)
    BITXOR          reduce using rule 179 (expr9 -> expr10 .)
    PIPE            reduce using rule 179 (expr9 -> expr10 .)
    IFF             reduce using rule 179 (expr9 -> expr10 .)
    DOUBLEEQUAL     reduce using rule 179 (expr9 -> expr10 .)
    TRIPLEEQUAL     reduce using rule 179 (expr9 -> expr10 .)
    NOTEQUAL        reduce using rule 179 (expr9 -> expr10 .)
    LOGICALAND      reduce using rule 179 (expr9 -> expr10 .)
    QUESTION_MARK   reduce using rule 179 (expr9 -> expr10 .)
    LOGICALOR       reduce using rule 179 (expr9 -> expr10 .)
    KEYWORD_while   reduce using rule 179 (expr9 -> expr10 .)
    KEYWORD_until   reduce using rule 179 (expr9 -> expr10 .)
    DELIM           reduce using rule 179 (expr9 -> expr10 .)
    newline         reduce using rule 179 (expr9 -> expr10 .)
    $end            reduce using rule 179 (expr9 -> expr10 .)
    KEYWORD_do      reduce using rule 179 (expr9 -> expr10 .)
    KEYWORD_then    reduce using rule 179 (expr9 -> expr10 .)
    CLOSE_PAREN     reduce using rule 179 (expr9 -> expr10 .)
    KEYWORD_end     reduce using rule 179 (expr9 -> expr10 .)
    KEYWORD_elsif   reduce using rule 179 (expr9 -> expr10 .)
    KEYWORD_else    reduce using rule 179 (expr9 -> expr10 .)
    COLON           reduce using rule 179 (expr9 -> expr10 .)
    COMMA           reduce using rule 179 (expr9 -> expr10 .)
    DOUBLEDOT       reduce using rule 179 (expr9 -> expr10 .)
    TRIPLEDOT       reduce using rule 179 (expr9 -> expr10 .)
    CLOSE_BRACKET   reduce using rule 179 (expr9 -> expr10 .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74


state 15

    (182) expr10 -> expr11 .
    (183) expr11 -> expr11 . MULTIPLY expr12
    (184) expr11 -> expr11 . DIV expr12
    (185) expr11 -> expr11 . MOD expr12

    PLUS            reduce using rule 182 (expr10 -> expr11 .)
    MINUS           reduce using rule 182 (expr10 -> expr11 .)
    SHIFTL          reduce using rule 182 (expr10 -> expr11 .)
    SHIFTR          reduce using rule 182 (expr10 -> expr11 .)
    BITAND          reduce using rule 182 (expr10 -> expr11 .)
    DOUBLEDOT       reduce using rule 182 (expr10 -> expr11 .)
    TRIPLEDOT       reduce using rule 182 (expr10 -> expr11 .)
    BITXOR          reduce using rule 182 (expr10 -> expr11 .)
    PIPE            reduce using rule 182 (expr10 -> expr11 .)
    LESSEQUAL       reduce using rule 182 (expr10 -> expr11 .)
    LESS            reduce using rule 182 (expr10 -> expr11 .)
    GREATER         reduce using rule 182 (expr10 -> expr11 .)
    GREATEREQUAL    reduce using rule 182 (expr10 -> expr11 .)
    IFF             reduce using rule 182 (expr10 -> expr11 .)
    DOUBLEEQUAL     reduce using rule 182 (expr10 -> expr11 .)
    TRIPLEEQUAL     reduce using rule 182 (expr10 -> expr11 .)
    NOTEQUAL        reduce using rule 182 (expr10 -> expr11 .)
    LOGICALAND      reduce using rule 182 (expr10 -> expr11 .)
    QUESTION_MARK   reduce using rule 182 (expr10 -> expr11 .)
    LOGICALOR       reduce using rule 182 (expr10 -> expr11 .)
    KEYWORD_while   reduce using rule 182 (expr10 -> expr11 .)
    KEYWORD_until   reduce using rule 182 (expr10 -> expr11 .)
    DELIM           reduce using rule 182 (expr10 -> expr11 .)
    newline         reduce using rule 182 (expr10 -> expr11 .)
    $end            reduce using rule 182 (expr10 -> expr11 .)
    KEYWORD_do      reduce using rule 182 (expr10 -> expr11 .)
    KEYWORD_then    reduce using rule 182 (expr10 -> expr11 .)
    CLOSE_PAREN     reduce using rule 182 (expr10 -> expr11 .)
    KEYWORD_end     reduce using rule 182 (expr10 -> expr11 .)
    KEYWORD_elsif   reduce using rule 182 (expr10 -> expr11 .)
    KEYWORD_else    reduce using rule 182 (expr10 -> expr11 .)
    COLON           reduce using rule 182 (expr10 -> expr11 .)
    COMMA           reduce using rule 182 (expr10 -> expr11 .)
    CLOSE_BRACKET   reduce using rule 182 (expr10 -> expr11 .)
    MULTIPLY        shift and go to state 75
    DIV             shift and go to state 76
    MOD             shift and go to state 77


state 16

    (186) expr11 -> expr12 .

    MULTIPLY        reduce using rule 186 (expr11 -> expr12 .)
    DIV             reduce using rule 186 (expr11 -> expr12 .)
    MOD             reduce using rule 186 (expr11 -> expr12 .)
    PLUS            reduce using rule 186 (expr11 -> expr12 .)
    MINUS           reduce using rule 186 (expr11 -> expr12 .)
    SHIFTL          reduce using rule 186 (expr11 -> expr12 .)
    SHIFTR          reduce using rule 186 (expr11 -> expr12 .)
    BITAND          reduce using rule 186 (expr11 -> expr12 .)
    DOUBLEDOT       reduce using rule 186 (expr11 -> expr12 .)
    TRIPLEDOT       reduce using rule 186 (expr11 -> expr12 .)
    BITXOR          reduce using rule 186 (expr11 -> expr12 .)
    PIPE            reduce using rule 186 (expr11 -> expr12 .)
    LESSEQUAL       reduce using rule 186 (expr11 -> expr12 .)
    LESS            reduce using rule 186 (expr11 -> expr12 .)
    GREATER         reduce using rule 186 (expr11 -> expr12 .)
    GREATEREQUAL    reduce using rule 186 (expr11 -> expr12 .)
    IFF             reduce using rule 186 (expr11 -> expr12 .)
    DOUBLEEQUAL     reduce using rule 186 (expr11 -> expr12 .)
    TRIPLEEQUAL     reduce using rule 186 (expr11 -> expr12 .)
    NOTEQUAL        reduce using rule 186 (expr11 -> expr12 .)
    LOGICALAND      reduce using rule 186 (expr11 -> expr12 .)
    QUESTION_MARK   reduce using rule 186 (expr11 -> expr12 .)
    LOGICALOR       reduce using rule 186 (expr11 -> expr12 .)
    KEYWORD_while   reduce using rule 186 (expr11 -> expr12 .)
    KEYWORD_until   reduce using rule 186 (expr11 -> expr12 .)
    DELIM           reduce using rule 186 (expr11 -> expr12 .)
    newline         reduce using rule 186 (expr11 -> expr12 .)
    $end            reduce using rule 186 (expr11 -> expr12 .)
    KEYWORD_do      reduce using rule 186 (expr11 -> expr12 .)
    KEYWORD_then    reduce using rule 186 (expr11 -> expr12 .)
    CLOSE_PAREN     reduce using rule 186 (expr11 -> expr12 .)
    KEYWORD_end     reduce using rule 186 (expr11 -> expr12 .)
    KEYWORD_elsif   reduce using rule 186 (expr11 -> expr12 .)
    KEYWORD_else    reduce using rule 186 (expr11 -> expr12 .)
    COLON           reduce using rule 186 (expr11 -> expr12 .)
    COMMA           reduce using rule 186 (expr11 -> expr12 .)
    CLOSE_BRACKET   reduce using rule 186 (expr11 -> expr12 .)


state 17

    (187) expr12 -> expr13 . DOUBLESTAR expr12
    (188) expr12 -> expr13 .

    DOUBLESTAR      shift and go to state 78
    MULTIPLY        reduce using rule 188 (expr12 -> expr13 .)
    DIV             reduce using rule 188 (expr12 -> expr13 .)
    MOD             reduce using rule 188 (expr12 -> expr13 .)
    PLUS            reduce using rule 188 (expr12 -> expr13 .)
    MINUS           reduce using rule 188 (expr12 -> expr13 .)
    SHIFTL          reduce using rule 188 (expr12 -> expr13 .)
    SHIFTR          reduce using rule 188 (expr12 -> expr13 .)
    BITAND          reduce using rule 188 (expr12 -> expr13 .)
    DOUBLEDOT       reduce using rule 188 (expr12 -> expr13 .)
    TRIPLEDOT       reduce using rule 188 (expr12 -> expr13 .)
    BITXOR          reduce using rule 188 (expr12 -> expr13 .)
    PIPE            reduce using rule 188 (expr12 -> expr13 .)
    LESSEQUAL       reduce using rule 188 (expr12 -> expr13 .)
    LESS            reduce using rule 188 (expr12 -> expr13 .)
    GREATER         reduce using rule 188 (expr12 -> expr13 .)
    GREATEREQUAL    reduce using rule 188 (expr12 -> expr13 .)
    IFF             reduce using rule 188 (expr12 -> expr13 .)
    DOUBLEEQUAL     reduce using rule 188 (expr12 -> expr13 .)
    TRIPLEEQUAL     reduce using rule 188 (expr12 -> expr13 .)
    NOTEQUAL        reduce using rule 188 (expr12 -> expr13 .)
    LOGICALAND      reduce using rule 188 (expr12 -> expr13 .)
    QUESTION_MARK   reduce using rule 188 (expr12 -> expr13 .)
    LOGICALOR       reduce using rule 188 (expr12 -> expr13 .)
    KEYWORD_while   reduce using rule 188 (expr12 -> expr13 .)
    KEYWORD_until   reduce using rule 188 (expr12 -> expr13 .)
    DELIM           reduce using rule 188 (expr12 -> expr13 .)
    newline         reduce using rule 188 (expr12 -> expr13 .)
    KEYWORD_end     reduce using rule 188 (expr12 -> expr13 .)
    $end            reduce using rule 188 (expr12 -> expr13 .)
    KEYWORD_do      reduce using rule 188 (expr12 -> expr13 .)
    KEYWORD_then    reduce using rule 188 (expr12 -> expr13 .)
    CLOSE_PAREN     reduce using rule 188 (expr12 -> expr13 .)
    KEYWORD_elsif   reduce using rule 188 (expr12 -> expr13 .)
    KEYWORD_else    reduce using rule 188 (expr12 -> expr13 .)
    COLON           reduce using rule 188 (expr12 -> expr13 .)
    COMMA           reduce using rule 188 (expr12 -> expr13 .)
    CLOSE_BRACKET   reduce using rule 188 (expr12 -> expr13 .)


state 18

    (64) top_compstmt -> top_stmts .

    DELIM           reduce using rule 64 (top_compstmt -> top_stmts .)
    newline         reduce using rule 64 (top_compstmt -> top_stmts .)
    $end            reduce using rule 64 (top_compstmt -> top_stmts .)


state 19

    (81) stmt -> puts_stmt .

    KEYWORD_while   reduce using rule 81 (stmt -> puts_stmt .)
    KEYWORD_until   reduce using rule 81 (stmt -> puts_stmt .)
    DELIM           reduce using rule 81 (stmt -> puts_stmt .)
    newline         reduce using rule 81 (stmt -> puts_stmt .)
    KEYWORD_end     reduce using rule 81 (stmt -> puts_stmt .)
    KEYWORD_elsif   reduce using rule 81 (stmt -> puts_stmt .)
    KEYWORD_else    reduce using rule 81 (stmt -> puts_stmt .)
    $end            reduce using rule 81 (stmt -> puts_stmt .)


state 20

    (5) statement -> top_compstmt .

    DELIM           reduce using rule 5 (statement -> top_compstmt .)
    newline         reduce using rule 5 (statement -> top_compstmt .)
    $end            reduce using rule 5 (statement -> top_compstmt .)


state 21

    (66) top_stmt -> stmt .

    KEYWORD_while   reduce using rule 66 (top_stmt -> stmt .)
    KEYWORD_until   reduce using rule 66 (top_stmt -> stmt .)
    DELIM           reduce using rule 66 (top_stmt -> stmt .)
    newline         reduce using rule 66 (top_stmt -> stmt .)
    KEYWORD_end     reduce using rule 66 (top_stmt -> stmt .)
    KEYWORD_elsif   reduce using rule 66 (top_stmt -> stmt .)
    KEYWORD_else    reduce using rule 66 (top_stmt -> stmt .)
    $end            reduce using rule 66 (top_stmt -> stmt .)


state 22

    (14) func_defn -> KEYWORD_def . fname OPEN_PAREN arguments CLOSE_PAREN func_stmts opt_terms KEYWORD_end
    (15) func_defn -> KEYWORD_def . fname OPEN_PAREN CLOSE_PAREN func_stmts opt_terms KEYWORD_end
    (16) func_defn -> KEYWORD_def . fname arguments func_stmts opt_terms KEYWORD_end
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS

    VARIABLES       shift and go to state 80
    CONSTANTS       shift and go to state 79

    fname                          shift and go to state 81

state 23

    (11) statement -> CONSTANTS . DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (12) statement -> CONSTANTS . DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (13) statement -> CONSTANTS . DOT KEYWORD_new arguments
    (54) fname -> CONSTANTS .
    (130) mlhs -> CONSTANTS .
    (192) expr13 -> CONSTANTS .

    DOT             shift and go to state 82
    OPEN_PAREN      reduce using rule 54 (fname -> CONSTANTS .)
    VARIABLES       reduce using rule 54 (fname -> CONSTANTS .)
    CONSTANTS       reduce using rule 54 (fname -> CONSTANTS .)
    INT_CONSTANTS   reduce using rule 54 (fname -> CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 54 (fname -> CONSTANTS .)
    STRING_CONSTANTS reduce using rule 54 (fname -> CONSTANTS .)
    CHAR_CONSTANTS  reduce using rule 54 (fname -> CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 54 (fname -> CONSTANTS .)
    EQUAL           reduce using rule 130 (mlhs -> CONSTANTS .)
    COMMA           reduce using rule 130 (mlhs -> CONSTANTS .)
    DOUBLESTAR      reduce using rule 192 (expr13 -> CONSTANTS .)
    MULTIPLY        reduce using rule 192 (expr13 -> CONSTANTS .)
    DIV             reduce using rule 192 (expr13 -> CONSTANTS .)
    MOD             reduce using rule 192 (expr13 -> CONSTANTS .)
    PLUS            reduce using rule 192 (expr13 -> CONSTANTS .)
    MINUS           reduce using rule 192 (expr13 -> CONSTANTS .)
    SHIFTL          reduce using rule 192 (expr13 -> CONSTANTS .)
    SHIFTR          reduce using rule 192 (expr13 -> CONSTANTS .)
    BITAND          reduce using rule 192 (expr13 -> CONSTANTS .)
    DOUBLEDOT       reduce using rule 192 (expr13 -> CONSTANTS .)
    TRIPLEDOT       reduce using rule 192 (expr13 -> CONSTANTS .)
    BITXOR          reduce using rule 192 (expr13 -> CONSTANTS .)
    PIPE            reduce using rule 192 (expr13 -> CONSTANTS .)
    LESSEQUAL       reduce using rule 192 (expr13 -> CONSTANTS .)
    LESS            reduce using rule 192 (expr13 -> CONSTANTS .)
    GREATER         reduce using rule 192 (expr13 -> CONSTANTS .)
    GREATEREQUAL    reduce using rule 192 (expr13 -> CONSTANTS .)
    IFF             reduce using rule 192 (expr13 -> CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 192 (expr13 -> CONSTANTS .)
    TRIPLEEQUAL     reduce using rule 192 (expr13 -> CONSTANTS .)
    NOTEQUAL        reduce using rule 192 (expr13 -> CONSTANTS .)
    LOGICALAND      reduce using rule 192 (expr13 -> CONSTANTS .)
    QUESTION_MARK   reduce using rule 192 (expr13 -> CONSTANTS .)
    LOGICALOR       reduce using rule 192 (expr13 -> CONSTANTS .)
    KEYWORD_while   reduce using rule 192 (expr13 -> CONSTANTS .)
    KEYWORD_until   reduce using rule 192 (expr13 -> CONSTANTS .)
    DELIM           reduce using rule 192 (expr13 -> CONSTANTS .)
    newline         reduce using rule 192 (expr13 -> CONSTANTS .)
    $end            reduce using rule 192 (expr13 -> CONSTANTS .)


state 24

    (92) exit_stmt -> KEYWORD_exit .

    KEYWORD_while   reduce using rule 92 (exit_stmt -> KEYWORD_exit .)
    KEYWORD_until   reduce using rule 92 (exit_stmt -> KEYWORD_exit .)
    DELIM           reduce using rule 92 (exit_stmt -> KEYWORD_exit .)
    newline         reduce using rule 92 (exit_stmt -> KEYWORD_exit .)
    KEYWORD_elsif   reduce using rule 92 (exit_stmt -> KEYWORD_exit .)
    KEYWORD_else    reduce using rule 92 (exit_stmt -> KEYWORD_exit .)
    KEYWORD_end     reduce using rule 92 (exit_stmt -> KEYWORD_exit .)
    $end            reduce using rule 92 (exit_stmt -> KEYWORD_exit .)


state 25

    (2) top_top_compstmt -> statements . opt_terms
    (4) statements -> statements . terms statement
    (203) opt_terms -> . none
    (204) opt_terms -> . terms
    (205) terms -> . term
    (206) terms -> . terms term
    (209) none -> .
    (207) term -> . DELIM
    (208) term -> . newline

    $end            reduce using rule 209 (none -> .)
    DELIM           shift and go to state 86
    newline         shift and go to state 85

    term                           shift and go to state 83
    terms                          shift and go to state 84
    none                           shift and go to state 87
    opt_terms                      shift and go to state 88

state 26

    (72) top_stmt -> KEYWORD_until . expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (157) expr3 -> . expr3 LOGICALOR expr4
    (158) expr3 -> . expr4
    (159) expr4 -> . expr4 LOGICALAND expr5
    (160) expr4 -> . expr5
    (161) expr5 -> . expr6 IFF expr6
    (162) expr5 -> . expr6 DOUBLEEQUAL expr6
    (163) expr5 -> . expr6 TRIPLEEQUAL expr6
    (164) expr5 -> . expr6 NOTEQUAL expr6
    (165) expr5 -> . expr6
    (166) expr6 -> . expr7 LESSEQUAL expr7
    (167) expr6 -> . expr7 LESS expr7
    (168) expr6 -> . expr7 GREATER expr7
    (169) expr6 -> . expr7 GREATEREQUAL expr7
    (170) expr6 -> . expr7
    (171) expr6 -> . BOOLEAN_CONSTANTS
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (209) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 31
    CONSTANTS       shift and go to state 59
    VARIABLES       shift and go to state 55
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 35
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr9                          shift and go to state 49
    expr3                          shift and go to state 89
    expr6                          shift and go to state 45
    expr7                          shift and go to state 57
    expr4                          shift and go to state 8
    expr5                          shift and go to state 47
    expr10                         shift and go to state 14
    expr8                          shift and go to state 48
    array                          shift and go to state 58
    expr11                         shift and go to state 15

state 27

    (131) mlhs -> array .
    (194) expr13 -> array .

    EQUAL           reduce using rule 131 (mlhs -> array .)
    COMMA           reduce using rule 131 (mlhs -> array .)
    DOUBLESTAR      reduce using rule 194 (expr13 -> array .)
    MULTIPLY        reduce using rule 194 (expr13 -> array .)
    DIV             reduce using rule 194 (expr13 -> array .)
    MOD             reduce using rule 194 (expr13 -> array .)
    PLUS            reduce using rule 194 (expr13 -> array .)
    MINUS           reduce using rule 194 (expr13 -> array .)
    SHIFTL          reduce using rule 194 (expr13 -> array .)
    SHIFTR          reduce using rule 194 (expr13 -> array .)
    BITAND          reduce using rule 194 (expr13 -> array .)
    DOUBLEDOT       reduce using rule 194 (expr13 -> array .)
    TRIPLEDOT       reduce using rule 194 (expr13 -> array .)
    BITXOR          reduce using rule 194 (expr13 -> array .)
    PIPE            reduce using rule 194 (expr13 -> array .)
    LESSEQUAL       reduce using rule 194 (expr13 -> array .)
    LESS            reduce using rule 194 (expr13 -> array .)
    GREATER         reduce using rule 194 (expr13 -> array .)
    GREATEREQUAL    reduce using rule 194 (expr13 -> array .)
    IFF             reduce using rule 194 (expr13 -> array .)
    DOUBLEEQUAL     reduce using rule 194 (expr13 -> array .)
    TRIPLEEQUAL     reduce using rule 194 (expr13 -> array .)
    NOTEQUAL        reduce using rule 194 (expr13 -> array .)
    LOGICALAND      reduce using rule 194 (expr13 -> array .)
    QUESTION_MARK   reduce using rule 194 (expr13 -> array .)
    LOGICALOR       reduce using rule 194 (expr13 -> array .)
    KEYWORD_while   reduce using rule 194 (expr13 -> array .)
    KEYWORD_until   reduce using rule 194 (expr13 -> array .)
    DELIM           reduce using rule 194 (expr13 -> array .)
    newline         reduce using rule 194 (expr13 -> array .)
    KEYWORD_elsif   reduce using rule 194 (expr13 -> array .)
    KEYWORD_else    reduce using rule 194 (expr13 -> array .)
    KEYWORD_end     reduce using rule 194 (expr13 -> array .)
    $end            reduce using rule 194 (expr13 -> array .)


state 28

    (67) top_stmt -> KEYWORD_if . expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (157) expr3 -> . expr3 LOGICALOR expr4
    (158) expr3 -> . expr4
    (159) expr4 -> . expr4 LOGICALAND expr5
    (160) expr4 -> . expr5
    (161) expr5 -> . expr6 IFF expr6
    (162) expr5 -> . expr6 DOUBLEEQUAL expr6
    (163) expr5 -> . expr6 TRIPLEEQUAL expr6
    (164) expr5 -> . expr6 NOTEQUAL expr6
    (165) expr5 -> . expr6
    (166) expr6 -> . expr7 LESSEQUAL expr7
    (167) expr6 -> . expr7 LESS expr7
    (168) expr6 -> . expr7 GREATER expr7
    (169) expr6 -> . expr7 GREATEREQUAL expr7
    (170) expr6 -> . expr7
    (171) expr6 -> . BOOLEAN_CONSTANTS
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (209) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 31
    CONSTANTS       shift and go to state 59
    VARIABLES       shift and go to state 55
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    expr11                         shift and go to state 15
    uexpr                          shift and go to state 10
    none                           shift and go to state 35
    expr4                          shift and go to state 8
    expr5                          shift and go to state 47
    expr3                          shift and go to state 90
    expr6                          shift and go to state 45
    expr7                          shift and go to state 57
    expr10                         shift and go to state 14
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    expr13                         shift and go to state 17
    array                          shift and go to state 58
    expr12                         shift and go to state 16

state 29

    (8) statement -> VARIABLES . DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (9) statement -> VARIABLES . DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (10) statement -> VARIABLES . DOT VARIABLES arguments
    (53) fname -> VARIABLES .
    (129) mlhs -> VARIABLES .
    (195) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> VARIABLES . OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> VARIABLES . OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (193) expr13 -> VARIABLES .

    DOT             shift and go to state 92
    OPEN_PAREN      reduce using rule 53 (fname -> VARIABLES .)
    VARIABLES       reduce using rule 53 (fname -> VARIABLES .)
    CONSTANTS       reduce using rule 53 (fname -> VARIABLES .)
    INT_CONSTANTS   reduce using rule 53 (fname -> VARIABLES .)
    FLOAT_CONSTANTS reduce using rule 53 (fname -> VARIABLES .)
    STRING_CONSTANTS reduce using rule 53 (fname -> VARIABLES .)
    CHAR_CONSTANTS  reduce using rule 53 (fname -> VARIABLES .)
    BOOLEAN_CONSTANTS reduce using rule 53 (fname -> VARIABLES .)
    EQUAL           reduce using rule 129 (mlhs -> VARIABLES .)
    COMMA           reduce using rule 129 (mlhs -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 91
    DOUBLESTAR      reduce using rule 193 (expr13 -> VARIABLES .)
    MULTIPLY        reduce using rule 193 (expr13 -> VARIABLES .)
    DIV             reduce using rule 193 (expr13 -> VARIABLES .)
    MOD             reduce using rule 193 (expr13 -> VARIABLES .)
    PLUS            reduce using rule 193 (expr13 -> VARIABLES .)
    MINUS           reduce using rule 193 (expr13 -> VARIABLES .)
    SHIFTL          reduce using rule 193 (expr13 -> VARIABLES .)
    SHIFTR          reduce using rule 193 (expr13 -> VARIABLES .)
    BITAND          reduce using rule 193 (expr13 -> VARIABLES .)
    DOUBLEDOT       reduce using rule 193 (expr13 -> VARIABLES .)
    TRIPLEDOT       reduce using rule 193 (expr13 -> VARIABLES .)
    BITXOR          reduce using rule 193 (expr13 -> VARIABLES .)
    PIPE            reduce using rule 193 (expr13 -> VARIABLES .)
    LESSEQUAL       reduce using rule 193 (expr13 -> VARIABLES .)
    LESS            reduce using rule 193 (expr13 -> VARIABLES .)
    GREATER         reduce using rule 193 (expr13 -> VARIABLES .)
    GREATEREQUAL    reduce using rule 193 (expr13 -> VARIABLES .)
    IFF             reduce using rule 193 (expr13 -> VARIABLES .)
    DOUBLEEQUAL     reduce using rule 193 (expr13 -> VARIABLES .)
    TRIPLEEQUAL     reduce using rule 193 (expr13 -> VARIABLES .)
    NOTEQUAL        reduce using rule 193 (expr13 -> VARIABLES .)
    LOGICALAND      reduce using rule 193 (expr13 -> VARIABLES .)
    QUESTION_MARK   reduce using rule 193 (expr13 -> VARIABLES .)
    LOGICALOR       reduce using rule 193 (expr13 -> VARIABLES .)
    KEYWORD_while   reduce using rule 193 (expr13 -> VARIABLES .)
    KEYWORD_until   reduce using rule 193 (expr13 -> VARIABLES .)
    DELIM           reduce using rule 193 (expr13 -> VARIABLES .)
    newline         reduce using rule 193 (expr13 -> VARIABLES .)
    $end            reduce using rule 193 (expr13 -> VARIABLES .)


state 30

    (202) uexpr -> BITCOMP .

    INT_CONSTANTS   reduce using rule 202 (uexpr -> BITCOMP .)
    FLOAT_CONSTANTS reduce using rule 202 (uexpr -> BITCOMP .)


state 31

    (189) expr13 -> OPEN_PAREN . expr1 CLOSE_PAREN
    (152) expr1 -> . expr3 QUESTION_MARK expr2 COLON expr2
    (153) expr1 -> . expr2
    (157) expr3 -> . expr3 LOGICALOR expr4
    (158) expr3 -> . expr4
    (154) expr2 -> . expr7 DOUBLEDOT expr7
    (155) expr2 -> . expr7 TRIPLEDOT expr7
    (156) expr2 -> . expr3
    (159) expr4 -> . expr4 LOGICALAND expr5
    (160) expr4 -> . expr5
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (161) expr5 -> . expr6 IFF expr6
    (162) expr5 -> . expr6 DOUBLEEQUAL expr6
    (163) expr5 -> . expr6 TRIPLEEQUAL expr6
    (164) expr5 -> . expr6 NOTEQUAL expr6
    (165) expr5 -> . expr6
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (166) expr6 -> . expr7 LESSEQUAL expr7
    (167) expr6 -> . expr7 LESS expr7
    (168) expr6 -> . expr7 GREATER expr7
    (169) expr6 -> . expr7 GREATEREQUAL expr7
    (170) expr6 -> . expr7
    (171) expr6 -> . BOOLEAN_CONSTANTS
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (209) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 31
    CONSTANTS       shift and go to state 59
    VARIABLES       shift and go to state 55
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 35
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr2                          shift and go to state 42
    expr3                          shift and go to state 43
    expr1                          shift and go to state 93
    expr6                          shift and go to state 45
    expr7                          shift and go to state 7
    expr4                          shift and go to state 8
    expr5                          shift and go to state 47
    expr10                         shift and go to state 14
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    array                          shift and go to state 58
    expr11                         shift and go to state 15

state 32

    (3) statements -> statement .

    DELIM           reduce using rule 3 (statements -> statement .)
    newline         reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)


state 33

    (84) stmt -> func_call_stmt .

    KEYWORD_while   reduce using rule 84 (stmt -> func_call_stmt .)
    KEYWORD_until   reduce using rule 84 (stmt -> func_call_stmt .)
    DELIM           reduce using rule 84 (stmt -> func_call_stmt .)
    newline         reduce using rule 84 (stmt -> func_call_stmt .)
    KEYWORD_end     reduce using rule 84 (stmt -> func_call_stmt .)
    KEYWORD_elsif   reduce using rule 84 (stmt -> func_call_stmt .)
    KEYWORD_else    reduce using rule 84 (stmt -> func_call_stmt .)
    $end            reduce using rule 84 (stmt -> func_call_stmt .)


state 34

    (93) puts_stmt -> KEYWORD_puts . mrhs
    (94) puts_stmt -> KEYWORD_puts . expr
    (132) mrhs -> . expr1
    (133) mrhs -> . str_expr
    (134) mrhs -> . KEYWORD_gets
    (135) mrhs -> . OPEN_BRACKET func_ret_arg CLOSE_BRACKET
    (136) mrhs -> . VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (137) mrhs -> . VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (138) mrhs -> . VARIABLES DOT VARIABLES
    (139) mrhs -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (140) mrhs -> . CONSTANTS DOT KEYWORD_new
    (141) mrhs -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (124) expr -> . MLHS EQUAL MRHS
    (152) expr1 -> . expr3 QUESTION_MARK expr2 COLON expr2
    (153) expr1 -> . expr2
    (142) str_expr -> . str_expr PLUS STRING_CONSTANTS
    (143) str_expr -> . STRING_CONSTANTS
    (125) MLHS -> . mlhs
    (126) MLHS -> . MLHS COMMA mlhs
    (157) expr3 -> . expr3 LOGICALOR expr4
    (158) expr3 -> . expr4
    (154) expr2 -> . expr7 DOUBLEDOT expr7
    (155) expr2 -> . expr7 TRIPLEDOT expr7
    (156) expr2 -> . expr3
    (129) mlhs -> . VARIABLES
    (130) mlhs -> . CONSTANTS
    (131) mlhs -> . array
    (159) expr4 -> . expr4 LOGICALAND expr5
    (160) expr4 -> . expr5
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (161) expr5 -> . expr6 IFF expr6
    (162) expr5 -> . expr6 DOUBLEEQUAL expr6
    (163) expr5 -> . expr6 TRIPLEEQUAL expr6
    (164) expr5 -> . expr6 NOTEQUAL expr6
    (165) expr5 -> . expr6
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (166) expr6 -> . expr7 LESSEQUAL expr7
    (167) expr6 -> . expr7 LESS expr7
    (168) expr6 -> . expr7 GREATER expr7
    (169) expr6 -> . expr7 GREATEREQUAL expr7
    (170) expr6 -> . expr7
    (171) expr6 -> . BOOLEAN_CONSTANTS
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (209) none -> .

    KEYWORD_gets    shift and go to state 98
    OPEN_BRACKET    shift and go to state 96
    VARIABLES       shift and go to state 95
    CONSTANTS       shift and go to state 103
    STRING_CONSTANTS shift and go to state 102
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 31
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    mlhs                           shift and go to state 2
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    array                          shift and go to state 27
    str_expr                       shift and go to state 94
    expr2                          shift and go to state 42
    expr3                          shift and go to state 43
    expr1                          shift and go to state 97
    expr6                          shift and go to state 45
    expr4                          shift and go to state 8
    expr5                          shift and go to state 47
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    expr7                          shift and go to state 7
    MLHS                           shift and go to state 99
    mrhs                           shift and go to state 100
    uexpr                          shift and go to state 10
    none                           shift and go to state 35
    expr                           shift and go to state 101

state 35

    (198) uexpr -> none .

    INT_CONSTANTS   reduce using rule 198 (uexpr -> none .)
    FLOAT_CONSTANTS reduce using rule 198 (uexpr -> none .)


state 36

    (79) stmt -> expr .

    KEYWORD_while   reduce using rule 79 (stmt -> expr .)
    KEYWORD_until   reduce using rule 79 (stmt -> expr .)
    DELIM           reduce using rule 79 (stmt -> expr .)
    newline         reduce using rule 79 (stmt -> expr .)
    KEYWORD_end     reduce using rule 79 (stmt -> expr .)
    KEYWORD_elsif   reduce using rule 79 (stmt -> expr .)
    KEYWORD_else    reduce using rule 79 (stmt -> expr .)
    $end            reduce using rule 79 (stmt -> expr .)


state 37

    (7) statement -> class_defn .

    DELIM           reduce using rule 7 (statement -> class_defn .)
    newline         reduce using rule 7 (statement -> class_defn .)
    $end            reduce using rule 7 (statement -> class_defn .)


state 38

    (6) statement -> func_defn .

    DELIM           reduce using rule 6 (statement -> func_defn .)
    newline         reduce using rule 6 (statement -> func_defn .)
    $end            reduce using rule 6 (statement -> func_defn .)


state 39

    (70) top_stmt -> KEYWORD_begin . gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (73) top_stmt -> KEYWORD_begin . gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (76) gen_stmts -> . top_stmt
    (77) gen_stmts -> . gen_stmts terms top_stmt
    (78) gen_stmts -> . none
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (209) none -> .
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . MLHS EQUAL MRHS
    (152) expr1 -> . expr3 QUESTION_MARK expr2 COLON expr2
    (153) expr1 -> . expr2
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . MLHS EQUAL fname func_ret_arg
    (125) MLHS -> . mlhs
    (126) MLHS -> . MLHS COMMA mlhs
    (157) expr3 -> . expr3 LOGICALOR expr4
    (158) expr3 -> . expr4
    (154) expr2 -> . expr7 DOUBLEDOT expr7
    (155) expr2 -> . expr7 TRIPLEDOT expr7
    (156) expr2 -> . expr3
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (129) mlhs -> . VARIABLES
    (130) mlhs -> . CONSTANTS
    (131) mlhs -> . array
    (159) expr4 -> . expr4 LOGICALAND expr5
    (160) expr4 -> . expr5
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (161) expr5 -> . expr6 IFF expr6
    (162) expr5 -> . expr6 DOUBLEEQUAL expr6
    (163) expr5 -> . expr6 TRIPLEEQUAL expr6
    (164) expr5 -> . expr6 NOTEQUAL expr6
    (165) expr5 -> . expr6
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (166) expr6 -> . expr7 LESSEQUAL expr7
    (167) expr6 -> . expr7 LESS expr7
    (168) expr6 -> . expr7 GREATER expr7
    (169) expr6 -> . expr7 GREATEREQUAL expr7
    (170) expr6 -> . expr7
    (171) expr6 -> . BOOLEAN_CONSTANTS
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP

    KEYWORD_if      shift and go to state 28
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 39
    KEYWORD_until   shift and go to state 26
    KEYWORD_for     shift and go to state 54
    DELIM           reduce using rule 209 (none -> .)
    newline         reduce using rule 209 (none -> .)
    KEYWORD_end     reduce using rule 209 (none -> .)
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)
    KEYWORD_puts    shift and go to state 34
    KEYWORD_break   shift and go to state 50
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 24
    VARIABLES       shift and go to state 106
    CONSTANTS       shift and go to state 105
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 31
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30

    mlhs                           shift and go to state 2
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    array                          shift and go to state 27
    expr2                          shift and go to state 42
    expr3                          shift and go to state 43
    expr1                          shift and go to state 44
    expr6                          shift and go to state 45
    expr7                          shift and go to state 7
    puts_stmt                      shift and go to state 19
    expr5                          shift and go to state 47
    func_call_stmt                 shift and go to state 33
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    expr4                          shift and go to state 8
    fname                          shift and go to state 46
    exit_stmt                      shift and go to state 51
    MLHS                           shift and go to state 52
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 21
    uexpr                          shift and go to state 10
    none                           shift and go to state 107
    gen_stmts                      shift and go to state 108
    expr                           shift and go to state 36
    top_stmt                       shift and go to state 104

state 40

    (17) class_defn -> KEYWORD_class . CONSTANTS newline class_stmts opt_terms KEYWORD_end

    CONSTANTS       shift and go to state 109


state 41

    (201) uexpr -> BITNOT .

    INT_CONSTANTS   reduce using rule 201 (uexpr -> BITNOT .)
    FLOAT_CONSTANTS reduce using rule 201 (uexpr -> BITNOT .)


state 42

    (153) expr1 -> expr2 .

    KEYWORD_while   reduce using rule 153 (expr1 -> expr2 .)
    KEYWORD_until   reduce using rule 153 (expr1 -> expr2 .)
    DELIM           reduce using rule 153 (expr1 -> expr2 .)
    newline         reduce using rule 153 (expr1 -> expr2 .)
    KEYWORD_end     reduce using rule 153 (expr1 -> expr2 .)
    $end            reduce using rule 153 (expr1 -> expr2 .)
    KEYWORD_elsif   reduce using rule 153 (expr1 -> expr2 .)
    KEYWORD_else    reduce using rule 153 (expr1 -> expr2 .)
    CLOSE_PAREN     reduce using rule 153 (expr1 -> expr2 .)
    COMMA           reduce using rule 153 (expr1 -> expr2 .)


state 43

    (152) expr1 -> expr3 . QUESTION_MARK expr2 COLON expr2
    (157) expr3 -> expr3 . LOGICALOR expr4
    (156) expr2 -> expr3 .

    QUESTION_MARK   shift and go to state 111
    LOGICALOR       shift and go to state 110
    KEYWORD_while   reduce using rule 156 (expr2 -> expr3 .)
    KEYWORD_until   reduce using rule 156 (expr2 -> expr3 .)
    DELIM           reduce using rule 156 (expr2 -> expr3 .)
    newline         reduce using rule 156 (expr2 -> expr3 .)
    KEYWORD_end     reduce using rule 156 (expr2 -> expr3 .)
    COMMA           reduce using rule 156 (expr2 -> expr3 .)
    $end            reduce using rule 156 (expr2 -> expr3 .)
    KEYWORD_elsif   reduce using rule 156 (expr2 -> expr3 .)
    KEYWORD_else    reduce using rule 156 (expr2 -> expr3 .)
    CLOSE_PAREN     reduce using rule 156 (expr2 -> expr3 .)


state 44

    (80) stmt -> expr1 .

    KEYWORD_while   reduce using rule 80 (stmt -> expr1 .)
    KEYWORD_until   reduce using rule 80 (stmt -> expr1 .)
    DELIM           reduce using rule 80 (stmt -> expr1 .)
    newline         reduce using rule 80 (stmt -> expr1 .)
    KEYWORD_end     reduce using rule 80 (stmt -> expr1 .)
    KEYWORD_elsif   reduce using rule 80 (stmt -> expr1 .)
    KEYWORD_else    reduce using rule 80 (stmt -> expr1 .)
    $end            reduce using rule 80 (stmt -> expr1 .)


state 45

    (161) expr5 -> expr6 . IFF expr6
    (162) expr5 -> expr6 . DOUBLEEQUAL expr6
    (163) expr5 -> expr6 . TRIPLEEQUAL expr6
    (164) expr5 -> expr6 . NOTEQUAL expr6
    (165) expr5 -> expr6 .

    IFF             shift and go to state 113
    DOUBLEEQUAL     shift and go to state 115
    TRIPLEEQUAL     shift and go to state 114
    NOTEQUAL        shift and go to state 112
    LOGICALAND      reduce using rule 165 (expr5 -> expr6 .)
    QUESTION_MARK   reduce using rule 165 (expr5 -> expr6 .)
    LOGICALOR       reduce using rule 165 (expr5 -> expr6 .)
    KEYWORD_while   reduce using rule 165 (expr5 -> expr6 .)
    KEYWORD_until   reduce using rule 165 (expr5 -> expr6 .)
    DELIM           reduce using rule 165 (expr5 -> expr6 .)
    newline         reduce using rule 165 (expr5 -> expr6 .)
    $end            reduce using rule 165 (expr5 -> expr6 .)
    KEYWORD_do      reduce using rule 165 (expr5 -> expr6 .)
    KEYWORD_then    reduce using rule 165 (expr5 -> expr6 .)
    CLOSE_PAREN     reduce using rule 165 (expr5 -> expr6 .)
    KEYWORD_end     reduce using rule 165 (expr5 -> expr6 .)
    KEYWORD_elsif   reduce using rule 165 (expr5 -> expr6 .)
    KEYWORD_else    reduce using rule 165 (expr5 -> expr6 .)
    COLON           reduce using rule 165 (expr5 -> expr6 .)
    COMMA           reduce using rule 165 (expr5 -> expr6 .)


state 46

    (85) func_call_stmt -> fname . OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> fname . func_ret_arg
    (100) func_ret_arg -> . func_arg_expr
    (101) func_ret_arg -> . primary
    (102) func_ret_arg -> . func_ret_arg COMMA func_arg_expr
    (103) func_ret_arg -> . func_ret_arg COMMA primary
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary
    (144) primary -> . INT_CONSTANTS
    (145) primary -> . FLOAT_CONSTANTS
    (146) primary -> . STRING_CONSTANTS
    (147) primary -> . CHAR_CONSTANTS
    (148) primary -> . BOOLEAN_CONSTANTS
    (149) primary -> . CONSTANTS
    (150) primary -> . VARIABLES
    (151) primary -> . array
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET

    OPEN_PAREN      shift and go to state 122
    VARIABLES       shift and go to state 127
    CONSTANTS       shift and go to state 123
    INT_CONSTANTS   shift and go to state 117
    FLOAT_CONSTANTS shift and go to state 118
    STRING_CONSTANTS shift and go to state 121
    CHAR_CONSTANTS  shift and go to state 126
    BOOLEAN_CONSTANTS shift and go to state 116

    func_arg_expr                  shift and go to state 119
    primary                        shift and go to state 120
    func_ret_arg                   shift and go to state 124
    array                          shift and go to state 125

state 47

    (160) expr4 -> expr5 .

    LOGICALAND      reduce using rule 160 (expr4 -> expr5 .)
    QUESTION_MARK   reduce using rule 160 (expr4 -> expr5 .)
    LOGICALOR       reduce using rule 160 (expr4 -> expr5 .)
    KEYWORD_while   reduce using rule 160 (expr4 -> expr5 .)
    KEYWORD_until   reduce using rule 160 (expr4 -> expr5 .)
    DELIM           reduce using rule 160 (expr4 -> expr5 .)
    newline         reduce using rule 160 (expr4 -> expr5 .)
    KEYWORD_end     reduce using rule 160 (expr4 -> expr5 .)
    $end            reduce using rule 160 (expr4 -> expr5 .)
    KEYWORD_do      reduce using rule 160 (expr4 -> expr5 .)
    KEYWORD_then    reduce using rule 160 (expr4 -> expr5 .)
    CLOSE_PAREN     reduce using rule 160 (expr4 -> expr5 .)
    KEYWORD_elsif   reduce using rule 160 (expr4 -> expr5 .)
    KEYWORD_else    reduce using rule 160 (expr4 -> expr5 .)
    COLON           reduce using rule 160 (expr4 -> expr5 .)
    COMMA           reduce using rule 160 (expr4 -> expr5 .)


state 48

    (174) expr7 -> expr8 .
    (175) expr8 -> expr8 . BITAND expr9

    DOUBLEDOT       reduce using rule 174 (expr7 -> expr8 .)
    TRIPLEDOT       reduce using rule 174 (expr7 -> expr8 .)
    BITXOR          reduce using rule 174 (expr7 -> expr8 .)
    PIPE            reduce using rule 174 (expr7 -> expr8 .)
    LESSEQUAL       reduce using rule 174 (expr7 -> expr8 .)
    LESS            reduce using rule 174 (expr7 -> expr8 .)
    GREATER         reduce using rule 174 (expr7 -> expr8 .)
    GREATEREQUAL    reduce using rule 174 (expr7 -> expr8 .)
    IFF             reduce using rule 174 (expr7 -> expr8 .)
    DOUBLEEQUAL     reduce using rule 174 (expr7 -> expr8 .)
    TRIPLEEQUAL     reduce using rule 174 (expr7 -> expr8 .)
    NOTEQUAL        reduce using rule 174 (expr7 -> expr8 .)
    LOGICALAND      reduce using rule 174 (expr7 -> expr8 .)
    QUESTION_MARK   reduce using rule 174 (expr7 -> expr8 .)
    LOGICALOR       reduce using rule 174 (expr7 -> expr8 .)
    KEYWORD_while   reduce using rule 174 (expr7 -> expr8 .)
    KEYWORD_until   reduce using rule 174 (expr7 -> expr8 .)
    DELIM           reduce using rule 174 (expr7 -> expr8 .)
    newline         reduce using rule 174 (expr7 -> expr8 .)
    KEYWORD_elsif   reduce using rule 174 (expr7 -> expr8 .)
    KEYWORD_else    reduce using rule 174 (expr7 -> expr8 .)
    KEYWORD_end     reduce using rule 174 (expr7 -> expr8 .)
    $end            reduce using rule 174 (expr7 -> expr8 .)
    KEYWORD_do      reduce using rule 174 (expr7 -> expr8 .)
    CLOSE_PAREN     reduce using rule 174 (expr7 -> expr8 .)
    COMMA           reduce using rule 174 (expr7 -> expr8 .)
    CLOSE_BRACKET   reduce using rule 174 (expr7 -> expr8 .)
    KEYWORD_then    reduce using rule 174 (expr7 -> expr8 .)
    COLON           reduce using rule 174 (expr7 -> expr8 .)
    BITAND          shift and go to state 128


state 49

    (176) expr8 -> expr9 .
    (177) expr9 -> expr9 . SHIFTL expr10
    (178) expr9 -> expr9 . SHIFTR expr10

    BITAND          reduce using rule 176 (expr8 -> expr9 .)
    DOUBLEDOT       reduce using rule 176 (expr8 -> expr9 .)
    TRIPLEDOT       reduce using rule 176 (expr8 -> expr9 .)
    BITXOR          reduce using rule 176 (expr8 -> expr9 .)
    PIPE            reduce using rule 176 (expr8 -> expr9 .)
    LESSEQUAL       reduce using rule 176 (expr8 -> expr9 .)
    LESS            reduce using rule 176 (expr8 -> expr9 .)
    GREATER         reduce using rule 176 (expr8 -> expr9 .)
    GREATEREQUAL    reduce using rule 176 (expr8 -> expr9 .)
    IFF             reduce using rule 176 (expr8 -> expr9 .)
    DOUBLEEQUAL     reduce using rule 176 (expr8 -> expr9 .)
    TRIPLEEQUAL     reduce using rule 176 (expr8 -> expr9 .)
    NOTEQUAL        reduce using rule 176 (expr8 -> expr9 .)
    LOGICALAND      reduce using rule 176 (expr8 -> expr9 .)
    LOGICALOR       reduce using rule 176 (expr8 -> expr9 .)
    COLON           reduce using rule 176 (expr8 -> expr9 .)
    QUESTION_MARK   reduce using rule 176 (expr8 -> expr9 .)
    COMMA           reduce using rule 176 (expr8 -> expr9 .)
    KEYWORD_while   reduce using rule 176 (expr8 -> expr9 .)
    KEYWORD_until   reduce using rule 176 (expr8 -> expr9 .)
    DELIM           reduce using rule 176 (expr8 -> expr9 .)
    newline         reduce using rule 176 (expr8 -> expr9 .)
    $end            reduce using rule 176 (expr8 -> expr9 .)
    KEYWORD_end     reduce using rule 176 (expr8 -> expr9 .)
    KEYWORD_elsif   reduce using rule 176 (expr8 -> expr9 .)
    KEYWORD_else    reduce using rule 176 (expr8 -> expr9 .)
    CLOSE_BRACKET   reduce using rule 176 (expr8 -> expr9 .)
    CLOSE_PAREN     reduce using rule 176 (expr8 -> expr9 .)
    KEYWORD_do      reduce using rule 176 (expr8 -> expr9 .)
    KEYWORD_then    reduce using rule 176 (expr8 -> expr9 .)
    SHIFTL          shift and go to state 130
    SHIFTR          shift and go to state 129


state 50

    (89) loop_stmt -> KEYWORD_break .

    KEYWORD_while   reduce using rule 89 (loop_stmt -> KEYWORD_break .)
    KEYWORD_until   reduce using rule 89 (loop_stmt -> KEYWORD_break .)
    DELIM           reduce using rule 89 (loop_stmt -> KEYWORD_break .)
    newline         reduce using rule 89 (loop_stmt -> KEYWORD_break .)
    KEYWORD_end     reduce using rule 89 (loop_stmt -> KEYWORD_break .)
    $end            reduce using rule 89 (loop_stmt -> KEYWORD_break .)
    KEYWORD_elsif   reduce using rule 89 (loop_stmt -> KEYWORD_break .)
    KEYWORD_else    reduce using rule 89 (loop_stmt -> KEYWORD_break .)


state 51

    (83) stmt -> exit_stmt .

    KEYWORD_while   reduce using rule 83 (stmt -> exit_stmt .)
    KEYWORD_until   reduce using rule 83 (stmt -> exit_stmt .)
    DELIM           reduce using rule 83 (stmt -> exit_stmt .)
    newline         reduce using rule 83 (stmt -> exit_stmt .)
    KEYWORD_end     reduce using rule 83 (stmt -> exit_stmt .)
    KEYWORD_elsif   reduce using rule 83 (stmt -> exit_stmt .)
    KEYWORD_else    reduce using rule 83 (stmt -> exit_stmt .)
    $end            reduce using rule 83 (stmt -> exit_stmt .)


state 52

    (124) expr -> MLHS . EQUAL MRHS
    (87) func_call_stmt -> MLHS . EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> MLHS . EQUAL fname func_ret_arg
    (126) MLHS -> MLHS . COMMA mlhs

    EQUAL           shift and go to state 131
    COMMA           shift and go to state 132


state 53

    (1) program -> top_top_compstmt .

    $end            reduce using rule 1 (program -> top_top_compstmt .)


state 54

    (74) top_stmt -> KEYWORD_for . OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> KEYWORD_for . multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (112) multi_var -> . VARIABLES
    (113) multi_var -> . CONSTANTS
    (114) multi_var -> . array
    (115) multi_var -> . multi_var COMMA VARIABLES
    (116) multi_var -> . multi_var COMMA CONSTANTS
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET

    OPEN_PAREN      shift and go to state 133
    VARIABLES       shift and go to state 134
    CONSTANTS       shift and go to state 136

    multi_var                      shift and go to state 135
    array                          shift and go to state 137

state 55

    (193) expr13 -> VARIABLES .
    (195) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> VARIABLES . OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> VARIABLES . OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET

    DOUBLESTAR      reduce using rule 193 (expr13 -> VARIABLES .)
    MULTIPLY        reduce using rule 193 (expr13 -> VARIABLES .)
    DIV             reduce using rule 193 (expr13 -> VARIABLES .)
    MOD             reduce using rule 193 (expr13 -> VARIABLES .)
    PLUS            reduce using rule 193 (expr13 -> VARIABLES .)
    MINUS           reduce using rule 193 (expr13 -> VARIABLES .)
    SHIFTL          reduce using rule 193 (expr13 -> VARIABLES .)
    SHIFTR          reduce using rule 193 (expr13 -> VARIABLES .)
    BITAND          reduce using rule 193 (expr13 -> VARIABLES .)
    BITXOR          reduce using rule 193 (expr13 -> VARIABLES .)
    PIPE            reduce using rule 193 (expr13 -> VARIABLES .)
    IFF             reduce using rule 193 (expr13 -> VARIABLES .)
    DOUBLEEQUAL     reduce using rule 193 (expr13 -> VARIABLES .)
    TRIPLEEQUAL     reduce using rule 193 (expr13 -> VARIABLES .)
    NOTEQUAL        reduce using rule 193 (expr13 -> VARIABLES .)
    LOGICALAND      reduce using rule 193 (expr13 -> VARIABLES .)
    QUESTION_MARK   reduce using rule 193 (expr13 -> VARIABLES .)
    LOGICALOR       reduce using rule 193 (expr13 -> VARIABLES .)
    KEYWORD_while   reduce using rule 193 (expr13 -> VARIABLES .)
    KEYWORD_until   reduce using rule 193 (expr13 -> VARIABLES .)
    DELIM           reduce using rule 193 (expr13 -> VARIABLES .)
    newline         reduce using rule 193 (expr13 -> VARIABLES .)
    $end            reduce using rule 193 (expr13 -> VARIABLES .)
    KEYWORD_do      reduce using rule 193 (expr13 -> VARIABLES .)
    KEYWORD_then    reduce using rule 193 (expr13 -> VARIABLES .)
    CLOSE_PAREN     reduce using rule 193 (expr13 -> VARIABLES .)
    KEYWORD_end     reduce using rule 193 (expr13 -> VARIABLES .)
    KEYWORD_elsif   reduce using rule 193 (expr13 -> VARIABLES .)
    KEYWORD_else    reduce using rule 193 (expr13 -> VARIABLES .)
    COLON           reduce using rule 193 (expr13 -> VARIABLES .)
    COMMA           reduce using rule 193 (expr13 -> VARIABLES .)
    LESSEQUAL       reduce using rule 193 (expr13 -> VARIABLES .)
    LESS            reduce using rule 193 (expr13 -> VARIABLES .)
    GREATER         reduce using rule 193 (expr13 -> VARIABLES .)
    GREATEREQUAL    reduce using rule 193 (expr13 -> VARIABLES .)
    CLOSE_BRACKET   reduce using rule 193 (expr13 -> VARIABLES .)
    DOUBLEDOT       reduce using rule 193 (expr13 -> VARIABLES .)
    TRIPLEDOT       reduce using rule 193 (expr13 -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 91


state 56

    (68) top_stmt -> KEYWORD_while expr3 . opt_do gen_stmts opt_terms KEYWORD_end
    (157) expr3 -> expr3 . LOGICALOR expr4
    (110) opt_do -> . KEYWORD_do
    (111) opt_do -> . newline

    LOGICALOR       shift and go to state 110
    KEYWORD_do      shift and go to state 139
    newline         shift and go to state 138

    opt_do                         shift and go to state 140

state 57

    (166) expr6 -> expr7 . LESSEQUAL expr7
    (167) expr6 -> expr7 . LESS expr7
    (168) expr6 -> expr7 . GREATER expr7
    (169) expr6 -> expr7 . GREATEREQUAL expr7
    (170) expr6 -> expr7 .
    (172) expr7 -> expr7 . BITXOR expr8
    (173) expr7 -> expr7 . PIPE expr8

    LESSEQUAL       shift and go to state 67
    LESS            shift and go to state 64
    GREATER         shift and go to state 63
    GREATEREQUAL    shift and go to state 61
    IFF             reduce using rule 170 (expr6 -> expr7 .)
    DOUBLEEQUAL     reduce using rule 170 (expr6 -> expr7 .)
    TRIPLEEQUAL     reduce using rule 170 (expr6 -> expr7 .)
    NOTEQUAL        reduce using rule 170 (expr6 -> expr7 .)
    LOGICALAND      reduce using rule 170 (expr6 -> expr7 .)
    LOGICALOR       reduce using rule 170 (expr6 -> expr7 .)
    KEYWORD_do      reduce using rule 170 (expr6 -> expr7 .)
    newline         reduce using rule 170 (expr6 -> expr7 .)
    KEYWORD_while   reduce using rule 170 (expr6 -> expr7 .)
    KEYWORD_until   reduce using rule 170 (expr6 -> expr7 .)
    DELIM           reduce using rule 170 (expr6 -> expr7 .)
    $end            reduce using rule 170 (expr6 -> expr7 .)
    KEYWORD_end     reduce using rule 170 (expr6 -> expr7 .)
    KEYWORD_elsif   reduce using rule 170 (expr6 -> expr7 .)
    KEYWORD_else    reduce using rule 170 (expr6 -> expr7 .)
    QUESTION_MARK   reduce using rule 170 (expr6 -> expr7 .)
    KEYWORD_then    reduce using rule 170 (expr6 -> expr7 .)
    CLOSE_PAREN     reduce using rule 170 (expr6 -> expr7 .)
    COLON           reduce using rule 170 (expr6 -> expr7 .)
    COMMA           reduce using rule 170 (expr6 -> expr7 .)
    BITXOR          shift and go to state 66
    PIPE            shift and go to state 65


state 58

    (194) expr13 -> array .

    DOUBLESTAR      reduce using rule 194 (expr13 -> array .)
    MULTIPLY        reduce using rule 194 (expr13 -> array .)
    DIV             reduce using rule 194 (expr13 -> array .)
    MOD             reduce using rule 194 (expr13 -> array .)
    PLUS            reduce using rule 194 (expr13 -> array .)
    MINUS           reduce using rule 194 (expr13 -> array .)
    SHIFTL          reduce using rule 194 (expr13 -> array .)
    SHIFTR          reduce using rule 194 (expr13 -> array .)
    BITAND          reduce using rule 194 (expr13 -> array .)
    BITXOR          reduce using rule 194 (expr13 -> array .)
    PIPE            reduce using rule 194 (expr13 -> array .)
    IFF             reduce using rule 194 (expr13 -> array .)
    DOUBLEEQUAL     reduce using rule 194 (expr13 -> array .)
    TRIPLEEQUAL     reduce using rule 194 (expr13 -> array .)
    NOTEQUAL        reduce using rule 194 (expr13 -> array .)
    LOGICALAND      reduce using rule 194 (expr13 -> array .)
    QUESTION_MARK   reduce using rule 194 (expr13 -> array .)
    LOGICALOR       reduce using rule 194 (expr13 -> array .)
    KEYWORD_while   reduce using rule 194 (expr13 -> array .)
    KEYWORD_until   reduce using rule 194 (expr13 -> array .)
    DELIM           reduce using rule 194 (expr13 -> array .)
    newline         reduce using rule 194 (expr13 -> array .)
    $end            reduce using rule 194 (expr13 -> array .)
    KEYWORD_do      reduce using rule 194 (expr13 -> array .)
    KEYWORD_then    reduce using rule 194 (expr13 -> array .)
    CLOSE_PAREN     reduce using rule 194 (expr13 -> array .)
    KEYWORD_end     reduce using rule 194 (expr13 -> array .)
    KEYWORD_elsif   reduce using rule 194 (expr13 -> array .)
    KEYWORD_else    reduce using rule 194 (expr13 -> array .)
    COLON           reduce using rule 194 (expr13 -> array .)
    COMMA           reduce using rule 194 (expr13 -> array .)
    DOUBLEDOT       reduce using rule 194 (expr13 -> array .)
    TRIPLEDOT       reduce using rule 194 (expr13 -> array .)
    LESSEQUAL       reduce using rule 194 (expr13 -> array .)
    LESS            reduce using rule 194 (expr13 -> array .)
    GREATER         reduce using rule 194 (expr13 -> array .)
    GREATEREQUAL    reduce using rule 194 (expr13 -> array .)
    CLOSE_BRACKET   reduce using rule 194 (expr13 -> array .)


state 59

    (192) expr13 -> CONSTANTS .

    DOUBLESTAR      reduce using rule 192 (expr13 -> CONSTANTS .)
    MULTIPLY        reduce using rule 192 (expr13 -> CONSTANTS .)
    DIV             reduce using rule 192 (expr13 -> CONSTANTS .)
    MOD             reduce using rule 192 (expr13 -> CONSTANTS .)
    PLUS            reduce using rule 192 (expr13 -> CONSTANTS .)
    MINUS           reduce using rule 192 (expr13 -> CONSTANTS .)
    SHIFTL          reduce using rule 192 (expr13 -> CONSTANTS .)
    SHIFTR          reduce using rule 192 (expr13 -> CONSTANTS .)
    BITAND          reduce using rule 192 (expr13 -> CONSTANTS .)
    BITXOR          reduce using rule 192 (expr13 -> CONSTANTS .)
    PIPE            reduce using rule 192 (expr13 -> CONSTANTS .)
    IFF             reduce using rule 192 (expr13 -> CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 192 (expr13 -> CONSTANTS .)
    TRIPLEEQUAL     reduce using rule 192 (expr13 -> CONSTANTS .)
    NOTEQUAL        reduce using rule 192 (expr13 -> CONSTANTS .)
    LOGICALAND      reduce using rule 192 (expr13 -> CONSTANTS .)
    QUESTION_MARK   reduce using rule 192 (expr13 -> CONSTANTS .)
    LOGICALOR       reduce using rule 192 (expr13 -> CONSTANTS .)
    KEYWORD_while   reduce using rule 192 (expr13 -> CONSTANTS .)
    KEYWORD_until   reduce using rule 192 (expr13 -> CONSTANTS .)
    DELIM           reduce using rule 192 (expr13 -> CONSTANTS .)
    newline         reduce using rule 192 (expr13 -> CONSTANTS .)
    $end            reduce using rule 192 (expr13 -> CONSTANTS .)
    KEYWORD_do      reduce using rule 192 (expr13 -> CONSTANTS .)
    KEYWORD_then    reduce using rule 192 (expr13 -> CONSTANTS .)
    CLOSE_PAREN     reduce using rule 192 (expr13 -> CONSTANTS .)
    KEYWORD_end     reduce using rule 192 (expr13 -> CONSTANTS .)
    KEYWORD_elsif   reduce using rule 192 (expr13 -> CONSTANTS .)
    KEYWORD_else    reduce using rule 192 (expr13 -> CONSTANTS .)
    COLON           reduce using rule 192 (expr13 -> CONSTANTS .)
    COMMA           reduce using rule 192 (expr13 -> CONSTANTS .)
    LESSEQUAL       reduce using rule 192 (expr13 -> CONSTANTS .)
    LESS            reduce using rule 192 (expr13 -> CONSTANTS .)
    GREATER         reduce using rule 192 (expr13 -> CONSTANTS .)
    GREATEREQUAL    reduce using rule 192 (expr13 -> CONSTANTS .)
    CLOSE_BRACKET   reduce using rule 192 (expr13 -> CONSTANTS .)
    DOUBLEDOT       reduce using rule 192 (expr13 -> CONSTANTS .)
    TRIPLEDOT       reduce using rule 192 (expr13 -> CONSTANTS .)


state 60

    (154) expr2 -> expr7 DOUBLEDOT . expr7
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (209) none -> .

    OPEN_PAREN      shift and go to state 31
    CONSTANTS       shift and go to state 59
    VARIABLES       shift and go to state 55
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 35
    expr10                         shift and go to state 14
    expr7                          shift and go to state 141
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    array                          shift and go to state 58
    expr11                         shift and go to state 15

state 61

    (169) expr6 -> expr7 GREATEREQUAL . expr7
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (209) none -> .

    OPEN_PAREN      shift and go to state 31
    CONSTANTS       shift and go to state 59
    VARIABLES       shift and go to state 55
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 35
    expr10                         shift and go to state 14
    expr7                          shift and go to state 142
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    array                          shift and go to state 58
    expr11                         shift and go to state 15

state 62

    (155) expr2 -> expr7 TRIPLEDOT . expr7
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (209) none -> .

    OPEN_PAREN      shift and go to state 31
    CONSTANTS       shift and go to state 59
    VARIABLES       shift and go to state 55
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 35
    expr10                         shift and go to state 14
    expr7                          shift and go to state 143
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    array                          shift and go to state 58
    expr11                         shift and go to state 15

state 63

    (168) expr6 -> expr7 GREATER . expr7
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (209) none -> .

    OPEN_PAREN      shift and go to state 31
    CONSTANTS       shift and go to state 59
    VARIABLES       shift and go to state 55
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 35
    expr10                         shift and go to state 14
    expr7                          shift and go to state 144
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    array                          shift and go to state 58
    expr11                         shift and go to state 15

state 64

    (167) expr6 -> expr7 LESS . expr7
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (209) none -> .

    OPEN_PAREN      shift and go to state 31
    CONSTANTS       shift and go to state 59
    VARIABLES       shift and go to state 55
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 35
    expr10                         shift and go to state 14
    expr7                          shift and go to state 145
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    array                          shift and go to state 58
    expr11                         shift and go to state 15

state 65

    (173) expr7 -> expr7 PIPE . expr8
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (209) none -> .

    OPEN_PAREN      shift and go to state 31
    CONSTANTS       shift and go to state 59
    VARIABLES       shift and go to state 55
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 35
    expr10                         shift and go to state 14
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr8                          shift and go to state 146
    expr9                          shift and go to state 49
    array                          shift and go to state 58
    expr11                         shift and go to state 15

state 66

    (172) expr7 -> expr7 BITXOR . expr8
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (209) none -> .

    OPEN_PAREN      shift and go to state 31
    CONSTANTS       shift and go to state 59
    VARIABLES       shift and go to state 55
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 35
    expr10                         shift and go to state 14
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr8                          shift and go to state 147
    expr9                          shift and go to state 49
    array                          shift and go to state 58
    expr11                         shift and go to state 15

state 67

    (166) expr6 -> expr7 LESSEQUAL . expr7
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (209) none -> .

    OPEN_PAREN      shift and go to state 31
    CONSTANTS       shift and go to state 59
    VARIABLES       shift and go to state 55
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 35
    expr10                         shift and go to state 14
    expr7                          shift and go to state 148
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    array                          shift and go to state 58
    expr11                         shift and go to state 15

state 68

    (159) expr4 -> expr4 LOGICALAND . expr5
    (161) expr5 -> . expr6 IFF expr6
    (162) expr5 -> . expr6 DOUBLEEQUAL expr6
    (163) expr5 -> . expr6 TRIPLEEQUAL expr6
    (164) expr5 -> . expr6 NOTEQUAL expr6
    (165) expr5 -> . expr6
    (166) expr6 -> . expr7 LESSEQUAL expr7
    (167) expr6 -> . expr7 LESS expr7
    (168) expr6 -> . expr7 GREATER expr7
    (169) expr6 -> . expr7 GREATEREQUAL expr7
    (170) expr6 -> . expr7
    (171) expr6 -> . BOOLEAN_CONSTANTS
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (209) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 31
    CONSTANTS       shift and go to state 59
    VARIABLES       shift and go to state 55
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 35
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr6                          shift and go to state 45
    expr7                          shift and go to state 57
    expr5                          shift and go to state 149
    expr10                         shift and go to state 14
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    array                          shift and go to state 58
    expr11                         shift and go to state 15

state 69

    (190) expr13 -> uexpr INT_CONSTANTS .

    DOUBLESTAR      reduce using rule 190 (expr13 -> uexpr INT_CONSTANTS .)
    MULTIPLY        reduce using rule 190 (expr13 -> uexpr INT_CONSTANTS .)
    DIV             reduce using rule 190 (expr13 -> uexpr INT_CONSTANTS .)
    MOD             reduce using rule 190 (expr13 -> uexpr INT_CONSTANTS .)
    PLUS            reduce using rule 190 (expr13 -> uexpr INT_CONSTANTS .)
    MINUS           reduce using rule 190 (expr13 -> uexpr INT_CONSTANTS .)
    SHIFTL          reduce using rule 190 (expr13 -> uexpr INT_CONSTANTS .)
    SHIFTR          reduce using rule 190 (expr13 -> uexpr INT_CONSTANTS .)
    BITAND          reduce using rule 190 (expr13 -> uexpr INT_CONSTANTS .)
    BITXOR          reduce using rule 190 (expr13 -> uexpr INT_CONSTANTS .)
    PIPE            reduce using rule 190 (expr13 -> uexpr INT_CONSTANTS .)
    IFF             reduce using rule 190 (expr13 -> uexpr INT_CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 190 (expr13 -> uexpr INT_CONSTANTS .)
    TRIPLEEQUAL     reduce using rule 190 (expr13 -> uexpr INT_CONSTANTS .)
    NOTEQUAL        reduce using rule 190 (expr13 -> uexpr INT_CONSTANTS .)
    LOGICALAND      reduce using rule 190 (expr13 -> uexpr INT_CONSTANTS .)
    QUESTION_MARK   reduce using rule 190 (expr13 -> uexpr INT_CONSTANTS .)
    LOGICALOR       reduce using rule 190 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_while   reduce using rule 190 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_until   reduce using rule 190 (expr13 -> uexpr INT_CONSTANTS .)
    DELIM           reduce using rule 190 (expr13 -> uexpr INT_CONSTANTS .)
    newline         reduce using rule 190 (expr13 -> uexpr INT_CONSTANTS .)
    $end            reduce using rule 190 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_do      reduce using rule 190 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_then    reduce using rule 190 (expr13 -> uexpr INT_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 190 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_end     reduce using rule 190 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 190 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_else    reduce using rule 190 (expr13 -> uexpr INT_CONSTANTS .)
    COLON           reduce using rule 190 (expr13 -> uexpr INT_CONSTANTS .)
    COMMA           reduce using rule 190 (expr13 -> uexpr INT_CONSTANTS .)
    DOUBLEDOT       reduce using rule 190 (expr13 -> uexpr INT_CONSTANTS .)
    TRIPLEDOT       reduce using rule 190 (expr13 -> uexpr INT_CONSTANTS .)
    LESSEQUAL       reduce using rule 190 (expr13 -> uexpr INT_CONSTANTS .)
    LESS            reduce using rule 190 (expr13 -> uexpr INT_CONSTANTS .)
    GREATER         reduce using rule 190 (expr13 -> uexpr INT_CONSTANTS .)
    GREATEREQUAL    reduce using rule 190 (expr13 -> uexpr INT_CONSTANTS .)
    CLOSE_BRACKET   reduce using rule 190 (expr13 -> uexpr INT_CONSTANTS .)


state 70

    (191) expr13 -> uexpr FLOAT_CONSTANTS .

    DOUBLESTAR      reduce using rule 191 (expr13 -> uexpr FLOAT_CONSTANTS .)
    MULTIPLY        reduce using rule 191 (expr13 -> uexpr FLOAT_CONSTANTS .)
    DIV             reduce using rule 191 (expr13 -> uexpr FLOAT_CONSTANTS .)
    MOD             reduce using rule 191 (expr13 -> uexpr FLOAT_CONSTANTS .)
    PLUS            reduce using rule 191 (expr13 -> uexpr FLOAT_CONSTANTS .)
    MINUS           reduce using rule 191 (expr13 -> uexpr FLOAT_CONSTANTS .)
    SHIFTL          reduce using rule 191 (expr13 -> uexpr FLOAT_CONSTANTS .)
    SHIFTR          reduce using rule 191 (expr13 -> uexpr FLOAT_CONSTANTS .)
    BITAND          reduce using rule 191 (expr13 -> uexpr FLOAT_CONSTANTS .)
    BITXOR          reduce using rule 191 (expr13 -> uexpr FLOAT_CONSTANTS .)
    PIPE            reduce using rule 191 (expr13 -> uexpr FLOAT_CONSTANTS .)
    IFF             reduce using rule 191 (expr13 -> uexpr FLOAT_CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 191 (expr13 -> uexpr FLOAT_CONSTANTS .)
    TRIPLEEQUAL     reduce using rule 191 (expr13 -> uexpr FLOAT_CONSTANTS .)
    NOTEQUAL        reduce using rule 191 (expr13 -> uexpr FLOAT_CONSTANTS .)
    LOGICALAND      reduce using rule 191 (expr13 -> uexpr FLOAT_CONSTANTS .)
    QUESTION_MARK   reduce using rule 191 (expr13 -> uexpr FLOAT_CONSTANTS .)
    LOGICALOR       reduce using rule 191 (expr13 -> uexpr FLOAT_CONSTANTS .)
    KEYWORD_while   reduce using rule 191 (expr13 -> uexpr FLOAT_CONSTANTS .)
    KEYWORD_until   reduce using rule 191 (expr13 -> uexpr FLOAT_CONSTANTS .)
    DELIM           reduce using rule 191 (expr13 -> uexpr FLOAT_CONSTANTS .)
    newline         reduce using rule 191 (expr13 -> uexpr FLOAT_CONSTANTS .)
    $end            reduce using rule 191 (expr13 -> uexpr FLOAT_CONSTANTS .)
    KEYWORD_do      reduce using rule 191 (expr13 -> uexpr FLOAT_CONSTANTS .)
    KEYWORD_then    reduce using rule 191 (expr13 -> uexpr FLOAT_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 191 (expr13 -> uexpr FLOAT_CONSTANTS .)
    KEYWORD_end     reduce using rule 191 (expr13 -> uexpr FLOAT_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 191 (expr13 -> uexpr FLOAT_CONSTANTS .)
    KEYWORD_else    reduce using rule 191 (expr13 -> uexpr FLOAT_CONSTANTS .)
    COLON           reduce using rule 191 (expr13 -> uexpr FLOAT_CONSTANTS .)
    COMMA           reduce using rule 191 (expr13 -> uexpr FLOAT_CONSTANTS .)
    DOUBLEDOT       reduce using rule 191 (expr13 -> uexpr FLOAT_CONSTANTS .)
    TRIPLEDOT       reduce using rule 191 (expr13 -> uexpr FLOAT_CONSTANTS .)
    LESSEQUAL       reduce using rule 191 (expr13 -> uexpr FLOAT_CONSTANTS .)
    LESS            reduce using rule 191 (expr13 -> uexpr FLOAT_CONSTANTS .)
    GREATER         reduce using rule 191 (expr13 -> uexpr FLOAT_CONSTANTS .)
    GREATEREQUAL    reduce using rule 191 (expr13 -> uexpr FLOAT_CONSTANTS .)
    CLOSE_BRACKET   reduce using rule 191 (expr13 -> uexpr FLOAT_CONSTANTS .)


state 71

    (69) top_stmt -> top_stmt KEYWORD_while . expr3
    (157) expr3 -> . expr3 LOGICALOR expr4
    (158) expr3 -> . expr4
    (159) expr4 -> . expr4 LOGICALAND expr5
    (160) expr4 -> . expr5
    (161) expr5 -> . expr6 IFF expr6
    (162) expr5 -> . expr6 DOUBLEEQUAL expr6
    (163) expr5 -> . expr6 TRIPLEEQUAL expr6
    (164) expr5 -> . expr6 NOTEQUAL expr6
    (165) expr5 -> . expr6
    (166) expr6 -> . expr7 LESSEQUAL expr7
    (167) expr6 -> . expr7 LESS expr7
    (168) expr6 -> . expr7 GREATER expr7
    (169) expr6 -> . expr7 GREATEREQUAL expr7
    (170) expr6 -> . expr7
    (171) expr6 -> . BOOLEAN_CONSTANTS
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (209) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 31
    CONSTANTS       shift and go to state 59
    VARIABLES       shift and go to state 55
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 35
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr3                          shift and go to state 150
    expr6                          shift and go to state 45
    expr7                          shift and go to state 57
    expr4                          shift and go to state 8
    expr5                          shift and go to state 47
    expr10                         shift and go to state 14
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    array                          shift and go to state 58
    expr11                         shift and go to state 15

state 72

    (71) top_stmt -> top_stmt KEYWORD_until . expr3
    (157) expr3 -> . expr3 LOGICALOR expr4
    (158) expr3 -> . expr4
    (159) expr4 -> . expr4 LOGICALAND expr5
    (160) expr4 -> . expr5
    (161) expr5 -> . expr6 IFF expr6
    (162) expr5 -> . expr6 DOUBLEEQUAL expr6
    (163) expr5 -> . expr6 TRIPLEEQUAL expr6
    (164) expr5 -> . expr6 NOTEQUAL expr6
    (165) expr5 -> . expr6
    (166) expr6 -> . expr7 LESSEQUAL expr7
    (167) expr6 -> . expr7 LESS expr7
    (168) expr6 -> . expr7 GREATER expr7
    (169) expr6 -> . expr7 GREATEREQUAL expr7
    (170) expr6 -> . expr7
    (171) expr6 -> . BOOLEAN_CONSTANTS
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (209) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 31
    CONSTANTS       shift and go to state 59
    VARIABLES       shift and go to state 55
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 35
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr3                          shift and go to state 151
    expr6                          shift and go to state 45
    expr7                          shift and go to state 57
    expr4                          shift and go to state 8
    expr5                          shift and go to state 47
    expr10                         shift and go to state 14
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    array                          shift and go to state 58
    expr11                         shift and go to state 15

state 73

    (180) expr10 -> expr10 PLUS . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (209) none -> .

    OPEN_PAREN      shift and go to state 31
    CONSTANTS       shift and go to state 59
    VARIABLES       shift and go to state 55
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 35
    expr11                         shift and go to state 152
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    array                          shift and go to state 58

state 74

    (181) expr10 -> expr10 MINUS . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (209) none -> .

    OPEN_PAREN      shift and go to state 31
    CONSTANTS       shift and go to state 59
    VARIABLES       shift and go to state 55
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 35
    expr11                         shift and go to state 153
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    array                          shift and go to state 58

state 75

    (183) expr11 -> expr11 MULTIPLY . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (209) none -> .

    OPEN_PAREN      shift and go to state 31
    CONSTANTS       shift and go to state 59
    VARIABLES       shift and go to state 55
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 35
    expr12                         shift and go to state 154
    expr13                         shift and go to state 17
    array                          shift and go to state 58

state 76

    (184) expr11 -> expr11 DIV . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (209) none -> .

    OPEN_PAREN      shift and go to state 31
    CONSTANTS       shift and go to state 59
    VARIABLES       shift and go to state 55
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 35
    expr12                         shift and go to state 155
    expr13                         shift and go to state 17
    array                          shift and go to state 58

state 77

    (185) expr11 -> expr11 MOD . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (209) none -> .

    OPEN_PAREN      shift and go to state 31
    CONSTANTS       shift and go to state 59
    VARIABLES       shift and go to state 55
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 35
    expr12                         shift and go to state 156
    expr13                         shift and go to state 17
    array                          shift and go to state 58

state 78

    (187) expr12 -> expr13 DOUBLESTAR . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (209) none -> .

    OPEN_PAREN      shift and go to state 31
    CONSTANTS       shift and go to state 59
    VARIABLES       shift and go to state 55
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 35
    expr12                         shift and go to state 157
    expr13                         shift and go to state 17
    array                          shift and go to state 58

state 79

    (54) fname -> CONSTANTS .

    OPEN_PAREN      reduce using rule 54 (fname -> CONSTANTS .)
    VARIABLES       reduce using rule 54 (fname -> CONSTANTS .)
    CONSTANTS       reduce using rule 54 (fname -> CONSTANTS .)
    newline         reduce using rule 54 (fname -> CONSTANTS .)


state 80

    (53) fname -> VARIABLES .

    OPEN_PAREN      reduce using rule 53 (fname -> VARIABLES .)
    VARIABLES       reduce using rule 53 (fname -> VARIABLES .)
    CONSTANTS       reduce using rule 53 (fname -> VARIABLES .)
    newline         reduce using rule 53 (fname -> VARIABLES .)


state 81

    (14) func_defn -> KEYWORD_def fname . OPEN_PAREN arguments CLOSE_PAREN func_stmts opt_terms KEYWORD_end
    (15) func_defn -> KEYWORD_def fname . OPEN_PAREN CLOSE_PAREN func_stmts opt_terms KEYWORD_end
    (16) func_defn -> KEYWORD_def fname . arguments func_stmts opt_terms KEYWORD_end
    (55) arguments -> . arguments COMMA VARIABLES
    (56) arguments -> . arguments COMMA CONSTANTS
    (57) arguments -> . arguments COMMA func_arg_expr
    (58) arguments -> . VARIABLES
    (59) arguments -> . CONSTANTS
    (60) arguments -> . func_arg_expr
    (61) arguments -> . newline
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary

    OPEN_PAREN      shift and go to state 161
    VARIABLES       shift and go to state 159
    CONSTANTS       shift and go to state 158
    newline         shift and go to state 160

    func_arg_expr                  shift and go to state 163
    arguments                      shift and go to state 162

state 82

    (11) statement -> CONSTANTS DOT . KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (12) statement -> CONSTANTS DOT . KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (13) statement -> CONSTANTS DOT . KEYWORD_new arguments

    KEYWORD_new     shift and go to state 164


state 83

    (205) terms -> term .

    KEYWORD_if      reduce using rule 205 (terms -> term .)
    KEYWORD_while   reduce using rule 205 (terms -> term .)
    KEYWORD_begin   reduce using rule 205 (terms -> term .)
    KEYWORD_until   reduce using rule 205 (terms -> term .)
    KEYWORD_for     reduce using rule 205 (terms -> term .)
    DELIM           reduce using rule 205 (terms -> term .)
    newline         reduce using rule 205 (terms -> term .)
    KEYWORD_puts    reduce using rule 205 (terms -> term .)
    KEYWORD_break   reduce using rule 205 (terms -> term .)
    KEYWORD_next    reduce using rule 205 (terms -> term .)
    KEYWORD_redo    reduce using rule 205 (terms -> term .)
    KEYWORD_exit    reduce using rule 205 (terms -> term .)
    VARIABLES       reduce using rule 205 (terms -> term .)
    CONSTANTS       reduce using rule 205 (terms -> term .)
    BOOLEAN_CONSTANTS reduce using rule 205 (terms -> term .)
    OPEN_PAREN      reduce using rule 205 (terms -> term .)
    PLUS            reduce using rule 205 (terms -> term .)
    MINUS           reduce using rule 205 (terms -> term .)
    BITNOT          reduce using rule 205 (terms -> term .)
    BITCOMP         reduce using rule 205 (terms -> term .)
    INT_CONSTANTS   reduce using rule 205 (terms -> term .)
    FLOAT_CONSTANTS reduce using rule 205 (terms -> term .)
    KEYWORD_end     reduce using rule 205 (terms -> term .)
    KEYWORD_return  reduce using rule 205 (terms -> term .)
    SIGIL_AT        reduce using rule 205 (terms -> term .)
    SIGIL_DOUBLE_AT reduce using rule 205 (terms -> term .)
    KEYWORD_def     reduce using rule 205 (terms -> term .)
    KEYWORD_class   reduce using rule 205 (terms -> term .)
    $end            reduce using rule 205 (terms -> term .)
    KEYWORD_elsif   reduce using rule 205 (terms -> term .)
    KEYWORD_else    reduce using rule 205 (terms -> term .)


state 84

    (4) statements -> statements terms . statement
    (204) opt_terms -> terms .
    (206) terms -> terms . term
    (5) statement -> . top_compstmt
    (6) statement -> . func_defn
    (7) statement -> . class_defn
    (8) statement -> . VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (9) statement -> . VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (10) statement -> . VARIABLES DOT VARIABLES arguments
    (11) statement -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (12) statement -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (13) statement -> . CONSTANTS DOT KEYWORD_new arguments
    (207) term -> . DELIM
    (208) term -> . newline
    (64) top_compstmt -> . top_stmts
    (14) func_defn -> . KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN func_stmts opt_terms KEYWORD_end
    (15) func_defn -> . KEYWORD_def fname OPEN_PAREN CLOSE_PAREN func_stmts opt_terms KEYWORD_end
    (16) func_defn -> . KEYWORD_def fname arguments func_stmts opt_terms KEYWORD_end
    (17) class_defn -> . KEYWORD_class CONSTANTS newline class_stmts opt_terms KEYWORD_end
    (65) top_stmts -> . top_stmt
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . MLHS EQUAL MRHS
    (152) expr1 -> . expr3 QUESTION_MARK expr2 COLON expr2
    (153) expr1 -> . expr2
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . MLHS EQUAL fname func_ret_arg
    (125) MLHS -> . mlhs
    (126) MLHS -> . MLHS COMMA mlhs
    (157) expr3 -> . expr3 LOGICALOR expr4
    (158) expr3 -> . expr4
    (154) expr2 -> . expr7 DOUBLEDOT expr7
    (155) expr2 -> . expr7 TRIPLEDOT expr7
    (156) expr2 -> . expr3
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (129) mlhs -> . VARIABLES
    (130) mlhs -> . CONSTANTS
    (131) mlhs -> . array
    (159) expr4 -> . expr4 LOGICALAND expr5
    (160) expr4 -> . expr5
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (161) expr5 -> . expr6 IFF expr6
    (162) expr5 -> . expr6 DOUBLEEQUAL expr6
    (163) expr5 -> . expr6 TRIPLEEQUAL expr6
    (164) expr5 -> . expr6 NOTEQUAL expr6
    (165) expr5 -> . expr6
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (166) expr6 -> . expr7 LESSEQUAL expr7
    (167) expr6 -> . expr7 LESS expr7
    (168) expr6 -> . expr7 GREATER expr7
    (169) expr6 -> . expr7 GREATEREQUAL expr7
    (170) expr6 -> . expr7
    (171) expr6 -> . BOOLEAN_CONSTANTS
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (209) none -> .

    $end            reduce using rule 204 (opt_terms -> terms .)
    VARIABLES       shift and go to state 29
    CONSTANTS       shift and go to state 23
    DELIM           shift and go to state 86
    newline         shift and go to state 85
    KEYWORD_def     shift and go to state 22
    KEYWORD_class   shift and go to state 40
    KEYWORD_if      shift and go to state 28
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 39
    KEYWORD_until   shift and go to state 26
    KEYWORD_for     shift and go to state 54
    KEYWORD_puts    shift and go to state 34
    KEYWORD_break   shift and go to state 50
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 24
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 31
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    mlhs                           shift and go to state 2
    func_defn                      shift and go to state 38
    puts_stmt                      shift and go to state 19
    expr11                         shift and go to state 15
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    top_stmts                      shift and go to state 18
    array                          shift and go to state 27
    expr2                          shift and go to state 42
    expr3                          shift and go to state 43
    expr1                          shift and go to state 44
    expr6                          shift and go to state 45
    fname                          shift and go to state 46
    expr5                          shift and go to state 47
    func_call_stmt                 shift and go to state 33
    expr7                          shift and go to state 7
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    expr4                          shift and go to state 8
    statement                      shift and go to state 166
    exit_stmt                      shift and go to state 51
    top_compstmt                   shift and go to state 20
    MLHS                           shift and go to state 52
    none                           shift and go to state 35
    stmt                           shift and go to state 21
    loop_stmt                      shift and go to state 9
    uexpr                          shift and go to state 10
    term                           shift and go to state 165
    expr                           shift and go to state 36
    class_defn                     shift and go to state 37
    expr10                         shift and go to state 14
    top_stmt                       shift and go to state 13

state 85

    (208) term -> newline .

    SIGIL_AT        reduce using rule 208 (term -> newline .)
    DELIM           reduce using rule 208 (term -> newline .)
    newline         reduce using rule 208 (term -> newline .)
    KEYWORD_if      reduce using rule 208 (term -> newline .)
    KEYWORD_while   reduce using rule 208 (term -> newline .)
    KEYWORD_begin   reduce using rule 208 (term -> newline .)
    KEYWORD_until   reduce using rule 208 (term -> newline .)
    KEYWORD_for     reduce using rule 208 (term -> newline .)
    KEYWORD_puts    reduce using rule 208 (term -> newline .)
    KEYWORD_break   reduce using rule 208 (term -> newline .)
    KEYWORD_next    reduce using rule 208 (term -> newline .)
    KEYWORD_redo    reduce using rule 208 (term -> newline .)
    KEYWORD_exit    reduce using rule 208 (term -> newline .)
    VARIABLES       reduce using rule 208 (term -> newline .)
    CONSTANTS       reduce using rule 208 (term -> newline .)
    BOOLEAN_CONSTANTS reduce using rule 208 (term -> newline .)
    OPEN_PAREN      reduce using rule 208 (term -> newline .)
    PLUS            reduce using rule 208 (term -> newline .)
    MINUS           reduce using rule 208 (term -> newline .)
    BITNOT          reduce using rule 208 (term -> newline .)
    BITCOMP         reduce using rule 208 (term -> newline .)
    INT_CONSTANTS   reduce using rule 208 (term -> newline .)
    FLOAT_CONSTANTS reduce using rule 208 (term -> newline .)
    KEYWORD_elsif   reduce using rule 208 (term -> newline .)
    KEYWORD_else    reduce using rule 208 (term -> newline .)
    KEYWORD_end     reduce using rule 208 (term -> newline .)
    KEYWORD_return  reduce using rule 208 (term -> newline .)
    SIGIL_DOUBLE_AT reduce using rule 208 (term -> newline .)
    KEYWORD_def     reduce using rule 208 (term -> newline .)
    KEYWORD_class   reduce using rule 208 (term -> newline .)
    $end            reduce using rule 208 (term -> newline .)


state 86

    (207) term -> DELIM .

    SIGIL_AT        reduce using rule 207 (term -> DELIM .)
    DELIM           reduce using rule 207 (term -> DELIM .)
    newline         reduce using rule 207 (term -> DELIM .)
    KEYWORD_if      reduce using rule 207 (term -> DELIM .)
    KEYWORD_while   reduce using rule 207 (term -> DELIM .)
    KEYWORD_begin   reduce using rule 207 (term -> DELIM .)
    KEYWORD_until   reduce using rule 207 (term -> DELIM .)
    KEYWORD_for     reduce using rule 207 (term -> DELIM .)
    KEYWORD_puts    reduce using rule 207 (term -> DELIM .)
    KEYWORD_break   reduce using rule 207 (term -> DELIM .)
    KEYWORD_next    reduce using rule 207 (term -> DELIM .)
    KEYWORD_redo    reduce using rule 207 (term -> DELIM .)
    KEYWORD_exit    reduce using rule 207 (term -> DELIM .)
    VARIABLES       reduce using rule 207 (term -> DELIM .)
    CONSTANTS       reduce using rule 207 (term -> DELIM .)
    BOOLEAN_CONSTANTS reduce using rule 207 (term -> DELIM .)
    OPEN_PAREN      reduce using rule 207 (term -> DELIM .)
    PLUS            reduce using rule 207 (term -> DELIM .)
    MINUS           reduce using rule 207 (term -> DELIM .)
    BITNOT          reduce using rule 207 (term -> DELIM .)
    BITCOMP         reduce using rule 207 (term -> DELIM .)
    INT_CONSTANTS   reduce using rule 207 (term -> DELIM .)
    FLOAT_CONSTANTS reduce using rule 207 (term -> DELIM .)
    KEYWORD_elsif   reduce using rule 207 (term -> DELIM .)
    KEYWORD_else    reduce using rule 207 (term -> DELIM .)
    KEYWORD_end     reduce using rule 207 (term -> DELIM .)
    KEYWORD_return  reduce using rule 207 (term -> DELIM .)
    SIGIL_DOUBLE_AT reduce using rule 207 (term -> DELIM .)
    KEYWORD_def     reduce using rule 207 (term -> DELIM .)
    KEYWORD_class   reduce using rule 207 (term -> DELIM .)
    $end            reduce using rule 207 (term -> DELIM .)


state 87

    (203) opt_terms -> none .

    KEYWORD_end     reduce using rule 203 (opt_terms -> none .)
    KEYWORD_elsif   reduce using rule 203 (opt_terms -> none .)
    KEYWORD_else    reduce using rule 203 (opt_terms -> none .)
    $end            reduce using rule 203 (opt_terms -> none .)


state 88

    (2) top_top_compstmt -> statements opt_terms .

    $end            reduce using rule 2 (top_top_compstmt -> statements opt_terms .)


state 89

    (72) top_stmt -> KEYWORD_until expr3 . opt_do gen_stmts opt_terms KEYWORD_end
    (157) expr3 -> expr3 . LOGICALOR expr4
    (110) opt_do -> . KEYWORD_do
    (111) opt_do -> . newline

    LOGICALOR       shift and go to state 110
    KEYWORD_do      shift and go to state 139
    newline         shift and go to state 138

    opt_do                         shift and go to state 167

state 90

    (67) top_stmt -> KEYWORD_if expr3 . opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (157) expr3 -> expr3 . LOGICALOR expr4
    (108) opt_then -> . KEYWORD_then
    (109) opt_then -> . newline

    LOGICALOR       shift and go to state 110
    KEYWORD_then    shift and go to state 169
    newline         shift and go to state 168

    opt_then                       shift and go to state 170

state 91

    (195) array -> VARIABLES OPEN_BRACKET . expr7 CLOSE_BRACKET
    (196) array -> VARIABLES OPEN_BRACKET . expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> VARIABLES OPEN_BRACKET . expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (209) none -> .

    OPEN_PAREN      shift and go to state 31
    CONSTANTS       shift and go to state 59
    VARIABLES       shift and go to state 55
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 35
    expr10                         shift and go to state 14
    expr7                          shift and go to state 171
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    array                          shift and go to state 58
    expr11                         shift and go to state 15

state 92

    (8) statement -> VARIABLES DOT . VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (9) statement -> VARIABLES DOT . VARIABLES OPEN_PAREN CLOSE_PAREN
    (10) statement -> VARIABLES DOT . VARIABLES arguments

    VARIABLES       shift and go to state 172


state 93

    (189) expr13 -> OPEN_PAREN expr1 . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 173


state 94

    (133) mrhs -> str_expr .
    (142) str_expr -> str_expr . PLUS STRING_CONSTANTS

    COMMA           reduce using rule 133 (mrhs -> str_expr .)
    KEYWORD_while   reduce using rule 133 (mrhs -> str_expr .)
    KEYWORD_until   reduce using rule 133 (mrhs -> str_expr .)
    DELIM           reduce using rule 133 (mrhs -> str_expr .)
    newline         reduce using rule 133 (mrhs -> str_expr .)
    $end            reduce using rule 133 (mrhs -> str_expr .)
    KEYWORD_end     reduce using rule 133 (mrhs -> str_expr .)
    KEYWORD_elsif   reduce using rule 133 (mrhs -> str_expr .)
    KEYWORD_else    reduce using rule 133 (mrhs -> str_expr .)
    PLUS            shift and go to state 174


state 95

    (136) mrhs -> VARIABLES . DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (137) mrhs -> VARIABLES . DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (138) mrhs -> VARIABLES . DOT VARIABLES
    (129) mlhs -> VARIABLES .
    (195) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> VARIABLES . OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> VARIABLES . OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (193) expr13 -> VARIABLES .

    DOT             shift and go to state 175
    EQUAL           reduce using rule 129 (mlhs -> VARIABLES .)
    COMMA           reduce using rule 129 (mlhs -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 91
    DOUBLESTAR      reduce using rule 193 (expr13 -> VARIABLES .)
    MULTIPLY        reduce using rule 193 (expr13 -> VARIABLES .)
    DIV             reduce using rule 193 (expr13 -> VARIABLES .)
    MOD             reduce using rule 193 (expr13 -> VARIABLES .)
    PLUS            reduce using rule 193 (expr13 -> VARIABLES .)
    MINUS           reduce using rule 193 (expr13 -> VARIABLES .)
    SHIFTL          reduce using rule 193 (expr13 -> VARIABLES .)
    SHIFTR          reduce using rule 193 (expr13 -> VARIABLES .)
    BITAND          reduce using rule 193 (expr13 -> VARIABLES .)
    DOUBLEDOT       reduce using rule 193 (expr13 -> VARIABLES .)
    TRIPLEDOT       reduce using rule 193 (expr13 -> VARIABLES .)
    BITXOR          reduce using rule 193 (expr13 -> VARIABLES .)
    PIPE            reduce using rule 193 (expr13 -> VARIABLES .)
    LESSEQUAL       reduce using rule 193 (expr13 -> VARIABLES .)
    LESS            reduce using rule 193 (expr13 -> VARIABLES .)
    GREATER         reduce using rule 193 (expr13 -> VARIABLES .)
    GREATEREQUAL    reduce using rule 193 (expr13 -> VARIABLES .)
    IFF             reduce using rule 193 (expr13 -> VARIABLES .)
    DOUBLEEQUAL     reduce using rule 193 (expr13 -> VARIABLES .)
    TRIPLEEQUAL     reduce using rule 193 (expr13 -> VARIABLES .)
    NOTEQUAL        reduce using rule 193 (expr13 -> VARIABLES .)
    LOGICALAND      reduce using rule 193 (expr13 -> VARIABLES .)
    QUESTION_MARK   reduce using rule 193 (expr13 -> VARIABLES .)
    LOGICALOR       reduce using rule 193 (expr13 -> VARIABLES .)
    KEYWORD_while   reduce using rule 193 (expr13 -> VARIABLES .)
    KEYWORD_until   reduce using rule 193 (expr13 -> VARIABLES .)
    DELIM           reduce using rule 193 (expr13 -> VARIABLES .)
    newline         reduce using rule 193 (expr13 -> VARIABLES .)
    $end            reduce using rule 193 (expr13 -> VARIABLES .)
    KEYWORD_end     reduce using rule 193 (expr13 -> VARIABLES .)
    KEYWORD_elsif   reduce using rule 193 (expr13 -> VARIABLES .)
    KEYWORD_else    reduce using rule 193 (expr13 -> VARIABLES .)


state 96

    (135) mrhs -> OPEN_BRACKET . func_ret_arg CLOSE_BRACKET
    (100) func_ret_arg -> . func_arg_expr
    (101) func_ret_arg -> . primary
    (102) func_ret_arg -> . func_ret_arg COMMA func_arg_expr
    (103) func_ret_arg -> . func_ret_arg COMMA primary
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary
    (144) primary -> . INT_CONSTANTS
    (145) primary -> . FLOAT_CONSTANTS
    (146) primary -> . STRING_CONSTANTS
    (147) primary -> . CHAR_CONSTANTS
    (148) primary -> . BOOLEAN_CONSTANTS
    (149) primary -> . CONSTANTS
    (150) primary -> . VARIABLES
    (151) primary -> . array
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET

    VARIABLES       shift and go to state 127
    CONSTANTS       shift and go to state 123
    INT_CONSTANTS   shift and go to state 117
    FLOAT_CONSTANTS shift and go to state 118
    STRING_CONSTANTS shift and go to state 121
    CHAR_CONSTANTS  shift and go to state 126
    BOOLEAN_CONSTANTS shift and go to state 116

    func_arg_expr                  shift and go to state 119
    func_ret_arg                   shift and go to state 176
    array                          shift and go to state 125
    primary                        shift and go to state 120

state 97

    (132) mrhs -> expr1 .

    COMMA           reduce using rule 132 (mrhs -> expr1 .)
    KEYWORD_while   reduce using rule 132 (mrhs -> expr1 .)
    KEYWORD_until   reduce using rule 132 (mrhs -> expr1 .)
    DELIM           reduce using rule 132 (mrhs -> expr1 .)
    newline         reduce using rule 132 (mrhs -> expr1 .)
    $end            reduce using rule 132 (mrhs -> expr1 .)
    KEYWORD_end     reduce using rule 132 (mrhs -> expr1 .)
    KEYWORD_elsif   reduce using rule 132 (mrhs -> expr1 .)
    KEYWORD_else    reduce using rule 132 (mrhs -> expr1 .)


state 98

    (134) mrhs -> KEYWORD_gets .

    COMMA           reduce using rule 134 (mrhs -> KEYWORD_gets .)
    KEYWORD_while   reduce using rule 134 (mrhs -> KEYWORD_gets .)
    KEYWORD_until   reduce using rule 134 (mrhs -> KEYWORD_gets .)
    DELIM           reduce using rule 134 (mrhs -> KEYWORD_gets .)
    newline         reduce using rule 134 (mrhs -> KEYWORD_gets .)
    $end            reduce using rule 134 (mrhs -> KEYWORD_gets .)
    KEYWORD_end     reduce using rule 134 (mrhs -> KEYWORD_gets .)
    KEYWORD_elsif   reduce using rule 134 (mrhs -> KEYWORD_gets .)
    KEYWORD_else    reduce using rule 134 (mrhs -> KEYWORD_gets .)


state 99

    (124) expr -> MLHS . EQUAL MRHS
    (126) MLHS -> MLHS . COMMA mlhs

    EQUAL           shift and go to state 177
    COMMA           shift and go to state 132


state 100

    (93) puts_stmt -> KEYWORD_puts mrhs .

    KEYWORD_while   reduce using rule 93 (puts_stmt -> KEYWORD_puts mrhs .)
    KEYWORD_until   reduce using rule 93 (puts_stmt -> KEYWORD_puts mrhs .)
    DELIM           reduce using rule 93 (puts_stmt -> KEYWORD_puts mrhs .)
    newline         reduce using rule 93 (puts_stmt -> KEYWORD_puts mrhs .)
    $end            reduce using rule 93 (puts_stmt -> KEYWORD_puts mrhs .)
    KEYWORD_end     reduce using rule 93 (puts_stmt -> KEYWORD_puts mrhs .)
    KEYWORD_elsif   reduce using rule 93 (puts_stmt -> KEYWORD_puts mrhs .)
    KEYWORD_else    reduce using rule 93 (puts_stmt -> KEYWORD_puts mrhs .)


state 101

    (94) puts_stmt -> KEYWORD_puts expr .

    KEYWORD_while   reduce using rule 94 (puts_stmt -> KEYWORD_puts expr .)
    KEYWORD_until   reduce using rule 94 (puts_stmt -> KEYWORD_puts expr .)
    DELIM           reduce using rule 94 (puts_stmt -> KEYWORD_puts expr .)
    newline         reduce using rule 94 (puts_stmt -> KEYWORD_puts expr .)
    $end            reduce using rule 94 (puts_stmt -> KEYWORD_puts expr .)
    KEYWORD_end     reduce using rule 94 (puts_stmt -> KEYWORD_puts expr .)
    KEYWORD_elsif   reduce using rule 94 (puts_stmt -> KEYWORD_puts expr .)
    KEYWORD_else    reduce using rule 94 (puts_stmt -> KEYWORD_puts expr .)


state 102

    (143) str_expr -> STRING_CONSTANTS .

    PLUS            reduce using rule 143 (str_expr -> STRING_CONSTANTS .)
    COMMA           reduce using rule 143 (str_expr -> STRING_CONSTANTS .)
    KEYWORD_while   reduce using rule 143 (str_expr -> STRING_CONSTANTS .)
    KEYWORD_until   reduce using rule 143 (str_expr -> STRING_CONSTANTS .)
    DELIM           reduce using rule 143 (str_expr -> STRING_CONSTANTS .)
    newline         reduce using rule 143 (str_expr -> STRING_CONSTANTS .)
    $end            reduce using rule 143 (str_expr -> STRING_CONSTANTS .)
    KEYWORD_end     reduce using rule 143 (str_expr -> STRING_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 143 (str_expr -> STRING_CONSTANTS .)
    KEYWORD_else    reduce using rule 143 (str_expr -> STRING_CONSTANTS .)


state 103

    (139) mrhs -> CONSTANTS . DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (140) mrhs -> CONSTANTS . DOT KEYWORD_new
    (141) mrhs -> CONSTANTS . DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (130) mlhs -> CONSTANTS .
    (192) expr13 -> CONSTANTS .

    DOT             shift and go to state 178
    EQUAL           reduce using rule 130 (mlhs -> CONSTANTS .)
    COMMA           reduce using rule 130 (mlhs -> CONSTANTS .)
    DOUBLESTAR      reduce using rule 192 (expr13 -> CONSTANTS .)
    MULTIPLY        reduce using rule 192 (expr13 -> CONSTANTS .)
    DIV             reduce using rule 192 (expr13 -> CONSTANTS .)
    MOD             reduce using rule 192 (expr13 -> CONSTANTS .)
    PLUS            reduce using rule 192 (expr13 -> CONSTANTS .)
    MINUS           reduce using rule 192 (expr13 -> CONSTANTS .)
    SHIFTL          reduce using rule 192 (expr13 -> CONSTANTS .)
    SHIFTR          reduce using rule 192 (expr13 -> CONSTANTS .)
    BITAND          reduce using rule 192 (expr13 -> CONSTANTS .)
    DOUBLEDOT       reduce using rule 192 (expr13 -> CONSTANTS .)
    TRIPLEDOT       reduce using rule 192 (expr13 -> CONSTANTS .)
    BITXOR          reduce using rule 192 (expr13 -> CONSTANTS .)
    PIPE            reduce using rule 192 (expr13 -> CONSTANTS .)
    LESSEQUAL       reduce using rule 192 (expr13 -> CONSTANTS .)
    LESS            reduce using rule 192 (expr13 -> CONSTANTS .)
    GREATER         reduce using rule 192 (expr13 -> CONSTANTS .)
    GREATEREQUAL    reduce using rule 192 (expr13 -> CONSTANTS .)
    IFF             reduce using rule 192 (expr13 -> CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 192 (expr13 -> CONSTANTS .)
    TRIPLEEQUAL     reduce using rule 192 (expr13 -> CONSTANTS .)
    NOTEQUAL        reduce using rule 192 (expr13 -> CONSTANTS .)
    LOGICALAND      reduce using rule 192 (expr13 -> CONSTANTS .)
    QUESTION_MARK   reduce using rule 192 (expr13 -> CONSTANTS .)
    LOGICALOR       reduce using rule 192 (expr13 -> CONSTANTS .)
    KEYWORD_while   reduce using rule 192 (expr13 -> CONSTANTS .)
    KEYWORD_until   reduce using rule 192 (expr13 -> CONSTANTS .)
    DELIM           reduce using rule 192 (expr13 -> CONSTANTS .)
    newline         reduce using rule 192 (expr13 -> CONSTANTS .)
    $end            reduce using rule 192 (expr13 -> CONSTANTS .)
    KEYWORD_end     reduce using rule 192 (expr13 -> CONSTANTS .)
    KEYWORD_elsif   reduce using rule 192 (expr13 -> CONSTANTS .)
    KEYWORD_else    reduce using rule 192 (expr13 -> CONSTANTS .)


state 104

    (76) gen_stmts -> top_stmt .
    (69) top_stmt -> top_stmt . KEYWORD_while expr3
    (71) top_stmt -> top_stmt . KEYWORD_until expr3

    DELIM           reduce using rule 76 (gen_stmts -> top_stmt .)
    newline         reduce using rule 76 (gen_stmts -> top_stmt .)
    KEYWORD_elsif   reduce using rule 76 (gen_stmts -> top_stmt .)
    KEYWORD_else    reduce using rule 76 (gen_stmts -> top_stmt .)
    KEYWORD_end     reduce using rule 76 (gen_stmts -> top_stmt .)
    KEYWORD_while   shift and go to state 71
    KEYWORD_until   shift and go to state 72


state 105

    (54) fname -> CONSTANTS .
    (130) mlhs -> CONSTANTS .
    (192) expr13 -> CONSTANTS .

    OPEN_PAREN      reduce using rule 54 (fname -> CONSTANTS .)
    VARIABLES       reduce using rule 54 (fname -> CONSTANTS .)
    CONSTANTS       reduce using rule 54 (fname -> CONSTANTS .)
    INT_CONSTANTS   reduce using rule 54 (fname -> CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 54 (fname -> CONSTANTS .)
    STRING_CONSTANTS reduce using rule 54 (fname -> CONSTANTS .)
    CHAR_CONSTANTS  reduce using rule 54 (fname -> CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 54 (fname -> CONSTANTS .)
    EQUAL           reduce using rule 130 (mlhs -> CONSTANTS .)
    COMMA           reduce using rule 130 (mlhs -> CONSTANTS .)
    DOUBLESTAR      reduce using rule 192 (expr13 -> CONSTANTS .)
    MULTIPLY        reduce using rule 192 (expr13 -> CONSTANTS .)
    DIV             reduce using rule 192 (expr13 -> CONSTANTS .)
    MOD             reduce using rule 192 (expr13 -> CONSTANTS .)
    PLUS            reduce using rule 192 (expr13 -> CONSTANTS .)
    MINUS           reduce using rule 192 (expr13 -> CONSTANTS .)
    SHIFTL          reduce using rule 192 (expr13 -> CONSTANTS .)
    SHIFTR          reduce using rule 192 (expr13 -> CONSTANTS .)
    BITAND          reduce using rule 192 (expr13 -> CONSTANTS .)
    DOUBLEDOT       reduce using rule 192 (expr13 -> CONSTANTS .)
    TRIPLEDOT       reduce using rule 192 (expr13 -> CONSTANTS .)
    BITXOR          reduce using rule 192 (expr13 -> CONSTANTS .)
    PIPE            reduce using rule 192 (expr13 -> CONSTANTS .)
    LESSEQUAL       reduce using rule 192 (expr13 -> CONSTANTS .)
    LESS            reduce using rule 192 (expr13 -> CONSTANTS .)
    GREATER         reduce using rule 192 (expr13 -> CONSTANTS .)
    GREATEREQUAL    reduce using rule 192 (expr13 -> CONSTANTS .)
    IFF             reduce using rule 192 (expr13 -> CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 192 (expr13 -> CONSTANTS .)
    TRIPLEEQUAL     reduce using rule 192 (expr13 -> CONSTANTS .)
    NOTEQUAL        reduce using rule 192 (expr13 -> CONSTANTS .)
    LOGICALAND      reduce using rule 192 (expr13 -> CONSTANTS .)
    QUESTION_MARK   reduce using rule 192 (expr13 -> CONSTANTS .)
    LOGICALOR       reduce using rule 192 (expr13 -> CONSTANTS .)
    KEYWORD_while   reduce using rule 192 (expr13 -> CONSTANTS .)
    KEYWORD_until   reduce using rule 192 (expr13 -> CONSTANTS .)
    DELIM           reduce using rule 192 (expr13 -> CONSTANTS .)
    newline         reduce using rule 192 (expr13 -> CONSTANTS .)
    KEYWORD_elsif   reduce using rule 192 (expr13 -> CONSTANTS .)
    KEYWORD_else    reduce using rule 192 (expr13 -> CONSTANTS .)
    KEYWORD_end     reduce using rule 192 (expr13 -> CONSTANTS .)


state 106

    (53) fname -> VARIABLES .
    (129) mlhs -> VARIABLES .
    (195) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> VARIABLES . OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> VARIABLES . OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (193) expr13 -> VARIABLES .

    OPEN_PAREN      reduce using rule 53 (fname -> VARIABLES .)
    VARIABLES       reduce using rule 53 (fname -> VARIABLES .)
    CONSTANTS       reduce using rule 53 (fname -> VARIABLES .)
    INT_CONSTANTS   reduce using rule 53 (fname -> VARIABLES .)
    FLOAT_CONSTANTS reduce using rule 53 (fname -> VARIABLES .)
    STRING_CONSTANTS reduce using rule 53 (fname -> VARIABLES .)
    CHAR_CONSTANTS  reduce using rule 53 (fname -> VARIABLES .)
    BOOLEAN_CONSTANTS reduce using rule 53 (fname -> VARIABLES .)
    EQUAL           reduce using rule 129 (mlhs -> VARIABLES .)
    COMMA           reduce using rule 129 (mlhs -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 91
    DOUBLESTAR      reduce using rule 193 (expr13 -> VARIABLES .)
    MULTIPLY        reduce using rule 193 (expr13 -> VARIABLES .)
    DIV             reduce using rule 193 (expr13 -> VARIABLES .)
    MOD             reduce using rule 193 (expr13 -> VARIABLES .)
    PLUS            reduce using rule 193 (expr13 -> VARIABLES .)
    MINUS           reduce using rule 193 (expr13 -> VARIABLES .)
    SHIFTL          reduce using rule 193 (expr13 -> VARIABLES .)
    SHIFTR          reduce using rule 193 (expr13 -> VARIABLES .)
    BITAND          reduce using rule 193 (expr13 -> VARIABLES .)
    DOUBLEDOT       reduce using rule 193 (expr13 -> VARIABLES .)
    TRIPLEDOT       reduce using rule 193 (expr13 -> VARIABLES .)
    BITXOR          reduce using rule 193 (expr13 -> VARIABLES .)
    PIPE            reduce using rule 193 (expr13 -> VARIABLES .)
    LESSEQUAL       reduce using rule 193 (expr13 -> VARIABLES .)
    LESS            reduce using rule 193 (expr13 -> VARIABLES .)
    GREATER         reduce using rule 193 (expr13 -> VARIABLES .)
    GREATEREQUAL    reduce using rule 193 (expr13 -> VARIABLES .)
    IFF             reduce using rule 193 (expr13 -> VARIABLES .)
    DOUBLEEQUAL     reduce using rule 193 (expr13 -> VARIABLES .)
    TRIPLEEQUAL     reduce using rule 193 (expr13 -> VARIABLES .)
    NOTEQUAL        reduce using rule 193 (expr13 -> VARIABLES .)
    LOGICALAND      reduce using rule 193 (expr13 -> VARIABLES .)
    QUESTION_MARK   reduce using rule 193 (expr13 -> VARIABLES .)
    LOGICALOR       reduce using rule 193 (expr13 -> VARIABLES .)
    KEYWORD_while   reduce using rule 193 (expr13 -> VARIABLES .)
    KEYWORD_until   reduce using rule 193 (expr13 -> VARIABLES .)
    DELIM           reduce using rule 193 (expr13 -> VARIABLES .)
    newline         reduce using rule 193 (expr13 -> VARIABLES .)
    KEYWORD_elsif   reduce using rule 193 (expr13 -> VARIABLES .)
    KEYWORD_else    reduce using rule 193 (expr13 -> VARIABLES .)
    KEYWORD_end     reduce using rule 193 (expr13 -> VARIABLES .)


state 107

    (78) gen_stmts -> none .
    (198) uexpr -> none .

    DELIM           reduce using rule 78 (gen_stmts -> none .)
    newline         reduce using rule 78 (gen_stmts -> none .)
    KEYWORD_elsif   reduce using rule 78 (gen_stmts -> none .)
    KEYWORD_else    reduce using rule 78 (gen_stmts -> none .)
    KEYWORD_end     reduce using rule 78 (gen_stmts -> none .)
    INT_CONSTANTS   reduce using rule 198 (uexpr -> none .)
    FLOAT_CONSTANTS reduce using rule 198 (uexpr -> none .)


state 108

    (70) top_stmt -> KEYWORD_begin gen_stmts . opt_terms KEYWORD_end KEYWORD_while expr3
    (73) top_stmt -> KEYWORD_begin gen_stmts . opt_terms KEYWORD_end KEYWORD_until expr3
    (77) gen_stmts -> gen_stmts . terms top_stmt
    (203) opt_terms -> . none
    (204) opt_terms -> . terms
    (205) terms -> . term
    (206) terms -> . terms term
    (209) none -> .
    (207) term -> . DELIM
    (208) term -> . newline

    KEYWORD_end     reduce using rule 209 (none -> .)
    DELIM           shift and go to state 86
    newline         shift and go to state 85

    none                           shift and go to state 87
    terms                          shift and go to state 179
    term                           shift and go to state 83
    opt_terms                      shift and go to state 180

state 109

    (17) class_defn -> KEYWORD_class CONSTANTS . newline class_stmts opt_terms KEYWORD_end

    newline         shift and go to state 181


state 110

    (157) expr3 -> expr3 LOGICALOR . expr4
    (159) expr4 -> . expr4 LOGICALAND expr5
    (160) expr4 -> . expr5
    (161) expr5 -> . expr6 IFF expr6
    (162) expr5 -> . expr6 DOUBLEEQUAL expr6
    (163) expr5 -> . expr6 TRIPLEEQUAL expr6
    (164) expr5 -> . expr6 NOTEQUAL expr6
    (165) expr5 -> . expr6
    (166) expr6 -> . expr7 LESSEQUAL expr7
    (167) expr6 -> . expr7 LESS expr7
    (168) expr6 -> . expr7 GREATER expr7
    (169) expr6 -> . expr7 GREATEREQUAL expr7
    (170) expr6 -> . expr7
    (171) expr6 -> . BOOLEAN_CONSTANTS
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (209) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 31
    CONSTANTS       shift and go to state 59
    VARIABLES       shift and go to state 55
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 35
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr6                          shift and go to state 45
    expr7                          shift and go to state 57
    expr4                          shift and go to state 182
    expr5                          shift and go to state 47
    expr10                         shift and go to state 14
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    array                          shift and go to state 58
    expr11                         shift and go to state 15

state 111

    (152) expr1 -> expr3 QUESTION_MARK . expr2 COLON expr2
    (154) expr2 -> . expr7 DOUBLEDOT expr7
    (155) expr2 -> . expr7 TRIPLEDOT expr7
    (156) expr2 -> . expr3
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (157) expr3 -> . expr3 LOGICALOR expr4
    (158) expr3 -> . expr4
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (159) expr4 -> . expr4 LOGICALAND expr5
    (160) expr4 -> . expr5
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (161) expr5 -> . expr6 IFF expr6
    (162) expr5 -> . expr6 DOUBLEEQUAL expr6
    (163) expr5 -> . expr6 TRIPLEEQUAL expr6
    (164) expr5 -> . expr6 NOTEQUAL expr6
    (165) expr5 -> . expr6
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (166) expr6 -> . expr7 LESSEQUAL expr7
    (167) expr6 -> . expr7 LESS expr7
    (168) expr6 -> . expr7 GREATER expr7
    (169) expr6 -> . expr7 GREATEREQUAL expr7
    (170) expr6 -> . expr7
    (171) expr6 -> . BOOLEAN_CONSTANTS
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (209) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 31
    CONSTANTS       shift and go to state 59
    VARIABLES       shift and go to state 55
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 35
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr2                          shift and go to state 183
    expr3                          shift and go to state 184
    expr10                         shift and go to state 14
    expr7                          shift and go to state 7
    expr4                          shift and go to state 8
    expr5                          shift and go to state 47
    expr6                          shift and go to state 45
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    array                          shift and go to state 58
    expr11                         shift and go to state 15

state 112

    (164) expr5 -> expr6 NOTEQUAL . expr6
    (166) expr6 -> . expr7 LESSEQUAL expr7
    (167) expr6 -> . expr7 LESS expr7
    (168) expr6 -> . expr7 GREATER expr7
    (169) expr6 -> . expr7 GREATEREQUAL expr7
    (170) expr6 -> . expr7
    (171) expr6 -> . BOOLEAN_CONSTANTS
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (209) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 31
    CONSTANTS       shift and go to state 59
    VARIABLES       shift and go to state 55
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 35
    expr10                         shift and go to state 14
    expr7                          shift and go to state 57
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr6                          shift and go to state 185
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    array                          shift and go to state 58
    expr11                         shift and go to state 15

state 113

    (161) expr5 -> expr6 IFF . expr6
    (166) expr6 -> . expr7 LESSEQUAL expr7
    (167) expr6 -> . expr7 LESS expr7
    (168) expr6 -> . expr7 GREATER expr7
    (169) expr6 -> . expr7 GREATEREQUAL expr7
    (170) expr6 -> . expr7
    (171) expr6 -> . BOOLEAN_CONSTANTS
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (209) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 31
    CONSTANTS       shift and go to state 59
    VARIABLES       shift and go to state 55
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 35
    expr10                         shift and go to state 14
    expr7                          shift and go to state 57
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr6                          shift and go to state 186
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    array                          shift and go to state 58
    expr11                         shift and go to state 15

state 114

    (163) expr5 -> expr6 TRIPLEEQUAL . expr6
    (166) expr6 -> . expr7 LESSEQUAL expr7
    (167) expr6 -> . expr7 LESS expr7
    (168) expr6 -> . expr7 GREATER expr7
    (169) expr6 -> . expr7 GREATEREQUAL expr7
    (170) expr6 -> . expr7
    (171) expr6 -> . BOOLEAN_CONSTANTS
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (209) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 31
    CONSTANTS       shift and go to state 59
    VARIABLES       shift and go to state 55
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 35
    expr10                         shift and go to state 14
    expr7                          shift and go to state 57
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr6                          shift and go to state 187
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    array                          shift and go to state 58
    expr11                         shift and go to state 15

state 115

    (162) expr5 -> expr6 DOUBLEEQUAL . expr6
    (166) expr6 -> . expr7 LESSEQUAL expr7
    (167) expr6 -> . expr7 LESS expr7
    (168) expr6 -> . expr7 GREATER expr7
    (169) expr6 -> . expr7 GREATEREQUAL expr7
    (170) expr6 -> . expr7
    (171) expr6 -> . BOOLEAN_CONSTANTS
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (209) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 31
    CONSTANTS       shift and go to state 59
    VARIABLES       shift and go to state 55
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 35
    expr10                         shift and go to state 14
    expr7                          shift and go to state 57
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr6                          shift and go to state 188
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    array                          shift and go to state 58
    expr11                         shift and go to state 15

state 116

    (148) primary -> BOOLEAN_CONSTANTS .

    COMMA           reduce using rule 148 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_while   reduce using rule 148 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_until   reduce using rule 148 (primary -> BOOLEAN_CONSTANTS .)
    DELIM           reduce using rule 148 (primary -> BOOLEAN_CONSTANTS .)
    newline         reduce using rule 148 (primary -> BOOLEAN_CONSTANTS .)
    $end            reduce using rule 148 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_end     reduce using rule 148 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 148 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_else    reduce using rule 148 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_return  reduce using rule 148 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_if      reduce using rule 148 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_begin   reduce using rule 148 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_for     reduce using rule 148 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_puts    reduce using rule 148 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_break   reduce using rule 148 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_next    reduce using rule 148 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_redo    reduce using rule 148 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_exit    reduce using rule 148 (primary -> BOOLEAN_CONSTANTS .)
    VARIABLES       reduce using rule 148 (primary -> BOOLEAN_CONSTANTS .)
    CONSTANTS       reduce using rule 148 (primary -> BOOLEAN_CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 148 (primary -> BOOLEAN_CONSTANTS .)
    OPEN_PAREN      reduce using rule 148 (primary -> BOOLEAN_CONSTANTS .)
    PLUS            reduce using rule 148 (primary -> BOOLEAN_CONSTANTS .)
    MINUS           reduce using rule 148 (primary -> BOOLEAN_CONSTANTS .)
    BITNOT          reduce using rule 148 (primary -> BOOLEAN_CONSTANTS .)
    BITCOMP         reduce using rule 148 (primary -> BOOLEAN_CONSTANTS .)
    INT_CONSTANTS   reduce using rule 148 (primary -> BOOLEAN_CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 148 (primary -> BOOLEAN_CONSTANTS .)
    CLOSE_BRACKET   reduce using rule 148 (primary -> BOOLEAN_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 148 (primary -> BOOLEAN_CONSTANTS .)
    SIGIL_AT        reduce using rule 148 (primary -> BOOLEAN_CONSTANTS .)
    SIGIL_DOUBLE_AT reduce using rule 148 (primary -> BOOLEAN_CONSTANTS .)


state 117

    (144) primary -> INT_CONSTANTS .

    COMMA           reduce using rule 144 (primary -> INT_CONSTANTS .)
    KEYWORD_while   reduce using rule 144 (primary -> INT_CONSTANTS .)
    KEYWORD_until   reduce using rule 144 (primary -> INT_CONSTANTS .)
    DELIM           reduce using rule 144 (primary -> INT_CONSTANTS .)
    newline         reduce using rule 144 (primary -> INT_CONSTANTS .)
    $end            reduce using rule 144 (primary -> INT_CONSTANTS .)
    KEYWORD_end     reduce using rule 144 (primary -> INT_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 144 (primary -> INT_CONSTANTS .)
    KEYWORD_else    reduce using rule 144 (primary -> INT_CONSTANTS .)
    KEYWORD_return  reduce using rule 144 (primary -> INT_CONSTANTS .)
    KEYWORD_if      reduce using rule 144 (primary -> INT_CONSTANTS .)
    KEYWORD_begin   reduce using rule 144 (primary -> INT_CONSTANTS .)
    KEYWORD_for     reduce using rule 144 (primary -> INT_CONSTANTS .)
    KEYWORD_puts    reduce using rule 144 (primary -> INT_CONSTANTS .)
    KEYWORD_break   reduce using rule 144 (primary -> INT_CONSTANTS .)
    KEYWORD_next    reduce using rule 144 (primary -> INT_CONSTANTS .)
    KEYWORD_redo    reduce using rule 144 (primary -> INT_CONSTANTS .)
    KEYWORD_exit    reduce using rule 144 (primary -> INT_CONSTANTS .)
    VARIABLES       reduce using rule 144 (primary -> INT_CONSTANTS .)
    CONSTANTS       reduce using rule 144 (primary -> INT_CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 144 (primary -> INT_CONSTANTS .)
    OPEN_PAREN      reduce using rule 144 (primary -> INT_CONSTANTS .)
    PLUS            reduce using rule 144 (primary -> INT_CONSTANTS .)
    MINUS           reduce using rule 144 (primary -> INT_CONSTANTS .)
    BITNOT          reduce using rule 144 (primary -> INT_CONSTANTS .)
    BITCOMP         reduce using rule 144 (primary -> INT_CONSTANTS .)
    INT_CONSTANTS   reduce using rule 144 (primary -> INT_CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 144 (primary -> INT_CONSTANTS .)
    CLOSE_BRACKET   reduce using rule 144 (primary -> INT_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 144 (primary -> INT_CONSTANTS .)
    SIGIL_AT        reduce using rule 144 (primary -> INT_CONSTANTS .)
    SIGIL_DOUBLE_AT reduce using rule 144 (primary -> INT_CONSTANTS .)


state 118

    (145) primary -> FLOAT_CONSTANTS .

    COMMA           reduce using rule 145 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_while   reduce using rule 145 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_until   reduce using rule 145 (primary -> FLOAT_CONSTANTS .)
    DELIM           reduce using rule 145 (primary -> FLOAT_CONSTANTS .)
    newline         reduce using rule 145 (primary -> FLOAT_CONSTANTS .)
    $end            reduce using rule 145 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_end     reduce using rule 145 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 145 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_else    reduce using rule 145 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_return  reduce using rule 145 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_if      reduce using rule 145 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_begin   reduce using rule 145 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_for     reduce using rule 145 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_puts    reduce using rule 145 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_break   reduce using rule 145 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_next    reduce using rule 145 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_redo    reduce using rule 145 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_exit    reduce using rule 145 (primary -> FLOAT_CONSTANTS .)
    VARIABLES       reduce using rule 145 (primary -> FLOAT_CONSTANTS .)
    CONSTANTS       reduce using rule 145 (primary -> FLOAT_CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 145 (primary -> FLOAT_CONSTANTS .)
    OPEN_PAREN      reduce using rule 145 (primary -> FLOAT_CONSTANTS .)
    PLUS            reduce using rule 145 (primary -> FLOAT_CONSTANTS .)
    MINUS           reduce using rule 145 (primary -> FLOAT_CONSTANTS .)
    BITNOT          reduce using rule 145 (primary -> FLOAT_CONSTANTS .)
    BITCOMP         reduce using rule 145 (primary -> FLOAT_CONSTANTS .)
    INT_CONSTANTS   reduce using rule 145 (primary -> FLOAT_CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 145 (primary -> FLOAT_CONSTANTS .)
    CLOSE_BRACKET   reduce using rule 145 (primary -> FLOAT_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 145 (primary -> FLOAT_CONSTANTS .)
    SIGIL_AT        reduce using rule 145 (primary -> FLOAT_CONSTANTS .)
    SIGIL_DOUBLE_AT reduce using rule 145 (primary -> FLOAT_CONSTANTS .)


state 119

    (100) func_ret_arg -> func_arg_expr .

    COMMA           reduce using rule 100 (func_ret_arg -> func_arg_expr .)
    DELIM           reduce using rule 100 (func_ret_arg -> func_arg_expr .)
    newline         reduce using rule 100 (func_ret_arg -> func_arg_expr .)
    KEYWORD_end     reduce using rule 100 (func_ret_arg -> func_arg_expr .)
    CLOSE_PAREN     reduce using rule 100 (func_ret_arg -> func_arg_expr .)
    KEYWORD_while   reduce using rule 100 (func_ret_arg -> func_arg_expr .)
    KEYWORD_until   reduce using rule 100 (func_ret_arg -> func_arg_expr .)
    $end            reduce using rule 100 (func_ret_arg -> func_arg_expr .)
    KEYWORD_elsif   reduce using rule 100 (func_ret_arg -> func_arg_expr .)
    KEYWORD_else    reduce using rule 100 (func_ret_arg -> func_arg_expr .)
    CLOSE_BRACKET   reduce using rule 100 (func_ret_arg -> func_arg_expr .)


state 120

    (101) func_ret_arg -> primary .

    COMMA           reduce using rule 101 (func_ret_arg -> primary .)
    DELIM           reduce using rule 101 (func_ret_arg -> primary .)
    newline         reduce using rule 101 (func_ret_arg -> primary .)
    KEYWORD_end     reduce using rule 101 (func_ret_arg -> primary .)
    CLOSE_PAREN     reduce using rule 101 (func_ret_arg -> primary .)
    KEYWORD_while   reduce using rule 101 (func_ret_arg -> primary .)
    KEYWORD_until   reduce using rule 101 (func_ret_arg -> primary .)
    $end            reduce using rule 101 (func_ret_arg -> primary .)
    KEYWORD_elsif   reduce using rule 101 (func_ret_arg -> primary .)
    KEYWORD_else    reduce using rule 101 (func_ret_arg -> primary .)
    CLOSE_BRACKET   reduce using rule 101 (func_ret_arg -> primary .)


state 121

    (146) primary -> STRING_CONSTANTS .

    COMMA           reduce using rule 146 (primary -> STRING_CONSTANTS .)
    KEYWORD_while   reduce using rule 146 (primary -> STRING_CONSTANTS .)
    KEYWORD_until   reduce using rule 146 (primary -> STRING_CONSTANTS .)
    DELIM           reduce using rule 146 (primary -> STRING_CONSTANTS .)
    newline         reduce using rule 146 (primary -> STRING_CONSTANTS .)
    $end            reduce using rule 146 (primary -> STRING_CONSTANTS .)
    KEYWORD_end     reduce using rule 146 (primary -> STRING_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 146 (primary -> STRING_CONSTANTS .)
    KEYWORD_else    reduce using rule 146 (primary -> STRING_CONSTANTS .)
    KEYWORD_return  reduce using rule 146 (primary -> STRING_CONSTANTS .)
    KEYWORD_if      reduce using rule 146 (primary -> STRING_CONSTANTS .)
    KEYWORD_begin   reduce using rule 146 (primary -> STRING_CONSTANTS .)
    KEYWORD_for     reduce using rule 146 (primary -> STRING_CONSTANTS .)
    KEYWORD_puts    reduce using rule 146 (primary -> STRING_CONSTANTS .)
    KEYWORD_break   reduce using rule 146 (primary -> STRING_CONSTANTS .)
    KEYWORD_next    reduce using rule 146 (primary -> STRING_CONSTANTS .)
    KEYWORD_redo    reduce using rule 146 (primary -> STRING_CONSTANTS .)
    KEYWORD_exit    reduce using rule 146 (primary -> STRING_CONSTANTS .)
    VARIABLES       reduce using rule 146 (primary -> STRING_CONSTANTS .)
    CONSTANTS       reduce using rule 146 (primary -> STRING_CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 146 (primary -> STRING_CONSTANTS .)
    OPEN_PAREN      reduce using rule 146 (primary -> STRING_CONSTANTS .)
    PLUS            reduce using rule 146 (primary -> STRING_CONSTANTS .)
    MINUS           reduce using rule 146 (primary -> STRING_CONSTANTS .)
    BITNOT          reduce using rule 146 (primary -> STRING_CONSTANTS .)
    BITCOMP         reduce using rule 146 (primary -> STRING_CONSTANTS .)
    INT_CONSTANTS   reduce using rule 146 (primary -> STRING_CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 146 (primary -> STRING_CONSTANTS .)
    CLOSE_BRACKET   reduce using rule 146 (primary -> STRING_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 146 (primary -> STRING_CONSTANTS .)
    SIGIL_AT        reduce using rule 146 (primary -> STRING_CONSTANTS .)
    SIGIL_DOUBLE_AT reduce using rule 146 (primary -> STRING_CONSTANTS .)


state 122

    (85) func_call_stmt -> fname OPEN_PAREN . func_ret_arg CLOSE_PAREN
    (100) func_ret_arg -> . func_arg_expr
    (101) func_ret_arg -> . primary
    (102) func_ret_arg -> . func_ret_arg COMMA func_arg_expr
    (103) func_ret_arg -> . func_ret_arg COMMA primary
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary
    (144) primary -> . INT_CONSTANTS
    (145) primary -> . FLOAT_CONSTANTS
    (146) primary -> . STRING_CONSTANTS
    (147) primary -> . CHAR_CONSTANTS
    (148) primary -> . BOOLEAN_CONSTANTS
    (149) primary -> . CONSTANTS
    (150) primary -> . VARIABLES
    (151) primary -> . array
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET

    VARIABLES       shift and go to state 127
    CONSTANTS       shift and go to state 123
    INT_CONSTANTS   shift and go to state 117
    FLOAT_CONSTANTS shift and go to state 118
    STRING_CONSTANTS shift and go to state 121
    CHAR_CONSTANTS  shift and go to state 126
    BOOLEAN_CONSTANTS shift and go to state 116

    func_arg_expr                  shift and go to state 119
    primary                        shift and go to state 120
    func_ret_arg                   shift and go to state 189
    array                          shift and go to state 125

state 123

    (63) func_arg_expr -> CONSTANTS . EQUAL primary
    (149) primary -> CONSTANTS .

    EQUAL           shift and go to state 190
    CLOSE_BRACKET   reduce using rule 149 (primary -> CONSTANTS .)
    COMMA           reduce using rule 149 (primary -> CONSTANTS .)
    KEYWORD_while   reduce using rule 149 (primary -> CONSTANTS .)
    KEYWORD_until   reduce using rule 149 (primary -> CONSTANTS .)
    DELIM           reduce using rule 149 (primary -> CONSTANTS .)
    newline         reduce using rule 149 (primary -> CONSTANTS .)
    $end            reduce using rule 149 (primary -> CONSTANTS .)
    KEYWORD_end     reduce using rule 149 (primary -> CONSTANTS .)
    KEYWORD_elsif   reduce using rule 149 (primary -> CONSTANTS .)
    KEYWORD_else    reduce using rule 149 (primary -> CONSTANTS .)
    CLOSE_PAREN     reduce using rule 149 (primary -> CONSTANTS .)


state 124

    (86) func_call_stmt -> fname func_ret_arg .
    (102) func_ret_arg -> func_ret_arg . COMMA func_arg_expr
    (103) func_ret_arg -> func_ret_arg . COMMA primary

    KEYWORD_while   reduce using rule 86 (func_call_stmt -> fname func_ret_arg .)
    KEYWORD_until   reduce using rule 86 (func_call_stmt -> fname func_ret_arg .)
    DELIM           reduce using rule 86 (func_call_stmt -> fname func_ret_arg .)
    newline         reduce using rule 86 (func_call_stmt -> fname func_ret_arg .)
    KEYWORD_end     reduce using rule 86 (func_call_stmt -> fname func_ret_arg .)
    $end            reduce using rule 86 (func_call_stmt -> fname func_ret_arg .)
    KEYWORD_elsif   reduce using rule 86 (func_call_stmt -> fname func_ret_arg .)
    KEYWORD_else    reduce using rule 86 (func_call_stmt -> fname func_ret_arg .)
    COMMA           shift and go to state 191


state 125

    (151) primary -> array .

    COMMA           reduce using rule 151 (primary -> array .)
    KEYWORD_while   reduce using rule 151 (primary -> array .)
    KEYWORD_until   reduce using rule 151 (primary -> array .)
    DELIM           reduce using rule 151 (primary -> array .)
    newline         reduce using rule 151 (primary -> array .)
    $end            reduce using rule 151 (primary -> array .)
    KEYWORD_end     reduce using rule 151 (primary -> array .)
    KEYWORD_elsif   reduce using rule 151 (primary -> array .)
    KEYWORD_else    reduce using rule 151 (primary -> array .)
    KEYWORD_return  reduce using rule 151 (primary -> array .)
    KEYWORD_if      reduce using rule 151 (primary -> array .)
    KEYWORD_begin   reduce using rule 151 (primary -> array .)
    KEYWORD_for     reduce using rule 151 (primary -> array .)
    KEYWORD_puts    reduce using rule 151 (primary -> array .)
    KEYWORD_break   reduce using rule 151 (primary -> array .)
    KEYWORD_next    reduce using rule 151 (primary -> array .)
    KEYWORD_redo    reduce using rule 151 (primary -> array .)
    KEYWORD_exit    reduce using rule 151 (primary -> array .)
    VARIABLES       reduce using rule 151 (primary -> array .)
    CONSTANTS       reduce using rule 151 (primary -> array .)
    BOOLEAN_CONSTANTS reduce using rule 151 (primary -> array .)
    OPEN_PAREN      reduce using rule 151 (primary -> array .)
    PLUS            reduce using rule 151 (primary -> array .)
    MINUS           reduce using rule 151 (primary -> array .)
    BITNOT          reduce using rule 151 (primary -> array .)
    BITCOMP         reduce using rule 151 (primary -> array .)
    INT_CONSTANTS   reduce using rule 151 (primary -> array .)
    FLOAT_CONSTANTS reduce using rule 151 (primary -> array .)
    CLOSE_BRACKET   reduce using rule 151 (primary -> array .)
    CLOSE_PAREN     reduce using rule 151 (primary -> array .)
    SIGIL_AT        reduce using rule 151 (primary -> array .)
    SIGIL_DOUBLE_AT reduce using rule 151 (primary -> array .)


state 126

    (147) primary -> CHAR_CONSTANTS .

    COMMA           reduce using rule 147 (primary -> CHAR_CONSTANTS .)
    KEYWORD_while   reduce using rule 147 (primary -> CHAR_CONSTANTS .)
    KEYWORD_until   reduce using rule 147 (primary -> CHAR_CONSTANTS .)
    DELIM           reduce using rule 147 (primary -> CHAR_CONSTANTS .)
    newline         reduce using rule 147 (primary -> CHAR_CONSTANTS .)
    $end            reduce using rule 147 (primary -> CHAR_CONSTANTS .)
    KEYWORD_end     reduce using rule 147 (primary -> CHAR_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 147 (primary -> CHAR_CONSTANTS .)
    KEYWORD_else    reduce using rule 147 (primary -> CHAR_CONSTANTS .)
    KEYWORD_return  reduce using rule 147 (primary -> CHAR_CONSTANTS .)
    KEYWORD_if      reduce using rule 147 (primary -> CHAR_CONSTANTS .)
    KEYWORD_begin   reduce using rule 147 (primary -> CHAR_CONSTANTS .)
    KEYWORD_for     reduce using rule 147 (primary -> CHAR_CONSTANTS .)
    KEYWORD_puts    reduce using rule 147 (primary -> CHAR_CONSTANTS .)
    KEYWORD_break   reduce using rule 147 (primary -> CHAR_CONSTANTS .)
    KEYWORD_next    reduce using rule 147 (primary -> CHAR_CONSTANTS .)
    KEYWORD_redo    reduce using rule 147 (primary -> CHAR_CONSTANTS .)
    KEYWORD_exit    reduce using rule 147 (primary -> CHAR_CONSTANTS .)
    VARIABLES       reduce using rule 147 (primary -> CHAR_CONSTANTS .)
    CONSTANTS       reduce using rule 147 (primary -> CHAR_CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 147 (primary -> CHAR_CONSTANTS .)
    OPEN_PAREN      reduce using rule 147 (primary -> CHAR_CONSTANTS .)
    PLUS            reduce using rule 147 (primary -> CHAR_CONSTANTS .)
    MINUS           reduce using rule 147 (primary -> CHAR_CONSTANTS .)
    BITNOT          reduce using rule 147 (primary -> CHAR_CONSTANTS .)
    BITCOMP         reduce using rule 147 (primary -> CHAR_CONSTANTS .)
    INT_CONSTANTS   reduce using rule 147 (primary -> CHAR_CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 147 (primary -> CHAR_CONSTANTS .)
    CLOSE_BRACKET   reduce using rule 147 (primary -> CHAR_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 147 (primary -> CHAR_CONSTANTS .)
    SIGIL_AT        reduce using rule 147 (primary -> CHAR_CONSTANTS .)
    SIGIL_DOUBLE_AT reduce using rule 147 (primary -> CHAR_CONSTANTS .)


state 127

    (62) func_arg_expr -> VARIABLES . EQUAL primary
    (150) primary -> VARIABLES .
    (195) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> VARIABLES . OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> VARIABLES . OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET

    EQUAL           shift and go to state 192
    CLOSE_BRACKET   reduce using rule 150 (primary -> VARIABLES .)
    COMMA           reduce using rule 150 (primary -> VARIABLES .)
    KEYWORD_while   reduce using rule 150 (primary -> VARIABLES .)
    KEYWORD_until   reduce using rule 150 (primary -> VARIABLES .)
    DELIM           reduce using rule 150 (primary -> VARIABLES .)
    newline         reduce using rule 150 (primary -> VARIABLES .)
    $end            reduce using rule 150 (primary -> VARIABLES .)
    KEYWORD_end     reduce using rule 150 (primary -> VARIABLES .)
    KEYWORD_elsif   reduce using rule 150 (primary -> VARIABLES .)
    KEYWORD_else    reduce using rule 150 (primary -> VARIABLES .)
    CLOSE_PAREN     reduce using rule 150 (primary -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 91


state 128

    (175) expr8 -> expr8 BITAND . expr9
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (209) none -> .

    OPEN_PAREN      shift and go to state 31
    CONSTANTS       shift and go to state 59
    VARIABLES       shift and go to state 55
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 35
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr9                          shift and go to state 193
    array                          shift and go to state 58

state 129

    (178) expr9 -> expr9 SHIFTR . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (209) none -> .

    OPEN_PAREN      shift and go to state 31
    CONSTANTS       shift and go to state 59
    VARIABLES       shift and go to state 55
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 35
    expr10                         shift and go to state 194
    expr11                         shift and go to state 15
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    array                          shift and go to state 58

state 130

    (177) expr9 -> expr9 SHIFTL . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (209) none -> .

    OPEN_PAREN      shift and go to state 31
    CONSTANTS       shift and go to state 59
    VARIABLES       shift and go to state 55
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 35
    expr10                         shift and go to state 195
    expr11                         shift and go to state 15
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    array                          shift and go to state 58

state 131

    (124) expr -> MLHS EQUAL . MRHS
    (87) func_call_stmt -> MLHS EQUAL . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> MLHS EQUAL . fname func_ret_arg
    (127) MRHS -> . mrhs
    (128) MRHS -> . MRHS COMMA mrhs
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (132) mrhs -> . expr1
    (133) mrhs -> . str_expr
    (134) mrhs -> . KEYWORD_gets
    (135) mrhs -> . OPEN_BRACKET func_ret_arg CLOSE_BRACKET
    (136) mrhs -> . VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (137) mrhs -> . VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (138) mrhs -> . VARIABLES DOT VARIABLES
    (139) mrhs -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (140) mrhs -> . CONSTANTS DOT KEYWORD_new
    (141) mrhs -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (152) expr1 -> . expr3 QUESTION_MARK expr2 COLON expr2
    (153) expr1 -> . expr2
    (142) str_expr -> . str_expr PLUS STRING_CONSTANTS
    (143) str_expr -> . STRING_CONSTANTS
    (157) expr3 -> . expr3 LOGICALOR expr4
    (158) expr3 -> . expr4
    (154) expr2 -> . expr7 DOUBLEDOT expr7
    (155) expr2 -> . expr7 TRIPLEDOT expr7
    (156) expr2 -> . expr3
    (159) expr4 -> . expr4 LOGICALAND expr5
    (160) expr4 -> . expr5
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (161) expr5 -> . expr6 IFF expr6
    (162) expr5 -> . expr6 DOUBLEEQUAL expr6
    (163) expr5 -> . expr6 TRIPLEEQUAL expr6
    (164) expr5 -> . expr6 NOTEQUAL expr6
    (165) expr5 -> . expr6
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (166) expr6 -> . expr7 LESSEQUAL expr7
    (167) expr6 -> . expr7 LESS expr7
    (168) expr6 -> . expr7 GREATER expr7
    (169) expr6 -> . expr7 GREATEREQUAL expr7
    (170) expr6 -> . expr7
    (171) expr6 -> . BOOLEAN_CONSTANTS
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (209) none -> .

    VARIABLES       shift and go to state 197
    CONSTANTS       shift and go to state 200
    KEYWORD_gets    shift and go to state 98
    OPEN_BRACKET    shift and go to state 96
    STRING_CONSTANTS shift and go to state 102
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 31
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    MRHS                           shift and go to state 196
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    array                          shift and go to state 58
    str_expr                       shift and go to state 94
    expr2                          shift and go to state 42
    expr3                          shift and go to state 43
    expr1                          shift and go to state 97
    expr6                          shift and go to state 45
    fname                          shift and go to state 198
    expr5                          shift and go to state 47
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    expr7                          shift and go to state 7
    expr4                          shift and go to state 8
    mrhs                           shift and go to state 199
    uexpr                          shift and go to state 10
    none                           shift and go to state 35

state 132

    (126) MLHS -> MLHS COMMA . mlhs
    (129) mlhs -> . VARIABLES
    (130) mlhs -> . CONSTANTS
    (131) mlhs -> . array
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET

    VARIABLES       shift and go to state 202
    CONSTANTS       shift and go to state 204

    mlhs                           shift and go to state 201
    array                          shift and go to state 203

state 133

    (74) top_stmt -> KEYWORD_for OPEN_PAREN . multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (112) multi_var -> . VARIABLES
    (113) multi_var -> . CONSTANTS
    (114) multi_var -> . array
    (115) multi_var -> . multi_var COMMA VARIABLES
    (116) multi_var -> . multi_var COMMA CONSTANTS
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET

    VARIABLES       shift and go to state 134
    CONSTANTS       shift and go to state 136

    multi_var                      shift and go to state 205
    array                          shift and go to state 137

state 134

    (112) multi_var -> VARIABLES .
    (195) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> VARIABLES . OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> VARIABLES . OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET

    CLOSE_PAREN     reduce using rule 112 (multi_var -> VARIABLES .)
    COMMA           reduce using rule 112 (multi_var -> VARIABLES .)
    KEYWORD_in      reduce using rule 112 (multi_var -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 91


state 135

    (75) top_stmt -> KEYWORD_for multi_var . KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (115) multi_var -> multi_var . COMMA VARIABLES
    (116) multi_var -> multi_var . COMMA CONSTANTS

    KEYWORD_in      shift and go to state 206
    COMMA           shift and go to state 207


state 136

    (113) multi_var -> CONSTANTS .

    CLOSE_PAREN     reduce using rule 113 (multi_var -> CONSTANTS .)
    COMMA           reduce using rule 113 (multi_var -> CONSTANTS .)
    KEYWORD_in      reduce using rule 113 (multi_var -> CONSTANTS .)


state 137

    (114) multi_var -> array .

    CLOSE_PAREN     reduce using rule 114 (multi_var -> array .)
    COMMA           reduce using rule 114 (multi_var -> array .)
    KEYWORD_in      reduce using rule 114 (multi_var -> array .)


state 138

    (111) opt_do -> newline .

    KEYWORD_if      reduce using rule 111 (opt_do -> newline .)
    KEYWORD_while   reduce using rule 111 (opt_do -> newline .)
    KEYWORD_begin   reduce using rule 111 (opt_do -> newline .)
    KEYWORD_until   reduce using rule 111 (opt_do -> newline .)
    KEYWORD_for     reduce using rule 111 (opt_do -> newline .)
    KEYWORD_puts    reduce using rule 111 (opt_do -> newline .)
    KEYWORD_break   reduce using rule 111 (opt_do -> newline .)
    KEYWORD_next    reduce using rule 111 (opt_do -> newline .)
    KEYWORD_redo    reduce using rule 111 (opt_do -> newline .)
    KEYWORD_exit    reduce using rule 111 (opt_do -> newline .)
    VARIABLES       reduce using rule 111 (opt_do -> newline .)
    CONSTANTS       reduce using rule 111 (opt_do -> newline .)
    BOOLEAN_CONSTANTS reduce using rule 111 (opt_do -> newline .)
    OPEN_PAREN      reduce using rule 111 (opt_do -> newline .)
    PLUS            reduce using rule 111 (opt_do -> newline .)
    MINUS           reduce using rule 111 (opt_do -> newline .)
    BITNOT          reduce using rule 111 (opt_do -> newline .)
    BITCOMP         reduce using rule 111 (opt_do -> newline .)
    DELIM           reduce using rule 111 (opt_do -> newline .)
    newline         reduce using rule 111 (opt_do -> newline .)
    KEYWORD_end     reduce using rule 111 (opt_do -> newline .)
    INT_CONSTANTS   reduce using rule 111 (opt_do -> newline .)
    FLOAT_CONSTANTS reduce using rule 111 (opt_do -> newline .)


state 139

    (110) opt_do -> KEYWORD_do .

    KEYWORD_if      reduce using rule 110 (opt_do -> KEYWORD_do .)
    KEYWORD_while   reduce using rule 110 (opt_do -> KEYWORD_do .)
    KEYWORD_begin   reduce using rule 110 (opt_do -> KEYWORD_do .)
    KEYWORD_until   reduce using rule 110 (opt_do -> KEYWORD_do .)
    KEYWORD_for     reduce using rule 110 (opt_do -> KEYWORD_do .)
    KEYWORD_puts    reduce using rule 110 (opt_do -> KEYWORD_do .)
    KEYWORD_break   reduce using rule 110 (opt_do -> KEYWORD_do .)
    KEYWORD_next    reduce using rule 110 (opt_do -> KEYWORD_do .)
    KEYWORD_redo    reduce using rule 110 (opt_do -> KEYWORD_do .)
    KEYWORD_exit    reduce using rule 110 (opt_do -> KEYWORD_do .)
    VARIABLES       reduce using rule 110 (opt_do -> KEYWORD_do .)
    CONSTANTS       reduce using rule 110 (opt_do -> KEYWORD_do .)
    BOOLEAN_CONSTANTS reduce using rule 110 (opt_do -> KEYWORD_do .)
    OPEN_PAREN      reduce using rule 110 (opt_do -> KEYWORD_do .)
    PLUS            reduce using rule 110 (opt_do -> KEYWORD_do .)
    MINUS           reduce using rule 110 (opt_do -> KEYWORD_do .)
    BITNOT          reduce using rule 110 (opt_do -> KEYWORD_do .)
    BITCOMP         reduce using rule 110 (opt_do -> KEYWORD_do .)
    DELIM           reduce using rule 110 (opt_do -> KEYWORD_do .)
    newline         reduce using rule 110 (opt_do -> KEYWORD_do .)
    KEYWORD_end     reduce using rule 110 (opt_do -> KEYWORD_do .)
    INT_CONSTANTS   reduce using rule 110 (opt_do -> KEYWORD_do .)
    FLOAT_CONSTANTS reduce using rule 110 (opt_do -> KEYWORD_do .)


state 140

    (68) top_stmt -> KEYWORD_while expr3 opt_do . gen_stmts opt_terms KEYWORD_end
    (76) gen_stmts -> . top_stmt
    (77) gen_stmts -> . gen_stmts terms top_stmt
    (78) gen_stmts -> . none
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (209) none -> .
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . MLHS EQUAL MRHS
    (152) expr1 -> . expr3 QUESTION_MARK expr2 COLON expr2
    (153) expr1 -> . expr2
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . MLHS EQUAL fname func_ret_arg
    (125) MLHS -> . mlhs
    (126) MLHS -> . MLHS COMMA mlhs
    (157) expr3 -> . expr3 LOGICALOR expr4
    (158) expr3 -> . expr4
    (154) expr2 -> . expr7 DOUBLEDOT expr7
    (155) expr2 -> . expr7 TRIPLEDOT expr7
    (156) expr2 -> . expr3
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (129) mlhs -> . VARIABLES
    (130) mlhs -> . CONSTANTS
    (131) mlhs -> . array
    (159) expr4 -> . expr4 LOGICALAND expr5
    (160) expr4 -> . expr5
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (161) expr5 -> . expr6 IFF expr6
    (162) expr5 -> . expr6 DOUBLEEQUAL expr6
    (163) expr5 -> . expr6 TRIPLEEQUAL expr6
    (164) expr5 -> . expr6 NOTEQUAL expr6
    (165) expr5 -> . expr6
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (166) expr6 -> . expr7 LESSEQUAL expr7
    (167) expr6 -> . expr7 LESS expr7
    (168) expr6 -> . expr7 GREATER expr7
    (169) expr6 -> . expr7 GREATEREQUAL expr7
    (170) expr6 -> . expr7
    (171) expr6 -> . BOOLEAN_CONSTANTS
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP

    KEYWORD_if      shift and go to state 28
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 39
    KEYWORD_until   shift and go to state 26
    KEYWORD_for     shift and go to state 54
    DELIM           reduce using rule 209 (none -> .)
    newline         reduce using rule 209 (none -> .)
    KEYWORD_end     reduce using rule 209 (none -> .)
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)
    KEYWORD_puts    shift and go to state 34
    KEYWORD_break   shift and go to state 50
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 24
    VARIABLES       shift and go to state 106
    CONSTANTS       shift and go to state 105
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 31
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30

    mlhs                           shift and go to state 2
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    array                          shift and go to state 27
    expr2                          shift and go to state 42
    expr3                          shift and go to state 43
    expr1                          shift and go to state 44
    expr6                          shift and go to state 45
    expr7                          shift and go to state 7
    puts_stmt                      shift and go to state 19
    expr5                          shift and go to state 47
    func_call_stmt                 shift and go to state 33
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    expr4                          shift and go to state 8
    fname                          shift and go to state 46
    exit_stmt                      shift and go to state 51
    MLHS                           shift and go to state 52
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 21
    uexpr                          shift and go to state 10
    none                           shift and go to state 107
    gen_stmts                      shift and go to state 208
    expr                           shift and go to state 36
    top_stmt                       shift and go to state 104

state 141

    (154) expr2 -> expr7 DOUBLEDOT expr7 .
    (172) expr7 -> expr7 . BITXOR expr8
    (173) expr7 -> expr7 . PIPE expr8

    KEYWORD_while   reduce using rule 154 (expr2 -> expr7 DOUBLEDOT expr7 .)
    KEYWORD_until   reduce using rule 154 (expr2 -> expr7 DOUBLEDOT expr7 .)
    DELIM           reduce using rule 154 (expr2 -> expr7 DOUBLEDOT expr7 .)
    newline         reduce using rule 154 (expr2 -> expr7 DOUBLEDOT expr7 .)
    KEYWORD_end     reduce using rule 154 (expr2 -> expr7 DOUBLEDOT expr7 .)
    COMMA           reduce using rule 154 (expr2 -> expr7 DOUBLEDOT expr7 .)
    $end            reduce using rule 154 (expr2 -> expr7 DOUBLEDOT expr7 .)
    KEYWORD_elsif   reduce using rule 154 (expr2 -> expr7 DOUBLEDOT expr7 .)
    KEYWORD_else    reduce using rule 154 (expr2 -> expr7 DOUBLEDOT expr7 .)
    CLOSE_PAREN     reduce using rule 154 (expr2 -> expr7 DOUBLEDOT expr7 .)
    COLON           reduce using rule 154 (expr2 -> expr7 DOUBLEDOT expr7 .)
    BITXOR          shift and go to state 66
    PIPE            shift and go to state 65


state 142

    (169) expr6 -> expr7 GREATEREQUAL expr7 .
    (172) expr7 -> expr7 . BITXOR expr8
    (173) expr7 -> expr7 . PIPE expr8

    IFF             reduce using rule 169 (expr6 -> expr7 GREATEREQUAL expr7 .)
    DOUBLEEQUAL     reduce using rule 169 (expr6 -> expr7 GREATEREQUAL expr7 .)
    TRIPLEEQUAL     reduce using rule 169 (expr6 -> expr7 GREATEREQUAL expr7 .)
    NOTEQUAL        reduce using rule 169 (expr6 -> expr7 GREATEREQUAL expr7 .)
    LOGICALAND      reduce using rule 169 (expr6 -> expr7 GREATEREQUAL expr7 .)
    LOGICALOR       reduce using rule 169 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_do      reduce using rule 169 (expr6 -> expr7 GREATEREQUAL expr7 .)
    newline         reduce using rule 169 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_while   reduce using rule 169 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_until   reduce using rule 169 (expr6 -> expr7 GREATEREQUAL expr7 .)
    DELIM           reduce using rule 169 (expr6 -> expr7 GREATEREQUAL expr7 .)
    $end            reduce using rule 169 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_end     reduce using rule 169 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_elsif   reduce using rule 169 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_else    reduce using rule 169 (expr6 -> expr7 GREATEREQUAL expr7 .)
    QUESTION_MARK   reduce using rule 169 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_then    reduce using rule 169 (expr6 -> expr7 GREATEREQUAL expr7 .)
    CLOSE_PAREN     reduce using rule 169 (expr6 -> expr7 GREATEREQUAL expr7 .)
    COLON           reduce using rule 169 (expr6 -> expr7 GREATEREQUAL expr7 .)
    COMMA           reduce using rule 169 (expr6 -> expr7 GREATEREQUAL expr7 .)
    BITXOR          shift and go to state 66
    PIPE            shift and go to state 65


state 143

    (155) expr2 -> expr7 TRIPLEDOT expr7 .
    (172) expr7 -> expr7 . BITXOR expr8
    (173) expr7 -> expr7 . PIPE expr8

    KEYWORD_while   reduce using rule 155 (expr2 -> expr7 TRIPLEDOT expr7 .)
    KEYWORD_until   reduce using rule 155 (expr2 -> expr7 TRIPLEDOT expr7 .)
    DELIM           reduce using rule 155 (expr2 -> expr7 TRIPLEDOT expr7 .)
    newline         reduce using rule 155 (expr2 -> expr7 TRIPLEDOT expr7 .)
    KEYWORD_end     reduce using rule 155 (expr2 -> expr7 TRIPLEDOT expr7 .)
    COMMA           reduce using rule 155 (expr2 -> expr7 TRIPLEDOT expr7 .)
    $end            reduce using rule 155 (expr2 -> expr7 TRIPLEDOT expr7 .)
    KEYWORD_elsif   reduce using rule 155 (expr2 -> expr7 TRIPLEDOT expr7 .)
    KEYWORD_else    reduce using rule 155 (expr2 -> expr7 TRIPLEDOT expr7 .)
    CLOSE_PAREN     reduce using rule 155 (expr2 -> expr7 TRIPLEDOT expr7 .)
    COLON           reduce using rule 155 (expr2 -> expr7 TRIPLEDOT expr7 .)
    BITXOR          shift and go to state 66
    PIPE            shift and go to state 65


state 144

    (168) expr6 -> expr7 GREATER expr7 .
    (172) expr7 -> expr7 . BITXOR expr8
    (173) expr7 -> expr7 . PIPE expr8

    IFF             reduce using rule 168 (expr6 -> expr7 GREATER expr7 .)
    DOUBLEEQUAL     reduce using rule 168 (expr6 -> expr7 GREATER expr7 .)
    TRIPLEEQUAL     reduce using rule 168 (expr6 -> expr7 GREATER expr7 .)
    NOTEQUAL        reduce using rule 168 (expr6 -> expr7 GREATER expr7 .)
    LOGICALAND      reduce using rule 168 (expr6 -> expr7 GREATER expr7 .)
    LOGICALOR       reduce using rule 168 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_do      reduce using rule 168 (expr6 -> expr7 GREATER expr7 .)
    newline         reduce using rule 168 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_while   reduce using rule 168 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_until   reduce using rule 168 (expr6 -> expr7 GREATER expr7 .)
    DELIM           reduce using rule 168 (expr6 -> expr7 GREATER expr7 .)
    $end            reduce using rule 168 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_end     reduce using rule 168 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_elsif   reduce using rule 168 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_else    reduce using rule 168 (expr6 -> expr7 GREATER expr7 .)
    QUESTION_MARK   reduce using rule 168 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_then    reduce using rule 168 (expr6 -> expr7 GREATER expr7 .)
    CLOSE_PAREN     reduce using rule 168 (expr6 -> expr7 GREATER expr7 .)
    COLON           reduce using rule 168 (expr6 -> expr7 GREATER expr7 .)
    COMMA           reduce using rule 168 (expr6 -> expr7 GREATER expr7 .)
    BITXOR          shift and go to state 66
    PIPE            shift and go to state 65


state 145

    (167) expr6 -> expr7 LESS expr7 .
    (172) expr7 -> expr7 . BITXOR expr8
    (173) expr7 -> expr7 . PIPE expr8

    IFF             reduce using rule 167 (expr6 -> expr7 LESS expr7 .)
    DOUBLEEQUAL     reduce using rule 167 (expr6 -> expr7 LESS expr7 .)
    TRIPLEEQUAL     reduce using rule 167 (expr6 -> expr7 LESS expr7 .)
    NOTEQUAL        reduce using rule 167 (expr6 -> expr7 LESS expr7 .)
    LOGICALAND      reduce using rule 167 (expr6 -> expr7 LESS expr7 .)
    LOGICALOR       reduce using rule 167 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_do      reduce using rule 167 (expr6 -> expr7 LESS expr7 .)
    newline         reduce using rule 167 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_while   reduce using rule 167 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_until   reduce using rule 167 (expr6 -> expr7 LESS expr7 .)
    DELIM           reduce using rule 167 (expr6 -> expr7 LESS expr7 .)
    $end            reduce using rule 167 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_end     reduce using rule 167 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_elsif   reduce using rule 167 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_else    reduce using rule 167 (expr6 -> expr7 LESS expr7 .)
    QUESTION_MARK   reduce using rule 167 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_then    reduce using rule 167 (expr6 -> expr7 LESS expr7 .)
    CLOSE_PAREN     reduce using rule 167 (expr6 -> expr7 LESS expr7 .)
    COLON           reduce using rule 167 (expr6 -> expr7 LESS expr7 .)
    COMMA           reduce using rule 167 (expr6 -> expr7 LESS expr7 .)
    BITXOR          shift and go to state 66
    PIPE            shift and go to state 65


state 146

    (173) expr7 -> expr7 PIPE expr8 .
    (175) expr8 -> expr8 . BITAND expr9

    DOUBLEDOT       reduce using rule 173 (expr7 -> expr7 PIPE expr8 .)
    TRIPLEDOT       reduce using rule 173 (expr7 -> expr7 PIPE expr8 .)
    BITXOR          reduce using rule 173 (expr7 -> expr7 PIPE expr8 .)
    PIPE            reduce using rule 173 (expr7 -> expr7 PIPE expr8 .)
    LESSEQUAL       reduce using rule 173 (expr7 -> expr7 PIPE expr8 .)
    LESS            reduce using rule 173 (expr7 -> expr7 PIPE expr8 .)
    GREATER         reduce using rule 173 (expr7 -> expr7 PIPE expr8 .)
    GREATEREQUAL    reduce using rule 173 (expr7 -> expr7 PIPE expr8 .)
    IFF             reduce using rule 173 (expr7 -> expr7 PIPE expr8 .)
    DOUBLEEQUAL     reduce using rule 173 (expr7 -> expr7 PIPE expr8 .)
    TRIPLEEQUAL     reduce using rule 173 (expr7 -> expr7 PIPE expr8 .)
    NOTEQUAL        reduce using rule 173 (expr7 -> expr7 PIPE expr8 .)
    LOGICALAND      reduce using rule 173 (expr7 -> expr7 PIPE expr8 .)
    QUESTION_MARK   reduce using rule 173 (expr7 -> expr7 PIPE expr8 .)
    LOGICALOR       reduce using rule 173 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_while   reduce using rule 173 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_until   reduce using rule 173 (expr7 -> expr7 PIPE expr8 .)
    DELIM           reduce using rule 173 (expr7 -> expr7 PIPE expr8 .)
    newline         reduce using rule 173 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_elsif   reduce using rule 173 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_else    reduce using rule 173 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_end     reduce using rule 173 (expr7 -> expr7 PIPE expr8 .)
    $end            reduce using rule 173 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_do      reduce using rule 173 (expr7 -> expr7 PIPE expr8 .)
    CLOSE_PAREN     reduce using rule 173 (expr7 -> expr7 PIPE expr8 .)
    COMMA           reduce using rule 173 (expr7 -> expr7 PIPE expr8 .)
    CLOSE_BRACKET   reduce using rule 173 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_then    reduce using rule 173 (expr7 -> expr7 PIPE expr8 .)
    COLON           reduce using rule 173 (expr7 -> expr7 PIPE expr8 .)
    BITAND          shift and go to state 128


state 147

    (172) expr7 -> expr7 BITXOR expr8 .
    (175) expr8 -> expr8 . BITAND expr9

    DOUBLEDOT       reduce using rule 172 (expr7 -> expr7 BITXOR expr8 .)
    TRIPLEDOT       reduce using rule 172 (expr7 -> expr7 BITXOR expr8 .)
    BITXOR          reduce using rule 172 (expr7 -> expr7 BITXOR expr8 .)
    PIPE            reduce using rule 172 (expr7 -> expr7 BITXOR expr8 .)
    LESSEQUAL       reduce using rule 172 (expr7 -> expr7 BITXOR expr8 .)
    LESS            reduce using rule 172 (expr7 -> expr7 BITXOR expr8 .)
    GREATER         reduce using rule 172 (expr7 -> expr7 BITXOR expr8 .)
    GREATEREQUAL    reduce using rule 172 (expr7 -> expr7 BITXOR expr8 .)
    IFF             reduce using rule 172 (expr7 -> expr7 BITXOR expr8 .)
    DOUBLEEQUAL     reduce using rule 172 (expr7 -> expr7 BITXOR expr8 .)
    TRIPLEEQUAL     reduce using rule 172 (expr7 -> expr7 BITXOR expr8 .)
    NOTEQUAL        reduce using rule 172 (expr7 -> expr7 BITXOR expr8 .)
    LOGICALAND      reduce using rule 172 (expr7 -> expr7 BITXOR expr8 .)
    QUESTION_MARK   reduce using rule 172 (expr7 -> expr7 BITXOR expr8 .)
    LOGICALOR       reduce using rule 172 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_while   reduce using rule 172 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_until   reduce using rule 172 (expr7 -> expr7 BITXOR expr8 .)
    DELIM           reduce using rule 172 (expr7 -> expr7 BITXOR expr8 .)
    newline         reduce using rule 172 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_elsif   reduce using rule 172 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_else    reduce using rule 172 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_end     reduce using rule 172 (expr7 -> expr7 BITXOR expr8 .)
    $end            reduce using rule 172 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_do      reduce using rule 172 (expr7 -> expr7 BITXOR expr8 .)
    CLOSE_PAREN     reduce using rule 172 (expr7 -> expr7 BITXOR expr8 .)
    COMMA           reduce using rule 172 (expr7 -> expr7 BITXOR expr8 .)
    CLOSE_BRACKET   reduce using rule 172 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_then    reduce using rule 172 (expr7 -> expr7 BITXOR expr8 .)
    COLON           reduce using rule 172 (expr7 -> expr7 BITXOR expr8 .)
    BITAND          shift and go to state 128


state 148

    (166) expr6 -> expr7 LESSEQUAL expr7 .
    (172) expr7 -> expr7 . BITXOR expr8
    (173) expr7 -> expr7 . PIPE expr8

    IFF             reduce using rule 166 (expr6 -> expr7 LESSEQUAL expr7 .)
    DOUBLEEQUAL     reduce using rule 166 (expr6 -> expr7 LESSEQUAL expr7 .)
    TRIPLEEQUAL     reduce using rule 166 (expr6 -> expr7 LESSEQUAL expr7 .)
    NOTEQUAL        reduce using rule 166 (expr6 -> expr7 LESSEQUAL expr7 .)
    LOGICALAND      reduce using rule 166 (expr6 -> expr7 LESSEQUAL expr7 .)
    LOGICALOR       reduce using rule 166 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_do      reduce using rule 166 (expr6 -> expr7 LESSEQUAL expr7 .)
    newline         reduce using rule 166 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_while   reduce using rule 166 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_until   reduce using rule 166 (expr6 -> expr7 LESSEQUAL expr7 .)
    DELIM           reduce using rule 166 (expr6 -> expr7 LESSEQUAL expr7 .)
    $end            reduce using rule 166 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_end     reduce using rule 166 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_elsif   reduce using rule 166 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_else    reduce using rule 166 (expr6 -> expr7 LESSEQUAL expr7 .)
    QUESTION_MARK   reduce using rule 166 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_then    reduce using rule 166 (expr6 -> expr7 LESSEQUAL expr7 .)
    CLOSE_PAREN     reduce using rule 166 (expr6 -> expr7 LESSEQUAL expr7 .)
    COLON           reduce using rule 166 (expr6 -> expr7 LESSEQUAL expr7 .)
    COMMA           reduce using rule 166 (expr6 -> expr7 LESSEQUAL expr7 .)
    BITXOR          shift and go to state 66
    PIPE            shift and go to state 65


state 149

    (159) expr4 -> expr4 LOGICALAND expr5 .

    LOGICALAND      reduce using rule 159 (expr4 -> expr4 LOGICALAND expr5 .)
    QUESTION_MARK   reduce using rule 159 (expr4 -> expr4 LOGICALAND expr5 .)
    LOGICALOR       reduce using rule 159 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_while   reduce using rule 159 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_until   reduce using rule 159 (expr4 -> expr4 LOGICALAND expr5 .)
    DELIM           reduce using rule 159 (expr4 -> expr4 LOGICALAND expr5 .)
    newline         reduce using rule 159 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_end     reduce using rule 159 (expr4 -> expr4 LOGICALAND expr5 .)
    $end            reduce using rule 159 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_do      reduce using rule 159 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_then    reduce using rule 159 (expr4 -> expr4 LOGICALAND expr5 .)
    CLOSE_PAREN     reduce using rule 159 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_elsif   reduce using rule 159 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_else    reduce using rule 159 (expr4 -> expr4 LOGICALAND expr5 .)
    COLON           reduce using rule 159 (expr4 -> expr4 LOGICALAND expr5 .)
    COMMA           reduce using rule 159 (expr4 -> expr4 LOGICALAND expr5 .)


state 150

    (69) top_stmt -> top_stmt KEYWORD_while expr3 .
    (157) expr3 -> expr3 . LOGICALOR expr4

    KEYWORD_while   reduce using rule 69 (top_stmt -> top_stmt KEYWORD_while expr3 .)
    KEYWORD_until   reduce using rule 69 (top_stmt -> top_stmt KEYWORD_while expr3 .)
    DELIM           reduce using rule 69 (top_stmt -> top_stmt KEYWORD_while expr3 .)
    newline         reduce using rule 69 (top_stmt -> top_stmt KEYWORD_while expr3 .)
    KEYWORD_end     reduce using rule 69 (top_stmt -> top_stmt KEYWORD_while expr3 .)
    KEYWORD_elsif   reduce using rule 69 (top_stmt -> top_stmt KEYWORD_while expr3 .)
    KEYWORD_else    reduce using rule 69 (top_stmt -> top_stmt KEYWORD_while expr3 .)
    $end            reduce using rule 69 (top_stmt -> top_stmt KEYWORD_while expr3 .)
    LOGICALOR       shift and go to state 110


state 151

    (71) top_stmt -> top_stmt KEYWORD_until expr3 .
    (157) expr3 -> expr3 . LOGICALOR expr4

    KEYWORD_while   reduce using rule 71 (top_stmt -> top_stmt KEYWORD_until expr3 .)
    KEYWORD_until   reduce using rule 71 (top_stmt -> top_stmt KEYWORD_until expr3 .)
    DELIM           reduce using rule 71 (top_stmt -> top_stmt KEYWORD_until expr3 .)
    newline         reduce using rule 71 (top_stmt -> top_stmt KEYWORD_until expr3 .)
    KEYWORD_end     reduce using rule 71 (top_stmt -> top_stmt KEYWORD_until expr3 .)
    KEYWORD_elsif   reduce using rule 71 (top_stmt -> top_stmt KEYWORD_until expr3 .)
    KEYWORD_else    reduce using rule 71 (top_stmt -> top_stmt KEYWORD_until expr3 .)
    $end            reduce using rule 71 (top_stmt -> top_stmt KEYWORD_until expr3 .)
    LOGICALOR       shift and go to state 110


state 152

    (180) expr10 -> expr10 PLUS expr11 .
    (183) expr11 -> expr11 . MULTIPLY expr12
    (184) expr11 -> expr11 . DIV expr12
    (185) expr11 -> expr11 . MOD expr12

    PLUS            reduce using rule 180 (expr10 -> expr10 PLUS expr11 .)
    MINUS           reduce using rule 180 (expr10 -> expr10 PLUS expr11 .)
    SHIFTL          reduce using rule 180 (expr10 -> expr10 PLUS expr11 .)
    SHIFTR          reduce using rule 180 (expr10 -> expr10 PLUS expr11 .)
    BITAND          reduce using rule 180 (expr10 -> expr10 PLUS expr11 .)
    DOUBLEDOT       reduce using rule 180 (expr10 -> expr10 PLUS expr11 .)
    TRIPLEDOT       reduce using rule 180 (expr10 -> expr10 PLUS expr11 .)
    BITXOR          reduce using rule 180 (expr10 -> expr10 PLUS expr11 .)
    PIPE            reduce using rule 180 (expr10 -> expr10 PLUS expr11 .)
    LESSEQUAL       reduce using rule 180 (expr10 -> expr10 PLUS expr11 .)
    LESS            reduce using rule 180 (expr10 -> expr10 PLUS expr11 .)
    GREATER         reduce using rule 180 (expr10 -> expr10 PLUS expr11 .)
    GREATEREQUAL    reduce using rule 180 (expr10 -> expr10 PLUS expr11 .)
    IFF             reduce using rule 180 (expr10 -> expr10 PLUS expr11 .)
    DOUBLEEQUAL     reduce using rule 180 (expr10 -> expr10 PLUS expr11 .)
    TRIPLEEQUAL     reduce using rule 180 (expr10 -> expr10 PLUS expr11 .)
    NOTEQUAL        reduce using rule 180 (expr10 -> expr10 PLUS expr11 .)
    LOGICALAND      reduce using rule 180 (expr10 -> expr10 PLUS expr11 .)
    QUESTION_MARK   reduce using rule 180 (expr10 -> expr10 PLUS expr11 .)
    LOGICALOR       reduce using rule 180 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_while   reduce using rule 180 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_until   reduce using rule 180 (expr10 -> expr10 PLUS expr11 .)
    DELIM           reduce using rule 180 (expr10 -> expr10 PLUS expr11 .)
    newline         reduce using rule 180 (expr10 -> expr10 PLUS expr11 .)
    $end            reduce using rule 180 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_do      reduce using rule 180 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_then    reduce using rule 180 (expr10 -> expr10 PLUS expr11 .)
    CLOSE_PAREN     reduce using rule 180 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_end     reduce using rule 180 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_elsif   reduce using rule 180 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_else    reduce using rule 180 (expr10 -> expr10 PLUS expr11 .)
    COLON           reduce using rule 180 (expr10 -> expr10 PLUS expr11 .)
    COMMA           reduce using rule 180 (expr10 -> expr10 PLUS expr11 .)
    CLOSE_BRACKET   reduce using rule 180 (expr10 -> expr10 PLUS expr11 .)
    MULTIPLY        shift and go to state 75
    DIV             shift and go to state 76
    MOD             shift and go to state 77


state 153

    (181) expr10 -> expr10 MINUS expr11 .
    (183) expr11 -> expr11 . MULTIPLY expr12
    (184) expr11 -> expr11 . DIV expr12
    (185) expr11 -> expr11 . MOD expr12

    PLUS            reduce using rule 181 (expr10 -> expr10 MINUS expr11 .)
    MINUS           reduce using rule 181 (expr10 -> expr10 MINUS expr11 .)
    SHIFTL          reduce using rule 181 (expr10 -> expr10 MINUS expr11 .)
    SHIFTR          reduce using rule 181 (expr10 -> expr10 MINUS expr11 .)
    BITAND          reduce using rule 181 (expr10 -> expr10 MINUS expr11 .)
    DOUBLEDOT       reduce using rule 181 (expr10 -> expr10 MINUS expr11 .)
    TRIPLEDOT       reduce using rule 181 (expr10 -> expr10 MINUS expr11 .)
    BITXOR          reduce using rule 181 (expr10 -> expr10 MINUS expr11 .)
    PIPE            reduce using rule 181 (expr10 -> expr10 MINUS expr11 .)
    LESSEQUAL       reduce using rule 181 (expr10 -> expr10 MINUS expr11 .)
    LESS            reduce using rule 181 (expr10 -> expr10 MINUS expr11 .)
    GREATER         reduce using rule 181 (expr10 -> expr10 MINUS expr11 .)
    GREATEREQUAL    reduce using rule 181 (expr10 -> expr10 MINUS expr11 .)
    IFF             reduce using rule 181 (expr10 -> expr10 MINUS expr11 .)
    DOUBLEEQUAL     reduce using rule 181 (expr10 -> expr10 MINUS expr11 .)
    TRIPLEEQUAL     reduce using rule 181 (expr10 -> expr10 MINUS expr11 .)
    NOTEQUAL        reduce using rule 181 (expr10 -> expr10 MINUS expr11 .)
    LOGICALAND      reduce using rule 181 (expr10 -> expr10 MINUS expr11 .)
    QUESTION_MARK   reduce using rule 181 (expr10 -> expr10 MINUS expr11 .)
    LOGICALOR       reduce using rule 181 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_while   reduce using rule 181 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_until   reduce using rule 181 (expr10 -> expr10 MINUS expr11 .)
    DELIM           reduce using rule 181 (expr10 -> expr10 MINUS expr11 .)
    newline         reduce using rule 181 (expr10 -> expr10 MINUS expr11 .)
    $end            reduce using rule 181 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_do      reduce using rule 181 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_then    reduce using rule 181 (expr10 -> expr10 MINUS expr11 .)
    CLOSE_PAREN     reduce using rule 181 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_end     reduce using rule 181 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_elsif   reduce using rule 181 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_else    reduce using rule 181 (expr10 -> expr10 MINUS expr11 .)
    COLON           reduce using rule 181 (expr10 -> expr10 MINUS expr11 .)
    COMMA           reduce using rule 181 (expr10 -> expr10 MINUS expr11 .)
    CLOSE_BRACKET   reduce using rule 181 (expr10 -> expr10 MINUS expr11 .)
    MULTIPLY        shift and go to state 75
    DIV             shift and go to state 76
    MOD             shift and go to state 77


state 154

    (183) expr11 -> expr11 MULTIPLY expr12 .

    MULTIPLY        reduce using rule 183 (expr11 -> expr11 MULTIPLY expr12 .)
    DIV             reduce using rule 183 (expr11 -> expr11 MULTIPLY expr12 .)
    MOD             reduce using rule 183 (expr11 -> expr11 MULTIPLY expr12 .)
    PLUS            reduce using rule 183 (expr11 -> expr11 MULTIPLY expr12 .)
    MINUS           reduce using rule 183 (expr11 -> expr11 MULTIPLY expr12 .)
    SHIFTL          reduce using rule 183 (expr11 -> expr11 MULTIPLY expr12 .)
    SHIFTR          reduce using rule 183 (expr11 -> expr11 MULTIPLY expr12 .)
    BITAND          reduce using rule 183 (expr11 -> expr11 MULTIPLY expr12 .)
    DOUBLEDOT       reduce using rule 183 (expr11 -> expr11 MULTIPLY expr12 .)
    TRIPLEDOT       reduce using rule 183 (expr11 -> expr11 MULTIPLY expr12 .)
    BITXOR          reduce using rule 183 (expr11 -> expr11 MULTIPLY expr12 .)
    PIPE            reduce using rule 183 (expr11 -> expr11 MULTIPLY expr12 .)
    LESSEQUAL       reduce using rule 183 (expr11 -> expr11 MULTIPLY expr12 .)
    LESS            reduce using rule 183 (expr11 -> expr11 MULTIPLY expr12 .)
    GREATER         reduce using rule 183 (expr11 -> expr11 MULTIPLY expr12 .)
    GREATEREQUAL    reduce using rule 183 (expr11 -> expr11 MULTIPLY expr12 .)
    IFF             reduce using rule 183 (expr11 -> expr11 MULTIPLY expr12 .)
    DOUBLEEQUAL     reduce using rule 183 (expr11 -> expr11 MULTIPLY expr12 .)
    TRIPLEEQUAL     reduce using rule 183 (expr11 -> expr11 MULTIPLY expr12 .)
    NOTEQUAL        reduce using rule 183 (expr11 -> expr11 MULTIPLY expr12 .)
    LOGICALAND      reduce using rule 183 (expr11 -> expr11 MULTIPLY expr12 .)
    QUESTION_MARK   reduce using rule 183 (expr11 -> expr11 MULTIPLY expr12 .)
    LOGICALOR       reduce using rule 183 (expr11 -> expr11 MULTIPLY expr12 .)
    KEYWORD_while   reduce using rule 183 (expr11 -> expr11 MULTIPLY expr12 .)
    KEYWORD_until   reduce using rule 183 (expr11 -> expr11 MULTIPLY expr12 .)
    DELIM           reduce using rule 183 (expr11 -> expr11 MULTIPLY expr12 .)
    newline         reduce using rule 183 (expr11 -> expr11 MULTIPLY expr12 .)
    $end            reduce using rule 183 (expr11 -> expr11 MULTIPLY expr12 .)
    KEYWORD_do      reduce using rule 183 (expr11 -> expr11 MULTIPLY expr12 .)
    KEYWORD_then    reduce using rule 183 (expr11 -> expr11 MULTIPLY expr12 .)
    CLOSE_PAREN     reduce using rule 183 (expr11 -> expr11 MULTIPLY expr12 .)
    KEYWORD_end     reduce using rule 183 (expr11 -> expr11 MULTIPLY expr12 .)
    KEYWORD_elsif   reduce using rule 183 (expr11 -> expr11 MULTIPLY expr12 .)
    KEYWORD_else    reduce using rule 183 (expr11 -> expr11 MULTIPLY expr12 .)
    COLON           reduce using rule 183 (expr11 -> expr11 MULTIPLY expr12 .)
    COMMA           reduce using rule 183 (expr11 -> expr11 MULTIPLY expr12 .)
    CLOSE_BRACKET   reduce using rule 183 (expr11 -> expr11 MULTIPLY expr12 .)


state 155

    (184) expr11 -> expr11 DIV expr12 .

    MULTIPLY        reduce using rule 184 (expr11 -> expr11 DIV expr12 .)
    DIV             reduce using rule 184 (expr11 -> expr11 DIV expr12 .)
    MOD             reduce using rule 184 (expr11 -> expr11 DIV expr12 .)
    PLUS            reduce using rule 184 (expr11 -> expr11 DIV expr12 .)
    MINUS           reduce using rule 184 (expr11 -> expr11 DIV expr12 .)
    SHIFTL          reduce using rule 184 (expr11 -> expr11 DIV expr12 .)
    SHIFTR          reduce using rule 184 (expr11 -> expr11 DIV expr12 .)
    BITAND          reduce using rule 184 (expr11 -> expr11 DIV expr12 .)
    DOUBLEDOT       reduce using rule 184 (expr11 -> expr11 DIV expr12 .)
    TRIPLEDOT       reduce using rule 184 (expr11 -> expr11 DIV expr12 .)
    BITXOR          reduce using rule 184 (expr11 -> expr11 DIV expr12 .)
    PIPE            reduce using rule 184 (expr11 -> expr11 DIV expr12 .)
    LESSEQUAL       reduce using rule 184 (expr11 -> expr11 DIV expr12 .)
    LESS            reduce using rule 184 (expr11 -> expr11 DIV expr12 .)
    GREATER         reduce using rule 184 (expr11 -> expr11 DIV expr12 .)
    GREATEREQUAL    reduce using rule 184 (expr11 -> expr11 DIV expr12 .)
    IFF             reduce using rule 184 (expr11 -> expr11 DIV expr12 .)
    DOUBLEEQUAL     reduce using rule 184 (expr11 -> expr11 DIV expr12 .)
    TRIPLEEQUAL     reduce using rule 184 (expr11 -> expr11 DIV expr12 .)
    NOTEQUAL        reduce using rule 184 (expr11 -> expr11 DIV expr12 .)
    LOGICALAND      reduce using rule 184 (expr11 -> expr11 DIV expr12 .)
    QUESTION_MARK   reduce using rule 184 (expr11 -> expr11 DIV expr12 .)
    LOGICALOR       reduce using rule 184 (expr11 -> expr11 DIV expr12 .)
    KEYWORD_while   reduce using rule 184 (expr11 -> expr11 DIV expr12 .)
    KEYWORD_until   reduce using rule 184 (expr11 -> expr11 DIV expr12 .)
    DELIM           reduce using rule 184 (expr11 -> expr11 DIV expr12 .)
    newline         reduce using rule 184 (expr11 -> expr11 DIV expr12 .)
    $end            reduce using rule 184 (expr11 -> expr11 DIV expr12 .)
    KEYWORD_do      reduce using rule 184 (expr11 -> expr11 DIV expr12 .)
    KEYWORD_then    reduce using rule 184 (expr11 -> expr11 DIV expr12 .)
    CLOSE_PAREN     reduce using rule 184 (expr11 -> expr11 DIV expr12 .)
    KEYWORD_end     reduce using rule 184 (expr11 -> expr11 DIV expr12 .)
    KEYWORD_elsif   reduce using rule 184 (expr11 -> expr11 DIV expr12 .)
    KEYWORD_else    reduce using rule 184 (expr11 -> expr11 DIV expr12 .)
    COLON           reduce using rule 184 (expr11 -> expr11 DIV expr12 .)
    COMMA           reduce using rule 184 (expr11 -> expr11 DIV expr12 .)
    CLOSE_BRACKET   reduce using rule 184 (expr11 -> expr11 DIV expr12 .)


state 156

    (185) expr11 -> expr11 MOD expr12 .

    MULTIPLY        reduce using rule 185 (expr11 -> expr11 MOD expr12 .)
    DIV             reduce using rule 185 (expr11 -> expr11 MOD expr12 .)
    MOD             reduce using rule 185 (expr11 -> expr11 MOD expr12 .)
    PLUS            reduce using rule 185 (expr11 -> expr11 MOD expr12 .)
    MINUS           reduce using rule 185 (expr11 -> expr11 MOD expr12 .)
    SHIFTL          reduce using rule 185 (expr11 -> expr11 MOD expr12 .)
    SHIFTR          reduce using rule 185 (expr11 -> expr11 MOD expr12 .)
    BITAND          reduce using rule 185 (expr11 -> expr11 MOD expr12 .)
    DOUBLEDOT       reduce using rule 185 (expr11 -> expr11 MOD expr12 .)
    TRIPLEDOT       reduce using rule 185 (expr11 -> expr11 MOD expr12 .)
    BITXOR          reduce using rule 185 (expr11 -> expr11 MOD expr12 .)
    PIPE            reduce using rule 185 (expr11 -> expr11 MOD expr12 .)
    LESSEQUAL       reduce using rule 185 (expr11 -> expr11 MOD expr12 .)
    LESS            reduce using rule 185 (expr11 -> expr11 MOD expr12 .)
    GREATER         reduce using rule 185 (expr11 -> expr11 MOD expr12 .)
    GREATEREQUAL    reduce using rule 185 (expr11 -> expr11 MOD expr12 .)
    IFF             reduce using rule 185 (expr11 -> expr11 MOD expr12 .)
    DOUBLEEQUAL     reduce using rule 185 (expr11 -> expr11 MOD expr12 .)
    TRIPLEEQUAL     reduce using rule 185 (expr11 -> expr11 MOD expr12 .)
    NOTEQUAL        reduce using rule 185 (expr11 -> expr11 MOD expr12 .)
    LOGICALAND      reduce using rule 185 (expr11 -> expr11 MOD expr12 .)
    QUESTION_MARK   reduce using rule 185 (expr11 -> expr11 MOD expr12 .)
    LOGICALOR       reduce using rule 185 (expr11 -> expr11 MOD expr12 .)
    KEYWORD_while   reduce using rule 185 (expr11 -> expr11 MOD expr12 .)
    KEYWORD_until   reduce using rule 185 (expr11 -> expr11 MOD expr12 .)
    DELIM           reduce using rule 185 (expr11 -> expr11 MOD expr12 .)
    newline         reduce using rule 185 (expr11 -> expr11 MOD expr12 .)
    $end            reduce using rule 185 (expr11 -> expr11 MOD expr12 .)
    KEYWORD_do      reduce using rule 185 (expr11 -> expr11 MOD expr12 .)
    KEYWORD_then    reduce using rule 185 (expr11 -> expr11 MOD expr12 .)
    CLOSE_PAREN     reduce using rule 185 (expr11 -> expr11 MOD expr12 .)
    KEYWORD_end     reduce using rule 185 (expr11 -> expr11 MOD expr12 .)
    KEYWORD_elsif   reduce using rule 185 (expr11 -> expr11 MOD expr12 .)
    KEYWORD_else    reduce using rule 185 (expr11 -> expr11 MOD expr12 .)
    COLON           reduce using rule 185 (expr11 -> expr11 MOD expr12 .)
    COMMA           reduce using rule 185 (expr11 -> expr11 MOD expr12 .)
    CLOSE_BRACKET   reduce using rule 185 (expr11 -> expr11 MOD expr12 .)


state 157

    (187) expr12 -> expr13 DOUBLESTAR expr12 .

    MULTIPLY        reduce using rule 187 (expr12 -> expr13 DOUBLESTAR expr12 .)
    DIV             reduce using rule 187 (expr12 -> expr13 DOUBLESTAR expr12 .)
    MOD             reduce using rule 187 (expr12 -> expr13 DOUBLESTAR expr12 .)
    PLUS            reduce using rule 187 (expr12 -> expr13 DOUBLESTAR expr12 .)
    MINUS           reduce using rule 187 (expr12 -> expr13 DOUBLESTAR expr12 .)
    SHIFTL          reduce using rule 187 (expr12 -> expr13 DOUBLESTAR expr12 .)
    SHIFTR          reduce using rule 187 (expr12 -> expr13 DOUBLESTAR expr12 .)
    BITAND          reduce using rule 187 (expr12 -> expr13 DOUBLESTAR expr12 .)
    DOUBLEDOT       reduce using rule 187 (expr12 -> expr13 DOUBLESTAR expr12 .)
    TRIPLEDOT       reduce using rule 187 (expr12 -> expr13 DOUBLESTAR expr12 .)
    BITXOR          reduce using rule 187 (expr12 -> expr13 DOUBLESTAR expr12 .)
    PIPE            reduce using rule 187 (expr12 -> expr13 DOUBLESTAR expr12 .)
    LESSEQUAL       reduce using rule 187 (expr12 -> expr13 DOUBLESTAR expr12 .)
    LESS            reduce using rule 187 (expr12 -> expr13 DOUBLESTAR expr12 .)
    GREATER         reduce using rule 187 (expr12 -> expr13 DOUBLESTAR expr12 .)
    GREATEREQUAL    reduce using rule 187 (expr12 -> expr13 DOUBLESTAR expr12 .)
    IFF             reduce using rule 187 (expr12 -> expr13 DOUBLESTAR expr12 .)
    DOUBLEEQUAL     reduce using rule 187 (expr12 -> expr13 DOUBLESTAR expr12 .)
    TRIPLEEQUAL     reduce using rule 187 (expr12 -> expr13 DOUBLESTAR expr12 .)
    NOTEQUAL        reduce using rule 187 (expr12 -> expr13 DOUBLESTAR expr12 .)
    LOGICALAND      reduce using rule 187 (expr12 -> expr13 DOUBLESTAR expr12 .)
    QUESTION_MARK   reduce using rule 187 (expr12 -> expr13 DOUBLESTAR expr12 .)
    LOGICALOR       reduce using rule 187 (expr12 -> expr13 DOUBLESTAR expr12 .)
    KEYWORD_while   reduce using rule 187 (expr12 -> expr13 DOUBLESTAR expr12 .)
    KEYWORD_until   reduce using rule 187 (expr12 -> expr13 DOUBLESTAR expr12 .)
    DELIM           reduce using rule 187 (expr12 -> expr13 DOUBLESTAR expr12 .)
    newline         reduce using rule 187 (expr12 -> expr13 DOUBLESTAR expr12 .)
    KEYWORD_end     reduce using rule 187 (expr12 -> expr13 DOUBLESTAR expr12 .)
    $end            reduce using rule 187 (expr12 -> expr13 DOUBLESTAR expr12 .)
    KEYWORD_do      reduce using rule 187 (expr12 -> expr13 DOUBLESTAR expr12 .)
    KEYWORD_then    reduce using rule 187 (expr12 -> expr13 DOUBLESTAR expr12 .)
    CLOSE_PAREN     reduce using rule 187 (expr12 -> expr13 DOUBLESTAR expr12 .)
    KEYWORD_elsif   reduce using rule 187 (expr12 -> expr13 DOUBLESTAR expr12 .)
    KEYWORD_else    reduce using rule 187 (expr12 -> expr13 DOUBLESTAR expr12 .)
    COLON           reduce using rule 187 (expr12 -> expr13 DOUBLESTAR expr12 .)
    COMMA           reduce using rule 187 (expr12 -> expr13 DOUBLESTAR expr12 .)
    CLOSE_BRACKET   reduce using rule 187 (expr12 -> expr13 DOUBLESTAR expr12 .)


state 158

    (59) arguments -> CONSTANTS .
    (63) func_arg_expr -> CONSTANTS . EQUAL primary

    COMMA           reduce using rule 59 (arguments -> CONSTANTS .)
    DELIM           reduce using rule 59 (arguments -> CONSTANTS .)
    newline         reduce using rule 59 (arguments -> CONSTANTS .)
    $end            reduce using rule 59 (arguments -> CONSTANTS .)
    CLOSE_PAREN     reduce using rule 59 (arguments -> CONSTANTS .)
    KEYWORD_return  reduce using rule 59 (arguments -> CONSTANTS .)
    KEYWORD_if      reduce using rule 59 (arguments -> CONSTANTS .)
    KEYWORD_while   reduce using rule 59 (arguments -> CONSTANTS .)
    KEYWORD_begin   reduce using rule 59 (arguments -> CONSTANTS .)
    KEYWORD_until   reduce using rule 59 (arguments -> CONSTANTS .)
    KEYWORD_for     reduce using rule 59 (arguments -> CONSTANTS .)
    KEYWORD_puts    reduce using rule 59 (arguments -> CONSTANTS .)
    KEYWORD_break   reduce using rule 59 (arguments -> CONSTANTS .)
    KEYWORD_next    reduce using rule 59 (arguments -> CONSTANTS .)
    KEYWORD_redo    reduce using rule 59 (arguments -> CONSTANTS .)
    KEYWORD_exit    reduce using rule 59 (arguments -> CONSTANTS .)
    VARIABLES       reduce using rule 59 (arguments -> CONSTANTS .)
    CONSTANTS       reduce using rule 59 (arguments -> CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 59 (arguments -> CONSTANTS .)
    OPEN_PAREN      reduce using rule 59 (arguments -> CONSTANTS .)
    PLUS            reduce using rule 59 (arguments -> CONSTANTS .)
    MINUS           reduce using rule 59 (arguments -> CONSTANTS .)
    BITNOT          reduce using rule 59 (arguments -> CONSTANTS .)
    BITCOMP         reduce using rule 59 (arguments -> CONSTANTS .)
    KEYWORD_end     reduce using rule 59 (arguments -> CONSTANTS .)
    INT_CONSTANTS   reduce using rule 59 (arguments -> CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 59 (arguments -> CONSTANTS .)
    SIGIL_AT        reduce using rule 59 (arguments -> CONSTANTS .)
    SIGIL_DOUBLE_AT reduce using rule 59 (arguments -> CONSTANTS .)
    EQUAL           shift and go to state 190


state 159

    (58) arguments -> VARIABLES .
    (62) func_arg_expr -> VARIABLES . EQUAL primary

    COMMA           reduce using rule 58 (arguments -> VARIABLES .)
    DELIM           reduce using rule 58 (arguments -> VARIABLES .)
    newline         reduce using rule 58 (arguments -> VARIABLES .)
    $end            reduce using rule 58 (arguments -> VARIABLES .)
    CLOSE_PAREN     reduce using rule 58 (arguments -> VARIABLES .)
    KEYWORD_return  reduce using rule 58 (arguments -> VARIABLES .)
    KEYWORD_if      reduce using rule 58 (arguments -> VARIABLES .)
    KEYWORD_while   reduce using rule 58 (arguments -> VARIABLES .)
    KEYWORD_begin   reduce using rule 58 (arguments -> VARIABLES .)
    KEYWORD_until   reduce using rule 58 (arguments -> VARIABLES .)
    KEYWORD_for     reduce using rule 58 (arguments -> VARIABLES .)
    KEYWORD_puts    reduce using rule 58 (arguments -> VARIABLES .)
    KEYWORD_break   reduce using rule 58 (arguments -> VARIABLES .)
    KEYWORD_next    reduce using rule 58 (arguments -> VARIABLES .)
    KEYWORD_redo    reduce using rule 58 (arguments -> VARIABLES .)
    KEYWORD_exit    reduce using rule 58 (arguments -> VARIABLES .)
    VARIABLES       reduce using rule 58 (arguments -> VARIABLES .)
    CONSTANTS       reduce using rule 58 (arguments -> VARIABLES .)
    BOOLEAN_CONSTANTS reduce using rule 58 (arguments -> VARIABLES .)
    OPEN_PAREN      reduce using rule 58 (arguments -> VARIABLES .)
    PLUS            reduce using rule 58 (arguments -> VARIABLES .)
    MINUS           reduce using rule 58 (arguments -> VARIABLES .)
    BITNOT          reduce using rule 58 (arguments -> VARIABLES .)
    BITCOMP         reduce using rule 58 (arguments -> VARIABLES .)
    KEYWORD_end     reduce using rule 58 (arguments -> VARIABLES .)
    INT_CONSTANTS   reduce using rule 58 (arguments -> VARIABLES .)
    FLOAT_CONSTANTS reduce using rule 58 (arguments -> VARIABLES .)
    SIGIL_AT        reduce using rule 58 (arguments -> VARIABLES .)
    SIGIL_DOUBLE_AT reduce using rule 58 (arguments -> VARIABLES .)
    EQUAL           shift and go to state 192


state 160

    (61) arguments -> newline .

    COMMA           reduce using rule 61 (arguments -> newline .)
    DELIM           reduce using rule 61 (arguments -> newline .)
    newline         reduce using rule 61 (arguments -> newline .)
    $end            reduce using rule 61 (arguments -> newline .)
    CLOSE_PAREN     reduce using rule 61 (arguments -> newline .)
    KEYWORD_return  reduce using rule 61 (arguments -> newline .)
    KEYWORD_if      reduce using rule 61 (arguments -> newline .)
    KEYWORD_while   reduce using rule 61 (arguments -> newline .)
    KEYWORD_begin   reduce using rule 61 (arguments -> newline .)
    KEYWORD_until   reduce using rule 61 (arguments -> newline .)
    KEYWORD_for     reduce using rule 61 (arguments -> newline .)
    KEYWORD_puts    reduce using rule 61 (arguments -> newline .)
    KEYWORD_break   reduce using rule 61 (arguments -> newline .)
    KEYWORD_next    reduce using rule 61 (arguments -> newline .)
    KEYWORD_redo    reduce using rule 61 (arguments -> newline .)
    KEYWORD_exit    reduce using rule 61 (arguments -> newline .)
    VARIABLES       reduce using rule 61 (arguments -> newline .)
    CONSTANTS       reduce using rule 61 (arguments -> newline .)
    BOOLEAN_CONSTANTS reduce using rule 61 (arguments -> newline .)
    OPEN_PAREN      reduce using rule 61 (arguments -> newline .)
    PLUS            reduce using rule 61 (arguments -> newline .)
    MINUS           reduce using rule 61 (arguments -> newline .)
    BITNOT          reduce using rule 61 (arguments -> newline .)
    BITCOMP         reduce using rule 61 (arguments -> newline .)
    KEYWORD_end     reduce using rule 61 (arguments -> newline .)
    INT_CONSTANTS   reduce using rule 61 (arguments -> newline .)
    FLOAT_CONSTANTS reduce using rule 61 (arguments -> newline .)
    SIGIL_AT        reduce using rule 61 (arguments -> newline .)
    SIGIL_DOUBLE_AT reduce using rule 61 (arguments -> newline .)


state 161

    (14) func_defn -> KEYWORD_def fname OPEN_PAREN . arguments CLOSE_PAREN func_stmts opt_terms KEYWORD_end
    (15) func_defn -> KEYWORD_def fname OPEN_PAREN . CLOSE_PAREN func_stmts opt_terms KEYWORD_end
    (55) arguments -> . arguments COMMA VARIABLES
    (56) arguments -> . arguments COMMA CONSTANTS
    (57) arguments -> . arguments COMMA func_arg_expr
    (58) arguments -> . VARIABLES
    (59) arguments -> . CONSTANTS
    (60) arguments -> . func_arg_expr
    (61) arguments -> . newline
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary

    CLOSE_PAREN     shift and go to state 210
    VARIABLES       shift and go to state 159
    CONSTANTS       shift and go to state 158
    newline         shift and go to state 160

    func_arg_expr                  shift and go to state 163
    arguments                      shift and go to state 209

state 162

    (16) func_defn -> KEYWORD_def fname arguments . func_stmts opt_terms KEYWORD_end
    (55) arguments -> arguments . COMMA VARIABLES
    (56) arguments -> arguments . COMMA CONSTANTS
    (57) arguments -> arguments . COMMA func_arg_expr
    (95) func_stmts -> . func_stmt
    (96) func_stmts -> . func_stmts terms func_stmt
    (97) func_stmts -> . none
    (98) func_stmt -> . top_stmt
    (99) func_stmt -> . KEYWORD_return func_ret_arg
    (209) none -> .
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . MLHS EQUAL MRHS
    (152) expr1 -> . expr3 QUESTION_MARK expr2 COLON expr2
    (153) expr1 -> . expr2
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . MLHS EQUAL fname func_ret_arg
    (125) MLHS -> . mlhs
    (126) MLHS -> . MLHS COMMA mlhs
    (157) expr3 -> . expr3 LOGICALOR expr4
    (158) expr3 -> . expr4
    (154) expr2 -> . expr7 DOUBLEDOT expr7
    (155) expr2 -> . expr7 TRIPLEDOT expr7
    (156) expr2 -> . expr3
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (129) mlhs -> . VARIABLES
    (130) mlhs -> . CONSTANTS
    (131) mlhs -> . array
    (159) expr4 -> . expr4 LOGICALAND expr5
    (160) expr4 -> . expr5
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (161) expr5 -> . expr6 IFF expr6
    (162) expr5 -> . expr6 DOUBLEEQUAL expr6
    (163) expr5 -> . expr6 TRIPLEEQUAL expr6
    (164) expr5 -> . expr6 NOTEQUAL expr6
    (165) expr5 -> . expr6
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (166) expr6 -> . expr7 LESSEQUAL expr7
    (167) expr6 -> . expr7 LESS expr7
    (168) expr6 -> . expr7 GREATER expr7
    (169) expr6 -> . expr7 GREATEREQUAL expr7
    (170) expr6 -> . expr7
    (171) expr6 -> . BOOLEAN_CONSTANTS
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP

    COMMA           shift and go to state 212
    KEYWORD_return  shift and go to state 214
    DELIM           reduce using rule 209 (none -> .)
    newline         reduce using rule 209 (none -> .)
    KEYWORD_end     reduce using rule 209 (none -> .)
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)
    KEYWORD_if      shift and go to state 28
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 39
    KEYWORD_until   shift and go to state 26
    KEYWORD_for     shift and go to state 54
    KEYWORD_puts    shift and go to state 34
    KEYWORD_break   shift and go to state 50
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 24
    VARIABLES       shift and go to state 106
    CONSTANTS       shift and go to state 105
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 31
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30

    func_stmt                      shift and go to state 216
    mlhs                           shift and go to state 2
    func_stmts                     shift and go to state 211
    expr11                         shift and go to state 15
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    array                          shift and go to state 27
    expr2                          shift and go to state 42
    expr3                          shift and go to state 43
    expr1                          shift and go to state 44
    expr6                          shift and go to state 45
    puts_stmt                      shift and go to state 19
    expr5                          shift and go to state 47
    func_call_stmt                 shift and go to state 33
    expr7                          shift and go to state 7
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    expr4                          shift and go to state 8
    fname                          shift and go to state 46
    exit_stmt                      shift and go to state 51
    MLHS                           shift and go to state 52
    stmt                           shift and go to state 21
    loop_stmt                      shift and go to state 9
    uexpr                          shift and go to state 10
    none                           shift and go to state 215
    expr                           shift and go to state 36
    expr10                         shift and go to state 14
    top_stmt                       shift and go to state 213

state 163

    (60) arguments -> func_arg_expr .

    COMMA           reduce using rule 60 (arguments -> func_arg_expr .)
    DELIM           reduce using rule 60 (arguments -> func_arg_expr .)
    newline         reduce using rule 60 (arguments -> func_arg_expr .)
    $end            reduce using rule 60 (arguments -> func_arg_expr .)
    CLOSE_PAREN     reduce using rule 60 (arguments -> func_arg_expr .)
    KEYWORD_return  reduce using rule 60 (arguments -> func_arg_expr .)
    KEYWORD_if      reduce using rule 60 (arguments -> func_arg_expr .)
    KEYWORD_while   reduce using rule 60 (arguments -> func_arg_expr .)
    KEYWORD_begin   reduce using rule 60 (arguments -> func_arg_expr .)
    KEYWORD_until   reduce using rule 60 (arguments -> func_arg_expr .)
    KEYWORD_for     reduce using rule 60 (arguments -> func_arg_expr .)
    KEYWORD_puts    reduce using rule 60 (arguments -> func_arg_expr .)
    KEYWORD_break   reduce using rule 60 (arguments -> func_arg_expr .)
    KEYWORD_next    reduce using rule 60 (arguments -> func_arg_expr .)
    KEYWORD_redo    reduce using rule 60 (arguments -> func_arg_expr .)
    KEYWORD_exit    reduce using rule 60 (arguments -> func_arg_expr .)
    VARIABLES       reduce using rule 60 (arguments -> func_arg_expr .)
    CONSTANTS       reduce using rule 60 (arguments -> func_arg_expr .)
    BOOLEAN_CONSTANTS reduce using rule 60 (arguments -> func_arg_expr .)
    OPEN_PAREN      reduce using rule 60 (arguments -> func_arg_expr .)
    PLUS            reduce using rule 60 (arguments -> func_arg_expr .)
    MINUS           reduce using rule 60 (arguments -> func_arg_expr .)
    BITNOT          reduce using rule 60 (arguments -> func_arg_expr .)
    BITCOMP         reduce using rule 60 (arguments -> func_arg_expr .)
    KEYWORD_end     reduce using rule 60 (arguments -> func_arg_expr .)
    INT_CONSTANTS   reduce using rule 60 (arguments -> func_arg_expr .)
    FLOAT_CONSTANTS reduce using rule 60 (arguments -> func_arg_expr .)
    SIGIL_AT        reduce using rule 60 (arguments -> func_arg_expr .)
    SIGIL_DOUBLE_AT reduce using rule 60 (arguments -> func_arg_expr .)


state 164

    (11) statement -> CONSTANTS DOT KEYWORD_new . OPEN_PAREN arguments CLOSE_PAREN
    (12) statement -> CONSTANTS DOT KEYWORD_new . OPEN_PAREN CLOSE_PAREN
    (13) statement -> CONSTANTS DOT KEYWORD_new . arguments
    (55) arguments -> . arguments COMMA VARIABLES
    (56) arguments -> . arguments COMMA CONSTANTS
    (57) arguments -> . arguments COMMA func_arg_expr
    (58) arguments -> . VARIABLES
    (59) arguments -> . CONSTANTS
    (60) arguments -> . func_arg_expr
    (61) arguments -> . newline
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary

    OPEN_PAREN      shift and go to state 217
    VARIABLES       shift and go to state 159
    CONSTANTS       shift and go to state 158
    newline         shift and go to state 160

    func_arg_expr                  shift and go to state 163
    arguments                      shift and go to state 218

state 165

    (206) terms -> terms term .

    KEYWORD_if      reduce using rule 206 (terms -> terms term .)
    KEYWORD_while   reduce using rule 206 (terms -> terms term .)
    KEYWORD_begin   reduce using rule 206 (terms -> terms term .)
    KEYWORD_until   reduce using rule 206 (terms -> terms term .)
    KEYWORD_for     reduce using rule 206 (terms -> terms term .)
    DELIM           reduce using rule 206 (terms -> terms term .)
    newline         reduce using rule 206 (terms -> terms term .)
    KEYWORD_puts    reduce using rule 206 (terms -> terms term .)
    KEYWORD_break   reduce using rule 206 (terms -> terms term .)
    KEYWORD_next    reduce using rule 206 (terms -> terms term .)
    KEYWORD_redo    reduce using rule 206 (terms -> terms term .)
    KEYWORD_exit    reduce using rule 206 (terms -> terms term .)
    VARIABLES       reduce using rule 206 (terms -> terms term .)
    CONSTANTS       reduce using rule 206 (terms -> terms term .)
    BOOLEAN_CONSTANTS reduce using rule 206 (terms -> terms term .)
    OPEN_PAREN      reduce using rule 206 (terms -> terms term .)
    PLUS            reduce using rule 206 (terms -> terms term .)
    MINUS           reduce using rule 206 (terms -> terms term .)
    BITNOT          reduce using rule 206 (terms -> terms term .)
    BITCOMP         reduce using rule 206 (terms -> terms term .)
    INT_CONSTANTS   reduce using rule 206 (terms -> terms term .)
    FLOAT_CONSTANTS reduce using rule 206 (terms -> terms term .)
    KEYWORD_end     reduce using rule 206 (terms -> terms term .)
    KEYWORD_return  reduce using rule 206 (terms -> terms term .)
    SIGIL_AT        reduce using rule 206 (terms -> terms term .)
    SIGIL_DOUBLE_AT reduce using rule 206 (terms -> terms term .)
    KEYWORD_def     reduce using rule 206 (terms -> terms term .)
    KEYWORD_class   reduce using rule 206 (terms -> terms term .)
    $end            reduce using rule 206 (terms -> terms term .)
    KEYWORD_elsif   reduce using rule 206 (terms -> terms term .)
    KEYWORD_else    reduce using rule 206 (terms -> terms term .)


state 166

    (4) statements -> statements terms statement .

    DELIM           reduce using rule 4 (statements -> statements terms statement .)
    newline         reduce using rule 4 (statements -> statements terms statement .)
    $end            reduce using rule 4 (statements -> statements terms statement .)


state 167

    (72) top_stmt -> KEYWORD_until expr3 opt_do . gen_stmts opt_terms KEYWORD_end
    (76) gen_stmts -> . top_stmt
    (77) gen_stmts -> . gen_stmts terms top_stmt
    (78) gen_stmts -> . none
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (209) none -> .
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . MLHS EQUAL MRHS
    (152) expr1 -> . expr3 QUESTION_MARK expr2 COLON expr2
    (153) expr1 -> . expr2
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . MLHS EQUAL fname func_ret_arg
    (125) MLHS -> . mlhs
    (126) MLHS -> . MLHS COMMA mlhs
    (157) expr3 -> . expr3 LOGICALOR expr4
    (158) expr3 -> . expr4
    (154) expr2 -> . expr7 DOUBLEDOT expr7
    (155) expr2 -> . expr7 TRIPLEDOT expr7
    (156) expr2 -> . expr3
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (129) mlhs -> . VARIABLES
    (130) mlhs -> . CONSTANTS
    (131) mlhs -> . array
    (159) expr4 -> . expr4 LOGICALAND expr5
    (160) expr4 -> . expr5
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (161) expr5 -> . expr6 IFF expr6
    (162) expr5 -> . expr6 DOUBLEEQUAL expr6
    (163) expr5 -> . expr6 TRIPLEEQUAL expr6
    (164) expr5 -> . expr6 NOTEQUAL expr6
    (165) expr5 -> . expr6
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (166) expr6 -> . expr7 LESSEQUAL expr7
    (167) expr6 -> . expr7 LESS expr7
    (168) expr6 -> . expr7 GREATER expr7
    (169) expr6 -> . expr7 GREATEREQUAL expr7
    (170) expr6 -> . expr7
    (171) expr6 -> . BOOLEAN_CONSTANTS
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP

    KEYWORD_if      shift and go to state 28
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 39
    KEYWORD_until   shift and go to state 26
    KEYWORD_for     shift and go to state 54
    DELIM           reduce using rule 209 (none -> .)
    newline         reduce using rule 209 (none -> .)
    KEYWORD_end     reduce using rule 209 (none -> .)
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)
    KEYWORD_puts    shift and go to state 34
    KEYWORD_break   shift and go to state 50
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 24
    VARIABLES       shift and go to state 106
    CONSTANTS       shift and go to state 105
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 31
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30

    mlhs                           shift and go to state 2
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    array                          shift and go to state 27
    expr2                          shift and go to state 42
    expr3                          shift and go to state 43
    expr1                          shift and go to state 44
    expr6                          shift and go to state 45
    expr7                          shift and go to state 7
    puts_stmt                      shift and go to state 19
    expr5                          shift and go to state 47
    func_call_stmt                 shift and go to state 33
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    expr4                          shift and go to state 8
    fname                          shift and go to state 46
    exit_stmt                      shift and go to state 51
    MLHS                           shift and go to state 52
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 21
    uexpr                          shift and go to state 10
    none                           shift and go to state 107
    gen_stmts                      shift and go to state 219
    expr                           shift and go to state 36
    top_stmt                       shift and go to state 104

state 168

    (109) opt_then -> newline .

    KEYWORD_if      reduce using rule 109 (opt_then -> newline .)
    KEYWORD_while   reduce using rule 109 (opt_then -> newline .)
    KEYWORD_begin   reduce using rule 109 (opt_then -> newline .)
    KEYWORD_until   reduce using rule 109 (opt_then -> newline .)
    KEYWORD_for     reduce using rule 109 (opt_then -> newline .)
    KEYWORD_puts    reduce using rule 109 (opt_then -> newline .)
    KEYWORD_break   reduce using rule 109 (opt_then -> newline .)
    KEYWORD_next    reduce using rule 109 (opt_then -> newline .)
    KEYWORD_redo    reduce using rule 109 (opt_then -> newline .)
    KEYWORD_exit    reduce using rule 109 (opt_then -> newline .)
    VARIABLES       reduce using rule 109 (opt_then -> newline .)
    CONSTANTS       reduce using rule 109 (opt_then -> newline .)
    BOOLEAN_CONSTANTS reduce using rule 109 (opt_then -> newline .)
    OPEN_PAREN      reduce using rule 109 (opt_then -> newline .)
    PLUS            reduce using rule 109 (opt_then -> newline .)
    MINUS           reduce using rule 109 (opt_then -> newline .)
    BITNOT          reduce using rule 109 (opt_then -> newline .)
    BITCOMP         reduce using rule 109 (opt_then -> newline .)
    DELIM           reduce using rule 109 (opt_then -> newline .)
    newline         reduce using rule 109 (opt_then -> newline .)
    KEYWORD_elsif   reduce using rule 109 (opt_then -> newline .)
    INT_CONSTANTS   reduce using rule 109 (opt_then -> newline .)
    FLOAT_CONSTANTS reduce using rule 109 (opt_then -> newline .)
    KEYWORD_else    reduce using rule 109 (opt_then -> newline .)
    KEYWORD_end     reduce using rule 109 (opt_then -> newline .)


state 169

    (108) opt_then -> KEYWORD_then .

    KEYWORD_if      reduce using rule 108 (opt_then -> KEYWORD_then .)
    KEYWORD_while   reduce using rule 108 (opt_then -> KEYWORD_then .)
    KEYWORD_begin   reduce using rule 108 (opt_then -> KEYWORD_then .)
    KEYWORD_until   reduce using rule 108 (opt_then -> KEYWORD_then .)
    KEYWORD_for     reduce using rule 108 (opt_then -> KEYWORD_then .)
    KEYWORD_puts    reduce using rule 108 (opt_then -> KEYWORD_then .)
    KEYWORD_break   reduce using rule 108 (opt_then -> KEYWORD_then .)
    KEYWORD_next    reduce using rule 108 (opt_then -> KEYWORD_then .)
    KEYWORD_redo    reduce using rule 108 (opt_then -> KEYWORD_then .)
    KEYWORD_exit    reduce using rule 108 (opt_then -> KEYWORD_then .)
    VARIABLES       reduce using rule 108 (opt_then -> KEYWORD_then .)
    CONSTANTS       reduce using rule 108 (opt_then -> KEYWORD_then .)
    BOOLEAN_CONSTANTS reduce using rule 108 (opt_then -> KEYWORD_then .)
    OPEN_PAREN      reduce using rule 108 (opt_then -> KEYWORD_then .)
    PLUS            reduce using rule 108 (opt_then -> KEYWORD_then .)
    MINUS           reduce using rule 108 (opt_then -> KEYWORD_then .)
    BITNOT          reduce using rule 108 (opt_then -> KEYWORD_then .)
    BITCOMP         reduce using rule 108 (opt_then -> KEYWORD_then .)
    DELIM           reduce using rule 108 (opt_then -> KEYWORD_then .)
    newline         reduce using rule 108 (opt_then -> KEYWORD_then .)
    KEYWORD_elsif   reduce using rule 108 (opt_then -> KEYWORD_then .)
    INT_CONSTANTS   reduce using rule 108 (opt_then -> KEYWORD_then .)
    FLOAT_CONSTANTS reduce using rule 108 (opt_then -> KEYWORD_then .)
    KEYWORD_else    reduce using rule 108 (opt_then -> KEYWORD_then .)
    KEYWORD_end     reduce using rule 108 (opt_then -> KEYWORD_then .)


state 170

    (67) top_stmt -> KEYWORD_if expr3 opt_then . gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (76) gen_stmts -> . top_stmt
    (77) gen_stmts -> . gen_stmts terms top_stmt
    (78) gen_stmts -> . none
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (209) none -> .
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . MLHS EQUAL MRHS
    (152) expr1 -> . expr3 QUESTION_MARK expr2 COLON expr2
    (153) expr1 -> . expr2
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . MLHS EQUAL fname func_ret_arg
    (125) MLHS -> . mlhs
    (126) MLHS -> . MLHS COMMA mlhs
    (157) expr3 -> . expr3 LOGICALOR expr4
    (158) expr3 -> . expr4
    (154) expr2 -> . expr7 DOUBLEDOT expr7
    (155) expr2 -> . expr7 TRIPLEDOT expr7
    (156) expr2 -> . expr3
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (129) mlhs -> . VARIABLES
    (130) mlhs -> . CONSTANTS
    (131) mlhs -> . array
    (159) expr4 -> . expr4 LOGICALAND expr5
    (160) expr4 -> . expr5
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (161) expr5 -> . expr6 IFF expr6
    (162) expr5 -> . expr6 DOUBLEEQUAL expr6
    (163) expr5 -> . expr6 TRIPLEEQUAL expr6
    (164) expr5 -> . expr6 NOTEQUAL expr6
    (165) expr5 -> . expr6
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (166) expr6 -> . expr7 LESSEQUAL expr7
    (167) expr6 -> . expr7 LESS expr7
    (168) expr6 -> . expr7 GREATER expr7
    (169) expr6 -> . expr7 GREATEREQUAL expr7
    (170) expr6 -> . expr7
    (171) expr6 -> . BOOLEAN_CONSTANTS
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP

    KEYWORD_if      shift and go to state 28
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 39
    KEYWORD_until   shift and go to state 26
    KEYWORD_for     shift and go to state 54
    DELIM           reduce using rule 209 (none -> .)
    newline         reduce using rule 209 (none -> .)
    KEYWORD_elsif   reduce using rule 209 (none -> .)
    KEYWORD_else    reduce using rule 209 (none -> .)
    KEYWORD_end     reduce using rule 209 (none -> .)
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)
    KEYWORD_puts    shift and go to state 34
    KEYWORD_break   shift and go to state 50
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 24
    VARIABLES       shift and go to state 106
    CONSTANTS       shift and go to state 105
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 31
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30

    mlhs                           shift and go to state 2
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    array                          shift and go to state 27
    expr2                          shift and go to state 42
    expr3                          shift and go to state 43
    expr1                          shift and go to state 44
    expr6                          shift and go to state 45
    expr7                          shift and go to state 7
    puts_stmt                      shift and go to state 19
    expr5                          shift and go to state 47
    func_call_stmt                 shift and go to state 33
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    expr4                          shift and go to state 8
    fname                          shift and go to state 46
    exit_stmt                      shift and go to state 51
    MLHS                           shift and go to state 52
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 21
    uexpr                          shift and go to state 10
    none                           shift and go to state 107
    gen_stmts                      shift and go to state 220
    expr                           shift and go to state 36
    top_stmt                       shift and go to state 104

state 171

    (195) array -> VARIABLES OPEN_BRACKET expr7 . CLOSE_BRACKET
    (196) array -> VARIABLES OPEN_BRACKET expr7 . DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> VARIABLES OPEN_BRACKET expr7 . TRIPLEDOT expr7 CLOSE_BRACKET
    (172) expr7 -> expr7 . BITXOR expr8
    (173) expr7 -> expr7 . PIPE expr8

    CLOSE_BRACKET   shift and go to state 221
    DOUBLEDOT       shift and go to state 222
    TRIPLEDOT       shift and go to state 223
    BITXOR          shift and go to state 66
    PIPE            shift and go to state 65


state 172

    (8) statement -> VARIABLES DOT VARIABLES . OPEN_PAREN arguments CLOSE_PAREN
    (9) statement -> VARIABLES DOT VARIABLES . OPEN_PAREN CLOSE_PAREN
    (10) statement -> VARIABLES DOT VARIABLES . arguments
    (55) arguments -> . arguments COMMA VARIABLES
    (56) arguments -> . arguments COMMA CONSTANTS
    (57) arguments -> . arguments COMMA func_arg_expr
    (58) arguments -> . VARIABLES
    (59) arguments -> . CONSTANTS
    (60) arguments -> . func_arg_expr
    (61) arguments -> . newline
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary

    OPEN_PAREN      shift and go to state 224
    VARIABLES       shift and go to state 159
    CONSTANTS       shift and go to state 158
    newline         shift and go to state 160

    func_arg_expr                  shift and go to state 163
    arguments                      shift and go to state 225

state 173

    (189) expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .

    DOUBLESTAR      reduce using rule 189 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    MULTIPLY        reduce using rule 189 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    DIV             reduce using rule 189 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    MOD             reduce using rule 189 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    PLUS            reduce using rule 189 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    MINUS           reduce using rule 189 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    SHIFTL          reduce using rule 189 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    SHIFTR          reduce using rule 189 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    BITAND          reduce using rule 189 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    BITXOR          reduce using rule 189 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    PIPE            reduce using rule 189 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    IFF             reduce using rule 189 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    DOUBLEEQUAL     reduce using rule 189 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    TRIPLEEQUAL     reduce using rule 189 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    NOTEQUAL        reduce using rule 189 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    LOGICALAND      reduce using rule 189 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    QUESTION_MARK   reduce using rule 189 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    LOGICALOR       reduce using rule 189 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_while   reduce using rule 189 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_until   reduce using rule 189 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    DELIM           reduce using rule 189 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    newline         reduce using rule 189 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    $end            reduce using rule 189 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_do      reduce using rule 189 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_then    reduce using rule 189 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 189 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_end     reduce using rule 189 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_elsif   reduce using rule 189 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_else    reduce using rule 189 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    COLON           reduce using rule 189 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    COMMA           reduce using rule 189 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    DOUBLEDOT       reduce using rule 189 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    TRIPLEDOT       reduce using rule 189 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    LESSEQUAL       reduce using rule 189 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    LESS            reduce using rule 189 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    GREATER         reduce using rule 189 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    GREATEREQUAL    reduce using rule 189 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 189 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)


state 174

    (142) str_expr -> str_expr PLUS . STRING_CONSTANTS

    STRING_CONSTANTS shift and go to state 226


state 175

    (136) mrhs -> VARIABLES DOT . VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (137) mrhs -> VARIABLES DOT . VARIABLES OPEN_PAREN CLOSE_PAREN
    (138) mrhs -> VARIABLES DOT . VARIABLES

    VARIABLES       shift and go to state 227


state 176

    (135) mrhs -> OPEN_BRACKET func_ret_arg . CLOSE_BRACKET
    (102) func_ret_arg -> func_ret_arg . COMMA func_arg_expr
    (103) func_ret_arg -> func_ret_arg . COMMA primary

    CLOSE_BRACKET   shift and go to state 228
    COMMA           shift and go to state 191


state 177

    (124) expr -> MLHS EQUAL . MRHS
    (127) MRHS -> . mrhs
    (128) MRHS -> . MRHS COMMA mrhs
    (132) mrhs -> . expr1
    (133) mrhs -> . str_expr
    (134) mrhs -> . KEYWORD_gets
    (135) mrhs -> . OPEN_BRACKET func_ret_arg CLOSE_BRACKET
    (136) mrhs -> . VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (137) mrhs -> . VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (138) mrhs -> . VARIABLES DOT VARIABLES
    (139) mrhs -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (140) mrhs -> . CONSTANTS DOT KEYWORD_new
    (141) mrhs -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (152) expr1 -> . expr3 QUESTION_MARK expr2 COLON expr2
    (153) expr1 -> . expr2
    (142) str_expr -> . str_expr PLUS STRING_CONSTANTS
    (143) str_expr -> . STRING_CONSTANTS
    (157) expr3 -> . expr3 LOGICALOR expr4
    (158) expr3 -> . expr4
    (154) expr2 -> . expr7 DOUBLEDOT expr7
    (155) expr2 -> . expr7 TRIPLEDOT expr7
    (156) expr2 -> . expr3
    (159) expr4 -> . expr4 LOGICALAND expr5
    (160) expr4 -> . expr5
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (161) expr5 -> . expr6 IFF expr6
    (162) expr5 -> . expr6 DOUBLEEQUAL expr6
    (163) expr5 -> . expr6 TRIPLEEQUAL expr6
    (164) expr5 -> . expr6 NOTEQUAL expr6
    (165) expr5 -> . expr6
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (166) expr6 -> . expr7 LESSEQUAL expr7
    (167) expr6 -> . expr7 LESS expr7
    (168) expr6 -> . expr7 GREATER expr7
    (169) expr6 -> . expr7 GREATEREQUAL expr7
    (170) expr6 -> . expr7
    (171) expr6 -> . BOOLEAN_CONSTANTS
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (209) none -> .

    KEYWORD_gets    shift and go to state 98
    OPEN_BRACKET    shift and go to state 96
    VARIABLES       shift and go to state 229
    CONSTANTS       shift and go to state 230
    STRING_CONSTANTS shift and go to state 102
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 31
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    MRHS                           shift and go to state 196
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    array                          shift and go to state 58
    str_expr                       shift and go to state 94
    expr2                          shift and go to state 42
    expr3                          shift and go to state 43
    expr1                          shift and go to state 97
    expr6                          shift and go to state 45
    expr4                          shift and go to state 8
    expr5                          shift and go to state 47
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    expr7                          shift and go to state 7
    mrhs                           shift and go to state 199
    uexpr                          shift and go to state 10
    none                           shift and go to state 35

state 178

    (139) mrhs -> CONSTANTS DOT . KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (140) mrhs -> CONSTANTS DOT . KEYWORD_new
    (141) mrhs -> CONSTANTS DOT . KEYWORD_new OPEN_PAREN CLOSE_PAREN

    KEYWORD_new     shift and go to state 231


state 179

    (77) gen_stmts -> gen_stmts terms . top_stmt
    (204) opt_terms -> terms .
    (206) terms -> terms . term
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (207) term -> . DELIM
    (208) term -> . newline
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . MLHS EQUAL MRHS
    (152) expr1 -> . expr3 QUESTION_MARK expr2 COLON expr2
    (153) expr1 -> . expr2
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . MLHS EQUAL fname func_ret_arg
    (125) MLHS -> . mlhs
    (126) MLHS -> . MLHS COMMA mlhs
    (157) expr3 -> . expr3 LOGICALOR expr4
    (158) expr3 -> . expr4
    (154) expr2 -> . expr7 DOUBLEDOT expr7
    (155) expr2 -> . expr7 TRIPLEDOT expr7
    (156) expr2 -> . expr3
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (129) mlhs -> . VARIABLES
    (130) mlhs -> . CONSTANTS
    (131) mlhs -> . array
    (159) expr4 -> . expr4 LOGICALAND expr5
    (160) expr4 -> . expr5
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (161) expr5 -> . expr6 IFF expr6
    (162) expr5 -> . expr6 DOUBLEEQUAL expr6
    (163) expr5 -> . expr6 TRIPLEEQUAL expr6
    (164) expr5 -> . expr6 NOTEQUAL expr6
    (165) expr5 -> . expr6
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (166) expr6 -> . expr7 LESSEQUAL expr7
    (167) expr6 -> . expr7 LESS expr7
    (168) expr6 -> . expr7 GREATER expr7
    (169) expr6 -> . expr7 GREATEREQUAL expr7
    (170) expr6 -> . expr7
    (171) expr6 -> . BOOLEAN_CONSTANTS
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (209) none -> .

    KEYWORD_end     reduce using rule 204 (opt_terms -> terms .)
    KEYWORD_elsif   reduce using rule 204 (opt_terms -> terms .)
    KEYWORD_else    reduce using rule 204 (opt_terms -> terms .)
    KEYWORD_if      shift and go to state 28
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 39
    KEYWORD_until   shift and go to state 26
    KEYWORD_for     shift and go to state 54
    DELIM           shift and go to state 86
    newline         shift and go to state 85
    KEYWORD_puts    shift and go to state 34
    KEYWORD_break   shift and go to state 50
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 24
    VARIABLES       shift and go to state 106
    CONSTANTS       shift and go to state 105
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 31
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    mlhs                           shift and go to state 2
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    array                          shift and go to state 27
    expr2                          shift and go to state 42
    expr3                          shift and go to state 43
    expr1                          shift and go to state 44
    expr6                          shift and go to state 45
    expr7                          shift and go to state 7
    puts_stmt                      shift and go to state 19
    expr5                          shift and go to state 47
    func_call_stmt                 shift and go to state 33
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    expr4                          shift and go to state 8
    fname                          shift and go to state 46
    exit_stmt                      shift and go to state 51
    MLHS                           shift and go to state 52
    none                           shift and go to state 35
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 21
    uexpr                          shift and go to state 10
    term                           shift and go to state 165
    expr                           shift and go to state 36
    top_stmt                       shift and go to state 232

state 180

    (70) top_stmt -> KEYWORD_begin gen_stmts opt_terms . KEYWORD_end KEYWORD_while expr3
    (73) top_stmt -> KEYWORD_begin gen_stmts opt_terms . KEYWORD_end KEYWORD_until expr3

    KEYWORD_end     shift and go to state 233


state 181

    (17) class_defn -> KEYWORD_class CONSTANTS newline . class_stmts opt_terms KEYWORD_end
    (18) class_stmts -> . class_stmt
    (19) class_stmts -> . class_stmts terms class_stmt
    (20) class_stmts -> . none
    (21) class_stmt -> . class_mlhs EQUAL class_mrhs
    (22) class_stmt -> . class_func
    (209) none -> .
    (31) class_mlhs -> . class_mlhs terms SIGIL_DOUBLE_AT
    (32) class_mlhs -> . SIGIL_DOUBLE_AT
    (33) class_func -> . KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (34) class_func -> . KEYWORD_def fname arguments class_method_stmts opt_terms KEYWORD_end
    (35) class_func -> . KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end

    DELIM           reduce using rule 209 (none -> .)
    newline         reduce using rule 209 (none -> .)
    KEYWORD_end     reduce using rule 209 (none -> .)
    SIGIL_DOUBLE_AT shift and go to state 236
    KEYWORD_def     shift and go to state 239

    none                           shift and go to state 234
    class_mlhs                     shift and go to state 235
    class_func                     shift and go to state 237
    class_stmts                    shift and go to state 238
    class_stmt                     shift and go to state 240

state 182

    (157) expr3 -> expr3 LOGICALOR expr4 .
    (159) expr4 -> expr4 . LOGICALAND expr5

    QUESTION_MARK   reduce using rule 157 (expr3 -> expr3 LOGICALOR expr4 .)
    LOGICALOR       reduce using rule 157 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_while   reduce using rule 157 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_until   reduce using rule 157 (expr3 -> expr3 LOGICALOR expr4 .)
    DELIM           reduce using rule 157 (expr3 -> expr3 LOGICALOR expr4 .)
    newline         reduce using rule 157 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_end     reduce using rule 157 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_elsif   reduce using rule 157 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_else    reduce using rule 157 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_then    reduce using rule 157 (expr3 -> expr3 LOGICALOR expr4 .)
    $end            reduce using rule 157 (expr3 -> expr3 LOGICALOR expr4 .)
    COLON           reduce using rule 157 (expr3 -> expr3 LOGICALOR expr4 .)
    COMMA           reduce using rule 157 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_do      reduce using rule 157 (expr3 -> expr3 LOGICALOR expr4 .)
    CLOSE_PAREN     reduce using rule 157 (expr3 -> expr3 LOGICALOR expr4 .)
    LOGICALAND      shift and go to state 68


state 183

    (152) expr1 -> expr3 QUESTION_MARK expr2 . COLON expr2

    COLON           shift and go to state 241


state 184

    (156) expr2 -> expr3 .
    (157) expr3 -> expr3 . LOGICALOR expr4

    KEYWORD_while   reduce using rule 156 (expr2 -> expr3 .)
    KEYWORD_until   reduce using rule 156 (expr2 -> expr3 .)
    DELIM           reduce using rule 156 (expr2 -> expr3 .)
    newline         reduce using rule 156 (expr2 -> expr3 .)
    $end            reduce using rule 156 (expr2 -> expr3 .)
    CLOSE_PAREN     reduce using rule 156 (expr2 -> expr3 .)
    KEYWORD_end     reduce using rule 156 (expr2 -> expr3 .)
    KEYWORD_elsif   reduce using rule 156 (expr2 -> expr3 .)
    KEYWORD_else    reduce using rule 156 (expr2 -> expr3 .)
    COMMA           reduce using rule 156 (expr2 -> expr3 .)
    COLON           reduce using rule 156 (expr2 -> expr3 .)
    LOGICALOR       shift and go to state 110


state 185

    (164) expr5 -> expr6 NOTEQUAL expr6 .

    LOGICALAND      reduce using rule 164 (expr5 -> expr6 NOTEQUAL expr6 .)
    QUESTION_MARK   reduce using rule 164 (expr5 -> expr6 NOTEQUAL expr6 .)
    LOGICALOR       reduce using rule 164 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_while   reduce using rule 164 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_until   reduce using rule 164 (expr5 -> expr6 NOTEQUAL expr6 .)
    DELIM           reduce using rule 164 (expr5 -> expr6 NOTEQUAL expr6 .)
    newline         reduce using rule 164 (expr5 -> expr6 NOTEQUAL expr6 .)
    $end            reduce using rule 164 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_do      reduce using rule 164 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_then    reduce using rule 164 (expr5 -> expr6 NOTEQUAL expr6 .)
    CLOSE_PAREN     reduce using rule 164 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_end     reduce using rule 164 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_elsif   reduce using rule 164 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_else    reduce using rule 164 (expr5 -> expr6 NOTEQUAL expr6 .)
    COLON           reduce using rule 164 (expr5 -> expr6 NOTEQUAL expr6 .)
    COMMA           reduce using rule 164 (expr5 -> expr6 NOTEQUAL expr6 .)


state 186

    (161) expr5 -> expr6 IFF expr6 .

    LOGICALAND      reduce using rule 161 (expr5 -> expr6 IFF expr6 .)
    QUESTION_MARK   reduce using rule 161 (expr5 -> expr6 IFF expr6 .)
    LOGICALOR       reduce using rule 161 (expr5 -> expr6 IFF expr6 .)
    KEYWORD_while   reduce using rule 161 (expr5 -> expr6 IFF expr6 .)
    KEYWORD_until   reduce using rule 161 (expr5 -> expr6 IFF expr6 .)
    DELIM           reduce using rule 161 (expr5 -> expr6 IFF expr6 .)
    newline         reduce using rule 161 (expr5 -> expr6 IFF expr6 .)
    $end            reduce using rule 161 (expr5 -> expr6 IFF expr6 .)
    KEYWORD_do      reduce using rule 161 (expr5 -> expr6 IFF expr6 .)
    KEYWORD_then    reduce using rule 161 (expr5 -> expr6 IFF expr6 .)
    CLOSE_PAREN     reduce using rule 161 (expr5 -> expr6 IFF expr6 .)
    KEYWORD_end     reduce using rule 161 (expr5 -> expr6 IFF expr6 .)
    KEYWORD_elsif   reduce using rule 161 (expr5 -> expr6 IFF expr6 .)
    KEYWORD_else    reduce using rule 161 (expr5 -> expr6 IFF expr6 .)
    COLON           reduce using rule 161 (expr5 -> expr6 IFF expr6 .)
    COMMA           reduce using rule 161 (expr5 -> expr6 IFF expr6 .)


state 187

    (163) expr5 -> expr6 TRIPLEEQUAL expr6 .

    LOGICALAND      reduce using rule 163 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    QUESTION_MARK   reduce using rule 163 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    LOGICALOR       reduce using rule 163 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    KEYWORD_while   reduce using rule 163 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    KEYWORD_until   reduce using rule 163 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    DELIM           reduce using rule 163 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    newline         reduce using rule 163 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    $end            reduce using rule 163 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    KEYWORD_do      reduce using rule 163 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    KEYWORD_then    reduce using rule 163 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    CLOSE_PAREN     reduce using rule 163 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    KEYWORD_end     reduce using rule 163 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    KEYWORD_elsif   reduce using rule 163 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    KEYWORD_else    reduce using rule 163 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    COLON           reduce using rule 163 (expr5 -> expr6 TRIPLEEQUAL expr6 .)
    COMMA           reduce using rule 163 (expr5 -> expr6 TRIPLEEQUAL expr6 .)


state 188

    (162) expr5 -> expr6 DOUBLEEQUAL expr6 .

    LOGICALAND      reduce using rule 162 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    QUESTION_MARK   reduce using rule 162 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    LOGICALOR       reduce using rule 162 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_while   reduce using rule 162 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_until   reduce using rule 162 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    DELIM           reduce using rule 162 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    newline         reduce using rule 162 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    $end            reduce using rule 162 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_do      reduce using rule 162 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_then    reduce using rule 162 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    CLOSE_PAREN     reduce using rule 162 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_end     reduce using rule 162 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_elsif   reduce using rule 162 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_else    reduce using rule 162 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    COLON           reduce using rule 162 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    COMMA           reduce using rule 162 (expr5 -> expr6 DOUBLEEQUAL expr6 .)


state 189

    (85) func_call_stmt -> fname OPEN_PAREN func_ret_arg . CLOSE_PAREN
    (102) func_ret_arg -> func_ret_arg . COMMA func_arg_expr
    (103) func_ret_arg -> func_ret_arg . COMMA primary

    CLOSE_PAREN     shift and go to state 242
    COMMA           shift and go to state 191


state 190

    (63) func_arg_expr -> CONSTANTS EQUAL . primary
    (144) primary -> . INT_CONSTANTS
    (145) primary -> . FLOAT_CONSTANTS
    (146) primary -> . STRING_CONSTANTS
    (147) primary -> . CHAR_CONSTANTS
    (148) primary -> . BOOLEAN_CONSTANTS
    (149) primary -> . CONSTANTS
    (150) primary -> . VARIABLES
    (151) primary -> . array
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET

    INT_CONSTANTS   shift and go to state 117
    FLOAT_CONSTANTS shift and go to state 118
    STRING_CONSTANTS shift and go to state 121
    CHAR_CONSTANTS  shift and go to state 126
    BOOLEAN_CONSTANTS shift and go to state 116
    CONSTANTS       shift and go to state 245
    VARIABLES       shift and go to state 243

    array                          shift and go to state 125
    primary                        shift and go to state 244

state 191

    (102) func_ret_arg -> func_ret_arg COMMA . func_arg_expr
    (103) func_ret_arg -> func_ret_arg COMMA . primary
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary
    (144) primary -> . INT_CONSTANTS
    (145) primary -> . FLOAT_CONSTANTS
    (146) primary -> . STRING_CONSTANTS
    (147) primary -> . CHAR_CONSTANTS
    (148) primary -> . BOOLEAN_CONSTANTS
    (149) primary -> . CONSTANTS
    (150) primary -> . VARIABLES
    (151) primary -> . array
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET

    VARIABLES       shift and go to state 127
    CONSTANTS       shift and go to state 123
    INT_CONSTANTS   shift and go to state 117
    FLOAT_CONSTANTS shift and go to state 118
    STRING_CONSTANTS shift and go to state 121
    CHAR_CONSTANTS  shift and go to state 126
    BOOLEAN_CONSTANTS shift and go to state 116

    func_arg_expr                  shift and go to state 246
    array                          shift and go to state 125
    primary                        shift and go to state 247

state 192

    (62) func_arg_expr -> VARIABLES EQUAL . primary
    (144) primary -> . INT_CONSTANTS
    (145) primary -> . FLOAT_CONSTANTS
    (146) primary -> . STRING_CONSTANTS
    (147) primary -> . CHAR_CONSTANTS
    (148) primary -> . BOOLEAN_CONSTANTS
    (149) primary -> . CONSTANTS
    (150) primary -> . VARIABLES
    (151) primary -> . array
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET

    INT_CONSTANTS   shift and go to state 117
    FLOAT_CONSTANTS shift and go to state 118
    STRING_CONSTANTS shift and go to state 121
    CHAR_CONSTANTS  shift and go to state 126
    BOOLEAN_CONSTANTS shift and go to state 116
    CONSTANTS       shift and go to state 245
    VARIABLES       shift and go to state 243

    array                          shift and go to state 125
    primary                        shift and go to state 248

state 193

    (175) expr8 -> expr8 BITAND expr9 .
    (177) expr9 -> expr9 . SHIFTL expr10
    (178) expr9 -> expr9 . SHIFTR expr10

    BITAND          reduce using rule 175 (expr8 -> expr8 BITAND expr9 .)
    DOUBLEDOT       reduce using rule 175 (expr8 -> expr8 BITAND expr9 .)
    TRIPLEDOT       reduce using rule 175 (expr8 -> expr8 BITAND expr9 .)
    BITXOR          reduce using rule 175 (expr8 -> expr8 BITAND expr9 .)
    PIPE            reduce using rule 175 (expr8 -> expr8 BITAND expr9 .)
    LESSEQUAL       reduce using rule 175 (expr8 -> expr8 BITAND expr9 .)
    LESS            reduce using rule 175 (expr8 -> expr8 BITAND expr9 .)
    GREATER         reduce using rule 175 (expr8 -> expr8 BITAND expr9 .)
    GREATEREQUAL    reduce using rule 175 (expr8 -> expr8 BITAND expr9 .)
    IFF             reduce using rule 175 (expr8 -> expr8 BITAND expr9 .)
    DOUBLEEQUAL     reduce using rule 175 (expr8 -> expr8 BITAND expr9 .)
    TRIPLEEQUAL     reduce using rule 175 (expr8 -> expr8 BITAND expr9 .)
    NOTEQUAL        reduce using rule 175 (expr8 -> expr8 BITAND expr9 .)
    LOGICALAND      reduce using rule 175 (expr8 -> expr8 BITAND expr9 .)
    LOGICALOR       reduce using rule 175 (expr8 -> expr8 BITAND expr9 .)
    COLON           reduce using rule 175 (expr8 -> expr8 BITAND expr9 .)
    QUESTION_MARK   reduce using rule 175 (expr8 -> expr8 BITAND expr9 .)
    COMMA           reduce using rule 175 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_while   reduce using rule 175 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_until   reduce using rule 175 (expr8 -> expr8 BITAND expr9 .)
    DELIM           reduce using rule 175 (expr8 -> expr8 BITAND expr9 .)
    newline         reduce using rule 175 (expr8 -> expr8 BITAND expr9 .)
    $end            reduce using rule 175 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_end     reduce using rule 175 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_elsif   reduce using rule 175 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_else    reduce using rule 175 (expr8 -> expr8 BITAND expr9 .)
    CLOSE_BRACKET   reduce using rule 175 (expr8 -> expr8 BITAND expr9 .)
    CLOSE_PAREN     reduce using rule 175 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_do      reduce using rule 175 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_then    reduce using rule 175 (expr8 -> expr8 BITAND expr9 .)
    SHIFTL          shift and go to state 130
    SHIFTR          shift and go to state 129


state 194

    (178) expr9 -> expr9 SHIFTR expr10 .
    (180) expr10 -> expr10 . PLUS expr11
    (181) expr10 -> expr10 . MINUS expr11

    SHIFTL          reduce using rule 178 (expr9 -> expr9 SHIFTR expr10 .)
    SHIFTR          reduce using rule 178 (expr9 -> expr9 SHIFTR expr10 .)
    BITAND          reduce using rule 178 (expr9 -> expr9 SHIFTR expr10 .)
    LESSEQUAL       reduce using rule 178 (expr9 -> expr9 SHIFTR expr10 .)
    LESS            reduce using rule 178 (expr9 -> expr9 SHIFTR expr10 .)
    GREATER         reduce using rule 178 (expr9 -> expr9 SHIFTR expr10 .)
    GREATEREQUAL    reduce using rule 178 (expr9 -> expr9 SHIFTR expr10 .)
    BITXOR          reduce using rule 178 (expr9 -> expr9 SHIFTR expr10 .)
    PIPE            reduce using rule 178 (expr9 -> expr9 SHIFTR expr10 .)
    IFF             reduce using rule 178 (expr9 -> expr9 SHIFTR expr10 .)
    DOUBLEEQUAL     reduce using rule 178 (expr9 -> expr9 SHIFTR expr10 .)
    TRIPLEEQUAL     reduce using rule 178 (expr9 -> expr9 SHIFTR expr10 .)
    NOTEQUAL        reduce using rule 178 (expr9 -> expr9 SHIFTR expr10 .)
    LOGICALAND      reduce using rule 178 (expr9 -> expr9 SHIFTR expr10 .)
    QUESTION_MARK   reduce using rule 178 (expr9 -> expr9 SHIFTR expr10 .)
    LOGICALOR       reduce using rule 178 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_while   reduce using rule 178 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_until   reduce using rule 178 (expr9 -> expr9 SHIFTR expr10 .)
    DELIM           reduce using rule 178 (expr9 -> expr9 SHIFTR expr10 .)
    newline         reduce using rule 178 (expr9 -> expr9 SHIFTR expr10 .)
    $end            reduce using rule 178 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_do      reduce using rule 178 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_then    reduce using rule 178 (expr9 -> expr9 SHIFTR expr10 .)
    CLOSE_PAREN     reduce using rule 178 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_end     reduce using rule 178 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_elsif   reduce using rule 178 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_else    reduce using rule 178 (expr9 -> expr9 SHIFTR expr10 .)
    COLON           reduce using rule 178 (expr9 -> expr9 SHIFTR expr10 .)
    COMMA           reduce using rule 178 (expr9 -> expr9 SHIFTR expr10 .)
    DOUBLEDOT       reduce using rule 178 (expr9 -> expr9 SHIFTR expr10 .)
    TRIPLEDOT       reduce using rule 178 (expr9 -> expr9 SHIFTR expr10 .)
    CLOSE_BRACKET   reduce using rule 178 (expr9 -> expr9 SHIFTR expr10 .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74


state 195

    (177) expr9 -> expr9 SHIFTL expr10 .
    (180) expr10 -> expr10 . PLUS expr11
    (181) expr10 -> expr10 . MINUS expr11

    SHIFTL          reduce using rule 177 (expr9 -> expr9 SHIFTL expr10 .)
    SHIFTR          reduce using rule 177 (expr9 -> expr9 SHIFTL expr10 .)
    BITAND          reduce using rule 177 (expr9 -> expr9 SHIFTL expr10 .)
    LESSEQUAL       reduce using rule 177 (expr9 -> expr9 SHIFTL expr10 .)
    LESS            reduce using rule 177 (expr9 -> expr9 SHIFTL expr10 .)
    GREATER         reduce using rule 177 (expr9 -> expr9 SHIFTL expr10 .)
    GREATEREQUAL    reduce using rule 177 (expr9 -> expr9 SHIFTL expr10 .)
    BITXOR          reduce using rule 177 (expr9 -> expr9 SHIFTL expr10 .)
    PIPE            reduce using rule 177 (expr9 -> expr9 SHIFTL expr10 .)
    IFF             reduce using rule 177 (expr9 -> expr9 SHIFTL expr10 .)
    DOUBLEEQUAL     reduce using rule 177 (expr9 -> expr9 SHIFTL expr10 .)
    TRIPLEEQUAL     reduce using rule 177 (expr9 -> expr9 SHIFTL expr10 .)
    NOTEQUAL        reduce using rule 177 (expr9 -> expr9 SHIFTL expr10 .)
    LOGICALAND      reduce using rule 177 (expr9 -> expr9 SHIFTL expr10 .)
    QUESTION_MARK   reduce using rule 177 (expr9 -> expr9 SHIFTL expr10 .)
    LOGICALOR       reduce using rule 177 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_while   reduce using rule 177 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_until   reduce using rule 177 (expr9 -> expr9 SHIFTL expr10 .)
    DELIM           reduce using rule 177 (expr9 -> expr9 SHIFTL expr10 .)
    newline         reduce using rule 177 (expr9 -> expr9 SHIFTL expr10 .)
    $end            reduce using rule 177 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_do      reduce using rule 177 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_then    reduce using rule 177 (expr9 -> expr9 SHIFTL expr10 .)
    CLOSE_PAREN     reduce using rule 177 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_end     reduce using rule 177 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_elsif   reduce using rule 177 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_else    reduce using rule 177 (expr9 -> expr9 SHIFTL expr10 .)
    COLON           reduce using rule 177 (expr9 -> expr9 SHIFTL expr10 .)
    COMMA           reduce using rule 177 (expr9 -> expr9 SHIFTL expr10 .)
    DOUBLEDOT       reduce using rule 177 (expr9 -> expr9 SHIFTL expr10 .)
    TRIPLEDOT       reduce using rule 177 (expr9 -> expr9 SHIFTL expr10 .)
    CLOSE_BRACKET   reduce using rule 177 (expr9 -> expr9 SHIFTL expr10 .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74


state 196

    (124) expr -> MLHS EQUAL MRHS .
    (128) MRHS -> MRHS . COMMA mrhs

    KEYWORD_while   reduce using rule 124 (expr -> MLHS EQUAL MRHS .)
    KEYWORD_until   reduce using rule 124 (expr -> MLHS EQUAL MRHS .)
    DELIM           reduce using rule 124 (expr -> MLHS EQUAL MRHS .)
    newline         reduce using rule 124 (expr -> MLHS EQUAL MRHS .)
    KEYWORD_end     reduce using rule 124 (expr -> MLHS EQUAL MRHS .)
    $end            reduce using rule 124 (expr -> MLHS EQUAL MRHS .)
    KEYWORD_elsif   reduce using rule 124 (expr -> MLHS EQUAL MRHS .)
    KEYWORD_else    reduce using rule 124 (expr -> MLHS EQUAL MRHS .)
    COMMA           shift and go to state 249


state 197

    (53) fname -> VARIABLES .
    (136) mrhs -> VARIABLES . DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (137) mrhs -> VARIABLES . DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (138) mrhs -> VARIABLES . DOT VARIABLES
    (193) expr13 -> VARIABLES .
    (195) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> VARIABLES . OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> VARIABLES . OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET

    OPEN_PAREN      reduce using rule 53 (fname -> VARIABLES .)
    VARIABLES       reduce using rule 53 (fname -> VARIABLES .)
    CONSTANTS       reduce using rule 53 (fname -> VARIABLES .)
    INT_CONSTANTS   reduce using rule 53 (fname -> VARIABLES .)
    FLOAT_CONSTANTS reduce using rule 53 (fname -> VARIABLES .)
    STRING_CONSTANTS reduce using rule 53 (fname -> VARIABLES .)
    CHAR_CONSTANTS  reduce using rule 53 (fname -> VARIABLES .)
    BOOLEAN_CONSTANTS reduce using rule 53 (fname -> VARIABLES .)
    DOT             shift and go to state 175
    DOUBLESTAR      reduce using rule 193 (expr13 -> VARIABLES .)
    MULTIPLY        reduce using rule 193 (expr13 -> VARIABLES .)
    DIV             reduce using rule 193 (expr13 -> VARIABLES .)
    MOD             reduce using rule 193 (expr13 -> VARIABLES .)
    PLUS            reduce using rule 193 (expr13 -> VARIABLES .)
    MINUS           reduce using rule 193 (expr13 -> VARIABLES .)
    SHIFTL          reduce using rule 193 (expr13 -> VARIABLES .)
    SHIFTR          reduce using rule 193 (expr13 -> VARIABLES .)
    BITAND          reduce using rule 193 (expr13 -> VARIABLES .)
    DOUBLEDOT       reduce using rule 193 (expr13 -> VARIABLES .)
    TRIPLEDOT       reduce using rule 193 (expr13 -> VARIABLES .)
    BITXOR          reduce using rule 193 (expr13 -> VARIABLES .)
    PIPE            reduce using rule 193 (expr13 -> VARIABLES .)
    LESSEQUAL       reduce using rule 193 (expr13 -> VARIABLES .)
    LESS            reduce using rule 193 (expr13 -> VARIABLES .)
    GREATER         reduce using rule 193 (expr13 -> VARIABLES .)
    GREATEREQUAL    reduce using rule 193 (expr13 -> VARIABLES .)
    IFF             reduce using rule 193 (expr13 -> VARIABLES .)
    DOUBLEEQUAL     reduce using rule 193 (expr13 -> VARIABLES .)
    TRIPLEEQUAL     reduce using rule 193 (expr13 -> VARIABLES .)
    NOTEQUAL        reduce using rule 193 (expr13 -> VARIABLES .)
    LOGICALAND      reduce using rule 193 (expr13 -> VARIABLES .)
    QUESTION_MARK   reduce using rule 193 (expr13 -> VARIABLES .)
    LOGICALOR       reduce using rule 193 (expr13 -> VARIABLES .)
    COMMA           reduce using rule 193 (expr13 -> VARIABLES .)
    KEYWORD_while   reduce using rule 193 (expr13 -> VARIABLES .)
    KEYWORD_until   reduce using rule 193 (expr13 -> VARIABLES .)
    DELIM           reduce using rule 193 (expr13 -> VARIABLES .)
    newline         reduce using rule 193 (expr13 -> VARIABLES .)
    $end            reduce using rule 193 (expr13 -> VARIABLES .)
    KEYWORD_end     reduce using rule 193 (expr13 -> VARIABLES .)
    KEYWORD_elsif   reduce using rule 193 (expr13 -> VARIABLES .)
    KEYWORD_else    reduce using rule 193 (expr13 -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 91


state 198

    (87) func_call_stmt -> MLHS EQUAL fname . OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> MLHS EQUAL fname . func_ret_arg
    (100) func_ret_arg -> . func_arg_expr
    (101) func_ret_arg -> . primary
    (102) func_ret_arg -> . func_ret_arg COMMA func_arg_expr
    (103) func_ret_arg -> . func_ret_arg COMMA primary
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary
    (144) primary -> . INT_CONSTANTS
    (145) primary -> . FLOAT_CONSTANTS
    (146) primary -> . STRING_CONSTANTS
    (147) primary -> . CHAR_CONSTANTS
    (148) primary -> . BOOLEAN_CONSTANTS
    (149) primary -> . CONSTANTS
    (150) primary -> . VARIABLES
    (151) primary -> . array
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET

    OPEN_PAREN      shift and go to state 250
    VARIABLES       shift and go to state 127
    CONSTANTS       shift and go to state 123
    INT_CONSTANTS   shift and go to state 117
    FLOAT_CONSTANTS shift and go to state 118
    STRING_CONSTANTS shift and go to state 121
    CHAR_CONSTANTS  shift and go to state 126
    BOOLEAN_CONSTANTS shift and go to state 116

    func_arg_expr                  shift and go to state 119
    primary                        shift and go to state 120
    func_ret_arg                   shift and go to state 251
    array                          shift and go to state 125

state 199

    (127) MRHS -> mrhs .

    COMMA           reduce using rule 127 (MRHS -> mrhs .)
    KEYWORD_while   reduce using rule 127 (MRHS -> mrhs .)
    KEYWORD_until   reduce using rule 127 (MRHS -> mrhs .)
    DELIM           reduce using rule 127 (MRHS -> mrhs .)
    newline         reduce using rule 127 (MRHS -> mrhs .)
    $end            reduce using rule 127 (MRHS -> mrhs .)
    KEYWORD_end     reduce using rule 127 (MRHS -> mrhs .)
    KEYWORD_elsif   reduce using rule 127 (MRHS -> mrhs .)
    KEYWORD_else    reduce using rule 127 (MRHS -> mrhs .)


state 200

    (54) fname -> CONSTANTS .
    (139) mrhs -> CONSTANTS . DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (140) mrhs -> CONSTANTS . DOT KEYWORD_new
    (141) mrhs -> CONSTANTS . DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (192) expr13 -> CONSTANTS .

    OPEN_PAREN      reduce using rule 54 (fname -> CONSTANTS .)
    VARIABLES       reduce using rule 54 (fname -> CONSTANTS .)
    CONSTANTS       reduce using rule 54 (fname -> CONSTANTS .)
    INT_CONSTANTS   reduce using rule 54 (fname -> CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 54 (fname -> CONSTANTS .)
    STRING_CONSTANTS reduce using rule 54 (fname -> CONSTANTS .)
    CHAR_CONSTANTS  reduce using rule 54 (fname -> CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 54 (fname -> CONSTANTS .)
    DOT             shift and go to state 178
    DOUBLESTAR      reduce using rule 192 (expr13 -> CONSTANTS .)
    MULTIPLY        reduce using rule 192 (expr13 -> CONSTANTS .)
    DIV             reduce using rule 192 (expr13 -> CONSTANTS .)
    MOD             reduce using rule 192 (expr13 -> CONSTANTS .)
    PLUS            reduce using rule 192 (expr13 -> CONSTANTS .)
    MINUS           reduce using rule 192 (expr13 -> CONSTANTS .)
    SHIFTL          reduce using rule 192 (expr13 -> CONSTANTS .)
    SHIFTR          reduce using rule 192 (expr13 -> CONSTANTS .)
    BITAND          reduce using rule 192 (expr13 -> CONSTANTS .)
    DOUBLEDOT       reduce using rule 192 (expr13 -> CONSTANTS .)
    TRIPLEDOT       reduce using rule 192 (expr13 -> CONSTANTS .)
    BITXOR          reduce using rule 192 (expr13 -> CONSTANTS .)
    PIPE            reduce using rule 192 (expr13 -> CONSTANTS .)
    LESSEQUAL       reduce using rule 192 (expr13 -> CONSTANTS .)
    LESS            reduce using rule 192 (expr13 -> CONSTANTS .)
    GREATER         reduce using rule 192 (expr13 -> CONSTANTS .)
    GREATEREQUAL    reduce using rule 192 (expr13 -> CONSTANTS .)
    IFF             reduce using rule 192 (expr13 -> CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 192 (expr13 -> CONSTANTS .)
    TRIPLEEQUAL     reduce using rule 192 (expr13 -> CONSTANTS .)
    NOTEQUAL        reduce using rule 192 (expr13 -> CONSTANTS .)
    LOGICALAND      reduce using rule 192 (expr13 -> CONSTANTS .)
    QUESTION_MARK   reduce using rule 192 (expr13 -> CONSTANTS .)
    LOGICALOR       reduce using rule 192 (expr13 -> CONSTANTS .)
    COMMA           reduce using rule 192 (expr13 -> CONSTANTS .)
    KEYWORD_while   reduce using rule 192 (expr13 -> CONSTANTS .)
    KEYWORD_until   reduce using rule 192 (expr13 -> CONSTANTS .)
    DELIM           reduce using rule 192 (expr13 -> CONSTANTS .)
    newline         reduce using rule 192 (expr13 -> CONSTANTS .)
    $end            reduce using rule 192 (expr13 -> CONSTANTS .)
    KEYWORD_end     reduce using rule 192 (expr13 -> CONSTANTS .)
    KEYWORD_elsif   reduce using rule 192 (expr13 -> CONSTANTS .)
    KEYWORD_else    reduce using rule 192 (expr13 -> CONSTANTS .)


state 201

    (126) MLHS -> MLHS COMMA mlhs .

    EQUAL           reduce using rule 126 (MLHS -> MLHS COMMA mlhs .)
    COMMA           reduce using rule 126 (MLHS -> MLHS COMMA mlhs .)


state 202

    (129) mlhs -> VARIABLES .
    (195) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> VARIABLES . OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> VARIABLES . OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET

    EQUAL           reduce using rule 129 (mlhs -> VARIABLES .)
    COMMA           reduce using rule 129 (mlhs -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 91


state 203

    (131) mlhs -> array .

    EQUAL           reduce using rule 131 (mlhs -> array .)
    COMMA           reduce using rule 131 (mlhs -> array .)


state 204

    (130) mlhs -> CONSTANTS .

    EQUAL           reduce using rule 130 (mlhs -> CONSTANTS .)
    COMMA           reduce using rule 130 (mlhs -> CONSTANTS .)


state 205

    (74) top_stmt -> KEYWORD_for OPEN_PAREN multi_var . CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (115) multi_var -> multi_var . COMMA VARIABLES
    (116) multi_var -> multi_var . COMMA CONSTANTS

    CLOSE_PAREN     shift and go to state 252
    COMMA           shift and go to state 207


state 206

    (75) top_stmt -> KEYWORD_for multi_var KEYWORD_in . for_range opt_do gen_stmts opt_terms KEYWORD_end
    (117) for_range -> . OPEN_PAREN INT_CONSTANTS DOUBLEDOT INT_CONSTANTS CLOSE_PAREN
    (118) for_range -> . INT_CONSTANTS DOUBLEDOT INT_CONSTANTS
    (119) for_range -> . OPEN_PAREN INT_CONSTANTS TRIPLEDOT INT_CONSTANTS CLOSE_PAREN
    (120) for_range -> . INT_CONSTANTS TRIPLEDOT INT_CONSTANTS
    (121) for_range -> . VARIABLES
    (122) for_range -> . array
    (123) for_range -> . CONSTANTS
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET

    OPEN_PAREN      shift and go to state 254
    INT_CONSTANTS   shift and go to state 253
    VARIABLES       shift and go to state 255
    CONSTANTS       shift and go to state 257

    for_range                      shift and go to state 256
    array                          shift and go to state 258

state 207

    (115) multi_var -> multi_var COMMA . VARIABLES
    (116) multi_var -> multi_var COMMA . CONSTANTS

    VARIABLES       shift and go to state 259
    CONSTANTS       shift and go to state 260


state 208

    (68) top_stmt -> KEYWORD_while expr3 opt_do gen_stmts . opt_terms KEYWORD_end
    (77) gen_stmts -> gen_stmts . terms top_stmt
    (203) opt_terms -> . none
    (204) opt_terms -> . terms
    (205) terms -> . term
    (206) terms -> . terms term
    (209) none -> .
    (207) term -> . DELIM
    (208) term -> . newline

    KEYWORD_end     reduce using rule 209 (none -> .)
    DELIM           shift and go to state 86
    newline         shift and go to state 85

    none                           shift and go to state 87
    terms                          shift and go to state 179
    term                           shift and go to state 83
    opt_terms                      shift and go to state 261

state 209

    (14) func_defn -> KEYWORD_def fname OPEN_PAREN arguments . CLOSE_PAREN func_stmts opt_terms KEYWORD_end
    (55) arguments -> arguments . COMMA VARIABLES
    (56) arguments -> arguments . COMMA CONSTANTS
    (57) arguments -> arguments . COMMA func_arg_expr

    CLOSE_PAREN     shift and go to state 262
    COMMA           shift and go to state 212


state 210

    (15) func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN . func_stmts opt_terms KEYWORD_end
    (95) func_stmts -> . func_stmt
    (96) func_stmts -> . func_stmts terms func_stmt
    (97) func_stmts -> . none
    (98) func_stmt -> . top_stmt
    (99) func_stmt -> . KEYWORD_return func_ret_arg
    (209) none -> .
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . MLHS EQUAL MRHS
    (152) expr1 -> . expr3 QUESTION_MARK expr2 COLON expr2
    (153) expr1 -> . expr2
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . MLHS EQUAL fname func_ret_arg
    (125) MLHS -> . mlhs
    (126) MLHS -> . MLHS COMMA mlhs
    (157) expr3 -> . expr3 LOGICALOR expr4
    (158) expr3 -> . expr4
    (154) expr2 -> . expr7 DOUBLEDOT expr7
    (155) expr2 -> . expr7 TRIPLEDOT expr7
    (156) expr2 -> . expr3
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (129) mlhs -> . VARIABLES
    (130) mlhs -> . CONSTANTS
    (131) mlhs -> . array
    (159) expr4 -> . expr4 LOGICALAND expr5
    (160) expr4 -> . expr5
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (161) expr5 -> . expr6 IFF expr6
    (162) expr5 -> . expr6 DOUBLEEQUAL expr6
    (163) expr5 -> . expr6 TRIPLEEQUAL expr6
    (164) expr5 -> . expr6 NOTEQUAL expr6
    (165) expr5 -> . expr6
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (166) expr6 -> . expr7 LESSEQUAL expr7
    (167) expr6 -> . expr7 LESS expr7
    (168) expr6 -> . expr7 GREATER expr7
    (169) expr6 -> . expr7 GREATEREQUAL expr7
    (170) expr6 -> . expr7
    (171) expr6 -> . BOOLEAN_CONSTANTS
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP

    KEYWORD_return  shift and go to state 214
    DELIM           reduce using rule 209 (none -> .)
    newline         reduce using rule 209 (none -> .)
    KEYWORD_end     reduce using rule 209 (none -> .)
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)
    KEYWORD_if      shift and go to state 28
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 39
    KEYWORD_until   shift and go to state 26
    KEYWORD_for     shift and go to state 54
    KEYWORD_puts    shift and go to state 34
    KEYWORD_break   shift and go to state 50
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 24
    VARIABLES       shift and go to state 106
    CONSTANTS       shift and go to state 105
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 31
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30

    func_stmt                      shift and go to state 216
    mlhs                           shift and go to state 2
    func_stmts                     shift and go to state 263
    expr11                         shift and go to state 15
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    array                          shift and go to state 27
    expr2                          shift and go to state 42
    expr3                          shift and go to state 43
    expr1                          shift and go to state 44
    expr6                          shift and go to state 45
    expr7                          shift and go to state 7
    puts_stmt                      shift and go to state 19
    expr5                          shift and go to state 47
    func_call_stmt                 shift and go to state 33
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    expr4                          shift and go to state 8
    fname                          shift and go to state 46
    exit_stmt                      shift and go to state 51
    MLHS                           shift and go to state 52
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 21
    uexpr                          shift and go to state 10
    none                           shift and go to state 215
    expr                           shift and go to state 36
    expr10                         shift and go to state 14
    top_stmt                       shift and go to state 213

state 211

    (16) func_defn -> KEYWORD_def fname arguments func_stmts . opt_terms KEYWORD_end
    (96) func_stmts -> func_stmts . terms func_stmt
    (203) opt_terms -> . none
    (204) opt_terms -> . terms
    (205) terms -> . term
    (206) terms -> . terms term
    (209) none -> .
    (207) term -> . DELIM
    (208) term -> . newline

    KEYWORD_end     reduce using rule 209 (none -> .)
    DELIM           shift and go to state 86
    newline         shift and go to state 85

    none                           shift and go to state 87
    terms                          shift and go to state 264
    term                           shift and go to state 83
    opt_terms                      shift and go to state 265

state 212

    (55) arguments -> arguments COMMA . VARIABLES
    (56) arguments -> arguments COMMA . CONSTANTS
    (57) arguments -> arguments COMMA . func_arg_expr
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary

    VARIABLES       shift and go to state 266
    CONSTANTS       shift and go to state 268

    func_arg_expr                  shift and go to state 267

state 213

    (98) func_stmt -> top_stmt .
    (69) top_stmt -> top_stmt . KEYWORD_while expr3
    (71) top_stmt -> top_stmt . KEYWORD_until expr3

    DELIM           reduce using rule 98 (func_stmt -> top_stmt .)
    newline         reduce using rule 98 (func_stmt -> top_stmt .)
    KEYWORD_end     reduce using rule 98 (func_stmt -> top_stmt .)
    KEYWORD_while   shift and go to state 71
    KEYWORD_until   shift and go to state 72


state 214

    (99) func_stmt -> KEYWORD_return . func_ret_arg
    (100) func_ret_arg -> . func_arg_expr
    (101) func_ret_arg -> . primary
    (102) func_ret_arg -> . func_ret_arg COMMA func_arg_expr
    (103) func_ret_arg -> . func_ret_arg COMMA primary
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary
    (144) primary -> . INT_CONSTANTS
    (145) primary -> . FLOAT_CONSTANTS
    (146) primary -> . STRING_CONSTANTS
    (147) primary -> . CHAR_CONSTANTS
    (148) primary -> . BOOLEAN_CONSTANTS
    (149) primary -> . CONSTANTS
    (150) primary -> . VARIABLES
    (151) primary -> . array
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET

    VARIABLES       shift and go to state 127
    CONSTANTS       shift and go to state 123
    INT_CONSTANTS   shift and go to state 117
    FLOAT_CONSTANTS shift and go to state 118
    STRING_CONSTANTS shift and go to state 121
    CHAR_CONSTANTS  shift and go to state 126
    BOOLEAN_CONSTANTS shift and go to state 116

    func_arg_expr                  shift and go to state 119
    func_ret_arg                   shift and go to state 269
    array                          shift and go to state 125
    primary                        shift and go to state 120

state 215

    (97) func_stmts -> none .
    (198) uexpr -> none .

    DELIM           reduce using rule 97 (func_stmts -> none .)
    newline         reduce using rule 97 (func_stmts -> none .)
    KEYWORD_end     reduce using rule 97 (func_stmts -> none .)
    INT_CONSTANTS   reduce using rule 198 (uexpr -> none .)
    FLOAT_CONSTANTS reduce using rule 198 (uexpr -> none .)


state 216

    (95) func_stmts -> func_stmt .

    DELIM           reduce using rule 95 (func_stmts -> func_stmt .)
    newline         reduce using rule 95 (func_stmts -> func_stmt .)
    KEYWORD_end     reduce using rule 95 (func_stmts -> func_stmt .)


state 217

    (11) statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN . arguments CLOSE_PAREN
    (12) statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN . CLOSE_PAREN
    (55) arguments -> . arguments COMMA VARIABLES
    (56) arguments -> . arguments COMMA CONSTANTS
    (57) arguments -> . arguments COMMA func_arg_expr
    (58) arguments -> . VARIABLES
    (59) arguments -> . CONSTANTS
    (60) arguments -> . func_arg_expr
    (61) arguments -> . newline
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary

    CLOSE_PAREN     shift and go to state 271
    VARIABLES       shift and go to state 159
    CONSTANTS       shift and go to state 158
    newline         shift and go to state 160

    func_arg_expr                  shift and go to state 163
    arguments                      shift and go to state 270

state 218

    (13) statement -> CONSTANTS DOT KEYWORD_new arguments .
    (55) arguments -> arguments . COMMA VARIABLES
    (56) arguments -> arguments . COMMA CONSTANTS
    (57) arguments -> arguments . COMMA func_arg_expr

    DELIM           reduce using rule 13 (statement -> CONSTANTS DOT KEYWORD_new arguments .)
    newline         reduce using rule 13 (statement -> CONSTANTS DOT KEYWORD_new arguments .)
    $end            reduce using rule 13 (statement -> CONSTANTS DOT KEYWORD_new arguments .)
    COMMA           shift and go to state 212


state 219

    (72) top_stmt -> KEYWORD_until expr3 opt_do gen_stmts . opt_terms KEYWORD_end
    (77) gen_stmts -> gen_stmts . terms top_stmt
    (203) opt_terms -> . none
    (204) opt_terms -> . terms
    (205) terms -> . term
    (206) terms -> . terms term
    (209) none -> .
    (207) term -> . DELIM
    (208) term -> . newline

    KEYWORD_end     reduce using rule 209 (none -> .)
    DELIM           shift and go to state 86
    newline         shift and go to state 85

    none                           shift and go to state 87
    terms                          shift and go to state 179
    term                           shift and go to state 83
    opt_terms                      shift and go to state 272

state 220

    (67) top_stmt -> KEYWORD_if expr3 opt_then gen_stmts . opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (77) gen_stmts -> gen_stmts . terms top_stmt
    (203) opt_terms -> . none
    (204) opt_terms -> . terms
    (205) terms -> . term
    (206) terms -> . terms term
    (209) none -> .
    (207) term -> . DELIM
    (208) term -> . newline

    KEYWORD_elsif   reduce using rule 209 (none -> .)
    KEYWORD_else    reduce using rule 209 (none -> .)
    KEYWORD_end     reduce using rule 209 (none -> .)
    DELIM           shift and go to state 86
    newline         shift and go to state 85

    none                           shift and go to state 87
    terms                          shift and go to state 179
    term                           shift and go to state 83
    opt_terms                      shift and go to state 273

state 221

    (195) array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .

    DOUBLESTAR      reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    MULTIPLY        reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    DIV             reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    MOD             reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    PLUS            reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    MINUS           reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    SHIFTL          reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    SHIFTR          reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    BITAND          reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    DOUBLEDOT       reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    TRIPLEDOT       reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    BITXOR          reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    PIPE            reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    LESSEQUAL       reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    LESS            reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    GREATER         reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    GREATEREQUAL    reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    IFF             reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    DOUBLEEQUAL     reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    TRIPLEEQUAL     reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    NOTEQUAL        reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    LOGICALAND      reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    QUESTION_MARK   reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    LOGICALOR       reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_while   reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_until   reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    DELIM           reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    newline         reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    $end            reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_do      reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_then    reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    CLOSE_PAREN     reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_end     reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_elsif   reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_else    reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    COLON           reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    COMMA           reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    EQUAL           reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_return  reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_if      reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_begin   reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_for     reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_puts    reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_break   reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_next    reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_redo    reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_exit    reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    VARIABLES       reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    CONSTANTS       reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    BOOLEAN_CONSTANTS reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    OPEN_PAREN      reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    BITNOT          reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    BITCOMP         reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    INT_CONSTANTS   reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    FLOAT_CONSTANTS reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    SIGIL_AT        reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    SIGIL_DOUBLE_AT reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_in      reduce using rule 195 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)


state 222

    (196) array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT . expr7 CLOSE_BRACKET
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (209) none -> .

    OPEN_PAREN      shift and go to state 31
    CONSTANTS       shift and go to state 59
    VARIABLES       shift and go to state 55
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 35
    expr10                         shift and go to state 14
    expr7                          shift and go to state 274
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    array                          shift and go to state 58
    expr11                         shift and go to state 15

state 223

    (197) array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT . expr7 CLOSE_BRACKET
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (209) none -> .

    OPEN_PAREN      shift and go to state 31
    CONSTANTS       shift and go to state 59
    VARIABLES       shift and go to state 55
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 35
    expr10                         shift and go to state 14
    expr7                          shift and go to state 275
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    array                          shift and go to state 58
    expr11                         shift and go to state 15

state 224

    (8) statement -> VARIABLES DOT VARIABLES OPEN_PAREN . arguments CLOSE_PAREN
    (9) statement -> VARIABLES DOT VARIABLES OPEN_PAREN . CLOSE_PAREN
    (55) arguments -> . arguments COMMA VARIABLES
    (56) arguments -> . arguments COMMA CONSTANTS
    (57) arguments -> . arguments COMMA func_arg_expr
    (58) arguments -> . VARIABLES
    (59) arguments -> . CONSTANTS
    (60) arguments -> . func_arg_expr
    (61) arguments -> . newline
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary

    CLOSE_PAREN     shift and go to state 277
    VARIABLES       shift and go to state 159
    CONSTANTS       shift and go to state 158
    newline         shift and go to state 160

    func_arg_expr                  shift and go to state 163
    arguments                      shift and go to state 276

state 225

    (10) statement -> VARIABLES DOT VARIABLES arguments .
    (55) arguments -> arguments . COMMA VARIABLES
    (56) arguments -> arguments . COMMA CONSTANTS
    (57) arguments -> arguments . COMMA func_arg_expr

    DELIM           reduce using rule 10 (statement -> VARIABLES DOT VARIABLES arguments .)
    newline         reduce using rule 10 (statement -> VARIABLES DOT VARIABLES arguments .)
    $end            reduce using rule 10 (statement -> VARIABLES DOT VARIABLES arguments .)
    COMMA           shift and go to state 212


state 226

    (142) str_expr -> str_expr PLUS STRING_CONSTANTS .

    PLUS            reduce using rule 142 (str_expr -> str_expr PLUS STRING_CONSTANTS .)
    COMMA           reduce using rule 142 (str_expr -> str_expr PLUS STRING_CONSTANTS .)
    KEYWORD_while   reduce using rule 142 (str_expr -> str_expr PLUS STRING_CONSTANTS .)
    KEYWORD_until   reduce using rule 142 (str_expr -> str_expr PLUS STRING_CONSTANTS .)
    DELIM           reduce using rule 142 (str_expr -> str_expr PLUS STRING_CONSTANTS .)
    newline         reduce using rule 142 (str_expr -> str_expr PLUS STRING_CONSTANTS .)
    $end            reduce using rule 142 (str_expr -> str_expr PLUS STRING_CONSTANTS .)
    KEYWORD_end     reduce using rule 142 (str_expr -> str_expr PLUS STRING_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 142 (str_expr -> str_expr PLUS STRING_CONSTANTS .)
    KEYWORD_else    reduce using rule 142 (str_expr -> str_expr PLUS STRING_CONSTANTS .)


state 227

    (136) mrhs -> VARIABLES DOT VARIABLES . OPEN_PAREN arguments CLOSE_PAREN
    (137) mrhs -> VARIABLES DOT VARIABLES . OPEN_PAREN CLOSE_PAREN
    (138) mrhs -> VARIABLES DOT VARIABLES .

    OPEN_PAREN      shift and go to state 278
    COMMA           reduce using rule 138 (mrhs -> VARIABLES DOT VARIABLES .)
    KEYWORD_while   reduce using rule 138 (mrhs -> VARIABLES DOT VARIABLES .)
    KEYWORD_until   reduce using rule 138 (mrhs -> VARIABLES DOT VARIABLES .)
    DELIM           reduce using rule 138 (mrhs -> VARIABLES DOT VARIABLES .)
    newline         reduce using rule 138 (mrhs -> VARIABLES DOT VARIABLES .)
    $end            reduce using rule 138 (mrhs -> VARIABLES DOT VARIABLES .)
    KEYWORD_end     reduce using rule 138 (mrhs -> VARIABLES DOT VARIABLES .)
    KEYWORD_elsif   reduce using rule 138 (mrhs -> VARIABLES DOT VARIABLES .)
    KEYWORD_else    reduce using rule 138 (mrhs -> VARIABLES DOT VARIABLES .)


state 228

    (135) mrhs -> OPEN_BRACKET func_ret_arg CLOSE_BRACKET .

    COMMA           reduce using rule 135 (mrhs -> OPEN_BRACKET func_ret_arg CLOSE_BRACKET .)
    KEYWORD_while   reduce using rule 135 (mrhs -> OPEN_BRACKET func_ret_arg CLOSE_BRACKET .)
    KEYWORD_until   reduce using rule 135 (mrhs -> OPEN_BRACKET func_ret_arg CLOSE_BRACKET .)
    DELIM           reduce using rule 135 (mrhs -> OPEN_BRACKET func_ret_arg CLOSE_BRACKET .)
    newline         reduce using rule 135 (mrhs -> OPEN_BRACKET func_ret_arg CLOSE_BRACKET .)
    $end            reduce using rule 135 (mrhs -> OPEN_BRACKET func_ret_arg CLOSE_BRACKET .)
    KEYWORD_end     reduce using rule 135 (mrhs -> OPEN_BRACKET func_ret_arg CLOSE_BRACKET .)
    KEYWORD_elsif   reduce using rule 135 (mrhs -> OPEN_BRACKET func_ret_arg CLOSE_BRACKET .)
    KEYWORD_else    reduce using rule 135 (mrhs -> OPEN_BRACKET func_ret_arg CLOSE_BRACKET .)


state 229

    (136) mrhs -> VARIABLES . DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (137) mrhs -> VARIABLES . DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (138) mrhs -> VARIABLES . DOT VARIABLES
    (193) expr13 -> VARIABLES .
    (195) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> VARIABLES . OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> VARIABLES . OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET

    DOT             shift and go to state 175
    DOUBLESTAR      reduce using rule 193 (expr13 -> VARIABLES .)
    MULTIPLY        reduce using rule 193 (expr13 -> VARIABLES .)
    DIV             reduce using rule 193 (expr13 -> VARIABLES .)
    MOD             reduce using rule 193 (expr13 -> VARIABLES .)
    PLUS            reduce using rule 193 (expr13 -> VARIABLES .)
    MINUS           reduce using rule 193 (expr13 -> VARIABLES .)
    SHIFTL          reduce using rule 193 (expr13 -> VARIABLES .)
    SHIFTR          reduce using rule 193 (expr13 -> VARIABLES .)
    BITAND          reduce using rule 193 (expr13 -> VARIABLES .)
    DOUBLEDOT       reduce using rule 193 (expr13 -> VARIABLES .)
    TRIPLEDOT       reduce using rule 193 (expr13 -> VARIABLES .)
    BITXOR          reduce using rule 193 (expr13 -> VARIABLES .)
    PIPE            reduce using rule 193 (expr13 -> VARIABLES .)
    LESSEQUAL       reduce using rule 193 (expr13 -> VARIABLES .)
    LESS            reduce using rule 193 (expr13 -> VARIABLES .)
    GREATER         reduce using rule 193 (expr13 -> VARIABLES .)
    GREATEREQUAL    reduce using rule 193 (expr13 -> VARIABLES .)
    IFF             reduce using rule 193 (expr13 -> VARIABLES .)
    DOUBLEEQUAL     reduce using rule 193 (expr13 -> VARIABLES .)
    TRIPLEEQUAL     reduce using rule 193 (expr13 -> VARIABLES .)
    NOTEQUAL        reduce using rule 193 (expr13 -> VARIABLES .)
    LOGICALAND      reduce using rule 193 (expr13 -> VARIABLES .)
    QUESTION_MARK   reduce using rule 193 (expr13 -> VARIABLES .)
    LOGICALOR       reduce using rule 193 (expr13 -> VARIABLES .)
    COMMA           reduce using rule 193 (expr13 -> VARIABLES .)
    KEYWORD_while   reduce using rule 193 (expr13 -> VARIABLES .)
    KEYWORD_until   reduce using rule 193 (expr13 -> VARIABLES .)
    DELIM           reduce using rule 193 (expr13 -> VARIABLES .)
    newline         reduce using rule 193 (expr13 -> VARIABLES .)
    $end            reduce using rule 193 (expr13 -> VARIABLES .)
    KEYWORD_end     reduce using rule 193 (expr13 -> VARIABLES .)
    KEYWORD_elsif   reduce using rule 193 (expr13 -> VARIABLES .)
    KEYWORD_else    reduce using rule 193 (expr13 -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 91


state 230

    (139) mrhs -> CONSTANTS . DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (140) mrhs -> CONSTANTS . DOT KEYWORD_new
    (141) mrhs -> CONSTANTS . DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (192) expr13 -> CONSTANTS .

    DOT             shift and go to state 178
    DOUBLESTAR      reduce using rule 192 (expr13 -> CONSTANTS .)
    MULTIPLY        reduce using rule 192 (expr13 -> CONSTANTS .)
    DIV             reduce using rule 192 (expr13 -> CONSTANTS .)
    MOD             reduce using rule 192 (expr13 -> CONSTANTS .)
    PLUS            reduce using rule 192 (expr13 -> CONSTANTS .)
    MINUS           reduce using rule 192 (expr13 -> CONSTANTS .)
    SHIFTL          reduce using rule 192 (expr13 -> CONSTANTS .)
    SHIFTR          reduce using rule 192 (expr13 -> CONSTANTS .)
    BITAND          reduce using rule 192 (expr13 -> CONSTANTS .)
    DOUBLEDOT       reduce using rule 192 (expr13 -> CONSTANTS .)
    TRIPLEDOT       reduce using rule 192 (expr13 -> CONSTANTS .)
    BITXOR          reduce using rule 192 (expr13 -> CONSTANTS .)
    PIPE            reduce using rule 192 (expr13 -> CONSTANTS .)
    LESSEQUAL       reduce using rule 192 (expr13 -> CONSTANTS .)
    LESS            reduce using rule 192 (expr13 -> CONSTANTS .)
    GREATER         reduce using rule 192 (expr13 -> CONSTANTS .)
    GREATEREQUAL    reduce using rule 192 (expr13 -> CONSTANTS .)
    IFF             reduce using rule 192 (expr13 -> CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 192 (expr13 -> CONSTANTS .)
    TRIPLEEQUAL     reduce using rule 192 (expr13 -> CONSTANTS .)
    NOTEQUAL        reduce using rule 192 (expr13 -> CONSTANTS .)
    LOGICALAND      reduce using rule 192 (expr13 -> CONSTANTS .)
    QUESTION_MARK   reduce using rule 192 (expr13 -> CONSTANTS .)
    LOGICALOR       reduce using rule 192 (expr13 -> CONSTANTS .)
    COMMA           reduce using rule 192 (expr13 -> CONSTANTS .)
    KEYWORD_while   reduce using rule 192 (expr13 -> CONSTANTS .)
    KEYWORD_until   reduce using rule 192 (expr13 -> CONSTANTS .)
    DELIM           reduce using rule 192 (expr13 -> CONSTANTS .)
    newline         reduce using rule 192 (expr13 -> CONSTANTS .)
    $end            reduce using rule 192 (expr13 -> CONSTANTS .)
    KEYWORD_end     reduce using rule 192 (expr13 -> CONSTANTS .)
    KEYWORD_elsif   reduce using rule 192 (expr13 -> CONSTANTS .)
    KEYWORD_else    reduce using rule 192 (expr13 -> CONSTANTS .)


state 231

    (139) mrhs -> CONSTANTS DOT KEYWORD_new . OPEN_PAREN arguments CLOSE_PAREN
    (140) mrhs -> CONSTANTS DOT KEYWORD_new .
    (141) mrhs -> CONSTANTS DOT KEYWORD_new . OPEN_PAREN CLOSE_PAREN

    OPEN_PAREN      shift and go to state 279
    COMMA           reduce using rule 140 (mrhs -> CONSTANTS DOT KEYWORD_new .)
    KEYWORD_while   reduce using rule 140 (mrhs -> CONSTANTS DOT KEYWORD_new .)
    KEYWORD_until   reduce using rule 140 (mrhs -> CONSTANTS DOT KEYWORD_new .)
    DELIM           reduce using rule 140 (mrhs -> CONSTANTS DOT KEYWORD_new .)
    newline         reduce using rule 140 (mrhs -> CONSTANTS DOT KEYWORD_new .)
    $end            reduce using rule 140 (mrhs -> CONSTANTS DOT KEYWORD_new .)
    KEYWORD_end     reduce using rule 140 (mrhs -> CONSTANTS DOT KEYWORD_new .)
    KEYWORD_elsif   reduce using rule 140 (mrhs -> CONSTANTS DOT KEYWORD_new .)
    KEYWORD_else    reduce using rule 140 (mrhs -> CONSTANTS DOT KEYWORD_new .)


state 232

    (77) gen_stmts -> gen_stmts terms top_stmt .
    (69) top_stmt -> top_stmt . KEYWORD_while expr3
    (71) top_stmt -> top_stmt . KEYWORD_until expr3

    DELIM           reduce using rule 77 (gen_stmts -> gen_stmts terms top_stmt .)
    newline         reduce using rule 77 (gen_stmts -> gen_stmts terms top_stmt .)
    KEYWORD_elsif   reduce using rule 77 (gen_stmts -> gen_stmts terms top_stmt .)
    KEYWORD_else    reduce using rule 77 (gen_stmts -> gen_stmts terms top_stmt .)
    KEYWORD_end     reduce using rule 77 (gen_stmts -> gen_stmts terms top_stmt .)
    KEYWORD_while   shift and go to state 71
    KEYWORD_until   shift and go to state 72


state 233

    (70) top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end . KEYWORD_while expr3
    (73) top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end . KEYWORD_until expr3

    KEYWORD_while   shift and go to state 281
    KEYWORD_until   shift and go to state 280


state 234

    (20) class_stmts -> none .

    DELIM           reduce using rule 20 (class_stmts -> none .)
    newline         reduce using rule 20 (class_stmts -> none .)
    KEYWORD_end     reduce using rule 20 (class_stmts -> none .)


state 235

    (21) class_stmt -> class_mlhs . EQUAL class_mrhs
    (31) class_mlhs -> class_mlhs . terms SIGIL_DOUBLE_AT
    (205) terms -> . term
    (206) terms -> . terms term
    (207) term -> . DELIM
    (208) term -> . newline

    EQUAL           shift and go to state 283
    DELIM           shift and go to state 86
    newline         shift and go to state 85

    term                           shift and go to state 83
    terms                          shift and go to state 282

state 236

    (32) class_mlhs -> SIGIL_DOUBLE_AT .

    EQUAL           reduce using rule 32 (class_mlhs -> SIGIL_DOUBLE_AT .)
    DELIM           reduce using rule 32 (class_mlhs -> SIGIL_DOUBLE_AT .)
    newline         reduce using rule 32 (class_mlhs -> SIGIL_DOUBLE_AT .)


state 237

    (22) class_stmt -> class_func .

    DELIM           reduce using rule 22 (class_stmt -> class_func .)
    newline         reduce using rule 22 (class_stmt -> class_func .)
    KEYWORD_end     reduce using rule 22 (class_stmt -> class_func .)


state 238

    (17) class_defn -> KEYWORD_class CONSTANTS newline class_stmts . opt_terms KEYWORD_end
    (19) class_stmts -> class_stmts . terms class_stmt
    (203) opt_terms -> . none
    (204) opt_terms -> . terms
    (205) terms -> . term
    (206) terms -> . terms term
    (209) none -> .
    (207) term -> . DELIM
    (208) term -> . newline

    KEYWORD_end     reduce using rule 209 (none -> .)
    DELIM           shift and go to state 86
    newline         shift and go to state 85

    term                           shift and go to state 83
    terms                          shift and go to state 284
    none                           shift and go to state 87
    opt_terms                      shift and go to state 285

state 239

    (33) class_func -> KEYWORD_def . fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (34) class_func -> KEYWORD_def . fname arguments class_method_stmts opt_terms KEYWORD_end
    (35) class_func -> KEYWORD_def . fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS

    VARIABLES       shift and go to state 80
    CONSTANTS       shift and go to state 79

    fname                          shift and go to state 286

state 240

    (18) class_stmts -> class_stmt .

    DELIM           reduce using rule 18 (class_stmts -> class_stmt .)
    newline         reduce using rule 18 (class_stmts -> class_stmt .)
    KEYWORD_end     reduce using rule 18 (class_stmts -> class_stmt .)


state 241

    (152) expr1 -> expr3 QUESTION_MARK expr2 COLON . expr2
    (154) expr2 -> . expr7 DOUBLEDOT expr7
    (155) expr2 -> . expr7 TRIPLEDOT expr7
    (156) expr2 -> . expr3
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (157) expr3 -> . expr3 LOGICALOR expr4
    (158) expr3 -> . expr4
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (159) expr4 -> . expr4 LOGICALAND expr5
    (160) expr4 -> . expr5
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (161) expr5 -> . expr6 IFF expr6
    (162) expr5 -> . expr6 DOUBLEEQUAL expr6
    (163) expr5 -> . expr6 TRIPLEEQUAL expr6
    (164) expr5 -> . expr6 NOTEQUAL expr6
    (165) expr5 -> . expr6
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (166) expr6 -> . expr7 LESSEQUAL expr7
    (167) expr6 -> . expr7 LESS expr7
    (168) expr6 -> . expr7 GREATER expr7
    (169) expr6 -> . expr7 GREATEREQUAL expr7
    (170) expr6 -> . expr7
    (171) expr6 -> . BOOLEAN_CONSTANTS
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (209) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 31
    CONSTANTS       shift and go to state 59
    VARIABLES       shift and go to state 55
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 35
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr2                          shift and go to state 287
    expr3                          shift and go to state 184
    expr10                         shift and go to state 14
    expr7                          shift and go to state 7
    expr4                          shift and go to state 8
    expr5                          shift and go to state 47
    expr6                          shift and go to state 45
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    array                          shift and go to state 58
    expr11                         shift and go to state 15

state 242

    (85) func_call_stmt -> fname OPEN_PAREN func_ret_arg CLOSE_PAREN .

    KEYWORD_while   reduce using rule 85 (func_call_stmt -> fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    KEYWORD_until   reduce using rule 85 (func_call_stmt -> fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    DELIM           reduce using rule 85 (func_call_stmt -> fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    newline         reduce using rule 85 (func_call_stmt -> fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    KEYWORD_end     reduce using rule 85 (func_call_stmt -> fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    $end            reduce using rule 85 (func_call_stmt -> fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    KEYWORD_elsif   reduce using rule 85 (func_call_stmt -> fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    KEYWORD_else    reduce using rule 85 (func_call_stmt -> fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)


state 243

    (150) primary -> VARIABLES .
    (195) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> VARIABLES . OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> VARIABLES . OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET

    COMMA           reduce using rule 150 (primary -> VARIABLES .)
    KEYWORD_while   reduce using rule 150 (primary -> VARIABLES .)
    KEYWORD_until   reduce using rule 150 (primary -> VARIABLES .)
    DELIM           reduce using rule 150 (primary -> VARIABLES .)
    newline         reduce using rule 150 (primary -> VARIABLES .)
    $end            reduce using rule 150 (primary -> VARIABLES .)
    KEYWORD_end     reduce using rule 150 (primary -> VARIABLES .)
    KEYWORD_elsif   reduce using rule 150 (primary -> VARIABLES .)
    KEYWORD_else    reduce using rule 150 (primary -> VARIABLES .)
    KEYWORD_return  reduce using rule 150 (primary -> VARIABLES .)
    KEYWORD_if      reduce using rule 150 (primary -> VARIABLES .)
    KEYWORD_begin   reduce using rule 150 (primary -> VARIABLES .)
    KEYWORD_for     reduce using rule 150 (primary -> VARIABLES .)
    KEYWORD_puts    reduce using rule 150 (primary -> VARIABLES .)
    KEYWORD_break   reduce using rule 150 (primary -> VARIABLES .)
    KEYWORD_next    reduce using rule 150 (primary -> VARIABLES .)
    KEYWORD_redo    reduce using rule 150 (primary -> VARIABLES .)
    KEYWORD_exit    reduce using rule 150 (primary -> VARIABLES .)
    VARIABLES       reduce using rule 150 (primary -> VARIABLES .)
    CONSTANTS       reduce using rule 150 (primary -> VARIABLES .)
    BOOLEAN_CONSTANTS reduce using rule 150 (primary -> VARIABLES .)
    OPEN_PAREN      reduce using rule 150 (primary -> VARIABLES .)
    PLUS            reduce using rule 150 (primary -> VARIABLES .)
    MINUS           reduce using rule 150 (primary -> VARIABLES .)
    BITNOT          reduce using rule 150 (primary -> VARIABLES .)
    BITCOMP         reduce using rule 150 (primary -> VARIABLES .)
    INT_CONSTANTS   reduce using rule 150 (primary -> VARIABLES .)
    FLOAT_CONSTANTS reduce using rule 150 (primary -> VARIABLES .)
    CLOSE_BRACKET   reduce using rule 150 (primary -> VARIABLES .)
    CLOSE_PAREN     reduce using rule 150 (primary -> VARIABLES .)
    SIGIL_AT        reduce using rule 150 (primary -> VARIABLES .)
    SIGIL_DOUBLE_AT reduce using rule 150 (primary -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 91


state 244

    (63) func_arg_expr -> CONSTANTS EQUAL primary .

    CLOSE_PAREN     reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    COMMA           reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    DELIM           reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    newline         reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_end     reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_return  reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    SIGIL_AT        reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    SIGIL_DOUBLE_AT reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_puts    reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_if      reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_while   reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_begin   reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_until   reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_for     reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_break   reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_next    reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_redo    reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_exit    reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    VARIABLES       reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    CONSTANTS       reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    BOOLEAN_CONSTANTS reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    OPEN_PAREN      reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    PLUS            reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    MINUS           reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    BITNOT          reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    BITCOMP         reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    INT_CONSTANTS   reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    FLOAT_CONSTANTS reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    $end            reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_elsif   reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_else    reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    CLOSE_BRACKET   reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)


state 245

    (149) primary -> CONSTANTS .

    COMMA           reduce using rule 149 (primary -> CONSTANTS .)
    KEYWORD_while   reduce using rule 149 (primary -> CONSTANTS .)
    KEYWORD_until   reduce using rule 149 (primary -> CONSTANTS .)
    DELIM           reduce using rule 149 (primary -> CONSTANTS .)
    newline         reduce using rule 149 (primary -> CONSTANTS .)
    $end            reduce using rule 149 (primary -> CONSTANTS .)
    KEYWORD_end     reduce using rule 149 (primary -> CONSTANTS .)
    KEYWORD_elsif   reduce using rule 149 (primary -> CONSTANTS .)
    KEYWORD_else    reduce using rule 149 (primary -> CONSTANTS .)
    KEYWORD_return  reduce using rule 149 (primary -> CONSTANTS .)
    KEYWORD_if      reduce using rule 149 (primary -> CONSTANTS .)
    KEYWORD_begin   reduce using rule 149 (primary -> CONSTANTS .)
    KEYWORD_for     reduce using rule 149 (primary -> CONSTANTS .)
    KEYWORD_puts    reduce using rule 149 (primary -> CONSTANTS .)
    KEYWORD_break   reduce using rule 149 (primary -> CONSTANTS .)
    KEYWORD_next    reduce using rule 149 (primary -> CONSTANTS .)
    KEYWORD_redo    reduce using rule 149 (primary -> CONSTANTS .)
    KEYWORD_exit    reduce using rule 149 (primary -> CONSTANTS .)
    VARIABLES       reduce using rule 149 (primary -> CONSTANTS .)
    CONSTANTS       reduce using rule 149 (primary -> CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 149 (primary -> CONSTANTS .)
    OPEN_PAREN      reduce using rule 149 (primary -> CONSTANTS .)
    PLUS            reduce using rule 149 (primary -> CONSTANTS .)
    MINUS           reduce using rule 149 (primary -> CONSTANTS .)
    BITNOT          reduce using rule 149 (primary -> CONSTANTS .)
    BITCOMP         reduce using rule 149 (primary -> CONSTANTS .)
    INT_CONSTANTS   reduce using rule 149 (primary -> CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 149 (primary -> CONSTANTS .)
    CLOSE_BRACKET   reduce using rule 149 (primary -> CONSTANTS .)
    CLOSE_PAREN     reduce using rule 149 (primary -> CONSTANTS .)
    SIGIL_AT        reduce using rule 149 (primary -> CONSTANTS .)
    SIGIL_DOUBLE_AT reduce using rule 149 (primary -> CONSTANTS .)


state 246

    (102) func_ret_arg -> func_ret_arg COMMA func_arg_expr .

    COMMA           reduce using rule 102 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)
    DELIM           reduce using rule 102 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)
    newline         reduce using rule 102 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)
    KEYWORD_end     reduce using rule 102 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)
    CLOSE_PAREN     reduce using rule 102 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)
    KEYWORD_while   reduce using rule 102 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)
    KEYWORD_until   reduce using rule 102 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)
    $end            reduce using rule 102 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)
    KEYWORD_elsif   reduce using rule 102 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)
    KEYWORD_else    reduce using rule 102 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)
    CLOSE_BRACKET   reduce using rule 102 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)


state 247

    (103) func_ret_arg -> func_ret_arg COMMA primary .

    COMMA           reduce using rule 103 (func_ret_arg -> func_ret_arg COMMA primary .)
    DELIM           reduce using rule 103 (func_ret_arg -> func_ret_arg COMMA primary .)
    newline         reduce using rule 103 (func_ret_arg -> func_ret_arg COMMA primary .)
    KEYWORD_end     reduce using rule 103 (func_ret_arg -> func_ret_arg COMMA primary .)
    CLOSE_PAREN     reduce using rule 103 (func_ret_arg -> func_ret_arg COMMA primary .)
    KEYWORD_while   reduce using rule 103 (func_ret_arg -> func_ret_arg COMMA primary .)
    KEYWORD_until   reduce using rule 103 (func_ret_arg -> func_ret_arg COMMA primary .)
    $end            reduce using rule 103 (func_ret_arg -> func_ret_arg COMMA primary .)
    KEYWORD_elsif   reduce using rule 103 (func_ret_arg -> func_ret_arg COMMA primary .)
    KEYWORD_else    reduce using rule 103 (func_ret_arg -> func_ret_arg COMMA primary .)
    CLOSE_BRACKET   reduce using rule 103 (func_ret_arg -> func_ret_arg COMMA primary .)


state 248

    (62) func_arg_expr -> VARIABLES EQUAL primary .

    CLOSE_PAREN     reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    COMMA           reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    DELIM           reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    newline         reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_end     reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_return  reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    SIGIL_AT        reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    SIGIL_DOUBLE_AT reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_puts    reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_if      reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_while   reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_begin   reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_until   reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_for     reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_break   reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_next    reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_redo    reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_exit    reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    VARIABLES       reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    CONSTANTS       reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    BOOLEAN_CONSTANTS reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    OPEN_PAREN      reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    PLUS            reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    MINUS           reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    BITNOT          reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    BITCOMP         reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    INT_CONSTANTS   reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    FLOAT_CONSTANTS reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    $end            reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_elsif   reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_else    reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    CLOSE_BRACKET   reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)


state 249

    (128) MRHS -> MRHS COMMA . mrhs
    (132) mrhs -> . expr1
    (133) mrhs -> . str_expr
    (134) mrhs -> . KEYWORD_gets
    (135) mrhs -> . OPEN_BRACKET func_ret_arg CLOSE_BRACKET
    (136) mrhs -> . VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (137) mrhs -> . VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (138) mrhs -> . VARIABLES DOT VARIABLES
    (139) mrhs -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (140) mrhs -> . CONSTANTS DOT KEYWORD_new
    (141) mrhs -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (152) expr1 -> . expr3 QUESTION_MARK expr2 COLON expr2
    (153) expr1 -> . expr2
    (142) str_expr -> . str_expr PLUS STRING_CONSTANTS
    (143) str_expr -> . STRING_CONSTANTS
    (157) expr3 -> . expr3 LOGICALOR expr4
    (158) expr3 -> . expr4
    (154) expr2 -> . expr7 DOUBLEDOT expr7
    (155) expr2 -> . expr7 TRIPLEDOT expr7
    (156) expr2 -> . expr3
    (159) expr4 -> . expr4 LOGICALAND expr5
    (160) expr4 -> . expr5
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (161) expr5 -> . expr6 IFF expr6
    (162) expr5 -> . expr6 DOUBLEEQUAL expr6
    (163) expr5 -> . expr6 TRIPLEEQUAL expr6
    (164) expr5 -> . expr6 NOTEQUAL expr6
    (165) expr5 -> . expr6
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (166) expr6 -> . expr7 LESSEQUAL expr7
    (167) expr6 -> . expr7 LESS expr7
    (168) expr6 -> . expr7 GREATER expr7
    (169) expr6 -> . expr7 GREATEREQUAL expr7
    (170) expr6 -> . expr7
    (171) expr6 -> . BOOLEAN_CONSTANTS
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (209) none -> .

    KEYWORD_gets    shift and go to state 98
    OPEN_BRACKET    shift and go to state 96
    VARIABLES       shift and go to state 229
    CONSTANTS       shift and go to state 230
    STRING_CONSTANTS shift and go to state 102
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 31
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    expr11                         shift and go to state 15
    uexpr                          shift and go to state 10
    none                           shift and go to state 35
    str_expr                       shift and go to state 94
    expr5                          shift and go to state 47
    mrhs                           shift and go to state 288
    expr2                          shift and go to state 42
    expr3                          shift and go to state 43
    expr1                          shift and go to state 97
    expr6                          shift and go to state 45
    expr4                          shift and go to state 8
    expr10                         shift and go to state 14
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    expr13                         shift and go to state 17
    array                          shift and go to state 58
    expr12                         shift and go to state 16
    expr7                          shift and go to state 7

state 250

    (87) func_call_stmt -> MLHS EQUAL fname OPEN_PAREN . func_ret_arg CLOSE_PAREN
    (100) func_ret_arg -> . func_arg_expr
    (101) func_ret_arg -> . primary
    (102) func_ret_arg -> . func_ret_arg COMMA func_arg_expr
    (103) func_ret_arg -> . func_ret_arg COMMA primary
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary
    (144) primary -> . INT_CONSTANTS
    (145) primary -> . FLOAT_CONSTANTS
    (146) primary -> . STRING_CONSTANTS
    (147) primary -> . CHAR_CONSTANTS
    (148) primary -> . BOOLEAN_CONSTANTS
    (149) primary -> . CONSTANTS
    (150) primary -> . VARIABLES
    (151) primary -> . array
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET

    VARIABLES       shift and go to state 127
    CONSTANTS       shift and go to state 123
    INT_CONSTANTS   shift and go to state 117
    FLOAT_CONSTANTS shift and go to state 118
    STRING_CONSTANTS shift and go to state 121
    CHAR_CONSTANTS  shift and go to state 126
    BOOLEAN_CONSTANTS shift and go to state 116

    func_arg_expr                  shift and go to state 119
    primary                        shift and go to state 120
    func_ret_arg                   shift and go to state 289
    array                          shift and go to state 125

state 251

    (88) func_call_stmt -> MLHS EQUAL fname func_ret_arg .
    (102) func_ret_arg -> func_ret_arg . COMMA func_arg_expr
    (103) func_ret_arg -> func_ret_arg . COMMA primary

    KEYWORD_while   reduce using rule 88 (func_call_stmt -> MLHS EQUAL fname func_ret_arg .)
    KEYWORD_until   reduce using rule 88 (func_call_stmt -> MLHS EQUAL fname func_ret_arg .)
    DELIM           reduce using rule 88 (func_call_stmt -> MLHS EQUAL fname func_ret_arg .)
    newline         reduce using rule 88 (func_call_stmt -> MLHS EQUAL fname func_ret_arg .)
    KEYWORD_end     reduce using rule 88 (func_call_stmt -> MLHS EQUAL fname func_ret_arg .)
    $end            reduce using rule 88 (func_call_stmt -> MLHS EQUAL fname func_ret_arg .)
    KEYWORD_elsif   reduce using rule 88 (func_call_stmt -> MLHS EQUAL fname func_ret_arg .)
    KEYWORD_else    reduce using rule 88 (func_call_stmt -> MLHS EQUAL fname func_ret_arg .)
    COMMA           shift and go to state 191


state 252

    (74) top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN . KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end

    KEYWORD_in      shift and go to state 290


state 253

    (118) for_range -> INT_CONSTANTS . DOUBLEDOT INT_CONSTANTS
    (120) for_range -> INT_CONSTANTS . TRIPLEDOT INT_CONSTANTS

    DOUBLEDOT       shift and go to state 291
    TRIPLEDOT       shift and go to state 292


state 254

    (117) for_range -> OPEN_PAREN . INT_CONSTANTS DOUBLEDOT INT_CONSTANTS CLOSE_PAREN
    (119) for_range -> OPEN_PAREN . INT_CONSTANTS TRIPLEDOT INT_CONSTANTS CLOSE_PAREN

    INT_CONSTANTS   shift and go to state 293


state 255

    (121) for_range -> VARIABLES .
    (195) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> VARIABLES . OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> VARIABLES . OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET

    KEYWORD_do      reduce using rule 121 (for_range -> VARIABLES .)
    newline         reduce using rule 121 (for_range -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 91


state 256

    (75) top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range . opt_do gen_stmts opt_terms KEYWORD_end
    (110) opt_do -> . KEYWORD_do
    (111) opt_do -> . newline

    KEYWORD_do      shift and go to state 139
    newline         shift and go to state 138

    opt_do                         shift and go to state 294

state 257

    (123) for_range -> CONSTANTS .

    KEYWORD_do      reduce using rule 123 (for_range -> CONSTANTS .)
    newline         reduce using rule 123 (for_range -> CONSTANTS .)


state 258

    (122) for_range -> array .

    KEYWORD_do      reduce using rule 122 (for_range -> array .)
    newline         reduce using rule 122 (for_range -> array .)


state 259

    (115) multi_var -> multi_var COMMA VARIABLES .

    CLOSE_PAREN     reduce using rule 115 (multi_var -> multi_var COMMA VARIABLES .)
    COMMA           reduce using rule 115 (multi_var -> multi_var COMMA VARIABLES .)
    KEYWORD_in      reduce using rule 115 (multi_var -> multi_var COMMA VARIABLES .)


state 260

    (116) multi_var -> multi_var COMMA CONSTANTS .

    CLOSE_PAREN     reduce using rule 116 (multi_var -> multi_var COMMA CONSTANTS .)
    COMMA           reduce using rule 116 (multi_var -> multi_var COMMA CONSTANTS .)
    KEYWORD_in      reduce using rule 116 (multi_var -> multi_var COMMA CONSTANTS .)


state 261

    (68) top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 295


state 262

    (14) func_defn -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN . func_stmts opt_terms KEYWORD_end
    (95) func_stmts -> . func_stmt
    (96) func_stmts -> . func_stmts terms func_stmt
    (97) func_stmts -> . none
    (98) func_stmt -> . top_stmt
    (99) func_stmt -> . KEYWORD_return func_ret_arg
    (209) none -> .
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . MLHS EQUAL MRHS
    (152) expr1 -> . expr3 QUESTION_MARK expr2 COLON expr2
    (153) expr1 -> . expr2
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . MLHS EQUAL fname func_ret_arg
    (125) MLHS -> . mlhs
    (126) MLHS -> . MLHS COMMA mlhs
    (157) expr3 -> . expr3 LOGICALOR expr4
    (158) expr3 -> . expr4
    (154) expr2 -> . expr7 DOUBLEDOT expr7
    (155) expr2 -> . expr7 TRIPLEDOT expr7
    (156) expr2 -> . expr3
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (129) mlhs -> . VARIABLES
    (130) mlhs -> . CONSTANTS
    (131) mlhs -> . array
    (159) expr4 -> . expr4 LOGICALAND expr5
    (160) expr4 -> . expr5
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (161) expr5 -> . expr6 IFF expr6
    (162) expr5 -> . expr6 DOUBLEEQUAL expr6
    (163) expr5 -> . expr6 TRIPLEEQUAL expr6
    (164) expr5 -> . expr6 NOTEQUAL expr6
    (165) expr5 -> . expr6
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (166) expr6 -> . expr7 LESSEQUAL expr7
    (167) expr6 -> . expr7 LESS expr7
    (168) expr6 -> . expr7 GREATER expr7
    (169) expr6 -> . expr7 GREATEREQUAL expr7
    (170) expr6 -> . expr7
    (171) expr6 -> . BOOLEAN_CONSTANTS
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP

    KEYWORD_return  shift and go to state 214
    DELIM           reduce using rule 209 (none -> .)
    newline         reduce using rule 209 (none -> .)
    KEYWORD_end     reduce using rule 209 (none -> .)
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)
    KEYWORD_if      shift and go to state 28
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 39
    KEYWORD_until   shift and go to state 26
    KEYWORD_for     shift and go to state 54
    KEYWORD_puts    shift and go to state 34
    KEYWORD_break   shift and go to state 50
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 24
    VARIABLES       shift and go to state 106
    CONSTANTS       shift and go to state 105
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 31
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30

    func_stmt                      shift and go to state 216
    mlhs                           shift and go to state 2
    func_stmts                     shift and go to state 296
    expr11                         shift and go to state 15
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    array                          shift and go to state 27
    expr2                          shift and go to state 42
    expr3                          shift and go to state 43
    expr1                          shift and go to state 44
    expr6                          shift and go to state 45
    puts_stmt                      shift and go to state 19
    expr5                          shift and go to state 47
    func_call_stmt                 shift and go to state 33
    expr7                          shift and go to state 7
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    expr4                          shift and go to state 8
    fname                          shift and go to state 46
    exit_stmt                      shift and go to state 51
    MLHS                           shift and go to state 52
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 21
    uexpr                          shift and go to state 10
    none                           shift and go to state 215
    expr                           shift and go to state 36
    expr10                         shift and go to state 14
    top_stmt                       shift and go to state 213

state 263

    (15) func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN func_stmts . opt_terms KEYWORD_end
    (96) func_stmts -> func_stmts . terms func_stmt
    (203) opt_terms -> . none
    (204) opt_terms -> . terms
    (205) terms -> . term
    (206) terms -> . terms term
    (209) none -> .
    (207) term -> . DELIM
    (208) term -> . newline

    KEYWORD_end     reduce using rule 209 (none -> .)
    DELIM           shift and go to state 86
    newline         shift and go to state 85

    none                           shift and go to state 87
    terms                          shift and go to state 264
    term                           shift and go to state 83
    opt_terms                      shift and go to state 297

state 264

    (96) func_stmts -> func_stmts terms . func_stmt
    (204) opt_terms -> terms .
    (206) terms -> terms . term
    (98) func_stmt -> . top_stmt
    (99) func_stmt -> . KEYWORD_return func_ret_arg
    (207) term -> . DELIM
    (208) term -> . newline
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . MLHS EQUAL MRHS
    (152) expr1 -> . expr3 QUESTION_MARK expr2 COLON expr2
    (153) expr1 -> . expr2
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . MLHS EQUAL fname func_ret_arg
    (125) MLHS -> . mlhs
    (126) MLHS -> . MLHS COMMA mlhs
    (157) expr3 -> . expr3 LOGICALOR expr4
    (158) expr3 -> . expr4
    (154) expr2 -> . expr7 DOUBLEDOT expr7
    (155) expr2 -> . expr7 TRIPLEDOT expr7
    (156) expr2 -> . expr3
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (129) mlhs -> . VARIABLES
    (130) mlhs -> . CONSTANTS
    (131) mlhs -> . array
    (159) expr4 -> . expr4 LOGICALAND expr5
    (160) expr4 -> . expr5
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (161) expr5 -> . expr6 IFF expr6
    (162) expr5 -> . expr6 DOUBLEEQUAL expr6
    (163) expr5 -> . expr6 TRIPLEEQUAL expr6
    (164) expr5 -> . expr6 NOTEQUAL expr6
    (165) expr5 -> . expr6
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (166) expr6 -> . expr7 LESSEQUAL expr7
    (167) expr6 -> . expr7 LESS expr7
    (168) expr6 -> . expr7 GREATER expr7
    (169) expr6 -> . expr7 GREATEREQUAL expr7
    (170) expr6 -> . expr7
    (171) expr6 -> . BOOLEAN_CONSTANTS
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (209) none -> .

    KEYWORD_end     reduce using rule 204 (opt_terms -> terms .)
    KEYWORD_return  shift and go to state 214
    DELIM           shift and go to state 86
    newline         shift and go to state 85
    KEYWORD_if      shift and go to state 28
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 39
    KEYWORD_until   shift and go to state 26
    KEYWORD_for     shift and go to state 54
    KEYWORD_puts    shift and go to state 34
    KEYWORD_break   shift and go to state 50
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 24
    VARIABLES       shift and go to state 106
    CONSTANTS       shift and go to state 105
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 31
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    func_stmt                      shift and go to state 298
    mlhs                           shift and go to state 2
    expr11                         shift and go to state 15
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    array                          shift and go to state 27
    expr2                          shift and go to state 42
    expr3                          shift and go to state 43
    expr1                          shift and go to state 44
    expr6                          shift and go to state 45
    expr7                          shift and go to state 7
    puts_stmt                      shift and go to state 19
    expr5                          shift and go to state 47
    func_call_stmt                 shift and go to state 33
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    expr4                          shift and go to state 8
    fname                          shift and go to state 46
    exit_stmt                      shift and go to state 51
    MLHS                           shift and go to state 52
    none                           shift and go to state 35
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 21
    uexpr                          shift and go to state 10
    term                           shift and go to state 165
    expr                           shift and go to state 36
    expr10                         shift and go to state 14
    top_stmt                       shift and go to state 213

state 265

    (16) func_defn -> KEYWORD_def fname arguments func_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 299


state 266

    (55) arguments -> arguments COMMA VARIABLES .
    (62) func_arg_expr -> VARIABLES . EQUAL primary

    COMMA           reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    DELIM           reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    newline         reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    $end            reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    CLOSE_PAREN     reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_return  reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_if      reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_while   reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_begin   reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_until   reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_for     reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_puts    reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_break   reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_next    reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_redo    reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_exit    reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    VARIABLES       reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    CONSTANTS       reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    BOOLEAN_CONSTANTS reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    OPEN_PAREN      reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    PLUS            reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    MINUS           reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    BITNOT          reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    BITCOMP         reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_end     reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    INT_CONSTANTS   reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    FLOAT_CONSTANTS reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    SIGIL_AT        reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    SIGIL_DOUBLE_AT reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    EQUAL           shift and go to state 192


state 267

    (57) arguments -> arguments COMMA func_arg_expr .

    COMMA           reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    DELIM           reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    newline         reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    $end            reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    CLOSE_PAREN     reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_return  reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_if      reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_while   reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_begin   reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_until   reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_for     reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_puts    reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_break   reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_next    reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_redo    reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_exit    reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    VARIABLES       reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    CONSTANTS       reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    BOOLEAN_CONSTANTS reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    OPEN_PAREN      reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    PLUS            reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    MINUS           reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    BITNOT          reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    BITCOMP         reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_end     reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    INT_CONSTANTS   reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    FLOAT_CONSTANTS reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    SIGIL_AT        reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    SIGIL_DOUBLE_AT reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)


state 268

    (56) arguments -> arguments COMMA CONSTANTS .
    (63) func_arg_expr -> CONSTANTS . EQUAL primary

    COMMA           reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    DELIM           reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    newline         reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    $end            reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    CLOSE_PAREN     reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_return  reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_if      reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_while   reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_begin   reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_until   reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_for     reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_puts    reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_break   reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_next    reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_redo    reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_exit    reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    VARIABLES       reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    CONSTANTS       reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    OPEN_PAREN      reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    PLUS            reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    MINUS           reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    BITNOT          reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    BITCOMP         reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_end     reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    INT_CONSTANTS   reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    SIGIL_AT        reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    SIGIL_DOUBLE_AT reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    EQUAL           shift and go to state 190


state 269

    (99) func_stmt -> KEYWORD_return func_ret_arg .
    (102) func_ret_arg -> func_ret_arg . COMMA func_arg_expr
    (103) func_ret_arg -> func_ret_arg . COMMA primary

    DELIM           reduce using rule 99 (func_stmt -> KEYWORD_return func_ret_arg .)
    newline         reduce using rule 99 (func_stmt -> KEYWORD_return func_ret_arg .)
    KEYWORD_end     reduce using rule 99 (func_stmt -> KEYWORD_return func_ret_arg .)
    COMMA           shift and go to state 191


state 270

    (11) statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments . CLOSE_PAREN
    (55) arguments -> arguments . COMMA VARIABLES
    (56) arguments -> arguments . COMMA CONSTANTS
    (57) arguments -> arguments . COMMA func_arg_expr

    CLOSE_PAREN     shift and go to state 300
    COMMA           shift and go to state 212


state 271

    (12) statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .

    DELIM           reduce using rule 12 (statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    newline         reduce using rule 12 (statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    $end            reduce using rule 12 (statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)


state 272

    (72) top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 301


state 273

    (67) top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms . elsif_tail opt_else_stmt KEYWORD_end
    (106) elsif_tail -> . none
    (107) elsif_tail -> . KEYWORD_elsif expr3 opt_then gen_stmts opt_terms elsif_tail
    (209) none -> .

    KEYWORD_elsif   shift and go to state 303
    KEYWORD_else    reduce using rule 209 (none -> .)
    KEYWORD_end     reduce using rule 209 (none -> .)

    none                           shift and go to state 302
    elsif_tail                     shift and go to state 304

state 274

    (196) array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 . CLOSE_BRACKET
    (172) expr7 -> expr7 . BITXOR expr8
    (173) expr7 -> expr7 . PIPE expr8

    CLOSE_BRACKET   shift and go to state 305
    BITXOR          shift and go to state 66
    PIPE            shift and go to state 65


state 275

    (197) array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 . CLOSE_BRACKET
    (172) expr7 -> expr7 . BITXOR expr8
    (173) expr7 -> expr7 . PIPE expr8

    CLOSE_BRACKET   shift and go to state 306
    BITXOR          shift and go to state 66
    PIPE            shift and go to state 65


state 276

    (8) statement -> VARIABLES DOT VARIABLES OPEN_PAREN arguments . CLOSE_PAREN
    (55) arguments -> arguments . COMMA VARIABLES
    (56) arguments -> arguments . COMMA CONSTANTS
    (57) arguments -> arguments . COMMA func_arg_expr

    CLOSE_PAREN     shift and go to state 307
    COMMA           shift and go to state 212


state 277

    (9) statement -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .

    DELIM           reduce using rule 9 (statement -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    newline         reduce using rule 9 (statement -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    $end            reduce using rule 9 (statement -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)


state 278

    (136) mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN . arguments CLOSE_PAREN
    (137) mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN . CLOSE_PAREN
    (55) arguments -> . arguments COMMA VARIABLES
    (56) arguments -> . arguments COMMA CONSTANTS
    (57) arguments -> . arguments COMMA func_arg_expr
    (58) arguments -> . VARIABLES
    (59) arguments -> . CONSTANTS
    (60) arguments -> . func_arg_expr
    (61) arguments -> . newline
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary

    CLOSE_PAREN     shift and go to state 309
    VARIABLES       shift and go to state 159
    CONSTANTS       shift and go to state 158
    newline         shift and go to state 160

    func_arg_expr                  shift and go to state 163
    arguments                      shift and go to state 308

state 279

    (139) mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN . arguments CLOSE_PAREN
    (141) mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN . CLOSE_PAREN
    (55) arguments -> . arguments COMMA VARIABLES
    (56) arguments -> . arguments COMMA CONSTANTS
    (57) arguments -> . arguments COMMA func_arg_expr
    (58) arguments -> . VARIABLES
    (59) arguments -> . CONSTANTS
    (60) arguments -> . func_arg_expr
    (61) arguments -> . newline
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary

    CLOSE_PAREN     shift and go to state 311
    VARIABLES       shift and go to state 159
    CONSTANTS       shift and go to state 158
    newline         shift and go to state 160

    func_arg_expr                  shift and go to state 163
    arguments                      shift and go to state 310

state 280

    (73) top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until . expr3
    (157) expr3 -> . expr3 LOGICALOR expr4
    (158) expr3 -> . expr4
    (159) expr4 -> . expr4 LOGICALAND expr5
    (160) expr4 -> . expr5
    (161) expr5 -> . expr6 IFF expr6
    (162) expr5 -> . expr6 DOUBLEEQUAL expr6
    (163) expr5 -> . expr6 TRIPLEEQUAL expr6
    (164) expr5 -> . expr6 NOTEQUAL expr6
    (165) expr5 -> . expr6
    (166) expr6 -> . expr7 LESSEQUAL expr7
    (167) expr6 -> . expr7 LESS expr7
    (168) expr6 -> . expr7 GREATER expr7
    (169) expr6 -> . expr7 GREATEREQUAL expr7
    (170) expr6 -> . expr7
    (171) expr6 -> . BOOLEAN_CONSTANTS
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (209) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 31
    CONSTANTS       shift and go to state 59
    VARIABLES       shift and go to state 55
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 35
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr3                          shift and go to state 312
    expr6                          shift and go to state 45
    expr7                          shift and go to state 57
    expr4                          shift and go to state 8
    expr5                          shift and go to state 47
    expr10                         shift and go to state 14
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    array                          shift and go to state 58
    expr11                         shift and go to state 15

state 281

    (70) top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while . expr3
    (157) expr3 -> . expr3 LOGICALOR expr4
    (158) expr3 -> . expr4
    (159) expr4 -> . expr4 LOGICALAND expr5
    (160) expr4 -> . expr5
    (161) expr5 -> . expr6 IFF expr6
    (162) expr5 -> . expr6 DOUBLEEQUAL expr6
    (163) expr5 -> . expr6 TRIPLEEQUAL expr6
    (164) expr5 -> . expr6 NOTEQUAL expr6
    (165) expr5 -> . expr6
    (166) expr6 -> . expr7 LESSEQUAL expr7
    (167) expr6 -> . expr7 LESS expr7
    (168) expr6 -> . expr7 GREATER expr7
    (169) expr6 -> . expr7 GREATEREQUAL expr7
    (170) expr6 -> . expr7
    (171) expr6 -> . BOOLEAN_CONSTANTS
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (209) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 31
    CONSTANTS       shift and go to state 59
    VARIABLES       shift and go to state 55
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 35
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    expr3                          shift and go to state 313
    expr6                          shift and go to state 45
    expr7                          shift and go to state 57
    expr4                          shift and go to state 8
    expr5                          shift and go to state 47
    expr10                         shift and go to state 14
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    array                          shift and go to state 58
    expr11                         shift and go to state 15

state 282

    (31) class_mlhs -> class_mlhs terms . SIGIL_DOUBLE_AT
    (206) terms -> terms . term
    (207) term -> . DELIM
    (208) term -> . newline

    SIGIL_DOUBLE_AT shift and go to state 314
    DELIM           shift and go to state 86
    newline         shift and go to state 85

    term                           shift and go to state 165

state 283

    (21) class_stmt -> class_mlhs EQUAL . class_mrhs
    (23) class_mrhs -> . literal
    (24) literal -> . INT_CONSTANTS
    (25) literal -> . FLOAT_CONSTANTS
    (26) literal -> . STRING_CONSTANTS
    (27) literal -> . BOOLEAN_CONSTANTS
    (28) literal -> . CHAR_CONSTANTS
    (29) literal -> . SIGIL_AT
    (30) literal -> . SIGIL_DOUBLE_AT

    INT_CONSTANTS   shift and go to state 317
    FLOAT_CONSTANTS shift and go to state 318
    STRING_CONSTANTS shift and go to state 320
    BOOLEAN_CONSTANTS shift and go to state 316
    CHAR_CONSTANTS  shift and go to state 323
    SIGIL_AT        shift and go to state 315
    SIGIL_DOUBLE_AT shift and go to state 319

    literal                        shift and go to state 321
    class_mrhs                     shift and go to state 322

state 284

    (19) class_stmts -> class_stmts terms . class_stmt
    (204) opt_terms -> terms .
    (206) terms -> terms . term
    (21) class_stmt -> . class_mlhs EQUAL class_mrhs
    (22) class_stmt -> . class_func
    (207) term -> . DELIM
    (208) term -> . newline
    (31) class_mlhs -> . class_mlhs terms SIGIL_DOUBLE_AT
    (32) class_mlhs -> . SIGIL_DOUBLE_AT
    (33) class_func -> . KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (34) class_func -> . KEYWORD_def fname arguments class_method_stmts opt_terms KEYWORD_end
    (35) class_func -> . KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end

    KEYWORD_end     reduce using rule 204 (opt_terms -> terms .)
    DELIM           shift and go to state 86
    newline         shift and go to state 85
    SIGIL_DOUBLE_AT shift and go to state 236
    KEYWORD_def     shift and go to state 239

    term                           shift and go to state 165
    class_mlhs                     shift and go to state 235
    class_func                     shift and go to state 237
    class_stmt                     shift and go to state 324

state 285

    (17) class_defn -> KEYWORD_class CONSTANTS newline class_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 325


state 286

    (33) class_func -> KEYWORD_def fname . OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (34) class_func -> KEYWORD_def fname . arguments class_method_stmts opt_terms KEYWORD_end
    (35) class_func -> KEYWORD_def fname . OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (55) arguments -> . arguments COMMA VARIABLES
    (56) arguments -> . arguments COMMA CONSTANTS
    (57) arguments -> . arguments COMMA func_arg_expr
    (58) arguments -> . VARIABLES
    (59) arguments -> . CONSTANTS
    (60) arguments -> . func_arg_expr
    (61) arguments -> . newline
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary

    OPEN_PAREN      shift and go to state 326
    VARIABLES       shift and go to state 159
    CONSTANTS       shift and go to state 158
    newline         shift and go to state 160

    func_arg_expr                  shift and go to state 163
    arguments                      shift and go to state 327

state 287

    (152) expr1 -> expr3 QUESTION_MARK expr2 COLON expr2 .

    KEYWORD_while   reduce using rule 152 (expr1 -> expr3 QUESTION_MARK expr2 COLON expr2 .)
    KEYWORD_until   reduce using rule 152 (expr1 -> expr3 QUESTION_MARK expr2 COLON expr2 .)
    DELIM           reduce using rule 152 (expr1 -> expr3 QUESTION_MARK expr2 COLON expr2 .)
    newline         reduce using rule 152 (expr1 -> expr3 QUESTION_MARK expr2 COLON expr2 .)
    KEYWORD_end     reduce using rule 152 (expr1 -> expr3 QUESTION_MARK expr2 COLON expr2 .)
    $end            reduce using rule 152 (expr1 -> expr3 QUESTION_MARK expr2 COLON expr2 .)
    KEYWORD_elsif   reduce using rule 152 (expr1 -> expr3 QUESTION_MARK expr2 COLON expr2 .)
    KEYWORD_else    reduce using rule 152 (expr1 -> expr3 QUESTION_MARK expr2 COLON expr2 .)
    CLOSE_PAREN     reduce using rule 152 (expr1 -> expr3 QUESTION_MARK expr2 COLON expr2 .)
    COMMA           reduce using rule 152 (expr1 -> expr3 QUESTION_MARK expr2 COLON expr2 .)


state 288

    (128) MRHS -> MRHS COMMA mrhs .

    COMMA           reduce using rule 128 (MRHS -> MRHS COMMA mrhs .)
    KEYWORD_while   reduce using rule 128 (MRHS -> MRHS COMMA mrhs .)
    KEYWORD_until   reduce using rule 128 (MRHS -> MRHS COMMA mrhs .)
    DELIM           reduce using rule 128 (MRHS -> MRHS COMMA mrhs .)
    newline         reduce using rule 128 (MRHS -> MRHS COMMA mrhs .)
    $end            reduce using rule 128 (MRHS -> MRHS COMMA mrhs .)
    KEYWORD_end     reduce using rule 128 (MRHS -> MRHS COMMA mrhs .)
    KEYWORD_elsif   reduce using rule 128 (MRHS -> MRHS COMMA mrhs .)
    KEYWORD_else    reduce using rule 128 (MRHS -> MRHS COMMA mrhs .)


state 289

    (87) func_call_stmt -> MLHS EQUAL fname OPEN_PAREN func_ret_arg . CLOSE_PAREN
    (102) func_ret_arg -> func_ret_arg . COMMA func_arg_expr
    (103) func_ret_arg -> func_ret_arg . COMMA primary

    CLOSE_PAREN     shift and go to state 328
    COMMA           shift and go to state 191


state 290

    (74) top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in . for_range opt_do gen_stmts opt_terms KEYWORD_end
    (117) for_range -> . OPEN_PAREN INT_CONSTANTS DOUBLEDOT INT_CONSTANTS CLOSE_PAREN
    (118) for_range -> . INT_CONSTANTS DOUBLEDOT INT_CONSTANTS
    (119) for_range -> . OPEN_PAREN INT_CONSTANTS TRIPLEDOT INT_CONSTANTS CLOSE_PAREN
    (120) for_range -> . INT_CONSTANTS TRIPLEDOT INT_CONSTANTS
    (121) for_range -> . VARIABLES
    (122) for_range -> . array
    (123) for_range -> . CONSTANTS
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET

    OPEN_PAREN      shift and go to state 254
    INT_CONSTANTS   shift and go to state 253
    VARIABLES       shift and go to state 255
    CONSTANTS       shift and go to state 257

    for_range                      shift and go to state 329
    array                          shift and go to state 258

state 291

    (118) for_range -> INT_CONSTANTS DOUBLEDOT . INT_CONSTANTS

    INT_CONSTANTS   shift and go to state 330


state 292

    (120) for_range -> INT_CONSTANTS TRIPLEDOT . INT_CONSTANTS

    INT_CONSTANTS   shift and go to state 331


state 293

    (117) for_range -> OPEN_PAREN INT_CONSTANTS . DOUBLEDOT INT_CONSTANTS CLOSE_PAREN
    (119) for_range -> OPEN_PAREN INT_CONSTANTS . TRIPLEDOT INT_CONSTANTS CLOSE_PAREN

    DOUBLEDOT       shift and go to state 332
    TRIPLEDOT       shift and go to state 333


state 294

    (75) top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range opt_do . gen_stmts opt_terms KEYWORD_end
    (76) gen_stmts -> . top_stmt
    (77) gen_stmts -> . gen_stmts terms top_stmt
    (78) gen_stmts -> . none
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (209) none -> .
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . MLHS EQUAL MRHS
    (152) expr1 -> . expr3 QUESTION_MARK expr2 COLON expr2
    (153) expr1 -> . expr2
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . MLHS EQUAL fname func_ret_arg
    (125) MLHS -> . mlhs
    (126) MLHS -> . MLHS COMMA mlhs
    (157) expr3 -> . expr3 LOGICALOR expr4
    (158) expr3 -> . expr4
    (154) expr2 -> . expr7 DOUBLEDOT expr7
    (155) expr2 -> . expr7 TRIPLEDOT expr7
    (156) expr2 -> . expr3
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (129) mlhs -> . VARIABLES
    (130) mlhs -> . CONSTANTS
    (131) mlhs -> . array
    (159) expr4 -> . expr4 LOGICALAND expr5
    (160) expr4 -> . expr5
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (161) expr5 -> . expr6 IFF expr6
    (162) expr5 -> . expr6 DOUBLEEQUAL expr6
    (163) expr5 -> . expr6 TRIPLEEQUAL expr6
    (164) expr5 -> . expr6 NOTEQUAL expr6
    (165) expr5 -> . expr6
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (166) expr6 -> . expr7 LESSEQUAL expr7
    (167) expr6 -> . expr7 LESS expr7
    (168) expr6 -> . expr7 GREATER expr7
    (169) expr6 -> . expr7 GREATEREQUAL expr7
    (170) expr6 -> . expr7
    (171) expr6 -> . BOOLEAN_CONSTANTS
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP

    KEYWORD_if      shift and go to state 28
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 39
    KEYWORD_until   shift and go to state 26
    KEYWORD_for     shift and go to state 54
    DELIM           reduce using rule 209 (none -> .)
    newline         reduce using rule 209 (none -> .)
    KEYWORD_end     reduce using rule 209 (none -> .)
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)
    KEYWORD_puts    shift and go to state 34
    KEYWORD_break   shift and go to state 50
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 24
    VARIABLES       shift and go to state 106
    CONSTANTS       shift and go to state 105
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 31
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30

    mlhs                           shift and go to state 2
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    array                          shift and go to state 27
    expr2                          shift and go to state 42
    expr3                          shift and go to state 43
    expr1                          shift and go to state 44
    expr6                          shift and go to state 45
    expr7                          shift and go to state 7
    puts_stmt                      shift and go to state 19
    expr5                          shift and go to state 47
    func_call_stmt                 shift and go to state 33
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    expr4                          shift and go to state 8
    fname                          shift and go to state 46
    exit_stmt                      shift and go to state 51
    MLHS                           shift and go to state 52
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 21
    uexpr                          shift and go to state 10
    none                           shift and go to state 107
    gen_stmts                      shift and go to state 334
    expr                           shift and go to state 36
    top_stmt                       shift and go to state 104

state 295

    (68) top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end .

    KEYWORD_while   reduce using rule 68 (top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_until   reduce using rule 68 (top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    DELIM           reduce using rule 68 (top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 68 (top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_end     reduce using rule 68 (top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_elsif   reduce using rule 68 (top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_else    reduce using rule 68 (top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    $end            reduce using rule 68 (top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end .)


state 296

    (14) func_defn -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN func_stmts . opt_terms KEYWORD_end
    (96) func_stmts -> func_stmts . terms func_stmt
    (203) opt_terms -> . none
    (204) opt_terms -> . terms
    (205) terms -> . term
    (206) terms -> . terms term
    (209) none -> .
    (207) term -> . DELIM
    (208) term -> . newline

    KEYWORD_end     reduce using rule 209 (none -> .)
    DELIM           shift and go to state 86
    newline         shift and go to state 85

    none                           shift and go to state 87
    terms                          shift and go to state 264
    term                           shift and go to state 83
    opt_terms                      shift and go to state 335

state 297

    (15) func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN func_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 336


state 298

    (96) func_stmts -> func_stmts terms func_stmt .

    DELIM           reduce using rule 96 (func_stmts -> func_stmts terms func_stmt .)
    newline         reduce using rule 96 (func_stmts -> func_stmts terms func_stmt .)
    KEYWORD_end     reduce using rule 96 (func_stmts -> func_stmts terms func_stmt .)


state 299

    (16) func_defn -> KEYWORD_def fname arguments func_stmts opt_terms KEYWORD_end .

    DELIM           reduce using rule 16 (func_defn -> KEYWORD_def fname arguments func_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 16 (func_defn -> KEYWORD_def fname arguments func_stmts opt_terms KEYWORD_end .)
    $end            reduce using rule 16 (func_defn -> KEYWORD_def fname arguments func_stmts opt_terms KEYWORD_end .)


state 300

    (11) statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .

    DELIM           reduce using rule 11 (statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    newline         reduce using rule 11 (statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    $end            reduce using rule 11 (statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)


state 301

    (72) top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end .

    KEYWORD_while   reduce using rule 72 (top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_until   reduce using rule 72 (top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    DELIM           reduce using rule 72 (top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 72 (top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_end     reduce using rule 72 (top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_elsif   reduce using rule 72 (top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_else    reduce using rule 72 (top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    $end            reduce using rule 72 (top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end .)


state 302

    (106) elsif_tail -> none .

    KEYWORD_else    reduce using rule 106 (elsif_tail -> none .)
    KEYWORD_end     reduce using rule 106 (elsif_tail -> none .)


state 303

    (107) elsif_tail -> KEYWORD_elsif . expr3 opt_then gen_stmts opt_terms elsif_tail
    (157) expr3 -> . expr3 LOGICALOR expr4
    (158) expr3 -> . expr4
    (159) expr4 -> . expr4 LOGICALAND expr5
    (160) expr4 -> . expr5
    (161) expr5 -> . expr6 IFF expr6
    (162) expr5 -> . expr6 DOUBLEEQUAL expr6
    (163) expr5 -> . expr6 TRIPLEEQUAL expr6
    (164) expr5 -> . expr6 NOTEQUAL expr6
    (165) expr5 -> . expr6
    (166) expr6 -> . expr7 LESSEQUAL expr7
    (167) expr6 -> . expr7 LESS expr7
    (168) expr6 -> . expr7 GREATER expr7
    (169) expr6 -> . expr7 GREATEREQUAL expr7
    (170) expr6 -> . expr7
    (171) expr6 -> . BOOLEAN_CONSTANTS
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (209) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 31
    CONSTANTS       shift and go to state 59
    VARIABLES       shift and go to state 55
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 35
    expr5                          shift and go to state 47
    expr3                          shift and go to state 337
    expr6                          shift and go to state 45
    expr7                          shift and go to state 57
    expr4                          shift and go to state 8
    expr10                         shift and go to state 14
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    expr13                         shift and go to state 17
    array                          shift and go to state 58
    expr12                         shift and go to state 16
    expr11                         shift and go to state 15

state 304

    (67) top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail . opt_else_stmt KEYWORD_end
    (104) opt_else_stmt -> . KEYWORD_else gen_stmts opt_terms
    (105) opt_else_stmt -> . none
    (209) none -> .

    KEYWORD_else    shift and go to state 339
    KEYWORD_end     reduce using rule 209 (none -> .)

    none                           shift and go to state 338
    opt_else_stmt                  shift and go to state 340

state 305

    (196) array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .

    DOUBLESTAR      reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    MULTIPLY        reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    DIV             reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    MOD             reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    PLUS            reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    MINUS           reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    SHIFTL          reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    SHIFTR          reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    BITAND          reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    DOUBLEDOT       reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    TRIPLEDOT       reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    BITXOR          reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    PIPE            reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    LESSEQUAL       reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    LESS            reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    GREATER         reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    GREATEREQUAL    reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    IFF             reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    DOUBLEEQUAL     reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    TRIPLEEQUAL     reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    NOTEQUAL        reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    LOGICALAND      reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    QUESTION_MARK   reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    LOGICALOR       reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_while   reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_until   reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    DELIM           reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    newline         reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    $end            reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_do      reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_then    reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    CLOSE_PAREN     reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_end     reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_elsif   reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_else    reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    COLON           reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    COMMA           reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    EQUAL           reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_return  reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_if      reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_begin   reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_for     reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_puts    reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_break   reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_next    reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_redo    reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_exit    reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    VARIABLES       reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    CONSTANTS       reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    BOOLEAN_CONSTANTS reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    OPEN_PAREN      reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    BITNOT          reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    BITCOMP         reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    INT_CONSTANTS   reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    FLOAT_CONSTANTS reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    SIGIL_AT        reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    SIGIL_DOUBLE_AT reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_in      reduce using rule 196 (array -> VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET .)


state 306

    (197) array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .

    DOUBLESTAR      reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    MULTIPLY        reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    DIV             reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    MOD             reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    PLUS            reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    MINUS           reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    SHIFTL          reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    SHIFTR          reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    BITAND          reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    DOUBLEDOT       reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    TRIPLEDOT       reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    BITXOR          reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    PIPE            reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    LESSEQUAL       reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    LESS            reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    GREATER         reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    GREATEREQUAL    reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    IFF             reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    DOUBLEEQUAL     reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    TRIPLEEQUAL     reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    NOTEQUAL        reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    LOGICALAND      reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    QUESTION_MARK   reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    LOGICALOR       reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_while   reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_until   reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    DELIM           reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    newline         reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    $end            reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_do      reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_then    reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    CLOSE_PAREN     reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_end     reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_elsif   reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_else    reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    COLON           reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    COMMA           reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    EQUAL           reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_return  reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_if      reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_begin   reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_for     reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_puts    reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_break   reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_next    reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_redo    reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_exit    reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    VARIABLES       reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    CONSTANTS       reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    BOOLEAN_CONSTANTS reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    OPEN_PAREN      reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    BITNOT          reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    BITCOMP         reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    INT_CONSTANTS   reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    FLOAT_CONSTANTS reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    SIGIL_AT        reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    SIGIL_DOUBLE_AT reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)
    KEYWORD_in      reduce using rule 197 (array -> VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET .)


state 307

    (8) statement -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .

    DELIM           reduce using rule 8 (statement -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    newline         reduce using rule 8 (statement -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    $end            reduce using rule 8 (statement -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)


state 308

    (136) mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments . CLOSE_PAREN
    (55) arguments -> arguments . COMMA VARIABLES
    (56) arguments -> arguments . COMMA CONSTANTS
    (57) arguments -> arguments . COMMA func_arg_expr

    CLOSE_PAREN     shift and go to state 341
    COMMA           shift and go to state 212


state 309

    (137) mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .

    COMMA           reduce using rule 137 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    KEYWORD_while   reduce using rule 137 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    KEYWORD_until   reduce using rule 137 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    DELIM           reduce using rule 137 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    newline         reduce using rule 137 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    $end            reduce using rule 137 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    KEYWORD_end     reduce using rule 137 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    KEYWORD_elsif   reduce using rule 137 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    KEYWORD_else    reduce using rule 137 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)


state 310

    (139) mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments . CLOSE_PAREN
    (55) arguments -> arguments . COMMA VARIABLES
    (56) arguments -> arguments . COMMA CONSTANTS
    (57) arguments -> arguments . COMMA func_arg_expr

    CLOSE_PAREN     shift and go to state 342
    COMMA           shift and go to state 212


state 311

    (141) mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .

    COMMA           reduce using rule 141 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    KEYWORD_while   reduce using rule 141 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    KEYWORD_until   reduce using rule 141 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    DELIM           reduce using rule 141 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    newline         reduce using rule 141 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    $end            reduce using rule 141 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    KEYWORD_end     reduce using rule 141 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    KEYWORD_elsif   reduce using rule 141 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    KEYWORD_else    reduce using rule 141 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)


state 312

    (73) top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3 .
    (157) expr3 -> expr3 . LOGICALOR expr4

    KEYWORD_while   reduce using rule 73 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3 .)
    KEYWORD_until   reduce using rule 73 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3 .)
    DELIM           reduce using rule 73 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3 .)
    newline         reduce using rule 73 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3 .)
    KEYWORD_end     reduce using rule 73 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3 .)
    KEYWORD_elsif   reduce using rule 73 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3 .)
    KEYWORD_else    reduce using rule 73 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3 .)
    $end            reduce using rule 73 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3 .)
    LOGICALOR       shift and go to state 110


state 313

    (70) top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3 .
    (157) expr3 -> expr3 . LOGICALOR expr4

    KEYWORD_while   reduce using rule 70 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3 .)
    KEYWORD_until   reduce using rule 70 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3 .)
    DELIM           reduce using rule 70 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3 .)
    newline         reduce using rule 70 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3 .)
    KEYWORD_end     reduce using rule 70 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3 .)
    KEYWORD_elsif   reduce using rule 70 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3 .)
    KEYWORD_else    reduce using rule 70 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3 .)
    $end            reduce using rule 70 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3 .)
    LOGICALOR       shift and go to state 110


state 314

    (31) class_mlhs -> class_mlhs terms SIGIL_DOUBLE_AT .

    EQUAL           reduce using rule 31 (class_mlhs -> class_mlhs terms SIGIL_DOUBLE_AT .)
    DELIM           reduce using rule 31 (class_mlhs -> class_mlhs terms SIGIL_DOUBLE_AT .)
    newline         reduce using rule 31 (class_mlhs -> class_mlhs terms SIGIL_DOUBLE_AT .)


state 315

    (29) literal -> SIGIL_AT .

    COMMA           reduce using rule 29 (literal -> SIGIL_AT .)
    DELIM           reduce using rule 29 (literal -> SIGIL_AT .)
    newline         reduce using rule 29 (literal -> SIGIL_AT .)
    KEYWORD_end     reduce using rule 29 (literal -> SIGIL_AT .)


state 316

    (27) literal -> BOOLEAN_CONSTANTS .

    COMMA           reduce using rule 27 (literal -> BOOLEAN_CONSTANTS .)
    DELIM           reduce using rule 27 (literal -> BOOLEAN_CONSTANTS .)
    newline         reduce using rule 27 (literal -> BOOLEAN_CONSTANTS .)
    KEYWORD_end     reduce using rule 27 (literal -> BOOLEAN_CONSTANTS .)


state 317

    (24) literal -> INT_CONSTANTS .

    COMMA           reduce using rule 24 (literal -> INT_CONSTANTS .)
    DELIM           reduce using rule 24 (literal -> INT_CONSTANTS .)
    newline         reduce using rule 24 (literal -> INT_CONSTANTS .)
    KEYWORD_end     reduce using rule 24 (literal -> INT_CONSTANTS .)


state 318

    (25) literal -> FLOAT_CONSTANTS .

    COMMA           reduce using rule 25 (literal -> FLOAT_CONSTANTS .)
    DELIM           reduce using rule 25 (literal -> FLOAT_CONSTANTS .)
    newline         reduce using rule 25 (literal -> FLOAT_CONSTANTS .)
    KEYWORD_end     reduce using rule 25 (literal -> FLOAT_CONSTANTS .)


state 319

    (30) literal -> SIGIL_DOUBLE_AT .

    COMMA           reduce using rule 30 (literal -> SIGIL_DOUBLE_AT .)
    DELIM           reduce using rule 30 (literal -> SIGIL_DOUBLE_AT .)
    newline         reduce using rule 30 (literal -> SIGIL_DOUBLE_AT .)
    KEYWORD_end     reduce using rule 30 (literal -> SIGIL_DOUBLE_AT .)


state 320

    (26) literal -> STRING_CONSTANTS .

    COMMA           reduce using rule 26 (literal -> STRING_CONSTANTS .)
    DELIM           reduce using rule 26 (literal -> STRING_CONSTANTS .)
    newline         reduce using rule 26 (literal -> STRING_CONSTANTS .)
    KEYWORD_end     reduce using rule 26 (literal -> STRING_CONSTANTS .)


state 321

    (23) class_mrhs -> literal .

    DELIM           reduce using rule 23 (class_mrhs -> literal .)
    newline         reduce using rule 23 (class_mrhs -> literal .)
    KEYWORD_end     reduce using rule 23 (class_mrhs -> literal .)


state 322

    (21) class_stmt -> class_mlhs EQUAL class_mrhs .

    DELIM           reduce using rule 21 (class_stmt -> class_mlhs EQUAL class_mrhs .)
    newline         reduce using rule 21 (class_stmt -> class_mlhs EQUAL class_mrhs .)
    KEYWORD_end     reduce using rule 21 (class_stmt -> class_mlhs EQUAL class_mrhs .)


state 323

    (28) literal -> CHAR_CONSTANTS .

    COMMA           reduce using rule 28 (literal -> CHAR_CONSTANTS .)
    DELIM           reduce using rule 28 (literal -> CHAR_CONSTANTS .)
    newline         reduce using rule 28 (literal -> CHAR_CONSTANTS .)
    KEYWORD_end     reduce using rule 28 (literal -> CHAR_CONSTANTS .)


state 324

    (19) class_stmts -> class_stmts terms class_stmt .

    DELIM           reduce using rule 19 (class_stmts -> class_stmts terms class_stmt .)
    newline         reduce using rule 19 (class_stmts -> class_stmts terms class_stmt .)
    KEYWORD_end     reduce using rule 19 (class_stmts -> class_stmts terms class_stmt .)


state 325

    (17) class_defn -> KEYWORD_class CONSTANTS newline class_stmts opt_terms KEYWORD_end .

    DELIM           reduce using rule 17 (class_defn -> KEYWORD_class CONSTANTS newline class_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 17 (class_defn -> KEYWORD_class CONSTANTS newline class_stmts opt_terms KEYWORD_end .)
    $end            reduce using rule 17 (class_defn -> KEYWORD_class CONSTANTS newline class_stmts opt_terms KEYWORD_end .)


state 326

    (33) class_func -> KEYWORD_def fname OPEN_PAREN . arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (35) class_func -> KEYWORD_def fname OPEN_PAREN . CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (55) arguments -> . arguments COMMA VARIABLES
    (56) arguments -> . arguments COMMA CONSTANTS
    (57) arguments -> . arguments COMMA func_arg_expr
    (58) arguments -> . VARIABLES
    (59) arguments -> . CONSTANTS
    (60) arguments -> . func_arg_expr
    (61) arguments -> . newline
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary

    CLOSE_PAREN     shift and go to state 344
    VARIABLES       shift and go to state 159
    CONSTANTS       shift and go to state 158
    newline         shift and go to state 160

    func_arg_expr                  shift and go to state 163
    arguments                      shift and go to state 343

state 327

    (34) class_func -> KEYWORD_def fname arguments . class_method_stmts opt_terms KEYWORD_end
    (55) arguments -> arguments . COMMA VARIABLES
    (56) arguments -> arguments . COMMA CONSTANTS
    (57) arguments -> arguments . COMMA func_arg_expr
    (36) class_method_stmts -> . class_method_stmt
    (37) class_method_stmts -> . class_method_stmts terms class_method_stmt
    (38) class_method_stmts -> . none
    (39) class_method_stmt -> . class_method_mlhs EQUAL class_method_mrhs
    (40) class_method_stmt -> . KEYWORD_return class_method_ret_arg
    (41) class_method_stmt -> . puts_stmt
    (209) none -> .
    (42) class_method_mlhs -> . class_method_mlhs terms SIGIL_AT
    (43) class_method_mlhs -> . SIGIL_AT
    (44) class_method_mlhs -> . SIGIL_DOUBLE_AT
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr

    COMMA           shift and go to state 212
    KEYWORD_return  shift and go to state 348
    DELIM           reduce using rule 209 (none -> .)
    newline         reduce using rule 209 (none -> .)
    KEYWORD_end     reduce using rule 209 (none -> .)
    SIGIL_AT        shift and go to state 346
    SIGIL_DOUBLE_AT shift and go to state 350
    KEYWORD_puts    shift and go to state 34

    class_method_stmt              shift and go to state 345
    none                           shift and go to state 352
    class_method_mlhs              shift and go to state 351
    puts_stmt                      shift and go to state 349
    class_method_stmts             shift and go to state 347

state 328

    (87) func_call_stmt -> MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN .

    KEYWORD_while   reduce using rule 87 (func_call_stmt -> MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    KEYWORD_until   reduce using rule 87 (func_call_stmt -> MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    DELIM           reduce using rule 87 (func_call_stmt -> MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    newline         reduce using rule 87 (func_call_stmt -> MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    KEYWORD_end     reduce using rule 87 (func_call_stmt -> MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    $end            reduce using rule 87 (func_call_stmt -> MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    KEYWORD_elsif   reduce using rule 87 (func_call_stmt -> MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    KEYWORD_else    reduce using rule 87 (func_call_stmt -> MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)


state 329

    (74) top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range . opt_do gen_stmts opt_terms KEYWORD_end
    (110) opt_do -> . KEYWORD_do
    (111) opt_do -> . newline

    KEYWORD_do      shift and go to state 139
    newline         shift and go to state 138

    opt_do                         shift and go to state 353

state 330

    (118) for_range -> INT_CONSTANTS DOUBLEDOT INT_CONSTANTS .

    KEYWORD_do      reduce using rule 118 (for_range -> INT_CONSTANTS DOUBLEDOT INT_CONSTANTS .)
    newline         reduce using rule 118 (for_range -> INT_CONSTANTS DOUBLEDOT INT_CONSTANTS .)


state 331

    (120) for_range -> INT_CONSTANTS TRIPLEDOT INT_CONSTANTS .

    KEYWORD_do      reduce using rule 120 (for_range -> INT_CONSTANTS TRIPLEDOT INT_CONSTANTS .)
    newline         reduce using rule 120 (for_range -> INT_CONSTANTS TRIPLEDOT INT_CONSTANTS .)


state 332

    (117) for_range -> OPEN_PAREN INT_CONSTANTS DOUBLEDOT . INT_CONSTANTS CLOSE_PAREN

    INT_CONSTANTS   shift and go to state 354


state 333

    (119) for_range -> OPEN_PAREN INT_CONSTANTS TRIPLEDOT . INT_CONSTANTS CLOSE_PAREN

    INT_CONSTANTS   shift and go to state 355


state 334

    (75) top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts . opt_terms KEYWORD_end
    (77) gen_stmts -> gen_stmts . terms top_stmt
    (203) opt_terms -> . none
    (204) opt_terms -> . terms
    (205) terms -> . term
    (206) terms -> . terms term
    (209) none -> .
    (207) term -> . DELIM
    (208) term -> . newline

    KEYWORD_end     reduce using rule 209 (none -> .)
    DELIM           shift and go to state 86
    newline         shift and go to state 85

    none                           shift and go to state 87
    terms                          shift and go to state 179
    term                           shift and go to state 83
    opt_terms                      shift and go to state 356

state 335

    (14) func_defn -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN func_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 357


state 336

    (15) func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN func_stmts opt_terms KEYWORD_end .

    DELIM           reduce using rule 15 (func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN func_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 15 (func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN func_stmts opt_terms KEYWORD_end .)
    $end            reduce using rule 15 (func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN func_stmts opt_terms KEYWORD_end .)


state 337

    (107) elsif_tail -> KEYWORD_elsif expr3 . opt_then gen_stmts opt_terms elsif_tail
    (157) expr3 -> expr3 . LOGICALOR expr4
    (108) opt_then -> . KEYWORD_then
    (109) opt_then -> . newline

    LOGICALOR       shift and go to state 110
    KEYWORD_then    shift and go to state 169
    newline         shift and go to state 168

    opt_then                       shift and go to state 358

state 338

    (105) opt_else_stmt -> none .

    KEYWORD_end     reduce using rule 105 (opt_else_stmt -> none .)


state 339

    (104) opt_else_stmt -> KEYWORD_else . gen_stmts opt_terms
    (76) gen_stmts -> . top_stmt
    (77) gen_stmts -> . gen_stmts terms top_stmt
    (78) gen_stmts -> . none
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (209) none -> .
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . MLHS EQUAL MRHS
    (152) expr1 -> . expr3 QUESTION_MARK expr2 COLON expr2
    (153) expr1 -> . expr2
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . MLHS EQUAL fname func_ret_arg
    (125) MLHS -> . mlhs
    (126) MLHS -> . MLHS COMMA mlhs
    (157) expr3 -> . expr3 LOGICALOR expr4
    (158) expr3 -> . expr4
    (154) expr2 -> . expr7 DOUBLEDOT expr7
    (155) expr2 -> . expr7 TRIPLEDOT expr7
    (156) expr2 -> . expr3
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (129) mlhs -> . VARIABLES
    (130) mlhs -> . CONSTANTS
    (131) mlhs -> . array
    (159) expr4 -> . expr4 LOGICALAND expr5
    (160) expr4 -> . expr5
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (161) expr5 -> . expr6 IFF expr6
    (162) expr5 -> . expr6 DOUBLEEQUAL expr6
    (163) expr5 -> . expr6 TRIPLEEQUAL expr6
    (164) expr5 -> . expr6 NOTEQUAL expr6
    (165) expr5 -> . expr6
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (166) expr6 -> . expr7 LESSEQUAL expr7
    (167) expr6 -> . expr7 LESS expr7
    (168) expr6 -> . expr7 GREATER expr7
    (169) expr6 -> . expr7 GREATEREQUAL expr7
    (170) expr6 -> . expr7
    (171) expr6 -> . BOOLEAN_CONSTANTS
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP

    KEYWORD_if      shift and go to state 28
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 39
    KEYWORD_until   shift and go to state 26
    KEYWORD_for     shift and go to state 54
    DELIM           reduce using rule 209 (none -> .)
    newline         reduce using rule 209 (none -> .)
    KEYWORD_end     reduce using rule 209 (none -> .)
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)
    KEYWORD_puts    shift and go to state 34
    KEYWORD_break   shift and go to state 50
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 24
    VARIABLES       shift and go to state 106
    CONSTANTS       shift and go to state 105
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 31
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30

    mlhs                           shift and go to state 2
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    array                          shift and go to state 27
    expr2                          shift and go to state 42
    expr3                          shift and go to state 43
    expr1                          shift and go to state 44
    expr6                          shift and go to state 45
    expr7                          shift and go to state 7
    puts_stmt                      shift and go to state 19
    expr5                          shift and go to state 47
    func_call_stmt                 shift and go to state 33
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    expr4                          shift and go to state 8
    fname                          shift and go to state 46
    exit_stmt                      shift and go to state 51
    MLHS                           shift and go to state 52
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 21
    uexpr                          shift and go to state 10
    none                           shift and go to state 107
    gen_stmts                      shift and go to state 359
    expr                           shift and go to state 36
    top_stmt                       shift and go to state 104

state 340

    (67) top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt . KEYWORD_end

    KEYWORD_end     shift and go to state 360


state 341

    (136) mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .

    COMMA           reduce using rule 136 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    KEYWORD_while   reduce using rule 136 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    KEYWORD_until   reduce using rule 136 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    DELIM           reduce using rule 136 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    newline         reduce using rule 136 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    $end            reduce using rule 136 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    KEYWORD_end     reduce using rule 136 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    KEYWORD_elsif   reduce using rule 136 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    KEYWORD_else    reduce using rule 136 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)


state 342

    (139) mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .

    COMMA           reduce using rule 139 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    KEYWORD_while   reduce using rule 139 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    KEYWORD_until   reduce using rule 139 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    DELIM           reduce using rule 139 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    newline         reduce using rule 139 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    $end            reduce using rule 139 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    KEYWORD_end     reduce using rule 139 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    KEYWORD_elsif   reduce using rule 139 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    KEYWORD_else    reduce using rule 139 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)


state 343

    (33) class_func -> KEYWORD_def fname OPEN_PAREN arguments . CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (55) arguments -> arguments . COMMA VARIABLES
    (56) arguments -> arguments . COMMA CONSTANTS
    (57) arguments -> arguments . COMMA func_arg_expr

    CLOSE_PAREN     shift and go to state 361
    COMMA           shift and go to state 212


state 344

    (35) class_func -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN . class_method_stmts opt_terms KEYWORD_end
    (36) class_method_stmts -> . class_method_stmt
    (37) class_method_stmts -> . class_method_stmts terms class_method_stmt
    (38) class_method_stmts -> . none
    (39) class_method_stmt -> . class_method_mlhs EQUAL class_method_mrhs
    (40) class_method_stmt -> . KEYWORD_return class_method_ret_arg
    (41) class_method_stmt -> . puts_stmt
    (209) none -> .
    (42) class_method_mlhs -> . class_method_mlhs terms SIGIL_AT
    (43) class_method_mlhs -> . SIGIL_AT
    (44) class_method_mlhs -> . SIGIL_DOUBLE_AT
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr

    KEYWORD_return  shift and go to state 348
    DELIM           reduce using rule 209 (none -> .)
    newline         reduce using rule 209 (none -> .)
    KEYWORD_end     reduce using rule 209 (none -> .)
    SIGIL_AT        shift and go to state 346
    SIGIL_DOUBLE_AT shift and go to state 350
    KEYWORD_puts    shift and go to state 34

    class_method_stmt              shift and go to state 345
    none                           shift and go to state 352
    class_method_mlhs              shift and go to state 351
    puts_stmt                      shift and go to state 349
    class_method_stmts             shift and go to state 362

state 345

    (36) class_method_stmts -> class_method_stmt .

    DELIM           reduce using rule 36 (class_method_stmts -> class_method_stmt .)
    newline         reduce using rule 36 (class_method_stmts -> class_method_stmt .)
    KEYWORD_end     reduce using rule 36 (class_method_stmts -> class_method_stmt .)


state 346

    (43) class_method_mlhs -> SIGIL_AT .

    EQUAL           reduce using rule 43 (class_method_mlhs -> SIGIL_AT .)
    DELIM           reduce using rule 43 (class_method_mlhs -> SIGIL_AT .)
    newline         reduce using rule 43 (class_method_mlhs -> SIGIL_AT .)


state 347

    (34) class_func -> KEYWORD_def fname arguments class_method_stmts . opt_terms KEYWORD_end
    (37) class_method_stmts -> class_method_stmts . terms class_method_stmt
    (203) opt_terms -> . none
    (204) opt_terms -> . terms
    (205) terms -> . term
    (206) terms -> . terms term
    (209) none -> .
    (207) term -> . DELIM
    (208) term -> . newline

    KEYWORD_end     reduce using rule 209 (none -> .)
    DELIM           shift and go to state 86
    newline         shift and go to state 85

    none                           shift and go to state 87
    terms                          shift and go to state 363
    term                           shift and go to state 83
    opt_terms                      shift and go to state 364

state 348

    (40) class_method_stmt -> KEYWORD_return . class_method_ret_arg
    (47) class_method_ret_arg -> . class_method_arg_expr
    (48) class_method_ret_arg -> . literal
    (49) class_method_ret_arg -> . class_method_ret_arg COMMA class_method_arg_expr
    (50) class_method_ret_arg -> . class_method_ret_arg COMMA literal
    (51) class_method_arg_expr -> . SIGIL_AT EQUAL literal
    (52) class_method_arg_expr -> . SIGIL_DOUBLE_AT EQUAL literal
    (24) literal -> . INT_CONSTANTS
    (25) literal -> . FLOAT_CONSTANTS
    (26) literal -> . STRING_CONSTANTS
    (27) literal -> . BOOLEAN_CONSTANTS
    (28) literal -> . CHAR_CONSTANTS
    (29) literal -> . SIGIL_AT
    (30) literal -> . SIGIL_DOUBLE_AT

    SIGIL_AT        shift and go to state 365
    SIGIL_DOUBLE_AT shift and go to state 366
    INT_CONSTANTS   shift and go to state 317
    FLOAT_CONSTANTS shift and go to state 318
    STRING_CONSTANTS shift and go to state 320
    BOOLEAN_CONSTANTS shift and go to state 316
    CHAR_CONSTANTS  shift and go to state 323

    class_method_arg_expr          shift and go to state 369
    literal                        shift and go to state 367
    class_method_ret_arg           shift and go to state 368

state 349

    (41) class_method_stmt -> puts_stmt .

    DELIM           reduce using rule 41 (class_method_stmt -> puts_stmt .)
    newline         reduce using rule 41 (class_method_stmt -> puts_stmt .)
    KEYWORD_end     reduce using rule 41 (class_method_stmt -> puts_stmt .)


state 350

    (44) class_method_mlhs -> SIGIL_DOUBLE_AT .

    EQUAL           reduce using rule 44 (class_method_mlhs -> SIGIL_DOUBLE_AT .)
    DELIM           reduce using rule 44 (class_method_mlhs -> SIGIL_DOUBLE_AT .)
    newline         reduce using rule 44 (class_method_mlhs -> SIGIL_DOUBLE_AT .)


state 351

    (39) class_method_stmt -> class_method_mlhs . EQUAL class_method_mrhs
    (42) class_method_mlhs -> class_method_mlhs . terms SIGIL_AT
    (205) terms -> . term
    (206) terms -> . terms term
    (207) term -> . DELIM
    (208) term -> . newline

    EQUAL           shift and go to state 371
    DELIM           shift and go to state 86
    newline         shift and go to state 85

    term                           shift and go to state 83
    terms                          shift and go to state 370

state 352

    (38) class_method_stmts -> none .

    DELIM           reduce using rule 38 (class_method_stmts -> none .)
    newline         reduce using rule 38 (class_method_stmts -> none .)
    KEYWORD_end     reduce using rule 38 (class_method_stmts -> none .)


state 353

    (74) top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do . gen_stmts opt_terms KEYWORD_end
    (76) gen_stmts -> . top_stmt
    (77) gen_stmts -> . gen_stmts terms top_stmt
    (78) gen_stmts -> . none
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (209) none -> .
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . MLHS EQUAL MRHS
    (152) expr1 -> . expr3 QUESTION_MARK expr2 COLON expr2
    (153) expr1 -> . expr2
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . MLHS EQUAL fname func_ret_arg
    (125) MLHS -> . mlhs
    (126) MLHS -> . MLHS COMMA mlhs
    (157) expr3 -> . expr3 LOGICALOR expr4
    (158) expr3 -> . expr4
    (154) expr2 -> . expr7 DOUBLEDOT expr7
    (155) expr2 -> . expr7 TRIPLEDOT expr7
    (156) expr2 -> . expr3
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (129) mlhs -> . VARIABLES
    (130) mlhs -> . CONSTANTS
    (131) mlhs -> . array
    (159) expr4 -> . expr4 LOGICALAND expr5
    (160) expr4 -> . expr5
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (161) expr5 -> . expr6 IFF expr6
    (162) expr5 -> . expr6 DOUBLEEQUAL expr6
    (163) expr5 -> . expr6 TRIPLEEQUAL expr6
    (164) expr5 -> . expr6 NOTEQUAL expr6
    (165) expr5 -> . expr6
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (166) expr6 -> . expr7 LESSEQUAL expr7
    (167) expr6 -> . expr7 LESS expr7
    (168) expr6 -> . expr7 GREATER expr7
    (169) expr6 -> . expr7 GREATEREQUAL expr7
    (170) expr6 -> . expr7
    (171) expr6 -> . BOOLEAN_CONSTANTS
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP

    KEYWORD_if      shift and go to state 28
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 39
    KEYWORD_until   shift and go to state 26
    KEYWORD_for     shift and go to state 54
    DELIM           reduce using rule 209 (none -> .)
    newline         reduce using rule 209 (none -> .)
    KEYWORD_end     reduce using rule 209 (none -> .)
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)
    KEYWORD_puts    shift and go to state 34
    KEYWORD_break   shift and go to state 50
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 24
    VARIABLES       shift and go to state 106
    CONSTANTS       shift and go to state 105
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 31
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30

    mlhs                           shift and go to state 2
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    array                          shift and go to state 27
    expr2                          shift and go to state 42
    expr3                          shift and go to state 43
    expr1                          shift and go to state 44
    expr6                          shift and go to state 45
    expr7                          shift and go to state 7
    puts_stmt                      shift and go to state 19
    expr5                          shift and go to state 47
    func_call_stmt                 shift and go to state 33
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    expr4                          shift and go to state 8
    fname                          shift and go to state 46
    exit_stmt                      shift and go to state 51
    MLHS                           shift and go to state 52
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 21
    uexpr                          shift and go to state 10
    none                           shift and go to state 107
    gen_stmts                      shift and go to state 372
    expr                           shift and go to state 36
    top_stmt                       shift and go to state 104

state 354

    (117) for_range -> OPEN_PAREN INT_CONSTANTS DOUBLEDOT INT_CONSTANTS . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 373


state 355

    (119) for_range -> OPEN_PAREN INT_CONSTANTS TRIPLEDOT INT_CONSTANTS . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 374


state 356

    (75) top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 375


state 357

    (14) func_defn -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN func_stmts opt_terms KEYWORD_end .

    DELIM           reduce using rule 14 (func_defn -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN func_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 14 (func_defn -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN func_stmts opt_terms KEYWORD_end .)
    $end            reduce using rule 14 (func_defn -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN func_stmts opt_terms KEYWORD_end .)


state 358

    (107) elsif_tail -> KEYWORD_elsif expr3 opt_then . gen_stmts opt_terms elsif_tail
    (76) gen_stmts -> . top_stmt
    (77) gen_stmts -> . gen_stmts terms top_stmt
    (78) gen_stmts -> . none
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (209) none -> .
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . MLHS EQUAL MRHS
    (152) expr1 -> . expr3 QUESTION_MARK expr2 COLON expr2
    (153) expr1 -> . expr2
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . MLHS EQUAL fname func_ret_arg
    (125) MLHS -> . mlhs
    (126) MLHS -> . MLHS COMMA mlhs
    (157) expr3 -> . expr3 LOGICALOR expr4
    (158) expr3 -> . expr4
    (154) expr2 -> . expr7 DOUBLEDOT expr7
    (155) expr2 -> . expr7 TRIPLEDOT expr7
    (156) expr2 -> . expr3
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (129) mlhs -> . VARIABLES
    (130) mlhs -> . CONSTANTS
    (131) mlhs -> . array
    (159) expr4 -> . expr4 LOGICALAND expr5
    (160) expr4 -> . expr5
    (172) expr7 -> . expr7 BITXOR expr8
    (173) expr7 -> . expr7 PIPE expr8
    (174) expr7 -> . expr8
    (195) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (196) array -> . VARIABLES OPEN_BRACKET expr7 DOUBLEDOT expr7 CLOSE_BRACKET
    (197) array -> . VARIABLES OPEN_BRACKET expr7 TRIPLEDOT expr7 CLOSE_BRACKET
    (161) expr5 -> . expr6 IFF expr6
    (162) expr5 -> . expr6 DOUBLEEQUAL expr6
    (163) expr5 -> . expr6 TRIPLEEQUAL expr6
    (164) expr5 -> . expr6 NOTEQUAL expr6
    (165) expr5 -> . expr6
    (175) expr8 -> . expr8 BITAND expr9
    (176) expr8 -> . expr9
    (166) expr6 -> . expr7 LESSEQUAL expr7
    (167) expr6 -> . expr7 LESS expr7
    (168) expr6 -> . expr7 GREATER expr7
    (169) expr6 -> . expr7 GREATEREQUAL expr7
    (170) expr6 -> . expr7
    (171) expr6 -> . BOOLEAN_CONSTANTS
    (177) expr9 -> . expr9 SHIFTL expr10
    (178) expr9 -> . expr9 SHIFTR expr10
    (179) expr9 -> . expr10
    (180) expr10 -> . expr10 PLUS expr11
    (181) expr10 -> . expr10 MINUS expr11
    (182) expr10 -> . expr11
    (183) expr11 -> . expr11 MULTIPLY expr12
    (184) expr11 -> . expr11 DIV expr12
    (185) expr11 -> . expr11 MOD expr12
    (186) expr11 -> . expr12
    (187) expr12 -> . expr13 DOUBLESTAR expr12
    (188) expr12 -> . expr13
    (189) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (190) expr13 -> . uexpr INT_CONSTANTS
    (191) expr13 -> . uexpr FLOAT_CONSTANTS
    (192) expr13 -> . CONSTANTS
    (193) expr13 -> . VARIABLES
    (194) expr13 -> . array
    (198) uexpr -> . none
    (199) uexpr -> . PLUS
    (200) uexpr -> . MINUS
    (201) uexpr -> . BITNOT
    (202) uexpr -> . BITCOMP

    KEYWORD_if      shift and go to state 28
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 39
    KEYWORD_until   shift and go to state 26
    KEYWORD_for     shift and go to state 54
    DELIM           reduce using rule 209 (none -> .)
    newline         reduce using rule 209 (none -> .)
    KEYWORD_elsif   reduce using rule 209 (none -> .)
    KEYWORD_else    reduce using rule 209 (none -> .)
    KEYWORD_end     reduce using rule 209 (none -> .)
    INT_CONSTANTS   reduce using rule 209 (none -> .)
    FLOAT_CONSTANTS reduce using rule 209 (none -> .)
    KEYWORD_puts    shift and go to state 34
    KEYWORD_break   shift and go to state 50
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 24
    VARIABLES       shift and go to state 106
    CONSTANTS       shift and go to state 105
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 31
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 41
    BITCOMP         shift and go to state 30

    mlhs                           shift and go to state 2
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr12                         shift and go to state 16
    expr13                         shift and go to state 17
    array                          shift and go to state 27
    expr2                          shift and go to state 42
    expr3                          shift and go to state 43
    expr1                          shift and go to state 44
    expr6                          shift and go to state 45
    expr7                          shift and go to state 7
    puts_stmt                      shift and go to state 19
    expr5                          shift and go to state 47
    func_call_stmt                 shift and go to state 33
    expr8                          shift and go to state 48
    expr9                          shift and go to state 49
    expr4                          shift and go to state 8
    fname                          shift and go to state 46
    exit_stmt                      shift and go to state 51
    MLHS                           shift and go to state 52
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 21
    uexpr                          shift and go to state 10
    none                           shift and go to state 107
    gen_stmts                      shift and go to state 376
    expr                           shift and go to state 36
    top_stmt                       shift and go to state 104

state 359

    (104) opt_else_stmt -> KEYWORD_else gen_stmts . opt_terms
    (77) gen_stmts -> gen_stmts . terms top_stmt
    (203) opt_terms -> . none
    (204) opt_terms -> . terms
    (205) terms -> . term
    (206) terms -> . terms term
    (209) none -> .
    (207) term -> . DELIM
    (208) term -> . newline

    KEYWORD_end     reduce using rule 209 (none -> .)
    DELIM           shift and go to state 86
    newline         shift and go to state 85

    term                           shift and go to state 83
    terms                          shift and go to state 179
    none                           shift and go to state 87
    opt_terms                      shift and go to state 377

state 360

    (67) top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end .

    KEYWORD_while   reduce using rule 67 (top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end .)
    KEYWORD_until   reduce using rule 67 (top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end .)
    DELIM           reduce using rule 67 (top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end .)
    newline         reduce using rule 67 (top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end .)
    KEYWORD_end     reduce using rule 67 (top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end .)
    KEYWORD_elsif   reduce using rule 67 (top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end .)
    KEYWORD_else    reduce using rule 67 (top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end .)
    $end            reduce using rule 67 (top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end .)


state 361

    (33) class_func -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN . class_method_stmts opt_terms KEYWORD_end
    (36) class_method_stmts -> . class_method_stmt
    (37) class_method_stmts -> . class_method_stmts terms class_method_stmt
    (38) class_method_stmts -> . none
    (39) class_method_stmt -> . class_method_mlhs EQUAL class_method_mrhs
    (40) class_method_stmt -> . KEYWORD_return class_method_ret_arg
    (41) class_method_stmt -> . puts_stmt
    (209) none -> .
    (42) class_method_mlhs -> . class_method_mlhs terms SIGIL_AT
    (43) class_method_mlhs -> . SIGIL_AT
    (44) class_method_mlhs -> . SIGIL_DOUBLE_AT
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr

    KEYWORD_return  shift and go to state 348
    DELIM           reduce using rule 209 (none -> .)
    newline         reduce using rule 209 (none -> .)
    KEYWORD_end     reduce using rule 209 (none -> .)
    SIGIL_AT        shift and go to state 346
    SIGIL_DOUBLE_AT shift and go to state 350
    KEYWORD_puts    shift and go to state 34

    class_method_stmt              shift and go to state 345
    none                           shift and go to state 352
    class_method_mlhs              shift and go to state 351
    puts_stmt                      shift and go to state 349
    class_method_stmts             shift and go to state 378

state 362

    (35) class_func -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts . opt_terms KEYWORD_end
    (37) class_method_stmts -> class_method_stmts . terms class_method_stmt
    (203) opt_terms -> . none
    (204) opt_terms -> . terms
    (205) terms -> . term
    (206) terms -> . terms term
    (209) none -> .
    (207) term -> . DELIM
    (208) term -> . newline

    KEYWORD_end     reduce using rule 209 (none -> .)
    DELIM           shift and go to state 86
    newline         shift and go to state 85

    none                           shift and go to state 87
    terms                          shift and go to state 363
    opt_terms                      shift and go to state 379
    term                           shift and go to state 83

state 363

    (37) class_method_stmts -> class_method_stmts terms . class_method_stmt
    (204) opt_terms -> terms .
    (206) terms -> terms . term
    (39) class_method_stmt -> . class_method_mlhs EQUAL class_method_mrhs
    (40) class_method_stmt -> . KEYWORD_return class_method_ret_arg
    (41) class_method_stmt -> . puts_stmt
    (207) term -> . DELIM
    (208) term -> . newline
    (42) class_method_mlhs -> . class_method_mlhs terms SIGIL_AT
    (43) class_method_mlhs -> . SIGIL_AT
    (44) class_method_mlhs -> . SIGIL_DOUBLE_AT
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr

    KEYWORD_end     reduce using rule 204 (opt_terms -> terms .)
    KEYWORD_return  shift and go to state 348
    DELIM           shift and go to state 86
    newline         shift and go to state 85
    SIGIL_AT        shift and go to state 346
    SIGIL_DOUBLE_AT shift and go to state 350
    KEYWORD_puts    shift and go to state 34

    class_method_stmt              shift and go to state 380
    term                           shift and go to state 165
    puts_stmt                      shift and go to state 349
    class_method_mlhs              shift and go to state 351

state 364

    (34) class_func -> KEYWORD_def fname arguments class_method_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 381


state 365

    (51) class_method_arg_expr -> SIGIL_AT . EQUAL literal
    (29) literal -> SIGIL_AT .

    EQUAL           shift and go to state 382
    COMMA           reduce using rule 29 (literal -> SIGIL_AT .)
    DELIM           reduce using rule 29 (literal -> SIGIL_AT .)
    newline         reduce using rule 29 (literal -> SIGIL_AT .)
    KEYWORD_end     reduce using rule 29 (literal -> SIGIL_AT .)


state 366

    (52) class_method_arg_expr -> SIGIL_DOUBLE_AT . EQUAL literal
    (30) literal -> SIGIL_DOUBLE_AT .

    EQUAL           shift and go to state 383
    COMMA           reduce using rule 30 (literal -> SIGIL_DOUBLE_AT .)
    DELIM           reduce using rule 30 (literal -> SIGIL_DOUBLE_AT .)
    newline         reduce using rule 30 (literal -> SIGIL_DOUBLE_AT .)
    KEYWORD_end     reduce using rule 30 (literal -> SIGIL_DOUBLE_AT .)


state 367

    (48) class_method_ret_arg -> literal .

    COMMA           reduce using rule 48 (class_method_ret_arg -> literal .)
    DELIM           reduce using rule 48 (class_method_ret_arg -> literal .)
    newline         reduce using rule 48 (class_method_ret_arg -> literal .)
    KEYWORD_end     reduce using rule 48 (class_method_ret_arg -> literal .)


state 368

    (40) class_method_stmt -> KEYWORD_return class_method_ret_arg .
    (49) class_method_ret_arg -> class_method_ret_arg . COMMA class_method_arg_expr
    (50) class_method_ret_arg -> class_method_ret_arg . COMMA literal

    DELIM           reduce using rule 40 (class_method_stmt -> KEYWORD_return class_method_ret_arg .)
    newline         reduce using rule 40 (class_method_stmt -> KEYWORD_return class_method_ret_arg .)
    KEYWORD_end     reduce using rule 40 (class_method_stmt -> KEYWORD_return class_method_ret_arg .)
    COMMA           shift and go to state 384


state 369

    (47) class_method_ret_arg -> class_method_arg_expr .

    COMMA           reduce using rule 47 (class_method_ret_arg -> class_method_arg_expr .)
    DELIM           reduce using rule 47 (class_method_ret_arg -> class_method_arg_expr .)
    newline         reduce using rule 47 (class_method_ret_arg -> class_method_arg_expr .)
    KEYWORD_end     reduce using rule 47 (class_method_ret_arg -> class_method_arg_expr .)


state 370

    (42) class_method_mlhs -> class_method_mlhs terms . SIGIL_AT
    (206) terms -> terms . term
    (207) term -> . DELIM
    (208) term -> . newline

    SIGIL_AT        shift and go to state 385
    DELIM           shift and go to state 86
    newline         shift and go to state 85

    term                           shift and go to state 165

state 371

    (39) class_method_stmt -> class_method_mlhs EQUAL . class_method_mrhs
    (45) class_method_mrhs -> . literal
    (46) class_method_mrhs -> . VARIABLES
    (24) literal -> . INT_CONSTANTS
    (25) literal -> . FLOAT_CONSTANTS
    (26) literal -> . STRING_CONSTANTS
    (27) literal -> . BOOLEAN_CONSTANTS
    (28) literal -> . CHAR_CONSTANTS
    (29) literal -> . SIGIL_AT
    (30) literal -> . SIGIL_DOUBLE_AT

    VARIABLES       shift and go to state 387
    INT_CONSTANTS   shift and go to state 317
    FLOAT_CONSTANTS shift and go to state 318
    STRING_CONSTANTS shift and go to state 320
    BOOLEAN_CONSTANTS shift and go to state 316
    CHAR_CONSTANTS  shift and go to state 323
    SIGIL_AT        shift and go to state 315
    SIGIL_DOUBLE_AT shift and go to state 319

    class_method_mrhs              shift and go to state 386
    literal                        shift and go to state 388

state 372

    (74) top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts . opt_terms KEYWORD_end
    (77) gen_stmts -> gen_stmts . terms top_stmt
    (203) opt_terms -> . none
    (204) opt_terms -> . terms
    (205) terms -> . term
    (206) terms -> . terms term
    (209) none -> .
    (207) term -> . DELIM
    (208) term -> . newline

    KEYWORD_end     reduce using rule 209 (none -> .)
    DELIM           shift and go to state 86
    newline         shift and go to state 85

    none                           shift and go to state 87
    terms                          shift and go to state 179
    term                           shift and go to state 83
    opt_terms                      shift and go to state 389

state 373

    (117) for_range -> OPEN_PAREN INT_CONSTANTS DOUBLEDOT INT_CONSTANTS CLOSE_PAREN .

    KEYWORD_do      reduce using rule 117 (for_range -> OPEN_PAREN INT_CONSTANTS DOUBLEDOT INT_CONSTANTS CLOSE_PAREN .)
    newline         reduce using rule 117 (for_range -> OPEN_PAREN INT_CONSTANTS DOUBLEDOT INT_CONSTANTS CLOSE_PAREN .)


state 374

    (119) for_range -> OPEN_PAREN INT_CONSTANTS TRIPLEDOT INT_CONSTANTS CLOSE_PAREN .

    KEYWORD_do      reduce using rule 119 (for_range -> OPEN_PAREN INT_CONSTANTS TRIPLEDOT INT_CONSTANTS CLOSE_PAREN .)
    newline         reduce using rule 119 (for_range -> OPEN_PAREN INT_CONSTANTS TRIPLEDOT INT_CONSTANTS CLOSE_PAREN .)


state 375

    (75) top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .

    KEYWORD_while   reduce using rule 75 (top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_until   reduce using rule 75 (top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    DELIM           reduce using rule 75 (top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 75 (top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_end     reduce using rule 75 (top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_elsif   reduce using rule 75 (top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_else    reduce using rule 75 (top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    $end            reduce using rule 75 (top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)


state 376

    (107) elsif_tail -> KEYWORD_elsif expr3 opt_then gen_stmts . opt_terms elsif_tail
    (77) gen_stmts -> gen_stmts . terms top_stmt
    (203) opt_terms -> . none
    (204) opt_terms -> . terms
    (205) terms -> . term
    (206) terms -> . terms term
    (209) none -> .
    (207) term -> . DELIM
    (208) term -> . newline

    KEYWORD_elsif   reduce using rule 209 (none -> .)
    KEYWORD_else    reduce using rule 209 (none -> .)
    KEYWORD_end     reduce using rule 209 (none -> .)
    DELIM           shift and go to state 86
    newline         shift and go to state 85

    none                           shift and go to state 87
    terms                          shift and go to state 179
    term                           shift and go to state 83
    opt_terms                      shift and go to state 390

state 377

    (104) opt_else_stmt -> KEYWORD_else gen_stmts opt_terms .

    KEYWORD_end     reduce using rule 104 (opt_else_stmt -> KEYWORD_else gen_stmts opt_terms .)


state 378

    (33) class_func -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts . opt_terms KEYWORD_end
    (37) class_method_stmts -> class_method_stmts . terms class_method_stmt
    (203) opt_terms -> . none
    (204) opt_terms -> . terms
    (205) terms -> . term
    (206) terms -> . terms term
    (209) none -> .
    (207) term -> . DELIM
    (208) term -> . newline

    KEYWORD_end     reduce using rule 209 (none -> .)
    DELIM           shift and go to state 86
    newline         shift and go to state 85

    none                           shift and go to state 87
    terms                          shift and go to state 363
    term                           shift and go to state 83
    opt_terms                      shift and go to state 391

state 379

    (35) class_func -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 392


state 380

    (37) class_method_stmts -> class_method_stmts terms class_method_stmt .

    DELIM           reduce using rule 37 (class_method_stmts -> class_method_stmts terms class_method_stmt .)
    newline         reduce using rule 37 (class_method_stmts -> class_method_stmts terms class_method_stmt .)
    KEYWORD_end     reduce using rule 37 (class_method_stmts -> class_method_stmts terms class_method_stmt .)


state 381

    (34) class_func -> KEYWORD_def fname arguments class_method_stmts opt_terms KEYWORD_end .

    DELIM           reduce using rule 34 (class_func -> KEYWORD_def fname arguments class_method_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 34 (class_func -> KEYWORD_def fname arguments class_method_stmts opt_terms KEYWORD_end .)
    KEYWORD_end     reduce using rule 34 (class_func -> KEYWORD_def fname arguments class_method_stmts opt_terms KEYWORD_end .)


state 382

    (51) class_method_arg_expr -> SIGIL_AT EQUAL . literal
    (24) literal -> . INT_CONSTANTS
    (25) literal -> . FLOAT_CONSTANTS
    (26) literal -> . STRING_CONSTANTS
    (27) literal -> . BOOLEAN_CONSTANTS
    (28) literal -> . CHAR_CONSTANTS
    (29) literal -> . SIGIL_AT
    (30) literal -> . SIGIL_DOUBLE_AT

    INT_CONSTANTS   shift and go to state 317
    FLOAT_CONSTANTS shift and go to state 318
    STRING_CONSTANTS shift and go to state 320
    BOOLEAN_CONSTANTS shift and go to state 316
    CHAR_CONSTANTS  shift and go to state 323
    SIGIL_AT        shift and go to state 315
    SIGIL_DOUBLE_AT shift and go to state 319

    literal                        shift and go to state 393

state 383

    (52) class_method_arg_expr -> SIGIL_DOUBLE_AT EQUAL . literal
    (24) literal -> . INT_CONSTANTS
    (25) literal -> . FLOAT_CONSTANTS
    (26) literal -> . STRING_CONSTANTS
    (27) literal -> . BOOLEAN_CONSTANTS
    (28) literal -> . CHAR_CONSTANTS
    (29) literal -> . SIGIL_AT
    (30) literal -> . SIGIL_DOUBLE_AT

    INT_CONSTANTS   shift and go to state 317
    FLOAT_CONSTANTS shift and go to state 318
    STRING_CONSTANTS shift and go to state 320
    BOOLEAN_CONSTANTS shift and go to state 316
    CHAR_CONSTANTS  shift and go to state 323
    SIGIL_AT        shift and go to state 315
    SIGIL_DOUBLE_AT shift and go to state 319

    literal                        shift and go to state 394

state 384

    (49) class_method_ret_arg -> class_method_ret_arg COMMA . class_method_arg_expr
    (50) class_method_ret_arg -> class_method_ret_arg COMMA . literal
    (51) class_method_arg_expr -> . SIGIL_AT EQUAL literal
    (52) class_method_arg_expr -> . SIGIL_DOUBLE_AT EQUAL literal
    (24) literal -> . INT_CONSTANTS
    (25) literal -> . FLOAT_CONSTANTS
    (26) literal -> . STRING_CONSTANTS
    (27) literal -> . BOOLEAN_CONSTANTS
    (28) literal -> . CHAR_CONSTANTS
    (29) literal -> . SIGIL_AT
    (30) literal -> . SIGIL_DOUBLE_AT

    SIGIL_AT        shift and go to state 365
    SIGIL_DOUBLE_AT shift and go to state 366
    INT_CONSTANTS   shift and go to state 317
    FLOAT_CONSTANTS shift and go to state 318
    STRING_CONSTANTS shift and go to state 320
    BOOLEAN_CONSTANTS shift and go to state 316
    CHAR_CONSTANTS  shift and go to state 323

    class_method_arg_expr          shift and go to state 396
    literal                        shift and go to state 395

state 385

    (42) class_method_mlhs -> class_method_mlhs terms SIGIL_AT .

    EQUAL           reduce using rule 42 (class_method_mlhs -> class_method_mlhs terms SIGIL_AT .)
    DELIM           reduce using rule 42 (class_method_mlhs -> class_method_mlhs terms SIGIL_AT .)
    newline         reduce using rule 42 (class_method_mlhs -> class_method_mlhs terms SIGIL_AT .)


state 386

    (39) class_method_stmt -> class_method_mlhs EQUAL class_method_mrhs .

    DELIM           reduce using rule 39 (class_method_stmt -> class_method_mlhs EQUAL class_method_mrhs .)
    newline         reduce using rule 39 (class_method_stmt -> class_method_mlhs EQUAL class_method_mrhs .)
    KEYWORD_end     reduce using rule 39 (class_method_stmt -> class_method_mlhs EQUAL class_method_mrhs .)


state 387

    (46) class_method_mrhs -> VARIABLES .

    DELIM           reduce using rule 46 (class_method_mrhs -> VARIABLES .)
    newline         reduce using rule 46 (class_method_mrhs -> VARIABLES .)
    KEYWORD_end     reduce using rule 46 (class_method_mrhs -> VARIABLES .)


state 388

    (45) class_method_mrhs -> literal .

    DELIM           reduce using rule 45 (class_method_mrhs -> literal .)
    newline         reduce using rule 45 (class_method_mrhs -> literal .)
    KEYWORD_end     reduce using rule 45 (class_method_mrhs -> literal .)


state 389

    (74) top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 397


state 390

    (107) elsif_tail -> KEYWORD_elsif expr3 opt_then gen_stmts opt_terms . elsif_tail
    (106) elsif_tail -> . none
    (107) elsif_tail -> . KEYWORD_elsif expr3 opt_then gen_stmts opt_terms elsif_tail
    (209) none -> .

    KEYWORD_elsif   shift and go to state 303
    KEYWORD_else    reduce using rule 209 (none -> .)
    KEYWORD_end     reduce using rule 209 (none -> .)

    none                           shift and go to state 302
    elsif_tail                     shift and go to state 398

state 391

    (33) class_func -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 399


state 392

    (35) class_func -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end .

    DELIM           reduce using rule 35 (class_func -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 35 (class_func -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end .)
    KEYWORD_end     reduce using rule 35 (class_func -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end .)


state 393

    (51) class_method_arg_expr -> SIGIL_AT EQUAL literal .

    COMMA           reduce using rule 51 (class_method_arg_expr -> SIGIL_AT EQUAL literal .)
    DELIM           reduce using rule 51 (class_method_arg_expr -> SIGIL_AT EQUAL literal .)
    newline         reduce using rule 51 (class_method_arg_expr -> SIGIL_AT EQUAL literal .)
    KEYWORD_end     reduce using rule 51 (class_method_arg_expr -> SIGIL_AT EQUAL literal .)


state 394

    (52) class_method_arg_expr -> SIGIL_DOUBLE_AT EQUAL literal .

    COMMA           reduce using rule 52 (class_method_arg_expr -> SIGIL_DOUBLE_AT EQUAL literal .)
    DELIM           reduce using rule 52 (class_method_arg_expr -> SIGIL_DOUBLE_AT EQUAL literal .)
    newline         reduce using rule 52 (class_method_arg_expr -> SIGIL_DOUBLE_AT EQUAL literal .)
    KEYWORD_end     reduce using rule 52 (class_method_arg_expr -> SIGIL_DOUBLE_AT EQUAL literal .)


state 395

    (50) class_method_ret_arg -> class_method_ret_arg COMMA literal .

    COMMA           reduce using rule 50 (class_method_ret_arg -> class_method_ret_arg COMMA literal .)
    DELIM           reduce using rule 50 (class_method_ret_arg -> class_method_ret_arg COMMA literal .)
    newline         reduce using rule 50 (class_method_ret_arg -> class_method_ret_arg COMMA literal .)
    KEYWORD_end     reduce using rule 50 (class_method_ret_arg -> class_method_ret_arg COMMA literal .)


state 396

    (49) class_method_ret_arg -> class_method_ret_arg COMMA class_method_arg_expr .

    COMMA           reduce using rule 49 (class_method_ret_arg -> class_method_ret_arg COMMA class_method_arg_expr .)
    DELIM           reduce using rule 49 (class_method_ret_arg -> class_method_ret_arg COMMA class_method_arg_expr .)
    newline         reduce using rule 49 (class_method_ret_arg -> class_method_ret_arg COMMA class_method_arg_expr .)
    KEYWORD_end     reduce using rule 49 (class_method_ret_arg -> class_method_ret_arg COMMA class_method_arg_expr .)


state 397

    (74) top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .

    KEYWORD_while   reduce using rule 74 (top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_until   reduce using rule 74 (top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    DELIM           reduce using rule 74 (top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 74 (top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_end     reduce using rule 74 (top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_elsif   reduce using rule 74 (top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_else    reduce using rule 74 (top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    $end            reduce using rule 74 (top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)


state 398

    (107) elsif_tail -> KEYWORD_elsif expr3 opt_then gen_stmts opt_terms elsif_tail .

    KEYWORD_else    reduce using rule 107 (elsif_tail -> KEYWORD_elsif expr3 opt_then gen_stmts opt_terms elsif_tail .)
    KEYWORD_end     reduce using rule 107 (elsif_tail -> KEYWORD_elsif expr3 opt_then gen_stmts opt_terms elsif_tail .)


state 399

    (33) class_func -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end .

    DELIM           reduce using rule 33 (class_func -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 33 (class_func -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end .)
    KEYWORD_end     reduce using rule 33 (class_func -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end .)

