Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    KEYWORD_unless
    BLOCK_END
    KEYWORD___ENCODING__
    BITANDEQUAL
    SQUOTES
    KEYWORD_END
    KEYWORD_self
    KEYWORD_when
    MINUSEQUAL
    KEYWORD_nil
    OR
    DIVEQUAL
    KEYWORD_or
    IFF
    LOGICALANDEQUAL
    KEYWORD_retry
    DOUBLESTAR
    KEYWORD_undef
    COLON
    SIGIL_DOLLAR
    DOUBLE_COLON
    DOUBLESTAREQUAL
    KEYWORD_false
    KEYWORD_definedQ
    SHIFTLEQUAL
    AND
    NOT
    KEYWORD_not
    KEYWORD_yield
    KEYWORD_ensure
    QUESTION_MARK
    MODEQUAL
    QUESTIONCOLON
    KEYWORD_true
    LOGICALOREQUAL
    KEYWORD___END__
    PLUSEQUAL
    KEYWORD_super
    KEYWORD_alias
    MULTIPLYEQUAL
    SHIFTREQUAL
    KEYWORD___LINE__
    KEYWORD_BEGIN
    BLOCK_BEGIN
    DQUOTES
    TRIPLEEQUAL
    PIPEEQUAL
    KEYWORD_and
    KEYWORD___FILE__
    KEYWORD_rescue
    KEYWORD_module
    DOLLAR
    BACK_SLASH
    KEYWORD_case
    BITXOREQUAL

Grammar

Rule 0     S' -> program
Rule 1     program -> top_top_compstmt
Rule 2     top_top_compstmt -> statements opt_terms
Rule 3     statements -> statement
Rule 4     statements -> statements terms statement
Rule 5     statement -> top_compstmt
Rule 6     statement -> func_defn
Rule 7     statement -> class_defn
Rule 8     statement -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
Rule 9     statement -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN
Rule 10    statement -> VARIABLES DOT VARIABLES arguments
Rule 11    statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
Rule 12    statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
Rule 13    statement -> CONSTANTS DOT KEYWORD_new arguments
Rule 14    func_defn -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN func_stmts opt_terms KEYWORD_end
Rule 15    func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN func_stmts opt_terms KEYWORD_end
Rule 16    func_defn -> KEYWORD_def fname arguments func_stmts opt_terms KEYWORD_end
Rule 17    class_defn -> KEYWORD_class CONSTANTS newline class_stmts opt_terms KEYWORD_end
Rule 18    class_stmts -> class_stmt
Rule 19    class_stmts -> class_stmts terms class_stmt
Rule 20    class_stmts -> none
Rule 21    class_stmt -> class_mlhs EQUAL class_mrhs
Rule 22    class_stmt -> class_func
Rule 23    class_mrhs -> literal
Rule 24    literal -> INT_CONSTANTS
Rule 25    literal -> FLOAT_CONSTANTS
Rule 26    literal -> STRING_CONSTANTS
Rule 27    literal -> BOOLEAN_CONSTANTS
Rule 28    literal -> CHAR_CONSTANTS
Rule 29    literal -> SIGIL_AT
Rule 30    literal -> SIGIL_DOUBLE_AT
Rule 31    class_mlhs -> class_mlhs terms SIGIL_DOUBLE_AT
Rule 32    class_mlhs -> SIGIL_DOUBLE_AT
Rule 33    class_func -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
Rule 34    class_func -> KEYWORD_def fname arguments class_method_stmts opt_terms KEYWORD_end
Rule 35    class_func -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
Rule 36    class_method_stmts -> class_method_stmt
Rule 37    class_method_stmts -> class_method_stmts terms class_method_stmt
Rule 38    class_method_stmts -> none
Rule 39    class_method_stmt -> class_method_mlhs EQUAL class_method_mrhs
Rule 40    class_method_stmt -> KEYWORD_return class_method_ret_arg
Rule 41    class_method_stmt -> puts_stmt
Rule 42    class_method_mlhs -> class_method_mlhs terms SIGIL_AT
Rule 43    class_method_mlhs -> SIGIL_AT
Rule 44    class_method_mlhs -> SIGIL_DOUBLE_AT
Rule 45    class_method_mrhs -> literal
Rule 46    class_method_mrhs -> VARIABLES
Rule 47    class_method_ret_arg -> class_method_arg_expr
Rule 48    class_method_ret_arg -> literal
Rule 49    class_method_ret_arg -> class_method_ret_arg COMMA class_method_arg_expr
Rule 50    class_method_ret_arg -> class_method_ret_arg COMMA literal
Rule 51    class_method_arg_expr -> SIGIL_AT EQUAL literal
Rule 52    class_method_arg_expr -> SIGIL_DOUBLE_AT EQUAL literal
Rule 53    fname -> VARIABLES
Rule 54    fname -> CONSTANTS
Rule 55    arguments -> arguments COMMA VARIABLES
Rule 56    arguments -> arguments COMMA CONSTANTS
Rule 57    arguments -> arguments COMMA func_arg_expr
Rule 58    arguments -> VARIABLES
Rule 59    arguments -> CONSTANTS
Rule 60    arguments -> func_arg_expr
Rule 61    arguments -> newline
Rule 62    func_arg_expr -> VARIABLES EQUAL primary
Rule 63    func_arg_expr -> CONSTANTS EQUAL primary
Rule 64    top_compstmt -> top_stmts
Rule 65    top_stmts -> top_stmt
Rule 66    top_stmt -> stmt
Rule 67    top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
Rule 68    top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
Rule 69    top_stmt -> top_stmt KEYWORD_while expr3
Rule 70    top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
Rule 71    top_stmt -> top_stmt KEYWORD_until expr3
Rule 72    top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
Rule 73    top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
Rule 74    top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
Rule 75    top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
Rule 76    gen_stmts -> top_stmt
Rule 77    gen_stmts -> gen_stmts terms top_stmt
Rule 78    gen_stmts -> none
Rule 79    stmt -> expr
Rule 80    stmt -> expr1
Rule 81    stmt -> puts_stmt
Rule 82    stmt -> loop_stmt
Rule 83    stmt -> exit_stmt
Rule 84    stmt -> func_call_stmt
Rule 85    func_call_stmt -> fname OPEN_PAREN func_ret_arg CLOSE_PAREN
Rule 86    func_call_stmt -> fname func_ret_arg
Rule 87    func_call_stmt -> mlhs EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
Rule 88    func_call_stmt -> mlhs EQUAL fname func_ret_arg
Rule 89    loop_stmt -> KEYWORD_break
Rule 90    loop_stmt -> KEYWORD_next
Rule 91    loop_stmt -> KEYWORD_redo
Rule 92    exit_stmt -> KEYWORD_exit
Rule 93    puts_stmt -> KEYWORD_puts mrhs
Rule 94    puts_stmt -> KEYWORD_puts expr
Rule 95    func_stmts -> func_stmt
Rule 96    func_stmts -> func_stmts terms func_stmt
Rule 97    func_stmts -> none
Rule 98    func_stmt -> top_stmt
Rule 99    func_stmt -> KEYWORD_return func_ret_arg
Rule 100   func_ret_arg -> func_arg_expr
Rule 101   func_ret_arg -> primary
Rule 102   func_ret_arg -> func_ret_arg COMMA func_arg_expr
Rule 103   func_ret_arg -> func_ret_arg COMMA primary
Rule 104   opt_else_stmt -> KEYWORD_else gen_stmts opt_terms
Rule 105   opt_else_stmt -> none
Rule 106   elsif_tail -> none
Rule 107   elsif_tail -> KEYWORD_elsif expr3 opt_then gen_stmts opt_terms elsif_tail
Rule 108   opt_then -> KEYWORD_then
Rule 109   opt_then -> newline
Rule 110   opt_do -> KEYWORD_do
Rule 111   opt_do -> newline
Rule 112   multi_var -> VARIABLES
Rule 113   multi_var -> CONSTANTS
Rule 114   multi_var -> array
Rule 115   multi_var -> multi_var COMMA VARIABLES
Rule 116   multi_var -> multi_var COMMA CONSTANTS
Rule 117   for_range -> OPEN_PAREN INT_CONSTANTS DOUBLEDOT INT_CONSTANTS CLOSE_PAREN
Rule 118   for_range -> INT_CONSTANTS DOUBLEDOT INT_CONSTANTS
Rule 119   for_range -> OPEN_PAREN INT_CONSTANTS TRIPLEDOT INT_CONSTANTS CLOSE_PAREN
Rule 120   for_range -> INT_CONSTANTS TRIPLEDOT INT_CONSTANTS
Rule 121   for_range -> VARIABLES
Rule 122   for_range -> array
Rule 123   for_range -> CONSTANTS
Rule 124   expr -> mlhs EQUAL mrhs
Rule 125   mlhs -> VARIABLES
Rule 126   mlhs -> CONSTANTS
Rule 127   mlhs -> array
Rule 128   mrhs -> expr1
Rule 129   mrhs -> str_expr
Rule 130   mrhs -> KEYWORD_gets
Rule 131   mrhs -> OPEN_BRACKET CLOSE_BRACKET
Rule 132   mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
Rule 133   mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN
Rule 134   mrhs -> VARIABLES DOT VARIABLES
Rule 135   mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
Rule 136   mrhs -> CONSTANTS DOT KEYWORD_new
Rule 137   mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
Rule 138   str_expr -> STRING_CONSTANTS
Rule 139   primary -> INT_CONSTANTS
Rule 140   primary -> FLOAT_CONSTANTS
Rule 141   primary -> STRING_CONSTANTS
Rule 142   primary -> CHAR_CONSTANTS
Rule 143   primary -> BOOLEAN_CONSTANTS
Rule 144   primary -> CONSTANTS
Rule 145   primary -> VARIABLES
Rule 146   primary -> array
Rule 147   expr1 -> expr3
Rule 148   expr3 -> expr3 LOGICALOR expr4
Rule 149   expr3 -> expr4
Rule 150   expr4 -> expr4 LOGICALAND expr5
Rule 151   expr4 -> expr5
Rule 152   expr5 -> expr6 DOUBLEEQUAL expr6
Rule 153   expr5 -> expr6 NOTEQUAL expr6
Rule 154   expr5 -> expr6
Rule 155   expr6 -> expr7 LESSEQUAL expr7
Rule 156   expr6 -> expr7 LESS expr7
Rule 157   expr6 -> expr7 GREATER expr7
Rule 158   expr6 -> expr7 GREATEREQUAL expr7
Rule 159   expr6 -> expr7
Rule 160   expr6 -> BOOLEAN_CONSTANTS
Rule 161   expr7 -> expr7 BITXOR expr8
Rule 162   expr7 -> expr7 PIPE expr8
Rule 163   expr7 -> expr8
Rule 164   expr8 -> expr8 BITAND expr9
Rule 165   expr8 -> expr9
Rule 166   expr9 -> expr9 SHIFTL expr10
Rule 167   expr9 -> expr9 SHIFTR expr10
Rule 168   expr9 -> expr10
Rule 169   expr10 -> expr10 PLUS expr11
Rule 170   expr10 -> expr10 MINUS expr11
Rule 171   expr10 -> expr11
Rule 172   expr11 -> expr11 MULTIPLY expr13
Rule 173   expr11 -> expr11 DIV expr13
Rule 174   expr11 -> expr11 MOD expr13
Rule 175   expr11 -> expr13
Rule 176   expr13 -> OPEN_PAREN expr1 CLOSE_PAREN
Rule 177   expr13 -> uexpr INT_CONSTANTS
Rule 178   expr13 -> uexpr FLOAT_CONSTANTS
Rule 179   expr13 -> CONSTANTS
Rule 180   expr13 -> VARIABLES
Rule 181   expr13 -> array
Rule 182   array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
Rule 183   uexpr -> none
Rule 184   uexpr -> PLUS
Rule 185   uexpr -> MINUS
Rule 186   uexpr -> BITNOT
Rule 187   uexpr -> BITCOMP
Rule 188   opt_terms -> none
Rule 189   opt_terms -> terms
Rule 190   terms -> term
Rule 191   terms -> terms term
Rule 192   term -> DELIM
Rule 193   term -> newline
Rule 194   none -> <empty>

Terminals, with rules where they appear

AND                  : 
BACK_SLASH           : 
BITAND               : 164
BITANDEQUAL          : 
BITCOMP              : 187
BITNOT               : 186
BITXOR               : 161
BITXOREQUAL          : 
BLOCK_BEGIN          : 
BLOCK_END            : 
BOOLEAN_CONSTANTS    : 27 143 160
CHAR_CONSTANTS       : 28 142
CLOSE_BRACKET        : 131 182
CLOSE_PAREN          : 8 9 11 12 14 15 33 35 74 85 87 117 119 132 133 135 137 176
COLON                : 
COMMA                : 49 50 55 56 57 102 103 115 116
CONSTANTS            : 11 12 13 17 54 56 59 63 113 116 123 126 135 136 137 144 179
DELIM                : 192
DIV                  : 173
DIVEQUAL             : 
DOLLAR               : 
DOT                  : 8 9 10 11 12 13 132 133 134 135 136 137
DOUBLEDOT            : 117 118
DOUBLEEQUAL          : 152
DOUBLESTAR           : 
DOUBLESTAREQUAL      : 
DOUBLE_COLON         : 
DQUOTES              : 
EQUAL                : 21 39 51 52 62 63 87 88 124
FLOAT_CONSTANTS      : 25 140 178
GREATER              : 157
GREATEREQUAL         : 158
IFF                  : 
INT_CONSTANTS        : 24 117 117 118 118 119 119 120 120 139 177
KEYWORD_BEGIN        : 
KEYWORD_END          : 
KEYWORD___ENCODING__ : 
KEYWORD___END__      : 
KEYWORD___FILE__     : 
KEYWORD___LINE__     : 
KEYWORD_alias        : 
KEYWORD_and          : 
KEYWORD_begin        : 70 73
KEYWORD_break        : 89
KEYWORD_case         : 
KEYWORD_class        : 17
KEYWORD_def          : 14 15 16 33 34 35
KEYWORD_definedQ     : 
KEYWORD_do           : 110
KEYWORD_else         : 104
KEYWORD_elsif        : 107
KEYWORD_end          : 14 15 16 17 33 34 35 67 68 70 72 73 74 75
KEYWORD_ensure       : 
KEYWORD_exit         : 92
KEYWORD_false        : 
KEYWORD_for          : 74 75
KEYWORD_gets         : 130
KEYWORD_if           : 67
KEYWORD_in           : 74 75
KEYWORD_module       : 
KEYWORD_new          : 11 12 13 135 136 137
KEYWORD_next         : 90
KEYWORD_nil          : 
KEYWORD_not          : 
KEYWORD_or           : 
KEYWORD_puts         : 93 94
KEYWORD_redo         : 91
KEYWORD_rescue       : 
KEYWORD_retry        : 
KEYWORD_return       : 40 99
KEYWORD_self         : 
KEYWORD_super        : 
KEYWORD_then         : 108
KEYWORD_true         : 
KEYWORD_undef        : 
KEYWORD_unless       : 
KEYWORD_until        : 71 72 73
KEYWORD_when         : 
KEYWORD_while        : 68 69 70
KEYWORD_yield        : 
LESS                 : 156
LESSEQUAL            : 155
LOGICALAND           : 150
LOGICALANDEQUAL      : 
LOGICALOR            : 148
LOGICALOREQUAL       : 
MINUS                : 170 185
MINUSEQUAL           : 
MOD                  : 174
MODEQUAL             : 
MULTIPLY             : 172
MULTIPLYEQUAL        : 
NOT                  : 
NOTEQUAL             : 153
OPEN_BRACKET         : 131 182
OPEN_PAREN           : 8 9 11 12 14 15 33 35 74 85 87 117 119 132 133 135 137 176
OR                   : 
PIPE                 : 162
PIPEEQUAL            : 
PLUS                 : 169 184
PLUSEQUAL            : 
QUESTIONCOLON        : 
QUESTION_MARK        : 
SHIFTL               : 166
SHIFTLEQUAL          : 
SHIFTR               : 167
SHIFTREQUAL          : 
SIGIL_AT             : 29 42 43 51
SIGIL_DOLLAR         : 
SIGIL_DOUBLE_AT      : 30 31 32 44 52
SQUOTES              : 
STRING_CONSTANTS     : 26 138 141
TRIPLEDOT            : 119 120
TRIPLEEQUAL          : 
VARIABLES            : 8 8 9 9 10 10 46 53 55 58 62 112 115 121 125 132 132 133 133 134 134 145 180 182
error                : 
newline              : 17 61 109 111 193

Nonterminals, with rules where they appear

arguments            : 8 10 11 13 14 16 33 34 55 56 57 132 135
array                : 114 122 127 146 181
class_defn           : 7
class_func           : 22
class_method_arg_expr : 47 49
class_method_mlhs    : 39 42
class_method_mrhs    : 39
class_method_ret_arg : 40 49 50
class_method_stmt    : 36 37
class_method_stmts   : 33 34 35 37
class_mlhs           : 21 31
class_mrhs           : 21
class_stmt           : 18 19
class_stmts          : 17 19
elsif_tail           : 67 107
exit_stmt            : 83
expr                 : 79 94
expr1                : 80 128 176
expr10               : 166 167 168 169 170
expr11               : 169 170 171 172 173 174
expr13               : 172 173 174 175
expr3                : 67 68 69 70 71 72 73 107 147 148
expr4                : 148 149 150
expr5                : 150 151
expr6                : 152 152 153 153 154
expr7                : 155 155 156 156 157 157 158 158 159 161 162 182
expr8                : 161 162 163 164
expr9                : 164 165 166 167
fname                : 14 15 16 33 34 35 85 86 87 88
for_range            : 74 75
func_arg_expr        : 57 60 100 102
func_call_stmt       : 84
func_defn            : 6
func_ret_arg         : 85 86 87 88 99 102 103
func_stmt            : 95 96
func_stmts           : 14 15 16 96
gen_stmts            : 67 68 70 72 73 74 75 77 104 107
literal              : 23 45 48 50 51 52
loop_stmt            : 82
mlhs                 : 87 88 124
mrhs                 : 93 124
multi_var            : 74 75 115 116
none                 : 20 38 78 97 105 106 183 188
opt_do               : 68 72 74 75
opt_else_stmt        : 67
opt_terms            : 2 14 15 16 17 33 34 35 67 68 70 72 73 74 75 104 107
opt_then             : 67 107
primary              : 62 63 101 103
program              : 0
puts_stmt            : 41 81
statement            : 3 4
statements           : 2 4
stmt                 : 66
str_expr             : 129
term                 : 190 191
terms                : 4 19 31 37 42 77 96 189 191
top_compstmt         : 5
top_stmt             : 65 69 71 76 77 98
top_stmts            : 64
top_top_compstmt     : 1
uexpr                : 177 178

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . top_top_compstmt
    (2) top_top_compstmt -> . statements opt_terms
    (3) statements -> . statement
    (4) statements -> . statements terms statement
    (5) statement -> . top_compstmt
    (6) statement -> . func_defn
    (7) statement -> . class_defn
    (8) statement -> . VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (9) statement -> . VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (10) statement -> . VARIABLES DOT VARIABLES arguments
    (11) statement -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (12) statement -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (13) statement -> . CONSTANTS DOT KEYWORD_new arguments
    (64) top_compstmt -> . top_stmts
    (14) func_defn -> . KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN func_stmts opt_terms KEYWORD_end
    (15) func_defn -> . KEYWORD_def fname OPEN_PAREN CLOSE_PAREN func_stmts opt_terms KEYWORD_end
    (16) func_defn -> . KEYWORD_def fname arguments func_stmts opt_terms KEYWORD_end
    (17) class_defn -> . KEYWORD_class CONSTANTS newline class_stmts opt_terms KEYWORD_end
    (65) top_stmts -> . top_stmt
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . mlhs EQUAL mrhs
    (147) expr1 -> . expr3
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . mlhs EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . mlhs EQUAL fname func_ret_arg
    (125) mlhs -> . VARIABLES
    (126) mlhs -> . CONSTANTS
    (127) mlhs -> . array
    (148) expr3 -> . expr3 LOGICALOR expr4
    (149) expr3 -> . expr4
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (150) expr4 -> . expr4 LOGICALAND expr5
    (151) expr4 -> . expr5
    (152) expr5 -> . expr6 DOUBLEEQUAL expr6
    (153) expr5 -> . expr6 NOTEQUAL expr6
    (154) expr5 -> . expr6
    (155) expr6 -> . expr7 LESSEQUAL expr7
    (156) expr6 -> . expr7 LESS expr7
    (157) expr6 -> . expr7 GREATER expr7
    (158) expr6 -> . expr7 GREATEREQUAL expr7
    (159) expr6 -> . expr7
    (160) expr6 -> . BOOLEAN_CONSTANTS
    (161) expr7 -> . expr7 BITXOR expr8
    (162) expr7 -> . expr7 PIPE expr8
    (163) expr7 -> . expr8
    (164) expr8 -> . expr8 BITAND expr9
    (165) expr8 -> . expr9
    (166) expr9 -> . expr9 SHIFTL expr10
    (167) expr9 -> . expr9 SHIFTR expr10
    (168) expr9 -> . expr10
    (169) expr10 -> . expr10 PLUS expr11
    (170) expr10 -> . expr10 MINUS expr11
    (171) expr10 -> . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP
    (194) none -> .

    VARIABLES       shift and go to state 28
    CONSTANTS       shift and go to state 22
    KEYWORD_def     shift and go to state 21
    KEYWORD_class   shift and go to state 39
    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 38
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 51
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 48
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)

    statements                     shift and go to state 24
    mlhs                           shift and go to state 2
    func_defn                      shift and go to state 37
    puts_stmt                      shift and go to state 18
    expr11                         shift and go to state 15
    expr13                         shift and go to state 16
    top_stmts                      shift and go to state 17
    array                          shift and go to state 26
    expr3                          shift and go to state 41
    program                        shift and go to state 5
    expr6                          shift and go to state 43
    fname                          shift and go to state 44
    expr5                          shift and go to state 45
    func_call_stmt                 shift and go to state 32
    expr7                          shift and go to state 7
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    expr4                          shift and go to state 8
    statement                      shift and go to state 31
    exit_stmt                      shift and go to state 49
    top_compstmt                   shift and go to state 19
    stmt                           shift and go to state 20
    loop_stmt                      shift and go to state 9
    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr                           shift and go to state 35
    top_top_compstmt               shift and go to state 50
    class_defn                     shift and go to state 36
    expr10                         shift and go to state 14
    expr1                          shift and go to state 42
    top_stmt                       shift and go to state 13

state 1

    (91) loop_stmt -> KEYWORD_redo .

    KEYWORD_while   reduce using rule 91 (loop_stmt -> KEYWORD_redo .)
    KEYWORD_until   reduce using rule 91 (loop_stmt -> KEYWORD_redo .)
    DELIM           reduce using rule 91 (loop_stmt -> KEYWORD_redo .)
    newline         reduce using rule 91 (loop_stmt -> KEYWORD_redo .)
    KEYWORD_elsif   reduce using rule 91 (loop_stmt -> KEYWORD_redo .)
    KEYWORD_else    reduce using rule 91 (loop_stmt -> KEYWORD_redo .)
    KEYWORD_end     reduce using rule 91 (loop_stmt -> KEYWORD_redo .)
    $end            reduce using rule 91 (loop_stmt -> KEYWORD_redo .)


state 2

    (124) expr -> mlhs . EQUAL mrhs
    (87) func_call_stmt -> mlhs . EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> mlhs . EQUAL fname func_ret_arg

    EQUAL           shift and go to state 52


state 3

    (185) uexpr -> MINUS .

    INT_CONSTANTS   reduce using rule 185 (uexpr -> MINUS .)
    FLOAT_CONSTANTS reduce using rule 185 (uexpr -> MINUS .)


state 4

    (68) top_stmt -> KEYWORD_while . expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (148) expr3 -> . expr3 LOGICALOR expr4
    (149) expr3 -> . expr4
    (150) expr4 -> . expr4 LOGICALAND expr5
    (151) expr4 -> . expr5
    (152) expr5 -> . expr6 DOUBLEEQUAL expr6
    (153) expr5 -> . expr6 NOTEQUAL expr6
    (154) expr5 -> . expr6
    (155) expr6 -> . expr7 LESSEQUAL expr7
    (156) expr6 -> . expr7 LESS expr7
    (157) expr6 -> . expr7 GREATER expr7
    (158) expr6 -> . expr7 GREATEREQUAL expr7
    (159) expr6 -> . expr7
    (160) expr6 -> . BOOLEAN_CONSTANTS
    (161) expr7 -> . expr7 BITXOR expr8
    (162) expr7 -> . expr7 PIPE expr8
    (163) expr7 -> . expr8
    (164) expr8 -> . expr8 BITAND expr9
    (165) expr8 -> . expr9
    (166) expr9 -> . expr9 SHIFTL expr10
    (167) expr9 -> . expr9 SHIFTR expr10
    (168) expr9 -> . expr10
    (169) expr10 -> . expr10 PLUS expr11
    (170) expr10 -> . expr10 MINUS expr11
    (171) expr10 -> . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (194) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr13                         shift and go to state 16
    expr9                          shift and go to state 47
    expr3                          shift and go to state 54
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    expr4                          shift and go to state 8
    expr5                          shift and go to state 45
    expr10                         shift and go to state 14
    expr8                          shift and go to state 46
    array                          shift and go to state 55
    expr11                         shift and go to state 15

state 5

    (0) S' -> program .



state 6

    (184) uexpr -> PLUS .

    INT_CONSTANTS   reduce using rule 184 (uexpr -> PLUS .)
    FLOAT_CONSTANTS reduce using rule 184 (uexpr -> PLUS .)


state 7

    (155) expr6 -> expr7 . LESSEQUAL expr7
    (156) expr6 -> expr7 . LESS expr7
    (157) expr6 -> expr7 . GREATER expr7
    (158) expr6 -> expr7 . GREATEREQUAL expr7
    (159) expr6 -> expr7 .
    (161) expr7 -> expr7 . BITXOR expr8
    (162) expr7 -> expr7 . PIPE expr8

    LESSEQUAL       shift and go to state 62
    LESS            shift and go to state 59
    GREATER         shift and go to state 58
    GREATEREQUAL    shift and go to state 57
    DOUBLEEQUAL     reduce using rule 159 (expr6 -> expr7 .)
    NOTEQUAL        reduce using rule 159 (expr6 -> expr7 .)
    LOGICALAND      reduce using rule 159 (expr6 -> expr7 .)
    LOGICALOR       reduce using rule 159 (expr6 -> expr7 .)
    KEYWORD_then    reduce using rule 159 (expr6 -> expr7 .)
    newline         reduce using rule 159 (expr6 -> expr7 .)
    KEYWORD_while   reduce using rule 159 (expr6 -> expr7 .)
    KEYWORD_until   reduce using rule 159 (expr6 -> expr7 .)
    DELIM           reduce using rule 159 (expr6 -> expr7 .)
    $end            reduce using rule 159 (expr6 -> expr7 .)
    KEYWORD_end     reduce using rule 159 (expr6 -> expr7 .)
    KEYWORD_elsif   reduce using rule 159 (expr6 -> expr7 .)
    KEYWORD_else    reduce using rule 159 (expr6 -> expr7 .)
    KEYWORD_do      reduce using rule 159 (expr6 -> expr7 .)
    CLOSE_PAREN     reduce using rule 159 (expr6 -> expr7 .)
    BITXOR          shift and go to state 61
    PIPE            shift and go to state 60


state 8

    (149) expr3 -> expr4 .
    (150) expr4 -> expr4 . LOGICALAND expr5

    LOGICALOR       reduce using rule 149 (expr3 -> expr4 .)
    KEYWORD_while   reduce using rule 149 (expr3 -> expr4 .)
    KEYWORD_until   reduce using rule 149 (expr3 -> expr4 .)
    DELIM           reduce using rule 149 (expr3 -> expr4 .)
    newline         reduce using rule 149 (expr3 -> expr4 .)
    KEYWORD_end     reduce using rule 149 (expr3 -> expr4 .)
    KEYWORD_then    reduce using rule 149 (expr3 -> expr4 .)
    $end            reduce using rule 149 (expr3 -> expr4 .)
    KEYWORD_elsif   reduce using rule 149 (expr3 -> expr4 .)
    KEYWORD_else    reduce using rule 149 (expr3 -> expr4 .)
    KEYWORD_do      reduce using rule 149 (expr3 -> expr4 .)
    CLOSE_PAREN     reduce using rule 149 (expr3 -> expr4 .)
    LOGICALAND      shift and go to state 63


state 9

    (82) stmt -> loop_stmt .

    KEYWORD_while   reduce using rule 82 (stmt -> loop_stmt .)
    KEYWORD_until   reduce using rule 82 (stmt -> loop_stmt .)
    DELIM           reduce using rule 82 (stmt -> loop_stmt .)
    newline         reduce using rule 82 (stmt -> loop_stmt .)
    KEYWORD_end     reduce using rule 82 (stmt -> loop_stmt .)
    KEYWORD_elsif   reduce using rule 82 (stmt -> loop_stmt .)
    KEYWORD_else    reduce using rule 82 (stmt -> loop_stmt .)
    $end            reduce using rule 82 (stmt -> loop_stmt .)


state 10

    (177) expr13 -> uexpr . INT_CONSTANTS
    (178) expr13 -> uexpr . FLOAT_CONSTANTS

    INT_CONSTANTS   shift and go to state 64
    FLOAT_CONSTANTS shift and go to state 65


state 11

    (160) expr6 -> BOOLEAN_CONSTANTS .

    DOUBLEEQUAL     reduce using rule 160 (expr6 -> BOOLEAN_CONSTANTS .)
    NOTEQUAL        reduce using rule 160 (expr6 -> BOOLEAN_CONSTANTS .)
    LOGICALAND      reduce using rule 160 (expr6 -> BOOLEAN_CONSTANTS .)
    LOGICALOR       reduce using rule 160 (expr6 -> BOOLEAN_CONSTANTS .)
    KEYWORD_then    reduce using rule 160 (expr6 -> BOOLEAN_CONSTANTS .)
    newline         reduce using rule 160 (expr6 -> BOOLEAN_CONSTANTS .)
    KEYWORD_while   reduce using rule 160 (expr6 -> BOOLEAN_CONSTANTS .)
    KEYWORD_until   reduce using rule 160 (expr6 -> BOOLEAN_CONSTANTS .)
    DELIM           reduce using rule 160 (expr6 -> BOOLEAN_CONSTANTS .)
    $end            reduce using rule 160 (expr6 -> BOOLEAN_CONSTANTS .)
    KEYWORD_end     reduce using rule 160 (expr6 -> BOOLEAN_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 160 (expr6 -> BOOLEAN_CONSTANTS .)
    KEYWORD_else    reduce using rule 160 (expr6 -> BOOLEAN_CONSTANTS .)
    KEYWORD_do      reduce using rule 160 (expr6 -> BOOLEAN_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 160 (expr6 -> BOOLEAN_CONSTANTS .)


state 12

    (90) loop_stmt -> KEYWORD_next .

    KEYWORD_while   reduce using rule 90 (loop_stmt -> KEYWORD_next .)
    KEYWORD_until   reduce using rule 90 (loop_stmt -> KEYWORD_next .)
    DELIM           reduce using rule 90 (loop_stmt -> KEYWORD_next .)
    newline         reduce using rule 90 (loop_stmt -> KEYWORD_next .)
    KEYWORD_elsif   reduce using rule 90 (loop_stmt -> KEYWORD_next .)
    KEYWORD_else    reduce using rule 90 (loop_stmt -> KEYWORD_next .)
    KEYWORD_end     reduce using rule 90 (loop_stmt -> KEYWORD_next .)
    $end            reduce using rule 90 (loop_stmt -> KEYWORD_next .)


state 13

    (65) top_stmts -> top_stmt .
    (69) top_stmt -> top_stmt . KEYWORD_while expr3
    (71) top_stmt -> top_stmt . KEYWORD_until expr3

    DELIM           reduce using rule 65 (top_stmts -> top_stmt .)
    newline         reduce using rule 65 (top_stmts -> top_stmt .)
    $end            reduce using rule 65 (top_stmts -> top_stmt .)
    KEYWORD_while   shift and go to state 66
    KEYWORD_until   shift and go to state 67


state 14

    (168) expr9 -> expr10 .
    (169) expr10 -> expr10 . PLUS expr11
    (170) expr10 -> expr10 . MINUS expr11

    SHIFTL          reduce using rule 168 (expr9 -> expr10 .)
    SHIFTR          reduce using rule 168 (expr9 -> expr10 .)
    BITAND          reduce using rule 168 (expr9 -> expr10 .)
    LESSEQUAL       reduce using rule 168 (expr9 -> expr10 .)
    LESS            reduce using rule 168 (expr9 -> expr10 .)
    GREATER         reduce using rule 168 (expr9 -> expr10 .)
    GREATEREQUAL    reduce using rule 168 (expr9 -> expr10 .)
    BITXOR          reduce using rule 168 (expr9 -> expr10 .)
    PIPE            reduce using rule 168 (expr9 -> expr10 .)
    DOUBLEEQUAL     reduce using rule 168 (expr9 -> expr10 .)
    NOTEQUAL        reduce using rule 168 (expr9 -> expr10 .)
    LOGICALAND      reduce using rule 168 (expr9 -> expr10 .)
    LOGICALOR       reduce using rule 168 (expr9 -> expr10 .)
    KEYWORD_while   reduce using rule 168 (expr9 -> expr10 .)
    KEYWORD_until   reduce using rule 168 (expr9 -> expr10 .)
    DELIM           reduce using rule 168 (expr9 -> expr10 .)
    newline         reduce using rule 168 (expr9 -> expr10 .)
    KEYWORD_end     reduce using rule 168 (expr9 -> expr10 .)
    $end            reduce using rule 168 (expr9 -> expr10 .)
    KEYWORD_do      reduce using rule 168 (expr9 -> expr10 .)
    KEYWORD_then    reduce using rule 168 (expr9 -> expr10 .)
    CLOSE_PAREN     reduce using rule 168 (expr9 -> expr10 .)
    KEYWORD_elsif   reduce using rule 168 (expr9 -> expr10 .)
    KEYWORD_else    reduce using rule 168 (expr9 -> expr10 .)
    CLOSE_BRACKET   reduce using rule 168 (expr9 -> expr10 .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69


state 15

    (171) expr10 -> expr11 .
    (172) expr11 -> expr11 . MULTIPLY expr13
    (173) expr11 -> expr11 . DIV expr13
    (174) expr11 -> expr11 . MOD expr13

    PLUS            reduce using rule 171 (expr10 -> expr11 .)
    MINUS           reduce using rule 171 (expr10 -> expr11 .)
    SHIFTL          reduce using rule 171 (expr10 -> expr11 .)
    SHIFTR          reduce using rule 171 (expr10 -> expr11 .)
    BITAND          reduce using rule 171 (expr10 -> expr11 .)
    LESSEQUAL       reduce using rule 171 (expr10 -> expr11 .)
    LESS            reduce using rule 171 (expr10 -> expr11 .)
    GREATER         reduce using rule 171 (expr10 -> expr11 .)
    GREATEREQUAL    reduce using rule 171 (expr10 -> expr11 .)
    BITXOR          reduce using rule 171 (expr10 -> expr11 .)
    PIPE            reduce using rule 171 (expr10 -> expr11 .)
    DOUBLEEQUAL     reduce using rule 171 (expr10 -> expr11 .)
    NOTEQUAL        reduce using rule 171 (expr10 -> expr11 .)
    LOGICALAND      reduce using rule 171 (expr10 -> expr11 .)
    LOGICALOR       reduce using rule 171 (expr10 -> expr11 .)
    KEYWORD_while   reduce using rule 171 (expr10 -> expr11 .)
    KEYWORD_until   reduce using rule 171 (expr10 -> expr11 .)
    DELIM           reduce using rule 171 (expr10 -> expr11 .)
    newline         reduce using rule 171 (expr10 -> expr11 .)
    $end            reduce using rule 171 (expr10 -> expr11 .)
    KEYWORD_end     reduce using rule 171 (expr10 -> expr11 .)
    KEYWORD_elsif   reduce using rule 171 (expr10 -> expr11 .)
    KEYWORD_else    reduce using rule 171 (expr10 -> expr11 .)
    KEYWORD_then    reduce using rule 171 (expr10 -> expr11 .)
    KEYWORD_do      reduce using rule 171 (expr10 -> expr11 .)
    CLOSE_PAREN     reduce using rule 171 (expr10 -> expr11 .)
    CLOSE_BRACKET   reduce using rule 171 (expr10 -> expr11 .)
    MULTIPLY        shift and go to state 70
    DIV             shift and go to state 71
    MOD             shift and go to state 72


state 16

    (175) expr11 -> expr13 .

    MULTIPLY        reduce using rule 175 (expr11 -> expr13 .)
    DIV             reduce using rule 175 (expr11 -> expr13 .)
    MOD             reduce using rule 175 (expr11 -> expr13 .)
    PLUS            reduce using rule 175 (expr11 -> expr13 .)
    MINUS           reduce using rule 175 (expr11 -> expr13 .)
    SHIFTL          reduce using rule 175 (expr11 -> expr13 .)
    SHIFTR          reduce using rule 175 (expr11 -> expr13 .)
    BITAND          reduce using rule 175 (expr11 -> expr13 .)
    LESSEQUAL       reduce using rule 175 (expr11 -> expr13 .)
    LESS            reduce using rule 175 (expr11 -> expr13 .)
    GREATER         reduce using rule 175 (expr11 -> expr13 .)
    GREATEREQUAL    reduce using rule 175 (expr11 -> expr13 .)
    BITXOR          reduce using rule 175 (expr11 -> expr13 .)
    PIPE            reduce using rule 175 (expr11 -> expr13 .)
    DOUBLEEQUAL     reduce using rule 175 (expr11 -> expr13 .)
    NOTEQUAL        reduce using rule 175 (expr11 -> expr13 .)
    LOGICALAND      reduce using rule 175 (expr11 -> expr13 .)
    LOGICALOR       reduce using rule 175 (expr11 -> expr13 .)
    KEYWORD_while   reduce using rule 175 (expr11 -> expr13 .)
    KEYWORD_until   reduce using rule 175 (expr11 -> expr13 .)
    DELIM           reduce using rule 175 (expr11 -> expr13 .)
    newline         reduce using rule 175 (expr11 -> expr13 .)
    $end            reduce using rule 175 (expr11 -> expr13 .)
    KEYWORD_do      reduce using rule 175 (expr11 -> expr13 .)
    KEYWORD_then    reduce using rule 175 (expr11 -> expr13 .)
    CLOSE_PAREN     reduce using rule 175 (expr11 -> expr13 .)
    KEYWORD_end     reduce using rule 175 (expr11 -> expr13 .)
    KEYWORD_elsif   reduce using rule 175 (expr11 -> expr13 .)
    KEYWORD_else    reduce using rule 175 (expr11 -> expr13 .)
    CLOSE_BRACKET   reduce using rule 175 (expr11 -> expr13 .)


state 17

    (64) top_compstmt -> top_stmts .

    DELIM           reduce using rule 64 (top_compstmt -> top_stmts .)
    newline         reduce using rule 64 (top_compstmt -> top_stmts .)
    $end            reduce using rule 64 (top_compstmt -> top_stmts .)


state 18

    (81) stmt -> puts_stmt .

    KEYWORD_while   reduce using rule 81 (stmt -> puts_stmt .)
    KEYWORD_until   reduce using rule 81 (stmt -> puts_stmt .)
    DELIM           reduce using rule 81 (stmt -> puts_stmt .)
    newline         reduce using rule 81 (stmt -> puts_stmt .)
    KEYWORD_end     reduce using rule 81 (stmt -> puts_stmt .)
    KEYWORD_elsif   reduce using rule 81 (stmt -> puts_stmt .)
    KEYWORD_else    reduce using rule 81 (stmt -> puts_stmt .)
    $end            reduce using rule 81 (stmt -> puts_stmt .)


state 19

    (5) statement -> top_compstmt .

    DELIM           reduce using rule 5 (statement -> top_compstmt .)
    newline         reduce using rule 5 (statement -> top_compstmt .)
    $end            reduce using rule 5 (statement -> top_compstmt .)


state 20

    (66) top_stmt -> stmt .

    KEYWORD_while   reduce using rule 66 (top_stmt -> stmt .)
    KEYWORD_until   reduce using rule 66 (top_stmt -> stmt .)
    DELIM           reduce using rule 66 (top_stmt -> stmt .)
    newline         reduce using rule 66 (top_stmt -> stmt .)
    KEYWORD_end     reduce using rule 66 (top_stmt -> stmt .)
    KEYWORD_elsif   reduce using rule 66 (top_stmt -> stmt .)
    KEYWORD_else    reduce using rule 66 (top_stmt -> stmt .)
    $end            reduce using rule 66 (top_stmt -> stmt .)


state 21

    (14) func_defn -> KEYWORD_def . fname OPEN_PAREN arguments CLOSE_PAREN func_stmts opt_terms KEYWORD_end
    (15) func_defn -> KEYWORD_def . fname OPEN_PAREN CLOSE_PAREN func_stmts opt_terms KEYWORD_end
    (16) func_defn -> KEYWORD_def . fname arguments func_stmts opt_terms KEYWORD_end
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS

    VARIABLES       shift and go to state 74
    CONSTANTS       shift and go to state 73

    fname                          shift and go to state 75

state 22

    (11) statement -> CONSTANTS . DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (12) statement -> CONSTANTS . DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (13) statement -> CONSTANTS . DOT KEYWORD_new arguments
    (126) mlhs -> CONSTANTS .
    (54) fname -> CONSTANTS .
    (179) expr13 -> CONSTANTS .

    DOT             shift and go to state 76
    EQUAL           reduce using rule 126 (mlhs -> CONSTANTS .)
    OPEN_PAREN      reduce using rule 54 (fname -> CONSTANTS .)
    VARIABLES       reduce using rule 54 (fname -> CONSTANTS .)
    CONSTANTS       reduce using rule 54 (fname -> CONSTANTS .)
    INT_CONSTANTS   reduce using rule 54 (fname -> CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 54 (fname -> CONSTANTS .)
    STRING_CONSTANTS reduce using rule 54 (fname -> CONSTANTS .)
    CHAR_CONSTANTS  reduce using rule 54 (fname -> CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 54 (fname -> CONSTANTS .)
    MULTIPLY        reduce using rule 179 (expr13 -> CONSTANTS .)
    DIV             reduce using rule 179 (expr13 -> CONSTANTS .)
    MOD             reduce using rule 179 (expr13 -> CONSTANTS .)
    PLUS            reduce using rule 179 (expr13 -> CONSTANTS .)
    MINUS           reduce using rule 179 (expr13 -> CONSTANTS .)
    SHIFTL          reduce using rule 179 (expr13 -> CONSTANTS .)
    SHIFTR          reduce using rule 179 (expr13 -> CONSTANTS .)
    BITAND          reduce using rule 179 (expr13 -> CONSTANTS .)
    LESSEQUAL       reduce using rule 179 (expr13 -> CONSTANTS .)
    LESS            reduce using rule 179 (expr13 -> CONSTANTS .)
    GREATER         reduce using rule 179 (expr13 -> CONSTANTS .)
    GREATEREQUAL    reduce using rule 179 (expr13 -> CONSTANTS .)
    BITXOR          reduce using rule 179 (expr13 -> CONSTANTS .)
    PIPE            reduce using rule 179 (expr13 -> CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 179 (expr13 -> CONSTANTS .)
    NOTEQUAL        reduce using rule 179 (expr13 -> CONSTANTS .)
    LOGICALAND      reduce using rule 179 (expr13 -> CONSTANTS .)
    LOGICALOR       reduce using rule 179 (expr13 -> CONSTANTS .)
    KEYWORD_while   reduce using rule 179 (expr13 -> CONSTANTS .)
    KEYWORD_until   reduce using rule 179 (expr13 -> CONSTANTS .)
    DELIM           reduce using rule 179 (expr13 -> CONSTANTS .)
    newline         reduce using rule 179 (expr13 -> CONSTANTS .)
    $end            reduce using rule 179 (expr13 -> CONSTANTS .)


state 23

    (92) exit_stmt -> KEYWORD_exit .

    KEYWORD_while   reduce using rule 92 (exit_stmt -> KEYWORD_exit .)
    KEYWORD_until   reduce using rule 92 (exit_stmt -> KEYWORD_exit .)
    DELIM           reduce using rule 92 (exit_stmt -> KEYWORD_exit .)
    newline         reduce using rule 92 (exit_stmt -> KEYWORD_exit .)
    KEYWORD_end     reduce using rule 92 (exit_stmt -> KEYWORD_exit .)
    $end            reduce using rule 92 (exit_stmt -> KEYWORD_exit .)
    KEYWORD_elsif   reduce using rule 92 (exit_stmt -> KEYWORD_exit .)
    KEYWORD_else    reduce using rule 92 (exit_stmt -> KEYWORD_exit .)


state 24

    (2) top_top_compstmt -> statements . opt_terms
    (4) statements -> statements . terms statement
    (188) opt_terms -> . none
    (189) opt_terms -> . terms
    (190) terms -> . term
    (191) terms -> . terms term
    (194) none -> .
    (192) term -> . DELIM
    (193) term -> . newline

    $end            reduce using rule 194 (none -> .)
    DELIM           shift and go to state 80
    newline         shift and go to state 79

    term                           shift and go to state 77
    terms                          shift and go to state 78
    none                           shift and go to state 81
    opt_terms                      shift and go to state 82

state 25

    (72) top_stmt -> KEYWORD_until . expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (148) expr3 -> . expr3 LOGICALOR expr4
    (149) expr3 -> . expr4
    (150) expr4 -> . expr4 LOGICALAND expr5
    (151) expr4 -> . expr5
    (152) expr5 -> . expr6 DOUBLEEQUAL expr6
    (153) expr5 -> . expr6 NOTEQUAL expr6
    (154) expr5 -> . expr6
    (155) expr6 -> . expr7 LESSEQUAL expr7
    (156) expr6 -> . expr7 LESS expr7
    (157) expr6 -> . expr7 GREATER expr7
    (158) expr6 -> . expr7 GREATEREQUAL expr7
    (159) expr6 -> . expr7
    (160) expr6 -> . BOOLEAN_CONSTANTS
    (161) expr7 -> . expr7 BITXOR expr8
    (162) expr7 -> . expr7 PIPE expr8
    (163) expr7 -> . expr8
    (164) expr8 -> . expr8 BITAND expr9
    (165) expr8 -> . expr9
    (166) expr9 -> . expr9 SHIFTL expr10
    (167) expr9 -> . expr9 SHIFTR expr10
    (168) expr9 -> . expr10
    (169) expr10 -> . expr10 PLUS expr11
    (170) expr10 -> . expr10 MINUS expr11
    (171) expr10 -> . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (194) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr13                         shift and go to state 16
    expr9                          shift and go to state 47
    expr3                          shift and go to state 83
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    expr4                          shift and go to state 8
    expr5                          shift and go to state 45
    expr10                         shift and go to state 14
    expr8                          shift and go to state 46
    array                          shift and go to state 55
    expr11                         shift and go to state 15

state 26

    (127) mlhs -> array .
    (181) expr13 -> array .

    EQUAL           reduce using rule 127 (mlhs -> array .)
    MULTIPLY        reduce using rule 181 (expr13 -> array .)
    DIV             reduce using rule 181 (expr13 -> array .)
    MOD             reduce using rule 181 (expr13 -> array .)
    PLUS            reduce using rule 181 (expr13 -> array .)
    MINUS           reduce using rule 181 (expr13 -> array .)
    SHIFTL          reduce using rule 181 (expr13 -> array .)
    SHIFTR          reduce using rule 181 (expr13 -> array .)
    BITAND          reduce using rule 181 (expr13 -> array .)
    LESSEQUAL       reduce using rule 181 (expr13 -> array .)
    LESS            reduce using rule 181 (expr13 -> array .)
    GREATER         reduce using rule 181 (expr13 -> array .)
    GREATEREQUAL    reduce using rule 181 (expr13 -> array .)
    BITXOR          reduce using rule 181 (expr13 -> array .)
    PIPE            reduce using rule 181 (expr13 -> array .)
    DOUBLEEQUAL     reduce using rule 181 (expr13 -> array .)
    NOTEQUAL        reduce using rule 181 (expr13 -> array .)
    LOGICALAND      reduce using rule 181 (expr13 -> array .)
    LOGICALOR       reduce using rule 181 (expr13 -> array .)
    KEYWORD_while   reduce using rule 181 (expr13 -> array .)
    KEYWORD_until   reduce using rule 181 (expr13 -> array .)
    DELIM           reduce using rule 181 (expr13 -> array .)
    newline         reduce using rule 181 (expr13 -> array .)
    KEYWORD_end     reduce using rule 181 (expr13 -> array .)
    $end            reduce using rule 181 (expr13 -> array .)
    KEYWORD_elsif   reduce using rule 181 (expr13 -> array .)
    KEYWORD_else    reduce using rule 181 (expr13 -> array .)


state 27

    (67) top_stmt -> KEYWORD_if . expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (148) expr3 -> . expr3 LOGICALOR expr4
    (149) expr3 -> . expr4
    (150) expr4 -> . expr4 LOGICALAND expr5
    (151) expr4 -> . expr5
    (152) expr5 -> . expr6 DOUBLEEQUAL expr6
    (153) expr5 -> . expr6 NOTEQUAL expr6
    (154) expr5 -> . expr6
    (155) expr6 -> . expr7 LESSEQUAL expr7
    (156) expr6 -> . expr7 LESS expr7
    (157) expr6 -> . expr7 GREATER expr7
    (158) expr6 -> . expr7 GREATEREQUAL expr7
    (159) expr6 -> . expr7
    (160) expr6 -> . BOOLEAN_CONSTANTS
    (161) expr7 -> . expr7 BITXOR expr8
    (162) expr7 -> . expr7 PIPE expr8
    (163) expr7 -> . expr8
    (164) expr8 -> . expr8 BITAND expr9
    (165) expr8 -> . expr9
    (166) expr9 -> . expr9 SHIFTL expr10
    (167) expr9 -> . expr9 SHIFTR expr10
    (168) expr9 -> . expr10
    (169) expr10 -> . expr10 PLUS expr11
    (170) expr10 -> . expr10 MINUS expr11
    (171) expr10 -> . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (194) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)

    expr11                         shift and go to state 15
    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr4                          shift and go to state 8
    expr5                          shift and go to state 45
    expr3                          shift and go to state 84
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    expr10                         shift and go to state 14
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    expr13                         shift and go to state 16
    array                          shift and go to state 55

state 28

    (8) statement -> VARIABLES . DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (9) statement -> VARIABLES . DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (10) statement -> VARIABLES . DOT VARIABLES arguments
    (125) mlhs -> VARIABLES .
    (53) fname -> VARIABLES .
    (182) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET
    (180) expr13 -> VARIABLES .

    DOT             shift and go to state 86
    EQUAL           reduce using rule 125 (mlhs -> VARIABLES .)
    OPEN_PAREN      reduce using rule 53 (fname -> VARIABLES .)
    VARIABLES       reduce using rule 53 (fname -> VARIABLES .)
    CONSTANTS       reduce using rule 53 (fname -> VARIABLES .)
    INT_CONSTANTS   reduce using rule 53 (fname -> VARIABLES .)
    FLOAT_CONSTANTS reduce using rule 53 (fname -> VARIABLES .)
    STRING_CONSTANTS reduce using rule 53 (fname -> VARIABLES .)
    CHAR_CONSTANTS  reduce using rule 53 (fname -> VARIABLES .)
    BOOLEAN_CONSTANTS reduce using rule 53 (fname -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 85
    MULTIPLY        reduce using rule 180 (expr13 -> VARIABLES .)
    DIV             reduce using rule 180 (expr13 -> VARIABLES .)
    MOD             reduce using rule 180 (expr13 -> VARIABLES .)
    PLUS            reduce using rule 180 (expr13 -> VARIABLES .)
    MINUS           reduce using rule 180 (expr13 -> VARIABLES .)
    SHIFTL          reduce using rule 180 (expr13 -> VARIABLES .)
    SHIFTR          reduce using rule 180 (expr13 -> VARIABLES .)
    BITAND          reduce using rule 180 (expr13 -> VARIABLES .)
    LESSEQUAL       reduce using rule 180 (expr13 -> VARIABLES .)
    LESS            reduce using rule 180 (expr13 -> VARIABLES .)
    GREATER         reduce using rule 180 (expr13 -> VARIABLES .)
    GREATEREQUAL    reduce using rule 180 (expr13 -> VARIABLES .)
    BITXOR          reduce using rule 180 (expr13 -> VARIABLES .)
    PIPE            reduce using rule 180 (expr13 -> VARIABLES .)
    DOUBLEEQUAL     reduce using rule 180 (expr13 -> VARIABLES .)
    NOTEQUAL        reduce using rule 180 (expr13 -> VARIABLES .)
    LOGICALAND      reduce using rule 180 (expr13 -> VARIABLES .)
    LOGICALOR       reduce using rule 180 (expr13 -> VARIABLES .)
    KEYWORD_while   reduce using rule 180 (expr13 -> VARIABLES .)
    KEYWORD_until   reduce using rule 180 (expr13 -> VARIABLES .)
    DELIM           reduce using rule 180 (expr13 -> VARIABLES .)
    newline         reduce using rule 180 (expr13 -> VARIABLES .)
    $end            reduce using rule 180 (expr13 -> VARIABLES .)


state 29

    (187) uexpr -> BITCOMP .

    INT_CONSTANTS   reduce using rule 187 (uexpr -> BITCOMP .)
    FLOAT_CONSTANTS reduce using rule 187 (uexpr -> BITCOMP .)


state 30

    (176) expr13 -> OPEN_PAREN . expr1 CLOSE_PAREN
    (147) expr1 -> . expr3
    (148) expr3 -> . expr3 LOGICALOR expr4
    (149) expr3 -> . expr4
    (150) expr4 -> . expr4 LOGICALAND expr5
    (151) expr4 -> . expr5
    (152) expr5 -> . expr6 DOUBLEEQUAL expr6
    (153) expr5 -> . expr6 NOTEQUAL expr6
    (154) expr5 -> . expr6
    (155) expr6 -> . expr7 LESSEQUAL expr7
    (156) expr6 -> . expr7 LESS expr7
    (157) expr6 -> . expr7 GREATER expr7
    (158) expr6 -> . expr7 GREATEREQUAL expr7
    (159) expr6 -> . expr7
    (160) expr6 -> . BOOLEAN_CONSTANTS
    (161) expr7 -> . expr7 BITXOR expr8
    (162) expr7 -> . expr7 PIPE expr8
    (163) expr7 -> . expr8
    (164) expr8 -> . expr8 BITAND expr9
    (165) expr8 -> . expr9
    (166) expr9 -> . expr9 SHIFTL expr10
    (167) expr9 -> . expr9 SHIFTR expr10
    (168) expr9 -> . expr10
    (169) expr10 -> . expr10 PLUS expr11
    (170) expr10 -> . expr10 MINUS expr11
    (171) expr10 -> . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (194) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr13                         shift and go to state 16
    expr3                          shift and go to state 41
    expr1                          shift and go to state 87
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    expr4                          shift and go to state 8
    expr5                          shift and go to state 45
    expr10                         shift and go to state 14
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    array                          shift and go to state 55
    expr11                         shift and go to state 15

state 31

    (3) statements -> statement .

    DELIM           reduce using rule 3 (statements -> statement .)
    newline         reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)


state 32

    (84) stmt -> func_call_stmt .

    KEYWORD_while   reduce using rule 84 (stmt -> func_call_stmt .)
    KEYWORD_until   reduce using rule 84 (stmt -> func_call_stmt .)
    DELIM           reduce using rule 84 (stmt -> func_call_stmt .)
    newline         reduce using rule 84 (stmt -> func_call_stmt .)
    KEYWORD_end     reduce using rule 84 (stmt -> func_call_stmt .)
    KEYWORD_elsif   reduce using rule 84 (stmt -> func_call_stmt .)
    KEYWORD_else    reduce using rule 84 (stmt -> func_call_stmt .)
    $end            reduce using rule 84 (stmt -> func_call_stmt .)


state 33

    (93) puts_stmt -> KEYWORD_puts . mrhs
    (94) puts_stmt -> KEYWORD_puts . expr
    (128) mrhs -> . expr1
    (129) mrhs -> . str_expr
    (130) mrhs -> . KEYWORD_gets
    (131) mrhs -> . OPEN_BRACKET CLOSE_BRACKET
    (132) mrhs -> . VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (133) mrhs -> . VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (134) mrhs -> . VARIABLES DOT VARIABLES
    (135) mrhs -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (136) mrhs -> . CONSTANTS DOT KEYWORD_new
    (137) mrhs -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (124) expr -> . mlhs EQUAL mrhs
    (147) expr1 -> . expr3
    (138) str_expr -> . STRING_CONSTANTS
    (125) mlhs -> . VARIABLES
    (126) mlhs -> . CONSTANTS
    (127) mlhs -> . array
    (148) expr3 -> . expr3 LOGICALOR expr4
    (149) expr3 -> . expr4
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (150) expr4 -> . expr4 LOGICALAND expr5
    (151) expr4 -> . expr5
    (152) expr5 -> . expr6 DOUBLEEQUAL expr6
    (153) expr5 -> . expr6 NOTEQUAL expr6
    (154) expr5 -> . expr6
    (155) expr6 -> . expr7 LESSEQUAL expr7
    (156) expr6 -> . expr7 LESS expr7
    (157) expr6 -> . expr7 GREATER expr7
    (158) expr6 -> . expr7 GREATEREQUAL expr7
    (159) expr6 -> . expr7
    (160) expr6 -> . BOOLEAN_CONSTANTS
    (161) expr7 -> . expr7 BITXOR expr8
    (162) expr7 -> . expr7 PIPE expr8
    (163) expr7 -> . expr8
    (164) expr8 -> . expr8 BITAND expr9
    (165) expr8 -> . expr9
    (166) expr9 -> . expr9 SHIFTL expr10
    (167) expr9 -> . expr9 SHIFTR expr10
    (168) expr9 -> . expr10
    (169) expr10 -> . expr10 PLUS expr11
    (170) expr10 -> . expr10 MINUS expr11
    (171) expr10 -> . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP
    (194) none -> .

    KEYWORD_gets    shift and go to state 93
    OPEN_BRACKET    shift and go to state 91
    VARIABLES       shift and go to state 90
    CONSTANTS       shift and go to state 97
    STRING_CONSTANTS shift and go to state 96
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)

    expr11                         shift and go to state 15
    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    str_expr                       shift and go to state 89
    expr                           shift and go to state 95
    expr13                         shift and go to state 16
    mlhs                           shift and go to state 88
    expr3                          shift and go to state 41
    mrhs                           shift and go to state 94
    expr1                          shift and go to state 92
    expr6                          shift and go to state 43
    expr4                          shift and go to state 8
    expr5                          shift and go to state 45
    expr10                         shift and go to state 14
    array                          shift and go to state 26
    expr9                          shift and go to state 47
    expr8                          shift and go to state 46
    expr7                          shift and go to state 7

state 34

    (183) uexpr -> none .

    INT_CONSTANTS   reduce using rule 183 (uexpr -> none .)
    FLOAT_CONSTANTS reduce using rule 183 (uexpr -> none .)


state 35

    (79) stmt -> expr .

    KEYWORD_while   reduce using rule 79 (stmt -> expr .)
    KEYWORD_until   reduce using rule 79 (stmt -> expr .)
    DELIM           reduce using rule 79 (stmt -> expr .)
    newline         reduce using rule 79 (stmt -> expr .)
    KEYWORD_end     reduce using rule 79 (stmt -> expr .)
    KEYWORD_elsif   reduce using rule 79 (stmt -> expr .)
    KEYWORD_else    reduce using rule 79 (stmt -> expr .)
    $end            reduce using rule 79 (stmt -> expr .)


state 36

    (7) statement -> class_defn .

    DELIM           reduce using rule 7 (statement -> class_defn .)
    newline         reduce using rule 7 (statement -> class_defn .)
    $end            reduce using rule 7 (statement -> class_defn .)


state 37

    (6) statement -> func_defn .

    DELIM           reduce using rule 6 (statement -> func_defn .)
    newline         reduce using rule 6 (statement -> func_defn .)
    $end            reduce using rule 6 (statement -> func_defn .)


state 38

    (70) top_stmt -> KEYWORD_begin . gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (73) top_stmt -> KEYWORD_begin . gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (76) gen_stmts -> . top_stmt
    (77) gen_stmts -> . gen_stmts terms top_stmt
    (78) gen_stmts -> . none
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (194) none -> .
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . mlhs EQUAL mrhs
    (147) expr1 -> . expr3
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . mlhs EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . mlhs EQUAL fname func_ret_arg
    (125) mlhs -> . VARIABLES
    (126) mlhs -> . CONSTANTS
    (127) mlhs -> . array
    (148) expr3 -> . expr3 LOGICALOR expr4
    (149) expr3 -> . expr4
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (150) expr4 -> . expr4 LOGICALAND expr5
    (151) expr4 -> . expr5
    (152) expr5 -> . expr6 DOUBLEEQUAL expr6
    (153) expr5 -> . expr6 NOTEQUAL expr6
    (154) expr5 -> . expr6
    (155) expr6 -> . expr7 LESSEQUAL expr7
    (156) expr6 -> . expr7 LESS expr7
    (157) expr6 -> . expr7 GREATER expr7
    (158) expr6 -> . expr7 GREATEREQUAL expr7
    (159) expr6 -> . expr7
    (160) expr6 -> . BOOLEAN_CONSTANTS
    (161) expr7 -> . expr7 BITXOR expr8
    (162) expr7 -> . expr7 PIPE expr8
    (163) expr7 -> . expr8
    (164) expr8 -> . expr8 BITAND expr9
    (165) expr8 -> . expr9
    (166) expr9 -> . expr9 SHIFTL expr10
    (167) expr9 -> . expr9 SHIFTR expr10
    (168) expr9 -> . expr10
    (169) expr10 -> . expr10 PLUS expr11
    (170) expr10 -> . expr10 MINUS expr11
    (171) expr10 -> . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP

    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 38
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 51
    DELIM           reduce using rule 194 (none -> .)
    newline         reduce using rule 194 (none -> .)
    KEYWORD_end     reduce using rule 194 (none -> .)
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 48
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    VARIABLES       shift and go to state 98
    CONSTANTS       shift and go to state 101
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29

    mlhs                           shift and go to state 2
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr13                         shift and go to state 16
    array                          shift and go to state 26
    expr3                          shift and go to state 41
    expr1                          shift and go to state 42
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    puts_stmt                      shift and go to state 18
    expr5                          shift and go to state 45
    func_call_stmt                 shift and go to state 32
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    expr4                          shift and go to state 8
    fname                          shift and go to state 44
    exit_stmt                      shift and go to state 49
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 20
    uexpr                          shift and go to state 10
    none                           shift and go to state 99
    gen_stmts                      shift and go to state 100
    expr                           shift and go to state 35
    top_stmt                       shift and go to state 102

state 39

    (17) class_defn -> KEYWORD_class . CONSTANTS newline class_stmts opt_terms KEYWORD_end

    CONSTANTS       shift and go to state 103


state 40

    (186) uexpr -> BITNOT .

    INT_CONSTANTS   reduce using rule 186 (uexpr -> BITNOT .)
    FLOAT_CONSTANTS reduce using rule 186 (uexpr -> BITNOT .)


state 41

    (147) expr1 -> expr3 .
    (148) expr3 -> expr3 . LOGICALOR expr4

    KEYWORD_while   reduce using rule 147 (expr1 -> expr3 .)
    KEYWORD_until   reduce using rule 147 (expr1 -> expr3 .)
    DELIM           reduce using rule 147 (expr1 -> expr3 .)
    newline         reduce using rule 147 (expr1 -> expr3 .)
    $end            reduce using rule 147 (expr1 -> expr3 .)
    KEYWORD_end     reduce using rule 147 (expr1 -> expr3 .)
    KEYWORD_elsif   reduce using rule 147 (expr1 -> expr3 .)
    KEYWORD_else    reduce using rule 147 (expr1 -> expr3 .)
    CLOSE_PAREN     reduce using rule 147 (expr1 -> expr3 .)
    LOGICALOR       shift and go to state 104


state 42

    (80) stmt -> expr1 .

    KEYWORD_while   reduce using rule 80 (stmt -> expr1 .)
    KEYWORD_until   reduce using rule 80 (stmt -> expr1 .)
    DELIM           reduce using rule 80 (stmt -> expr1 .)
    newline         reduce using rule 80 (stmt -> expr1 .)
    KEYWORD_end     reduce using rule 80 (stmt -> expr1 .)
    KEYWORD_elsif   reduce using rule 80 (stmt -> expr1 .)
    KEYWORD_else    reduce using rule 80 (stmt -> expr1 .)
    $end            reduce using rule 80 (stmt -> expr1 .)


state 43

    (152) expr5 -> expr6 . DOUBLEEQUAL expr6
    (153) expr5 -> expr6 . NOTEQUAL expr6
    (154) expr5 -> expr6 .

    DOUBLEEQUAL     shift and go to state 106
    NOTEQUAL        shift and go to state 105
    LOGICALAND      reduce using rule 154 (expr5 -> expr6 .)
    LOGICALOR       reduce using rule 154 (expr5 -> expr6 .)
    KEYWORD_while   reduce using rule 154 (expr5 -> expr6 .)
    KEYWORD_until   reduce using rule 154 (expr5 -> expr6 .)
    DELIM           reduce using rule 154 (expr5 -> expr6 .)
    newline         reduce using rule 154 (expr5 -> expr6 .)
    KEYWORD_end     reduce using rule 154 (expr5 -> expr6 .)
    $end            reduce using rule 154 (expr5 -> expr6 .)
    KEYWORD_elsif   reduce using rule 154 (expr5 -> expr6 .)
    KEYWORD_else    reduce using rule 154 (expr5 -> expr6 .)
    KEYWORD_do      reduce using rule 154 (expr5 -> expr6 .)
    KEYWORD_then    reduce using rule 154 (expr5 -> expr6 .)
    CLOSE_PAREN     reduce using rule 154 (expr5 -> expr6 .)


state 44

    (85) func_call_stmt -> fname . OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> fname . func_ret_arg
    (100) func_ret_arg -> . func_arg_expr
    (101) func_ret_arg -> . primary
    (102) func_ret_arg -> . func_ret_arg COMMA func_arg_expr
    (103) func_ret_arg -> . func_ret_arg COMMA primary
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary
    (139) primary -> . INT_CONSTANTS
    (140) primary -> . FLOAT_CONSTANTS
    (141) primary -> . STRING_CONSTANTS
    (142) primary -> . CHAR_CONSTANTS
    (143) primary -> . BOOLEAN_CONSTANTS
    (144) primary -> . CONSTANTS
    (145) primary -> . VARIABLES
    (146) primary -> . array
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET

    OPEN_PAREN      shift and go to state 113
    VARIABLES       shift and go to state 118
    CONSTANTS       shift and go to state 114
    INT_CONSTANTS   shift and go to state 108
    FLOAT_CONSTANTS shift and go to state 109
    STRING_CONSTANTS shift and go to state 112
    CHAR_CONSTANTS  shift and go to state 117
    BOOLEAN_CONSTANTS shift and go to state 107

    func_arg_expr                  shift and go to state 110
    primary                        shift and go to state 111
    func_ret_arg                   shift and go to state 115
    array                          shift and go to state 116

state 45

    (151) expr4 -> expr5 .

    LOGICALAND      reduce using rule 151 (expr4 -> expr5 .)
    LOGICALOR       reduce using rule 151 (expr4 -> expr5 .)
    KEYWORD_while   reduce using rule 151 (expr4 -> expr5 .)
    KEYWORD_until   reduce using rule 151 (expr4 -> expr5 .)
    DELIM           reduce using rule 151 (expr4 -> expr5 .)
    newline         reduce using rule 151 (expr4 -> expr5 .)
    $end            reduce using rule 151 (expr4 -> expr5 .)
    KEYWORD_end     reduce using rule 151 (expr4 -> expr5 .)
    KEYWORD_elsif   reduce using rule 151 (expr4 -> expr5 .)
    KEYWORD_else    reduce using rule 151 (expr4 -> expr5 .)
    KEYWORD_then    reduce using rule 151 (expr4 -> expr5 .)
    CLOSE_PAREN     reduce using rule 151 (expr4 -> expr5 .)
    KEYWORD_do      reduce using rule 151 (expr4 -> expr5 .)


state 46

    (163) expr7 -> expr8 .
    (164) expr8 -> expr8 . BITAND expr9

    LESSEQUAL       reduce using rule 163 (expr7 -> expr8 .)
    LESS            reduce using rule 163 (expr7 -> expr8 .)
    GREATER         reduce using rule 163 (expr7 -> expr8 .)
    GREATEREQUAL    reduce using rule 163 (expr7 -> expr8 .)
    BITXOR          reduce using rule 163 (expr7 -> expr8 .)
    PIPE            reduce using rule 163 (expr7 -> expr8 .)
    DOUBLEEQUAL     reduce using rule 163 (expr7 -> expr8 .)
    NOTEQUAL        reduce using rule 163 (expr7 -> expr8 .)
    LOGICALAND      reduce using rule 163 (expr7 -> expr8 .)
    LOGICALOR       reduce using rule 163 (expr7 -> expr8 .)
    CLOSE_PAREN     reduce using rule 163 (expr7 -> expr8 .)
    KEYWORD_do      reduce using rule 163 (expr7 -> expr8 .)
    newline         reduce using rule 163 (expr7 -> expr8 .)
    KEYWORD_while   reduce using rule 163 (expr7 -> expr8 .)
    KEYWORD_until   reduce using rule 163 (expr7 -> expr8 .)
    DELIM           reduce using rule 163 (expr7 -> expr8 .)
    $end            reduce using rule 163 (expr7 -> expr8 .)
    KEYWORD_end     reduce using rule 163 (expr7 -> expr8 .)
    KEYWORD_elsif   reduce using rule 163 (expr7 -> expr8 .)
    KEYWORD_else    reduce using rule 163 (expr7 -> expr8 .)
    KEYWORD_then    reduce using rule 163 (expr7 -> expr8 .)
    CLOSE_BRACKET   reduce using rule 163 (expr7 -> expr8 .)
    BITAND          shift and go to state 119


state 47

    (165) expr8 -> expr9 .
    (166) expr9 -> expr9 . SHIFTL expr10
    (167) expr9 -> expr9 . SHIFTR expr10

    BITAND          reduce using rule 165 (expr8 -> expr9 .)
    LESSEQUAL       reduce using rule 165 (expr8 -> expr9 .)
    LESS            reduce using rule 165 (expr8 -> expr9 .)
    GREATER         reduce using rule 165 (expr8 -> expr9 .)
    GREATEREQUAL    reduce using rule 165 (expr8 -> expr9 .)
    BITXOR          reduce using rule 165 (expr8 -> expr9 .)
    PIPE            reduce using rule 165 (expr8 -> expr9 .)
    DOUBLEEQUAL     reduce using rule 165 (expr8 -> expr9 .)
    NOTEQUAL        reduce using rule 165 (expr8 -> expr9 .)
    LOGICALAND      reduce using rule 165 (expr8 -> expr9 .)
    LOGICALOR       reduce using rule 165 (expr8 -> expr9 .)
    KEYWORD_do      reduce using rule 165 (expr8 -> expr9 .)
    newline         reduce using rule 165 (expr8 -> expr9 .)
    KEYWORD_while   reduce using rule 165 (expr8 -> expr9 .)
    KEYWORD_until   reduce using rule 165 (expr8 -> expr9 .)
    DELIM           reduce using rule 165 (expr8 -> expr9 .)
    $end            reduce using rule 165 (expr8 -> expr9 .)
    KEYWORD_end     reduce using rule 165 (expr8 -> expr9 .)
    KEYWORD_elsif   reduce using rule 165 (expr8 -> expr9 .)
    KEYWORD_else    reduce using rule 165 (expr8 -> expr9 .)
    KEYWORD_then    reduce using rule 165 (expr8 -> expr9 .)
    CLOSE_PAREN     reduce using rule 165 (expr8 -> expr9 .)
    CLOSE_BRACKET   reduce using rule 165 (expr8 -> expr9 .)
    SHIFTL          shift and go to state 121
    SHIFTR          shift and go to state 120


state 48

    (89) loop_stmt -> KEYWORD_break .

    KEYWORD_while   reduce using rule 89 (loop_stmt -> KEYWORD_break .)
    KEYWORD_until   reduce using rule 89 (loop_stmt -> KEYWORD_break .)
    DELIM           reduce using rule 89 (loop_stmt -> KEYWORD_break .)
    newline         reduce using rule 89 (loop_stmt -> KEYWORD_break .)
    KEYWORD_elsif   reduce using rule 89 (loop_stmt -> KEYWORD_break .)
    KEYWORD_else    reduce using rule 89 (loop_stmt -> KEYWORD_break .)
    KEYWORD_end     reduce using rule 89 (loop_stmt -> KEYWORD_break .)
    $end            reduce using rule 89 (loop_stmt -> KEYWORD_break .)


state 49

    (83) stmt -> exit_stmt .

    KEYWORD_while   reduce using rule 83 (stmt -> exit_stmt .)
    KEYWORD_until   reduce using rule 83 (stmt -> exit_stmt .)
    DELIM           reduce using rule 83 (stmt -> exit_stmt .)
    newline         reduce using rule 83 (stmt -> exit_stmt .)
    KEYWORD_end     reduce using rule 83 (stmt -> exit_stmt .)
    KEYWORD_elsif   reduce using rule 83 (stmt -> exit_stmt .)
    KEYWORD_else    reduce using rule 83 (stmt -> exit_stmt .)
    $end            reduce using rule 83 (stmt -> exit_stmt .)


state 50

    (1) program -> top_top_compstmt .

    $end            reduce using rule 1 (program -> top_top_compstmt .)


state 51

    (74) top_stmt -> KEYWORD_for . OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> KEYWORD_for . multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (112) multi_var -> . VARIABLES
    (113) multi_var -> . CONSTANTS
    (114) multi_var -> . array
    (115) multi_var -> . multi_var COMMA VARIABLES
    (116) multi_var -> . multi_var COMMA CONSTANTS
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET

    OPEN_PAREN      shift and go to state 122
    VARIABLES       shift and go to state 123
    CONSTANTS       shift and go to state 125

    multi_var                      shift and go to state 124
    array                          shift and go to state 126

state 52

    (124) expr -> mlhs EQUAL . mrhs
    (87) func_call_stmt -> mlhs EQUAL . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> mlhs EQUAL . fname func_ret_arg
    (128) mrhs -> . expr1
    (129) mrhs -> . str_expr
    (130) mrhs -> . KEYWORD_gets
    (131) mrhs -> . OPEN_BRACKET CLOSE_BRACKET
    (132) mrhs -> . VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (133) mrhs -> . VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (134) mrhs -> . VARIABLES DOT VARIABLES
    (135) mrhs -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (136) mrhs -> . CONSTANTS DOT KEYWORD_new
    (137) mrhs -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (147) expr1 -> . expr3
    (138) str_expr -> . STRING_CONSTANTS
    (148) expr3 -> . expr3 LOGICALOR expr4
    (149) expr3 -> . expr4
    (150) expr4 -> . expr4 LOGICALAND expr5
    (151) expr4 -> . expr5
    (152) expr5 -> . expr6 DOUBLEEQUAL expr6
    (153) expr5 -> . expr6 NOTEQUAL expr6
    (154) expr5 -> . expr6
    (155) expr6 -> . expr7 LESSEQUAL expr7
    (156) expr6 -> . expr7 LESS expr7
    (157) expr6 -> . expr7 GREATER expr7
    (158) expr6 -> . expr7 GREATEREQUAL expr7
    (159) expr6 -> . expr7
    (160) expr6 -> . BOOLEAN_CONSTANTS
    (161) expr7 -> . expr7 BITXOR expr8
    (162) expr7 -> . expr7 PIPE expr8
    (163) expr7 -> . expr8
    (164) expr8 -> . expr8 BITAND expr9
    (165) expr8 -> . expr9
    (166) expr9 -> . expr9 SHIFTL expr10
    (167) expr9 -> . expr9 SHIFTR expr10
    (168) expr9 -> . expr10
    (169) expr10 -> . expr10 PLUS expr11
    (170) expr10 -> . expr10 MINUS expr11
    (171) expr10 -> . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (194) none -> .

    KEYWORD_gets    shift and go to state 93
    OPEN_BRACKET    shift and go to state 91
    VARIABLES       shift and go to state 127
    CONSTANTS       shift and go to state 130
    STRING_CONSTANTS shift and go to state 96
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)

    expr11                         shift and go to state 15
    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    str_expr                       shift and go to state 89
    array                          shift and go to state 55
    expr5                          shift and go to state 45
    expr3                          shift and go to state 41
    mrhs                           shift and go to state 129
    expr6                          shift and go to state 43
    fname                          shift and go to state 128
    expr4                          shift and go to state 8
    expr10                         shift and go to state 14
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    expr13                         shift and go to state 16
    expr1                          shift and go to state 92
    expr7                          shift and go to state 7

state 53

    (180) expr13 -> VARIABLES .
    (182) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET

    MULTIPLY        reduce using rule 180 (expr13 -> VARIABLES .)
    DIV             reduce using rule 180 (expr13 -> VARIABLES .)
    MOD             reduce using rule 180 (expr13 -> VARIABLES .)
    PLUS            reduce using rule 180 (expr13 -> VARIABLES .)
    MINUS           reduce using rule 180 (expr13 -> VARIABLES .)
    SHIFTL          reduce using rule 180 (expr13 -> VARIABLES .)
    SHIFTR          reduce using rule 180 (expr13 -> VARIABLES .)
    BITAND          reduce using rule 180 (expr13 -> VARIABLES .)
    LESSEQUAL       reduce using rule 180 (expr13 -> VARIABLES .)
    LESS            reduce using rule 180 (expr13 -> VARIABLES .)
    GREATER         reduce using rule 180 (expr13 -> VARIABLES .)
    GREATEREQUAL    reduce using rule 180 (expr13 -> VARIABLES .)
    BITXOR          reduce using rule 180 (expr13 -> VARIABLES .)
    PIPE            reduce using rule 180 (expr13 -> VARIABLES .)
    DOUBLEEQUAL     reduce using rule 180 (expr13 -> VARIABLES .)
    NOTEQUAL        reduce using rule 180 (expr13 -> VARIABLES .)
    LOGICALAND      reduce using rule 180 (expr13 -> VARIABLES .)
    LOGICALOR       reduce using rule 180 (expr13 -> VARIABLES .)
    KEYWORD_while   reduce using rule 180 (expr13 -> VARIABLES .)
    KEYWORD_until   reduce using rule 180 (expr13 -> VARIABLES .)
    DELIM           reduce using rule 180 (expr13 -> VARIABLES .)
    newline         reduce using rule 180 (expr13 -> VARIABLES .)
    $end            reduce using rule 180 (expr13 -> VARIABLES .)
    KEYWORD_do      reduce using rule 180 (expr13 -> VARIABLES .)
    KEYWORD_then    reduce using rule 180 (expr13 -> VARIABLES .)
    CLOSE_PAREN     reduce using rule 180 (expr13 -> VARIABLES .)
    KEYWORD_end     reduce using rule 180 (expr13 -> VARIABLES .)
    KEYWORD_elsif   reduce using rule 180 (expr13 -> VARIABLES .)
    KEYWORD_else    reduce using rule 180 (expr13 -> VARIABLES .)
    CLOSE_BRACKET   reduce using rule 180 (expr13 -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 85


state 54

    (68) top_stmt -> KEYWORD_while expr3 . opt_do gen_stmts opt_terms KEYWORD_end
    (148) expr3 -> expr3 . LOGICALOR expr4
    (110) opt_do -> . KEYWORD_do
    (111) opt_do -> . newline

    LOGICALOR       shift and go to state 104
    KEYWORD_do      shift and go to state 132
    newline         shift and go to state 131

    opt_do                         shift and go to state 133

state 55

    (181) expr13 -> array .

    MULTIPLY        reduce using rule 181 (expr13 -> array .)
    DIV             reduce using rule 181 (expr13 -> array .)
    MOD             reduce using rule 181 (expr13 -> array .)
    PLUS            reduce using rule 181 (expr13 -> array .)
    MINUS           reduce using rule 181 (expr13 -> array .)
    SHIFTL          reduce using rule 181 (expr13 -> array .)
    SHIFTR          reduce using rule 181 (expr13 -> array .)
    BITAND          reduce using rule 181 (expr13 -> array .)
    LESSEQUAL       reduce using rule 181 (expr13 -> array .)
    LESS            reduce using rule 181 (expr13 -> array .)
    GREATER         reduce using rule 181 (expr13 -> array .)
    GREATEREQUAL    reduce using rule 181 (expr13 -> array .)
    BITXOR          reduce using rule 181 (expr13 -> array .)
    PIPE            reduce using rule 181 (expr13 -> array .)
    DOUBLEEQUAL     reduce using rule 181 (expr13 -> array .)
    NOTEQUAL        reduce using rule 181 (expr13 -> array .)
    LOGICALAND      reduce using rule 181 (expr13 -> array .)
    LOGICALOR       reduce using rule 181 (expr13 -> array .)
    KEYWORD_while   reduce using rule 181 (expr13 -> array .)
    KEYWORD_until   reduce using rule 181 (expr13 -> array .)
    DELIM           reduce using rule 181 (expr13 -> array .)
    newline         reduce using rule 181 (expr13 -> array .)
    $end            reduce using rule 181 (expr13 -> array .)
    KEYWORD_do      reduce using rule 181 (expr13 -> array .)
    KEYWORD_then    reduce using rule 181 (expr13 -> array .)
    CLOSE_PAREN     reduce using rule 181 (expr13 -> array .)
    KEYWORD_end     reduce using rule 181 (expr13 -> array .)
    KEYWORD_elsif   reduce using rule 181 (expr13 -> array .)
    KEYWORD_else    reduce using rule 181 (expr13 -> array .)
    CLOSE_BRACKET   reduce using rule 181 (expr13 -> array .)


state 56

    (179) expr13 -> CONSTANTS .

    MULTIPLY        reduce using rule 179 (expr13 -> CONSTANTS .)
    DIV             reduce using rule 179 (expr13 -> CONSTANTS .)
    MOD             reduce using rule 179 (expr13 -> CONSTANTS .)
    PLUS            reduce using rule 179 (expr13 -> CONSTANTS .)
    MINUS           reduce using rule 179 (expr13 -> CONSTANTS .)
    SHIFTL          reduce using rule 179 (expr13 -> CONSTANTS .)
    SHIFTR          reduce using rule 179 (expr13 -> CONSTANTS .)
    BITAND          reduce using rule 179 (expr13 -> CONSTANTS .)
    LESSEQUAL       reduce using rule 179 (expr13 -> CONSTANTS .)
    LESS            reduce using rule 179 (expr13 -> CONSTANTS .)
    GREATER         reduce using rule 179 (expr13 -> CONSTANTS .)
    GREATEREQUAL    reduce using rule 179 (expr13 -> CONSTANTS .)
    BITXOR          reduce using rule 179 (expr13 -> CONSTANTS .)
    PIPE            reduce using rule 179 (expr13 -> CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 179 (expr13 -> CONSTANTS .)
    NOTEQUAL        reduce using rule 179 (expr13 -> CONSTANTS .)
    LOGICALAND      reduce using rule 179 (expr13 -> CONSTANTS .)
    LOGICALOR       reduce using rule 179 (expr13 -> CONSTANTS .)
    KEYWORD_while   reduce using rule 179 (expr13 -> CONSTANTS .)
    KEYWORD_until   reduce using rule 179 (expr13 -> CONSTANTS .)
    DELIM           reduce using rule 179 (expr13 -> CONSTANTS .)
    newline         reduce using rule 179 (expr13 -> CONSTANTS .)
    $end            reduce using rule 179 (expr13 -> CONSTANTS .)
    KEYWORD_do      reduce using rule 179 (expr13 -> CONSTANTS .)
    KEYWORD_then    reduce using rule 179 (expr13 -> CONSTANTS .)
    CLOSE_PAREN     reduce using rule 179 (expr13 -> CONSTANTS .)
    KEYWORD_end     reduce using rule 179 (expr13 -> CONSTANTS .)
    KEYWORD_elsif   reduce using rule 179 (expr13 -> CONSTANTS .)
    KEYWORD_else    reduce using rule 179 (expr13 -> CONSTANTS .)
    CLOSE_BRACKET   reduce using rule 179 (expr13 -> CONSTANTS .)


state 57

    (158) expr6 -> expr7 GREATEREQUAL . expr7
    (161) expr7 -> . expr7 BITXOR expr8
    (162) expr7 -> . expr7 PIPE expr8
    (163) expr7 -> . expr8
    (164) expr8 -> . expr8 BITAND expr9
    (165) expr8 -> . expr9
    (166) expr9 -> . expr9 SHIFTL expr10
    (167) expr9 -> . expr9 SHIFTR expr10
    (168) expr9 -> . expr10
    (169) expr10 -> . expr10 PLUS expr11
    (170) expr10 -> . expr10 MINUS expr11
    (171) expr10 -> . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (194) none -> .

    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr10                         shift and go to state 14
    expr7                          shift and go to state 134
    expr13                         shift and go to state 16
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    array                          shift and go to state 55
    expr11                         shift and go to state 15

state 58

    (157) expr6 -> expr7 GREATER . expr7
    (161) expr7 -> . expr7 BITXOR expr8
    (162) expr7 -> . expr7 PIPE expr8
    (163) expr7 -> . expr8
    (164) expr8 -> . expr8 BITAND expr9
    (165) expr8 -> . expr9
    (166) expr9 -> . expr9 SHIFTL expr10
    (167) expr9 -> . expr9 SHIFTR expr10
    (168) expr9 -> . expr10
    (169) expr10 -> . expr10 PLUS expr11
    (170) expr10 -> . expr10 MINUS expr11
    (171) expr10 -> . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (194) none -> .

    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr10                         shift and go to state 14
    expr7                          shift and go to state 135
    expr13                         shift and go to state 16
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    array                          shift and go to state 55
    expr11                         shift and go to state 15

state 59

    (156) expr6 -> expr7 LESS . expr7
    (161) expr7 -> . expr7 BITXOR expr8
    (162) expr7 -> . expr7 PIPE expr8
    (163) expr7 -> . expr8
    (164) expr8 -> . expr8 BITAND expr9
    (165) expr8 -> . expr9
    (166) expr9 -> . expr9 SHIFTL expr10
    (167) expr9 -> . expr9 SHIFTR expr10
    (168) expr9 -> . expr10
    (169) expr10 -> . expr10 PLUS expr11
    (170) expr10 -> . expr10 MINUS expr11
    (171) expr10 -> . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (194) none -> .

    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr10                         shift and go to state 14
    expr7                          shift and go to state 136
    expr13                         shift and go to state 16
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    array                          shift and go to state 55
    expr11                         shift and go to state 15

state 60

    (162) expr7 -> expr7 PIPE . expr8
    (164) expr8 -> . expr8 BITAND expr9
    (165) expr8 -> . expr9
    (166) expr9 -> . expr9 SHIFTL expr10
    (167) expr9 -> . expr9 SHIFTR expr10
    (168) expr9 -> . expr10
    (169) expr10 -> . expr10 PLUS expr11
    (170) expr10 -> . expr10 MINUS expr11
    (171) expr10 -> . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (194) none -> .

    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr10                         shift and go to state 14
    expr13                         shift and go to state 16
    expr8                          shift and go to state 137
    expr9                          shift and go to state 47
    array                          shift and go to state 55
    expr11                         shift and go to state 15

state 61

    (161) expr7 -> expr7 BITXOR . expr8
    (164) expr8 -> . expr8 BITAND expr9
    (165) expr8 -> . expr9
    (166) expr9 -> . expr9 SHIFTL expr10
    (167) expr9 -> . expr9 SHIFTR expr10
    (168) expr9 -> . expr10
    (169) expr10 -> . expr10 PLUS expr11
    (170) expr10 -> . expr10 MINUS expr11
    (171) expr10 -> . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (194) none -> .

    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr10                         shift and go to state 14
    expr13                         shift and go to state 16
    expr8                          shift and go to state 138
    expr9                          shift and go to state 47
    array                          shift and go to state 55
    expr11                         shift and go to state 15

state 62

    (155) expr6 -> expr7 LESSEQUAL . expr7
    (161) expr7 -> . expr7 BITXOR expr8
    (162) expr7 -> . expr7 PIPE expr8
    (163) expr7 -> . expr8
    (164) expr8 -> . expr8 BITAND expr9
    (165) expr8 -> . expr9
    (166) expr9 -> . expr9 SHIFTL expr10
    (167) expr9 -> . expr9 SHIFTR expr10
    (168) expr9 -> . expr10
    (169) expr10 -> . expr10 PLUS expr11
    (170) expr10 -> . expr10 MINUS expr11
    (171) expr10 -> . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (194) none -> .

    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr10                         shift and go to state 14
    expr7                          shift and go to state 139
    expr13                         shift and go to state 16
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    array                          shift and go to state 55
    expr11                         shift and go to state 15

state 63

    (150) expr4 -> expr4 LOGICALAND . expr5
    (152) expr5 -> . expr6 DOUBLEEQUAL expr6
    (153) expr5 -> . expr6 NOTEQUAL expr6
    (154) expr5 -> . expr6
    (155) expr6 -> . expr7 LESSEQUAL expr7
    (156) expr6 -> . expr7 LESS expr7
    (157) expr6 -> . expr7 GREATER expr7
    (158) expr6 -> . expr7 GREATEREQUAL expr7
    (159) expr6 -> . expr7
    (160) expr6 -> . BOOLEAN_CONSTANTS
    (161) expr7 -> . expr7 BITXOR expr8
    (162) expr7 -> . expr7 PIPE expr8
    (163) expr7 -> . expr8
    (164) expr8 -> . expr8 BITAND expr9
    (165) expr8 -> . expr9
    (166) expr9 -> . expr9 SHIFTL expr10
    (167) expr9 -> . expr9 SHIFTR expr10
    (168) expr9 -> . expr10
    (169) expr10 -> . expr10 PLUS expr11
    (170) expr10 -> . expr10 MINUS expr11
    (171) expr10 -> . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (194) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr13                         shift and go to state 16
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    expr5                          shift and go to state 140
    expr10                         shift and go to state 14
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    array                          shift and go to state 55
    expr11                         shift and go to state 15

state 64

    (177) expr13 -> uexpr INT_CONSTANTS .

    MULTIPLY        reduce using rule 177 (expr13 -> uexpr INT_CONSTANTS .)
    DIV             reduce using rule 177 (expr13 -> uexpr INT_CONSTANTS .)
    MOD             reduce using rule 177 (expr13 -> uexpr INT_CONSTANTS .)
    PLUS            reduce using rule 177 (expr13 -> uexpr INT_CONSTANTS .)
    MINUS           reduce using rule 177 (expr13 -> uexpr INT_CONSTANTS .)
    SHIFTL          reduce using rule 177 (expr13 -> uexpr INT_CONSTANTS .)
    SHIFTR          reduce using rule 177 (expr13 -> uexpr INT_CONSTANTS .)
    BITAND          reduce using rule 177 (expr13 -> uexpr INT_CONSTANTS .)
    LESSEQUAL       reduce using rule 177 (expr13 -> uexpr INT_CONSTANTS .)
    LESS            reduce using rule 177 (expr13 -> uexpr INT_CONSTANTS .)
    GREATER         reduce using rule 177 (expr13 -> uexpr INT_CONSTANTS .)
    GREATEREQUAL    reduce using rule 177 (expr13 -> uexpr INT_CONSTANTS .)
    BITXOR          reduce using rule 177 (expr13 -> uexpr INT_CONSTANTS .)
    PIPE            reduce using rule 177 (expr13 -> uexpr INT_CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 177 (expr13 -> uexpr INT_CONSTANTS .)
    NOTEQUAL        reduce using rule 177 (expr13 -> uexpr INT_CONSTANTS .)
    LOGICALAND      reduce using rule 177 (expr13 -> uexpr INT_CONSTANTS .)
    LOGICALOR       reduce using rule 177 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_while   reduce using rule 177 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_until   reduce using rule 177 (expr13 -> uexpr INT_CONSTANTS .)
    DELIM           reduce using rule 177 (expr13 -> uexpr INT_CONSTANTS .)
    newline         reduce using rule 177 (expr13 -> uexpr INT_CONSTANTS .)
    $end            reduce using rule 177 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_do      reduce using rule 177 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_then    reduce using rule 177 (expr13 -> uexpr INT_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 177 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_end     reduce using rule 177 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 177 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_else    reduce using rule 177 (expr13 -> uexpr INT_CONSTANTS .)
    CLOSE_BRACKET   reduce using rule 177 (expr13 -> uexpr INT_CONSTANTS .)


state 65

    (178) expr13 -> uexpr FLOAT_CONSTANTS .

    MULTIPLY        reduce using rule 178 (expr13 -> uexpr FLOAT_CONSTANTS .)
    DIV             reduce using rule 178 (expr13 -> uexpr FLOAT_CONSTANTS .)
    MOD             reduce using rule 178 (expr13 -> uexpr FLOAT_CONSTANTS .)
    PLUS            reduce using rule 178 (expr13 -> uexpr FLOAT_CONSTANTS .)
    MINUS           reduce using rule 178 (expr13 -> uexpr FLOAT_CONSTANTS .)
    SHIFTL          reduce using rule 178 (expr13 -> uexpr FLOAT_CONSTANTS .)
    SHIFTR          reduce using rule 178 (expr13 -> uexpr FLOAT_CONSTANTS .)
    BITAND          reduce using rule 178 (expr13 -> uexpr FLOAT_CONSTANTS .)
    LESSEQUAL       reduce using rule 178 (expr13 -> uexpr FLOAT_CONSTANTS .)
    LESS            reduce using rule 178 (expr13 -> uexpr FLOAT_CONSTANTS .)
    GREATER         reduce using rule 178 (expr13 -> uexpr FLOAT_CONSTANTS .)
    GREATEREQUAL    reduce using rule 178 (expr13 -> uexpr FLOAT_CONSTANTS .)
    BITXOR          reduce using rule 178 (expr13 -> uexpr FLOAT_CONSTANTS .)
    PIPE            reduce using rule 178 (expr13 -> uexpr FLOAT_CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 178 (expr13 -> uexpr FLOAT_CONSTANTS .)
    NOTEQUAL        reduce using rule 178 (expr13 -> uexpr FLOAT_CONSTANTS .)
    LOGICALAND      reduce using rule 178 (expr13 -> uexpr FLOAT_CONSTANTS .)
    LOGICALOR       reduce using rule 178 (expr13 -> uexpr FLOAT_CONSTANTS .)
    KEYWORD_while   reduce using rule 178 (expr13 -> uexpr FLOAT_CONSTANTS .)
    KEYWORD_until   reduce using rule 178 (expr13 -> uexpr FLOAT_CONSTANTS .)
    DELIM           reduce using rule 178 (expr13 -> uexpr FLOAT_CONSTANTS .)
    newline         reduce using rule 178 (expr13 -> uexpr FLOAT_CONSTANTS .)
    $end            reduce using rule 178 (expr13 -> uexpr FLOAT_CONSTANTS .)
    KEYWORD_do      reduce using rule 178 (expr13 -> uexpr FLOAT_CONSTANTS .)
    KEYWORD_then    reduce using rule 178 (expr13 -> uexpr FLOAT_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 178 (expr13 -> uexpr FLOAT_CONSTANTS .)
    KEYWORD_end     reduce using rule 178 (expr13 -> uexpr FLOAT_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 178 (expr13 -> uexpr FLOAT_CONSTANTS .)
    KEYWORD_else    reduce using rule 178 (expr13 -> uexpr FLOAT_CONSTANTS .)
    CLOSE_BRACKET   reduce using rule 178 (expr13 -> uexpr FLOAT_CONSTANTS .)


state 66

    (69) top_stmt -> top_stmt KEYWORD_while . expr3
    (148) expr3 -> . expr3 LOGICALOR expr4
    (149) expr3 -> . expr4
    (150) expr4 -> . expr4 LOGICALAND expr5
    (151) expr4 -> . expr5
    (152) expr5 -> . expr6 DOUBLEEQUAL expr6
    (153) expr5 -> . expr6 NOTEQUAL expr6
    (154) expr5 -> . expr6
    (155) expr6 -> . expr7 LESSEQUAL expr7
    (156) expr6 -> . expr7 LESS expr7
    (157) expr6 -> . expr7 GREATER expr7
    (158) expr6 -> . expr7 GREATEREQUAL expr7
    (159) expr6 -> . expr7
    (160) expr6 -> . BOOLEAN_CONSTANTS
    (161) expr7 -> . expr7 BITXOR expr8
    (162) expr7 -> . expr7 PIPE expr8
    (163) expr7 -> . expr8
    (164) expr8 -> . expr8 BITAND expr9
    (165) expr8 -> . expr9
    (166) expr9 -> . expr9 SHIFTL expr10
    (167) expr9 -> . expr9 SHIFTR expr10
    (168) expr9 -> . expr10
    (169) expr10 -> . expr10 PLUS expr11
    (170) expr10 -> . expr10 MINUS expr11
    (171) expr10 -> . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (194) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr13                         shift and go to state 16
    expr3                          shift and go to state 141
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    expr4                          shift and go to state 8
    expr5                          shift and go to state 45
    expr10                         shift and go to state 14
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    array                          shift and go to state 55
    expr11                         shift and go to state 15

state 67

    (71) top_stmt -> top_stmt KEYWORD_until . expr3
    (148) expr3 -> . expr3 LOGICALOR expr4
    (149) expr3 -> . expr4
    (150) expr4 -> . expr4 LOGICALAND expr5
    (151) expr4 -> . expr5
    (152) expr5 -> . expr6 DOUBLEEQUAL expr6
    (153) expr5 -> . expr6 NOTEQUAL expr6
    (154) expr5 -> . expr6
    (155) expr6 -> . expr7 LESSEQUAL expr7
    (156) expr6 -> . expr7 LESS expr7
    (157) expr6 -> . expr7 GREATER expr7
    (158) expr6 -> . expr7 GREATEREQUAL expr7
    (159) expr6 -> . expr7
    (160) expr6 -> . BOOLEAN_CONSTANTS
    (161) expr7 -> . expr7 BITXOR expr8
    (162) expr7 -> . expr7 PIPE expr8
    (163) expr7 -> . expr8
    (164) expr8 -> . expr8 BITAND expr9
    (165) expr8 -> . expr9
    (166) expr9 -> . expr9 SHIFTL expr10
    (167) expr9 -> . expr9 SHIFTR expr10
    (168) expr9 -> . expr10
    (169) expr10 -> . expr10 PLUS expr11
    (170) expr10 -> . expr10 MINUS expr11
    (171) expr10 -> . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (194) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr13                         shift and go to state 16
    expr3                          shift and go to state 142
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    expr4                          shift and go to state 8
    expr5                          shift and go to state 45
    expr10                         shift and go to state 14
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    array                          shift and go to state 55
    expr11                         shift and go to state 15

state 68

    (169) expr10 -> expr10 PLUS . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (194) none -> .

    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr11                         shift and go to state 143
    expr13                         shift and go to state 16
    array                          shift and go to state 55

state 69

    (170) expr10 -> expr10 MINUS . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (194) none -> .

    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr11                         shift and go to state 144
    expr13                         shift and go to state 16
    array                          shift and go to state 55

state 70

    (172) expr11 -> expr11 MULTIPLY . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (194) none -> .

    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr13                         shift and go to state 145
    array                          shift and go to state 55

state 71

    (173) expr11 -> expr11 DIV . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (194) none -> .

    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr13                         shift and go to state 146
    array                          shift and go to state 55

state 72

    (174) expr11 -> expr11 MOD . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (194) none -> .

    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr13                         shift and go to state 147
    array                          shift and go to state 55

state 73

    (54) fname -> CONSTANTS .

    OPEN_PAREN      reduce using rule 54 (fname -> CONSTANTS .)
    VARIABLES       reduce using rule 54 (fname -> CONSTANTS .)
    CONSTANTS       reduce using rule 54 (fname -> CONSTANTS .)
    newline         reduce using rule 54 (fname -> CONSTANTS .)


state 74

    (53) fname -> VARIABLES .

    OPEN_PAREN      reduce using rule 53 (fname -> VARIABLES .)
    VARIABLES       reduce using rule 53 (fname -> VARIABLES .)
    CONSTANTS       reduce using rule 53 (fname -> VARIABLES .)
    newline         reduce using rule 53 (fname -> VARIABLES .)


state 75

    (14) func_defn -> KEYWORD_def fname . OPEN_PAREN arguments CLOSE_PAREN func_stmts opt_terms KEYWORD_end
    (15) func_defn -> KEYWORD_def fname . OPEN_PAREN CLOSE_PAREN func_stmts opt_terms KEYWORD_end
    (16) func_defn -> KEYWORD_def fname . arguments func_stmts opt_terms KEYWORD_end
    (55) arguments -> . arguments COMMA VARIABLES
    (56) arguments -> . arguments COMMA CONSTANTS
    (57) arguments -> . arguments COMMA func_arg_expr
    (58) arguments -> . VARIABLES
    (59) arguments -> . CONSTANTS
    (60) arguments -> . func_arg_expr
    (61) arguments -> . newline
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary

    OPEN_PAREN      shift and go to state 151
    VARIABLES       shift and go to state 149
    CONSTANTS       shift and go to state 148
    newline         shift and go to state 150

    func_arg_expr                  shift and go to state 153
    arguments                      shift and go to state 152

state 76

    (11) statement -> CONSTANTS DOT . KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (12) statement -> CONSTANTS DOT . KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (13) statement -> CONSTANTS DOT . KEYWORD_new arguments

    KEYWORD_new     shift and go to state 154


state 77

    (190) terms -> term .

    SIGIL_AT        reduce using rule 190 (terms -> term .)
    DELIM           reduce using rule 190 (terms -> term .)
    newline         reduce using rule 190 (terms -> term .)
    KEYWORD_if      reduce using rule 190 (terms -> term .)
    KEYWORD_while   reduce using rule 190 (terms -> term .)
    KEYWORD_begin   reduce using rule 190 (terms -> term .)
    KEYWORD_until   reduce using rule 190 (terms -> term .)
    KEYWORD_for     reduce using rule 190 (terms -> term .)
    KEYWORD_puts    reduce using rule 190 (terms -> term .)
    KEYWORD_break   reduce using rule 190 (terms -> term .)
    KEYWORD_next    reduce using rule 190 (terms -> term .)
    KEYWORD_redo    reduce using rule 190 (terms -> term .)
    KEYWORD_exit    reduce using rule 190 (terms -> term .)
    VARIABLES       reduce using rule 190 (terms -> term .)
    CONSTANTS       reduce using rule 190 (terms -> term .)
    BOOLEAN_CONSTANTS reduce using rule 190 (terms -> term .)
    OPEN_PAREN      reduce using rule 190 (terms -> term .)
    PLUS            reduce using rule 190 (terms -> term .)
    MINUS           reduce using rule 190 (terms -> term .)
    BITNOT          reduce using rule 190 (terms -> term .)
    BITCOMP         reduce using rule 190 (terms -> term .)
    INT_CONSTANTS   reduce using rule 190 (terms -> term .)
    FLOAT_CONSTANTS reduce using rule 190 (terms -> term .)
    KEYWORD_elsif   reduce using rule 190 (terms -> term .)
    KEYWORD_else    reduce using rule 190 (terms -> term .)
    KEYWORD_end     reduce using rule 190 (terms -> term .)
    SIGIL_DOUBLE_AT reduce using rule 190 (terms -> term .)
    KEYWORD_return  reduce using rule 190 (terms -> term .)
    KEYWORD_def     reduce using rule 190 (terms -> term .)
    KEYWORD_class   reduce using rule 190 (terms -> term .)
    $end            reduce using rule 190 (terms -> term .)


state 78

    (4) statements -> statements terms . statement
    (189) opt_terms -> terms .
    (191) terms -> terms . term
    (5) statement -> . top_compstmt
    (6) statement -> . func_defn
    (7) statement -> . class_defn
    (8) statement -> . VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (9) statement -> . VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (10) statement -> . VARIABLES DOT VARIABLES arguments
    (11) statement -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (12) statement -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (13) statement -> . CONSTANTS DOT KEYWORD_new arguments
    (192) term -> . DELIM
    (193) term -> . newline
    (64) top_compstmt -> . top_stmts
    (14) func_defn -> . KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN func_stmts opt_terms KEYWORD_end
    (15) func_defn -> . KEYWORD_def fname OPEN_PAREN CLOSE_PAREN func_stmts opt_terms KEYWORD_end
    (16) func_defn -> . KEYWORD_def fname arguments func_stmts opt_terms KEYWORD_end
    (17) class_defn -> . KEYWORD_class CONSTANTS newline class_stmts opt_terms KEYWORD_end
    (65) top_stmts -> . top_stmt
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . mlhs EQUAL mrhs
    (147) expr1 -> . expr3
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . mlhs EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . mlhs EQUAL fname func_ret_arg
    (125) mlhs -> . VARIABLES
    (126) mlhs -> . CONSTANTS
    (127) mlhs -> . array
    (148) expr3 -> . expr3 LOGICALOR expr4
    (149) expr3 -> . expr4
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (150) expr4 -> . expr4 LOGICALAND expr5
    (151) expr4 -> . expr5
    (152) expr5 -> . expr6 DOUBLEEQUAL expr6
    (153) expr5 -> . expr6 NOTEQUAL expr6
    (154) expr5 -> . expr6
    (155) expr6 -> . expr7 LESSEQUAL expr7
    (156) expr6 -> . expr7 LESS expr7
    (157) expr6 -> . expr7 GREATER expr7
    (158) expr6 -> . expr7 GREATEREQUAL expr7
    (159) expr6 -> . expr7
    (160) expr6 -> . BOOLEAN_CONSTANTS
    (161) expr7 -> . expr7 BITXOR expr8
    (162) expr7 -> . expr7 PIPE expr8
    (163) expr7 -> . expr8
    (164) expr8 -> . expr8 BITAND expr9
    (165) expr8 -> . expr9
    (166) expr9 -> . expr9 SHIFTL expr10
    (167) expr9 -> . expr9 SHIFTR expr10
    (168) expr9 -> . expr10
    (169) expr10 -> . expr10 PLUS expr11
    (170) expr10 -> . expr10 MINUS expr11
    (171) expr10 -> . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP
    (194) none -> .

    $end            reduce using rule 189 (opt_terms -> terms .)
    VARIABLES       shift and go to state 28
    CONSTANTS       shift and go to state 22
    DELIM           shift and go to state 80
    newline         shift and go to state 79
    KEYWORD_def     shift and go to state 21
    KEYWORD_class   shift and go to state 39
    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 38
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 51
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 48
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)

    mlhs                           shift and go to state 2
    func_defn                      shift and go to state 37
    puts_stmt                      shift and go to state 18
    expr11                         shift and go to state 15
    expr13                         shift and go to state 16
    top_stmts                      shift and go to state 17
    array                          shift and go to state 26
    expr3                          shift and go to state 41
    expr1                          shift and go to state 42
    expr6                          shift and go to state 43
    fname                          shift and go to state 44
    expr5                          shift and go to state 45
    func_call_stmt                 shift and go to state 32
    expr7                          shift and go to state 7
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    expr4                          shift and go to state 8
    statement                      shift and go to state 156
    exit_stmt                      shift and go to state 49
    top_compstmt                   shift and go to state 19
    none                           shift and go to state 34
    stmt                           shift and go to state 20
    loop_stmt                      shift and go to state 9
    uexpr                          shift and go to state 10
    term                           shift and go to state 155
    expr                           shift and go to state 35
    class_defn                     shift and go to state 36
    expr10                         shift and go to state 14
    top_stmt                       shift and go to state 13

state 79

    (193) term -> newline .

    KEYWORD_if      reduce using rule 193 (term -> newline .)
    KEYWORD_while   reduce using rule 193 (term -> newline .)
    KEYWORD_begin   reduce using rule 193 (term -> newline .)
    KEYWORD_until   reduce using rule 193 (term -> newline .)
    KEYWORD_for     reduce using rule 193 (term -> newline .)
    DELIM           reduce using rule 193 (term -> newline .)
    newline         reduce using rule 193 (term -> newline .)
    KEYWORD_puts    reduce using rule 193 (term -> newline .)
    KEYWORD_break   reduce using rule 193 (term -> newline .)
    KEYWORD_next    reduce using rule 193 (term -> newline .)
    KEYWORD_redo    reduce using rule 193 (term -> newline .)
    KEYWORD_exit    reduce using rule 193 (term -> newline .)
    VARIABLES       reduce using rule 193 (term -> newline .)
    CONSTANTS       reduce using rule 193 (term -> newline .)
    BOOLEAN_CONSTANTS reduce using rule 193 (term -> newline .)
    OPEN_PAREN      reduce using rule 193 (term -> newline .)
    PLUS            reduce using rule 193 (term -> newline .)
    MINUS           reduce using rule 193 (term -> newline .)
    BITNOT          reduce using rule 193 (term -> newline .)
    BITCOMP         reduce using rule 193 (term -> newline .)
    INT_CONSTANTS   reduce using rule 193 (term -> newline .)
    FLOAT_CONSTANTS reduce using rule 193 (term -> newline .)
    KEYWORD_end     reduce using rule 193 (term -> newline .)
    SIGIL_DOUBLE_AT reduce using rule 193 (term -> newline .)
    KEYWORD_return  reduce using rule 193 (term -> newline .)
    SIGIL_AT        reduce using rule 193 (term -> newline .)
    KEYWORD_def     reduce using rule 193 (term -> newline .)
    KEYWORD_class   reduce using rule 193 (term -> newline .)
    $end            reduce using rule 193 (term -> newline .)
    KEYWORD_elsif   reduce using rule 193 (term -> newline .)
    KEYWORD_else    reduce using rule 193 (term -> newline .)


state 80

    (192) term -> DELIM .

    KEYWORD_if      reduce using rule 192 (term -> DELIM .)
    KEYWORD_while   reduce using rule 192 (term -> DELIM .)
    KEYWORD_begin   reduce using rule 192 (term -> DELIM .)
    KEYWORD_until   reduce using rule 192 (term -> DELIM .)
    KEYWORD_for     reduce using rule 192 (term -> DELIM .)
    DELIM           reduce using rule 192 (term -> DELIM .)
    newline         reduce using rule 192 (term -> DELIM .)
    KEYWORD_puts    reduce using rule 192 (term -> DELIM .)
    KEYWORD_break   reduce using rule 192 (term -> DELIM .)
    KEYWORD_next    reduce using rule 192 (term -> DELIM .)
    KEYWORD_redo    reduce using rule 192 (term -> DELIM .)
    KEYWORD_exit    reduce using rule 192 (term -> DELIM .)
    VARIABLES       reduce using rule 192 (term -> DELIM .)
    CONSTANTS       reduce using rule 192 (term -> DELIM .)
    BOOLEAN_CONSTANTS reduce using rule 192 (term -> DELIM .)
    OPEN_PAREN      reduce using rule 192 (term -> DELIM .)
    PLUS            reduce using rule 192 (term -> DELIM .)
    MINUS           reduce using rule 192 (term -> DELIM .)
    BITNOT          reduce using rule 192 (term -> DELIM .)
    BITCOMP         reduce using rule 192 (term -> DELIM .)
    INT_CONSTANTS   reduce using rule 192 (term -> DELIM .)
    FLOAT_CONSTANTS reduce using rule 192 (term -> DELIM .)
    KEYWORD_end     reduce using rule 192 (term -> DELIM .)
    SIGIL_DOUBLE_AT reduce using rule 192 (term -> DELIM .)
    KEYWORD_return  reduce using rule 192 (term -> DELIM .)
    SIGIL_AT        reduce using rule 192 (term -> DELIM .)
    KEYWORD_def     reduce using rule 192 (term -> DELIM .)
    KEYWORD_class   reduce using rule 192 (term -> DELIM .)
    $end            reduce using rule 192 (term -> DELIM .)
    KEYWORD_elsif   reduce using rule 192 (term -> DELIM .)
    KEYWORD_else    reduce using rule 192 (term -> DELIM .)


state 81

    (188) opt_terms -> none .

    KEYWORD_end     reduce using rule 188 (opt_terms -> none .)
    KEYWORD_elsif   reduce using rule 188 (opt_terms -> none .)
    KEYWORD_else    reduce using rule 188 (opt_terms -> none .)
    $end            reduce using rule 188 (opt_terms -> none .)


state 82

    (2) top_top_compstmt -> statements opt_terms .

    $end            reduce using rule 2 (top_top_compstmt -> statements opt_terms .)


state 83

    (72) top_stmt -> KEYWORD_until expr3 . opt_do gen_stmts opt_terms KEYWORD_end
    (148) expr3 -> expr3 . LOGICALOR expr4
    (110) opt_do -> . KEYWORD_do
    (111) opt_do -> . newline

    LOGICALOR       shift and go to state 104
    KEYWORD_do      shift and go to state 132
    newline         shift and go to state 131

    opt_do                         shift and go to state 157

state 84

    (67) top_stmt -> KEYWORD_if expr3 . opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (148) expr3 -> expr3 . LOGICALOR expr4
    (108) opt_then -> . KEYWORD_then
    (109) opt_then -> . newline

    LOGICALOR       shift and go to state 104
    KEYWORD_then    shift and go to state 159
    newline         shift and go to state 158

    opt_then                       shift and go to state 160

state 85

    (182) array -> VARIABLES OPEN_BRACKET . expr7 CLOSE_BRACKET
    (161) expr7 -> . expr7 BITXOR expr8
    (162) expr7 -> . expr7 PIPE expr8
    (163) expr7 -> . expr8
    (164) expr8 -> . expr8 BITAND expr9
    (165) expr8 -> . expr9
    (166) expr9 -> . expr9 SHIFTL expr10
    (167) expr9 -> . expr9 SHIFTR expr10
    (168) expr9 -> . expr10
    (169) expr10 -> . expr10 PLUS expr11
    (170) expr10 -> . expr10 MINUS expr11
    (171) expr10 -> . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (194) none -> .

    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr10                         shift and go to state 14
    expr7                          shift and go to state 161
    expr13                         shift and go to state 16
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    array                          shift and go to state 55
    expr11                         shift and go to state 15

state 86

    (8) statement -> VARIABLES DOT . VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (9) statement -> VARIABLES DOT . VARIABLES OPEN_PAREN CLOSE_PAREN
    (10) statement -> VARIABLES DOT . VARIABLES arguments

    VARIABLES       shift and go to state 162


state 87

    (176) expr13 -> OPEN_PAREN expr1 . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 163


state 88

    (124) expr -> mlhs . EQUAL mrhs

    EQUAL           shift and go to state 164


state 89

    (129) mrhs -> str_expr .

    KEYWORD_while   reduce using rule 129 (mrhs -> str_expr .)
    KEYWORD_until   reduce using rule 129 (mrhs -> str_expr .)
    DELIM           reduce using rule 129 (mrhs -> str_expr .)
    newline         reduce using rule 129 (mrhs -> str_expr .)
    $end            reduce using rule 129 (mrhs -> str_expr .)
    KEYWORD_end     reduce using rule 129 (mrhs -> str_expr .)
    KEYWORD_elsif   reduce using rule 129 (mrhs -> str_expr .)
    KEYWORD_else    reduce using rule 129 (mrhs -> str_expr .)


state 90

    (132) mrhs -> VARIABLES . DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (133) mrhs -> VARIABLES . DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (134) mrhs -> VARIABLES . DOT VARIABLES
    (125) mlhs -> VARIABLES .
    (182) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET
    (180) expr13 -> VARIABLES .

    DOT             shift and go to state 165
    EQUAL           reduce using rule 125 (mlhs -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 85
    MULTIPLY        reduce using rule 180 (expr13 -> VARIABLES .)
    DIV             reduce using rule 180 (expr13 -> VARIABLES .)
    MOD             reduce using rule 180 (expr13 -> VARIABLES .)
    PLUS            reduce using rule 180 (expr13 -> VARIABLES .)
    MINUS           reduce using rule 180 (expr13 -> VARIABLES .)
    SHIFTL          reduce using rule 180 (expr13 -> VARIABLES .)
    SHIFTR          reduce using rule 180 (expr13 -> VARIABLES .)
    BITAND          reduce using rule 180 (expr13 -> VARIABLES .)
    LESSEQUAL       reduce using rule 180 (expr13 -> VARIABLES .)
    LESS            reduce using rule 180 (expr13 -> VARIABLES .)
    GREATER         reduce using rule 180 (expr13 -> VARIABLES .)
    GREATEREQUAL    reduce using rule 180 (expr13 -> VARIABLES .)
    BITXOR          reduce using rule 180 (expr13 -> VARIABLES .)
    PIPE            reduce using rule 180 (expr13 -> VARIABLES .)
    DOUBLEEQUAL     reduce using rule 180 (expr13 -> VARIABLES .)
    NOTEQUAL        reduce using rule 180 (expr13 -> VARIABLES .)
    LOGICALAND      reduce using rule 180 (expr13 -> VARIABLES .)
    LOGICALOR       reduce using rule 180 (expr13 -> VARIABLES .)
    KEYWORD_while   reduce using rule 180 (expr13 -> VARIABLES .)
    KEYWORD_until   reduce using rule 180 (expr13 -> VARIABLES .)
    DELIM           reduce using rule 180 (expr13 -> VARIABLES .)
    newline         reduce using rule 180 (expr13 -> VARIABLES .)
    $end            reduce using rule 180 (expr13 -> VARIABLES .)
    KEYWORD_end     reduce using rule 180 (expr13 -> VARIABLES .)
    KEYWORD_elsif   reduce using rule 180 (expr13 -> VARIABLES .)
    KEYWORD_else    reduce using rule 180 (expr13 -> VARIABLES .)


state 91

    (131) mrhs -> OPEN_BRACKET . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 166


state 92

    (128) mrhs -> expr1 .

    KEYWORD_while   reduce using rule 128 (mrhs -> expr1 .)
    KEYWORD_until   reduce using rule 128 (mrhs -> expr1 .)
    DELIM           reduce using rule 128 (mrhs -> expr1 .)
    newline         reduce using rule 128 (mrhs -> expr1 .)
    $end            reduce using rule 128 (mrhs -> expr1 .)
    KEYWORD_end     reduce using rule 128 (mrhs -> expr1 .)
    KEYWORD_elsif   reduce using rule 128 (mrhs -> expr1 .)
    KEYWORD_else    reduce using rule 128 (mrhs -> expr1 .)


state 93

    (130) mrhs -> KEYWORD_gets .

    KEYWORD_while   reduce using rule 130 (mrhs -> KEYWORD_gets .)
    KEYWORD_until   reduce using rule 130 (mrhs -> KEYWORD_gets .)
    DELIM           reduce using rule 130 (mrhs -> KEYWORD_gets .)
    newline         reduce using rule 130 (mrhs -> KEYWORD_gets .)
    $end            reduce using rule 130 (mrhs -> KEYWORD_gets .)
    KEYWORD_end     reduce using rule 130 (mrhs -> KEYWORD_gets .)
    KEYWORD_elsif   reduce using rule 130 (mrhs -> KEYWORD_gets .)
    KEYWORD_else    reduce using rule 130 (mrhs -> KEYWORD_gets .)


state 94

    (93) puts_stmt -> KEYWORD_puts mrhs .

    KEYWORD_while   reduce using rule 93 (puts_stmt -> KEYWORD_puts mrhs .)
    KEYWORD_until   reduce using rule 93 (puts_stmt -> KEYWORD_puts mrhs .)
    DELIM           reduce using rule 93 (puts_stmt -> KEYWORD_puts mrhs .)
    newline         reduce using rule 93 (puts_stmt -> KEYWORD_puts mrhs .)
    KEYWORD_end     reduce using rule 93 (puts_stmt -> KEYWORD_puts mrhs .)
    $end            reduce using rule 93 (puts_stmt -> KEYWORD_puts mrhs .)
    KEYWORD_elsif   reduce using rule 93 (puts_stmt -> KEYWORD_puts mrhs .)
    KEYWORD_else    reduce using rule 93 (puts_stmt -> KEYWORD_puts mrhs .)


state 95

    (94) puts_stmt -> KEYWORD_puts expr .

    KEYWORD_while   reduce using rule 94 (puts_stmt -> KEYWORD_puts expr .)
    KEYWORD_until   reduce using rule 94 (puts_stmt -> KEYWORD_puts expr .)
    DELIM           reduce using rule 94 (puts_stmt -> KEYWORD_puts expr .)
    newline         reduce using rule 94 (puts_stmt -> KEYWORD_puts expr .)
    KEYWORD_end     reduce using rule 94 (puts_stmt -> KEYWORD_puts expr .)
    $end            reduce using rule 94 (puts_stmt -> KEYWORD_puts expr .)
    KEYWORD_elsif   reduce using rule 94 (puts_stmt -> KEYWORD_puts expr .)
    KEYWORD_else    reduce using rule 94 (puts_stmt -> KEYWORD_puts expr .)


state 96

    (138) str_expr -> STRING_CONSTANTS .

    KEYWORD_while   reduce using rule 138 (str_expr -> STRING_CONSTANTS .)
    KEYWORD_until   reduce using rule 138 (str_expr -> STRING_CONSTANTS .)
    DELIM           reduce using rule 138 (str_expr -> STRING_CONSTANTS .)
    newline         reduce using rule 138 (str_expr -> STRING_CONSTANTS .)
    $end            reduce using rule 138 (str_expr -> STRING_CONSTANTS .)
    KEYWORD_end     reduce using rule 138 (str_expr -> STRING_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 138 (str_expr -> STRING_CONSTANTS .)
    KEYWORD_else    reduce using rule 138 (str_expr -> STRING_CONSTANTS .)


state 97

    (135) mrhs -> CONSTANTS . DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (136) mrhs -> CONSTANTS . DOT KEYWORD_new
    (137) mrhs -> CONSTANTS . DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (126) mlhs -> CONSTANTS .
    (179) expr13 -> CONSTANTS .

    DOT             shift and go to state 167
    EQUAL           reduce using rule 126 (mlhs -> CONSTANTS .)
    MULTIPLY        reduce using rule 179 (expr13 -> CONSTANTS .)
    DIV             reduce using rule 179 (expr13 -> CONSTANTS .)
    MOD             reduce using rule 179 (expr13 -> CONSTANTS .)
    PLUS            reduce using rule 179 (expr13 -> CONSTANTS .)
    MINUS           reduce using rule 179 (expr13 -> CONSTANTS .)
    SHIFTL          reduce using rule 179 (expr13 -> CONSTANTS .)
    SHIFTR          reduce using rule 179 (expr13 -> CONSTANTS .)
    BITAND          reduce using rule 179 (expr13 -> CONSTANTS .)
    LESSEQUAL       reduce using rule 179 (expr13 -> CONSTANTS .)
    LESS            reduce using rule 179 (expr13 -> CONSTANTS .)
    GREATER         reduce using rule 179 (expr13 -> CONSTANTS .)
    GREATEREQUAL    reduce using rule 179 (expr13 -> CONSTANTS .)
    BITXOR          reduce using rule 179 (expr13 -> CONSTANTS .)
    PIPE            reduce using rule 179 (expr13 -> CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 179 (expr13 -> CONSTANTS .)
    NOTEQUAL        reduce using rule 179 (expr13 -> CONSTANTS .)
    LOGICALAND      reduce using rule 179 (expr13 -> CONSTANTS .)
    LOGICALOR       reduce using rule 179 (expr13 -> CONSTANTS .)
    KEYWORD_while   reduce using rule 179 (expr13 -> CONSTANTS .)
    KEYWORD_until   reduce using rule 179 (expr13 -> CONSTANTS .)
    DELIM           reduce using rule 179 (expr13 -> CONSTANTS .)
    newline         reduce using rule 179 (expr13 -> CONSTANTS .)
    $end            reduce using rule 179 (expr13 -> CONSTANTS .)
    KEYWORD_end     reduce using rule 179 (expr13 -> CONSTANTS .)
    KEYWORD_elsif   reduce using rule 179 (expr13 -> CONSTANTS .)
    KEYWORD_else    reduce using rule 179 (expr13 -> CONSTANTS .)


state 98

    (125) mlhs -> VARIABLES .
    (53) fname -> VARIABLES .
    (182) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET
    (180) expr13 -> VARIABLES .

    EQUAL           reduce using rule 125 (mlhs -> VARIABLES .)
    OPEN_PAREN      reduce using rule 53 (fname -> VARIABLES .)
    VARIABLES       reduce using rule 53 (fname -> VARIABLES .)
    CONSTANTS       reduce using rule 53 (fname -> VARIABLES .)
    INT_CONSTANTS   reduce using rule 53 (fname -> VARIABLES .)
    FLOAT_CONSTANTS reduce using rule 53 (fname -> VARIABLES .)
    STRING_CONSTANTS reduce using rule 53 (fname -> VARIABLES .)
    CHAR_CONSTANTS  reduce using rule 53 (fname -> VARIABLES .)
    BOOLEAN_CONSTANTS reduce using rule 53 (fname -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 85
    MULTIPLY        reduce using rule 180 (expr13 -> VARIABLES .)
    DIV             reduce using rule 180 (expr13 -> VARIABLES .)
    MOD             reduce using rule 180 (expr13 -> VARIABLES .)
    PLUS            reduce using rule 180 (expr13 -> VARIABLES .)
    MINUS           reduce using rule 180 (expr13 -> VARIABLES .)
    SHIFTL          reduce using rule 180 (expr13 -> VARIABLES .)
    SHIFTR          reduce using rule 180 (expr13 -> VARIABLES .)
    BITAND          reduce using rule 180 (expr13 -> VARIABLES .)
    LESSEQUAL       reduce using rule 180 (expr13 -> VARIABLES .)
    LESS            reduce using rule 180 (expr13 -> VARIABLES .)
    GREATER         reduce using rule 180 (expr13 -> VARIABLES .)
    GREATEREQUAL    reduce using rule 180 (expr13 -> VARIABLES .)
    BITXOR          reduce using rule 180 (expr13 -> VARIABLES .)
    PIPE            reduce using rule 180 (expr13 -> VARIABLES .)
    DOUBLEEQUAL     reduce using rule 180 (expr13 -> VARIABLES .)
    NOTEQUAL        reduce using rule 180 (expr13 -> VARIABLES .)
    LOGICALAND      reduce using rule 180 (expr13 -> VARIABLES .)
    LOGICALOR       reduce using rule 180 (expr13 -> VARIABLES .)
    KEYWORD_while   reduce using rule 180 (expr13 -> VARIABLES .)
    KEYWORD_until   reduce using rule 180 (expr13 -> VARIABLES .)
    DELIM           reduce using rule 180 (expr13 -> VARIABLES .)
    newline         reduce using rule 180 (expr13 -> VARIABLES .)
    KEYWORD_end     reduce using rule 180 (expr13 -> VARIABLES .)
    KEYWORD_elsif   reduce using rule 180 (expr13 -> VARIABLES .)
    KEYWORD_else    reduce using rule 180 (expr13 -> VARIABLES .)


state 99

    (78) gen_stmts -> none .
    (183) uexpr -> none .

    DELIM           reduce using rule 78 (gen_stmts -> none .)
    newline         reduce using rule 78 (gen_stmts -> none .)
    KEYWORD_end     reduce using rule 78 (gen_stmts -> none .)
    KEYWORD_elsif   reduce using rule 78 (gen_stmts -> none .)
    KEYWORD_else    reduce using rule 78 (gen_stmts -> none .)
    INT_CONSTANTS   reduce using rule 183 (uexpr -> none .)
    FLOAT_CONSTANTS reduce using rule 183 (uexpr -> none .)


state 100

    (70) top_stmt -> KEYWORD_begin gen_stmts . opt_terms KEYWORD_end KEYWORD_while expr3
    (73) top_stmt -> KEYWORD_begin gen_stmts . opt_terms KEYWORD_end KEYWORD_until expr3
    (77) gen_stmts -> gen_stmts . terms top_stmt
    (188) opt_terms -> . none
    (189) opt_terms -> . terms
    (190) terms -> . term
    (191) terms -> . terms term
    (194) none -> .
    (192) term -> . DELIM
    (193) term -> . newline

    KEYWORD_end     reduce using rule 194 (none -> .)
    DELIM           shift and go to state 80
    newline         shift and go to state 79

    none                           shift and go to state 81
    terms                          shift and go to state 168
    term                           shift and go to state 77
    opt_terms                      shift and go to state 169

state 101

    (126) mlhs -> CONSTANTS .
    (54) fname -> CONSTANTS .
    (179) expr13 -> CONSTANTS .

    EQUAL           reduce using rule 126 (mlhs -> CONSTANTS .)
    OPEN_PAREN      reduce using rule 54 (fname -> CONSTANTS .)
    VARIABLES       reduce using rule 54 (fname -> CONSTANTS .)
    CONSTANTS       reduce using rule 54 (fname -> CONSTANTS .)
    INT_CONSTANTS   reduce using rule 54 (fname -> CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 54 (fname -> CONSTANTS .)
    STRING_CONSTANTS reduce using rule 54 (fname -> CONSTANTS .)
    CHAR_CONSTANTS  reduce using rule 54 (fname -> CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 54 (fname -> CONSTANTS .)
    MULTIPLY        reduce using rule 179 (expr13 -> CONSTANTS .)
    DIV             reduce using rule 179 (expr13 -> CONSTANTS .)
    MOD             reduce using rule 179 (expr13 -> CONSTANTS .)
    PLUS            reduce using rule 179 (expr13 -> CONSTANTS .)
    MINUS           reduce using rule 179 (expr13 -> CONSTANTS .)
    SHIFTL          reduce using rule 179 (expr13 -> CONSTANTS .)
    SHIFTR          reduce using rule 179 (expr13 -> CONSTANTS .)
    BITAND          reduce using rule 179 (expr13 -> CONSTANTS .)
    LESSEQUAL       reduce using rule 179 (expr13 -> CONSTANTS .)
    LESS            reduce using rule 179 (expr13 -> CONSTANTS .)
    GREATER         reduce using rule 179 (expr13 -> CONSTANTS .)
    GREATEREQUAL    reduce using rule 179 (expr13 -> CONSTANTS .)
    BITXOR          reduce using rule 179 (expr13 -> CONSTANTS .)
    PIPE            reduce using rule 179 (expr13 -> CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 179 (expr13 -> CONSTANTS .)
    NOTEQUAL        reduce using rule 179 (expr13 -> CONSTANTS .)
    LOGICALAND      reduce using rule 179 (expr13 -> CONSTANTS .)
    LOGICALOR       reduce using rule 179 (expr13 -> CONSTANTS .)
    KEYWORD_while   reduce using rule 179 (expr13 -> CONSTANTS .)
    KEYWORD_until   reduce using rule 179 (expr13 -> CONSTANTS .)
    DELIM           reduce using rule 179 (expr13 -> CONSTANTS .)
    newline         reduce using rule 179 (expr13 -> CONSTANTS .)
    KEYWORD_end     reduce using rule 179 (expr13 -> CONSTANTS .)
    KEYWORD_elsif   reduce using rule 179 (expr13 -> CONSTANTS .)
    KEYWORD_else    reduce using rule 179 (expr13 -> CONSTANTS .)


state 102

    (76) gen_stmts -> top_stmt .
    (69) top_stmt -> top_stmt . KEYWORD_while expr3
    (71) top_stmt -> top_stmt . KEYWORD_until expr3

    DELIM           reduce using rule 76 (gen_stmts -> top_stmt .)
    newline         reduce using rule 76 (gen_stmts -> top_stmt .)
    KEYWORD_end     reduce using rule 76 (gen_stmts -> top_stmt .)
    KEYWORD_elsif   reduce using rule 76 (gen_stmts -> top_stmt .)
    KEYWORD_else    reduce using rule 76 (gen_stmts -> top_stmt .)
    KEYWORD_while   shift and go to state 66
    KEYWORD_until   shift and go to state 67


state 103

    (17) class_defn -> KEYWORD_class CONSTANTS . newline class_stmts opt_terms KEYWORD_end

    newline         shift and go to state 170


state 104

    (148) expr3 -> expr3 LOGICALOR . expr4
    (150) expr4 -> . expr4 LOGICALAND expr5
    (151) expr4 -> . expr5
    (152) expr5 -> . expr6 DOUBLEEQUAL expr6
    (153) expr5 -> . expr6 NOTEQUAL expr6
    (154) expr5 -> . expr6
    (155) expr6 -> . expr7 LESSEQUAL expr7
    (156) expr6 -> . expr7 LESS expr7
    (157) expr6 -> . expr7 GREATER expr7
    (158) expr6 -> . expr7 GREATEREQUAL expr7
    (159) expr6 -> . expr7
    (160) expr6 -> . BOOLEAN_CONSTANTS
    (161) expr7 -> . expr7 BITXOR expr8
    (162) expr7 -> . expr7 PIPE expr8
    (163) expr7 -> . expr8
    (164) expr8 -> . expr8 BITAND expr9
    (165) expr8 -> . expr9
    (166) expr9 -> . expr9 SHIFTL expr10
    (167) expr9 -> . expr9 SHIFTR expr10
    (168) expr9 -> . expr10
    (169) expr10 -> . expr10 PLUS expr11
    (170) expr10 -> . expr10 MINUS expr11
    (171) expr10 -> . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (194) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr13                         shift and go to state 16
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    expr4                          shift and go to state 171
    expr5                          shift and go to state 45
    expr10                         shift and go to state 14
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    array                          shift and go to state 55
    expr11                         shift and go to state 15

state 105

    (153) expr5 -> expr6 NOTEQUAL . expr6
    (155) expr6 -> . expr7 LESSEQUAL expr7
    (156) expr6 -> . expr7 LESS expr7
    (157) expr6 -> . expr7 GREATER expr7
    (158) expr6 -> . expr7 GREATEREQUAL expr7
    (159) expr6 -> . expr7
    (160) expr6 -> . BOOLEAN_CONSTANTS
    (161) expr7 -> . expr7 BITXOR expr8
    (162) expr7 -> . expr7 PIPE expr8
    (163) expr7 -> . expr8
    (164) expr8 -> . expr8 BITAND expr9
    (165) expr8 -> . expr9
    (166) expr9 -> . expr9 SHIFTL expr10
    (167) expr9 -> . expr9 SHIFTR expr10
    (168) expr9 -> . expr10
    (169) expr10 -> . expr10 PLUS expr11
    (170) expr10 -> . expr10 MINUS expr11
    (171) expr10 -> . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (194) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr10                         shift and go to state 14
    expr7                          shift and go to state 7
    expr13                         shift and go to state 16
    expr6                          shift and go to state 172
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    array                          shift and go to state 55
    expr11                         shift and go to state 15

state 106

    (152) expr5 -> expr6 DOUBLEEQUAL . expr6
    (155) expr6 -> . expr7 LESSEQUAL expr7
    (156) expr6 -> . expr7 LESS expr7
    (157) expr6 -> . expr7 GREATER expr7
    (158) expr6 -> . expr7 GREATEREQUAL expr7
    (159) expr6 -> . expr7
    (160) expr6 -> . BOOLEAN_CONSTANTS
    (161) expr7 -> . expr7 BITXOR expr8
    (162) expr7 -> . expr7 PIPE expr8
    (163) expr7 -> . expr8
    (164) expr8 -> . expr8 BITAND expr9
    (165) expr8 -> . expr9
    (166) expr9 -> . expr9 SHIFTL expr10
    (167) expr9 -> . expr9 SHIFTR expr10
    (168) expr9 -> . expr10
    (169) expr10 -> . expr10 PLUS expr11
    (170) expr10 -> . expr10 MINUS expr11
    (171) expr10 -> . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (194) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr10                         shift and go to state 14
    expr7                          shift and go to state 7
    expr13                         shift and go to state 16
    expr6                          shift and go to state 173
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    array                          shift and go to state 55
    expr11                         shift and go to state 15

state 107

    (143) primary -> BOOLEAN_CONSTANTS .

    COMMA           reduce using rule 143 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_while   reduce using rule 143 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_until   reduce using rule 143 (primary -> BOOLEAN_CONSTANTS .)
    DELIM           reduce using rule 143 (primary -> BOOLEAN_CONSTANTS .)
    newline         reduce using rule 143 (primary -> BOOLEAN_CONSTANTS .)
    $end            reduce using rule 143 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_end     reduce using rule 143 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 143 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_else    reduce using rule 143 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_return  reduce using rule 143 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_if      reduce using rule 143 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_begin   reduce using rule 143 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_for     reduce using rule 143 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_puts    reduce using rule 143 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_break   reduce using rule 143 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_next    reduce using rule 143 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_redo    reduce using rule 143 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_exit    reduce using rule 143 (primary -> BOOLEAN_CONSTANTS .)
    VARIABLES       reduce using rule 143 (primary -> BOOLEAN_CONSTANTS .)
    CONSTANTS       reduce using rule 143 (primary -> BOOLEAN_CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 143 (primary -> BOOLEAN_CONSTANTS .)
    OPEN_PAREN      reduce using rule 143 (primary -> BOOLEAN_CONSTANTS .)
    PLUS            reduce using rule 143 (primary -> BOOLEAN_CONSTANTS .)
    MINUS           reduce using rule 143 (primary -> BOOLEAN_CONSTANTS .)
    BITNOT          reduce using rule 143 (primary -> BOOLEAN_CONSTANTS .)
    BITCOMP         reduce using rule 143 (primary -> BOOLEAN_CONSTANTS .)
    INT_CONSTANTS   reduce using rule 143 (primary -> BOOLEAN_CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 143 (primary -> BOOLEAN_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 143 (primary -> BOOLEAN_CONSTANTS .)
    SIGIL_AT        reduce using rule 143 (primary -> BOOLEAN_CONSTANTS .)
    SIGIL_DOUBLE_AT reduce using rule 143 (primary -> BOOLEAN_CONSTANTS .)


state 108

    (139) primary -> INT_CONSTANTS .

    COMMA           reduce using rule 139 (primary -> INT_CONSTANTS .)
    KEYWORD_while   reduce using rule 139 (primary -> INT_CONSTANTS .)
    KEYWORD_until   reduce using rule 139 (primary -> INT_CONSTANTS .)
    DELIM           reduce using rule 139 (primary -> INT_CONSTANTS .)
    newline         reduce using rule 139 (primary -> INT_CONSTANTS .)
    $end            reduce using rule 139 (primary -> INT_CONSTANTS .)
    KEYWORD_end     reduce using rule 139 (primary -> INT_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 139 (primary -> INT_CONSTANTS .)
    KEYWORD_else    reduce using rule 139 (primary -> INT_CONSTANTS .)
    KEYWORD_return  reduce using rule 139 (primary -> INT_CONSTANTS .)
    KEYWORD_if      reduce using rule 139 (primary -> INT_CONSTANTS .)
    KEYWORD_begin   reduce using rule 139 (primary -> INT_CONSTANTS .)
    KEYWORD_for     reduce using rule 139 (primary -> INT_CONSTANTS .)
    KEYWORD_puts    reduce using rule 139 (primary -> INT_CONSTANTS .)
    KEYWORD_break   reduce using rule 139 (primary -> INT_CONSTANTS .)
    KEYWORD_next    reduce using rule 139 (primary -> INT_CONSTANTS .)
    KEYWORD_redo    reduce using rule 139 (primary -> INT_CONSTANTS .)
    KEYWORD_exit    reduce using rule 139 (primary -> INT_CONSTANTS .)
    VARIABLES       reduce using rule 139 (primary -> INT_CONSTANTS .)
    CONSTANTS       reduce using rule 139 (primary -> INT_CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 139 (primary -> INT_CONSTANTS .)
    OPEN_PAREN      reduce using rule 139 (primary -> INT_CONSTANTS .)
    PLUS            reduce using rule 139 (primary -> INT_CONSTANTS .)
    MINUS           reduce using rule 139 (primary -> INT_CONSTANTS .)
    BITNOT          reduce using rule 139 (primary -> INT_CONSTANTS .)
    BITCOMP         reduce using rule 139 (primary -> INT_CONSTANTS .)
    INT_CONSTANTS   reduce using rule 139 (primary -> INT_CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 139 (primary -> INT_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 139 (primary -> INT_CONSTANTS .)
    SIGIL_AT        reduce using rule 139 (primary -> INT_CONSTANTS .)
    SIGIL_DOUBLE_AT reduce using rule 139 (primary -> INT_CONSTANTS .)


state 109

    (140) primary -> FLOAT_CONSTANTS .

    COMMA           reduce using rule 140 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_while   reduce using rule 140 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_until   reduce using rule 140 (primary -> FLOAT_CONSTANTS .)
    DELIM           reduce using rule 140 (primary -> FLOAT_CONSTANTS .)
    newline         reduce using rule 140 (primary -> FLOAT_CONSTANTS .)
    $end            reduce using rule 140 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_end     reduce using rule 140 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 140 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_else    reduce using rule 140 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_return  reduce using rule 140 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_if      reduce using rule 140 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_begin   reduce using rule 140 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_for     reduce using rule 140 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_puts    reduce using rule 140 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_break   reduce using rule 140 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_next    reduce using rule 140 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_redo    reduce using rule 140 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_exit    reduce using rule 140 (primary -> FLOAT_CONSTANTS .)
    VARIABLES       reduce using rule 140 (primary -> FLOAT_CONSTANTS .)
    CONSTANTS       reduce using rule 140 (primary -> FLOAT_CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 140 (primary -> FLOAT_CONSTANTS .)
    OPEN_PAREN      reduce using rule 140 (primary -> FLOAT_CONSTANTS .)
    PLUS            reduce using rule 140 (primary -> FLOAT_CONSTANTS .)
    MINUS           reduce using rule 140 (primary -> FLOAT_CONSTANTS .)
    BITNOT          reduce using rule 140 (primary -> FLOAT_CONSTANTS .)
    BITCOMP         reduce using rule 140 (primary -> FLOAT_CONSTANTS .)
    INT_CONSTANTS   reduce using rule 140 (primary -> FLOAT_CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 140 (primary -> FLOAT_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 140 (primary -> FLOAT_CONSTANTS .)
    SIGIL_AT        reduce using rule 140 (primary -> FLOAT_CONSTANTS .)
    SIGIL_DOUBLE_AT reduce using rule 140 (primary -> FLOAT_CONSTANTS .)


state 110

    (100) func_ret_arg -> func_arg_expr .

    CLOSE_PAREN     reduce using rule 100 (func_ret_arg -> func_arg_expr .)
    COMMA           reduce using rule 100 (func_ret_arg -> func_arg_expr .)
    DELIM           reduce using rule 100 (func_ret_arg -> func_arg_expr .)
    newline         reduce using rule 100 (func_ret_arg -> func_arg_expr .)
    KEYWORD_end     reduce using rule 100 (func_ret_arg -> func_arg_expr .)
    KEYWORD_while   reduce using rule 100 (func_ret_arg -> func_arg_expr .)
    KEYWORD_until   reduce using rule 100 (func_ret_arg -> func_arg_expr .)
    $end            reduce using rule 100 (func_ret_arg -> func_arg_expr .)
    KEYWORD_elsif   reduce using rule 100 (func_ret_arg -> func_arg_expr .)
    KEYWORD_else    reduce using rule 100 (func_ret_arg -> func_arg_expr .)


state 111

    (101) func_ret_arg -> primary .

    CLOSE_PAREN     reduce using rule 101 (func_ret_arg -> primary .)
    COMMA           reduce using rule 101 (func_ret_arg -> primary .)
    DELIM           reduce using rule 101 (func_ret_arg -> primary .)
    newline         reduce using rule 101 (func_ret_arg -> primary .)
    KEYWORD_end     reduce using rule 101 (func_ret_arg -> primary .)
    KEYWORD_while   reduce using rule 101 (func_ret_arg -> primary .)
    KEYWORD_until   reduce using rule 101 (func_ret_arg -> primary .)
    $end            reduce using rule 101 (func_ret_arg -> primary .)
    KEYWORD_elsif   reduce using rule 101 (func_ret_arg -> primary .)
    KEYWORD_else    reduce using rule 101 (func_ret_arg -> primary .)


state 112

    (141) primary -> STRING_CONSTANTS .

    COMMA           reduce using rule 141 (primary -> STRING_CONSTANTS .)
    KEYWORD_while   reduce using rule 141 (primary -> STRING_CONSTANTS .)
    KEYWORD_until   reduce using rule 141 (primary -> STRING_CONSTANTS .)
    DELIM           reduce using rule 141 (primary -> STRING_CONSTANTS .)
    newline         reduce using rule 141 (primary -> STRING_CONSTANTS .)
    $end            reduce using rule 141 (primary -> STRING_CONSTANTS .)
    KEYWORD_end     reduce using rule 141 (primary -> STRING_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 141 (primary -> STRING_CONSTANTS .)
    KEYWORD_else    reduce using rule 141 (primary -> STRING_CONSTANTS .)
    KEYWORD_return  reduce using rule 141 (primary -> STRING_CONSTANTS .)
    KEYWORD_if      reduce using rule 141 (primary -> STRING_CONSTANTS .)
    KEYWORD_begin   reduce using rule 141 (primary -> STRING_CONSTANTS .)
    KEYWORD_for     reduce using rule 141 (primary -> STRING_CONSTANTS .)
    KEYWORD_puts    reduce using rule 141 (primary -> STRING_CONSTANTS .)
    KEYWORD_break   reduce using rule 141 (primary -> STRING_CONSTANTS .)
    KEYWORD_next    reduce using rule 141 (primary -> STRING_CONSTANTS .)
    KEYWORD_redo    reduce using rule 141 (primary -> STRING_CONSTANTS .)
    KEYWORD_exit    reduce using rule 141 (primary -> STRING_CONSTANTS .)
    VARIABLES       reduce using rule 141 (primary -> STRING_CONSTANTS .)
    CONSTANTS       reduce using rule 141 (primary -> STRING_CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 141 (primary -> STRING_CONSTANTS .)
    OPEN_PAREN      reduce using rule 141 (primary -> STRING_CONSTANTS .)
    PLUS            reduce using rule 141 (primary -> STRING_CONSTANTS .)
    MINUS           reduce using rule 141 (primary -> STRING_CONSTANTS .)
    BITNOT          reduce using rule 141 (primary -> STRING_CONSTANTS .)
    BITCOMP         reduce using rule 141 (primary -> STRING_CONSTANTS .)
    INT_CONSTANTS   reduce using rule 141 (primary -> STRING_CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 141 (primary -> STRING_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 141 (primary -> STRING_CONSTANTS .)
    SIGIL_AT        reduce using rule 141 (primary -> STRING_CONSTANTS .)
    SIGIL_DOUBLE_AT reduce using rule 141 (primary -> STRING_CONSTANTS .)


state 113

    (85) func_call_stmt -> fname OPEN_PAREN . func_ret_arg CLOSE_PAREN
    (100) func_ret_arg -> . func_arg_expr
    (101) func_ret_arg -> . primary
    (102) func_ret_arg -> . func_ret_arg COMMA func_arg_expr
    (103) func_ret_arg -> . func_ret_arg COMMA primary
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary
    (139) primary -> . INT_CONSTANTS
    (140) primary -> . FLOAT_CONSTANTS
    (141) primary -> . STRING_CONSTANTS
    (142) primary -> . CHAR_CONSTANTS
    (143) primary -> . BOOLEAN_CONSTANTS
    (144) primary -> . CONSTANTS
    (145) primary -> . VARIABLES
    (146) primary -> . array
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET

    VARIABLES       shift and go to state 118
    CONSTANTS       shift and go to state 114
    INT_CONSTANTS   shift and go to state 108
    FLOAT_CONSTANTS shift and go to state 109
    STRING_CONSTANTS shift and go to state 112
    CHAR_CONSTANTS  shift and go to state 117
    BOOLEAN_CONSTANTS shift and go to state 107

    func_arg_expr                  shift and go to state 110
    primary                        shift and go to state 111
    func_ret_arg                   shift and go to state 174
    array                          shift and go to state 116

state 114

    (63) func_arg_expr -> CONSTANTS . EQUAL primary
    (144) primary -> CONSTANTS .

    EQUAL           shift and go to state 175
    COMMA           reduce using rule 144 (primary -> CONSTANTS .)
    KEYWORD_while   reduce using rule 144 (primary -> CONSTANTS .)
    KEYWORD_until   reduce using rule 144 (primary -> CONSTANTS .)
    DELIM           reduce using rule 144 (primary -> CONSTANTS .)
    newline         reduce using rule 144 (primary -> CONSTANTS .)
    $end            reduce using rule 144 (primary -> CONSTANTS .)
    KEYWORD_end     reduce using rule 144 (primary -> CONSTANTS .)
    KEYWORD_elsif   reduce using rule 144 (primary -> CONSTANTS .)
    KEYWORD_else    reduce using rule 144 (primary -> CONSTANTS .)
    CLOSE_PAREN     reduce using rule 144 (primary -> CONSTANTS .)


state 115

    (86) func_call_stmt -> fname func_ret_arg .
    (102) func_ret_arg -> func_ret_arg . COMMA func_arg_expr
    (103) func_ret_arg -> func_ret_arg . COMMA primary

    KEYWORD_while   reduce using rule 86 (func_call_stmt -> fname func_ret_arg .)
    KEYWORD_until   reduce using rule 86 (func_call_stmt -> fname func_ret_arg .)
    DELIM           reduce using rule 86 (func_call_stmt -> fname func_ret_arg .)
    newline         reduce using rule 86 (func_call_stmt -> fname func_ret_arg .)
    KEYWORD_end     reduce using rule 86 (func_call_stmt -> fname func_ret_arg .)
    $end            reduce using rule 86 (func_call_stmt -> fname func_ret_arg .)
    KEYWORD_elsif   reduce using rule 86 (func_call_stmt -> fname func_ret_arg .)
    KEYWORD_else    reduce using rule 86 (func_call_stmt -> fname func_ret_arg .)
    COMMA           shift and go to state 176


state 116

    (146) primary -> array .

    COMMA           reduce using rule 146 (primary -> array .)
    KEYWORD_while   reduce using rule 146 (primary -> array .)
    KEYWORD_until   reduce using rule 146 (primary -> array .)
    DELIM           reduce using rule 146 (primary -> array .)
    newline         reduce using rule 146 (primary -> array .)
    $end            reduce using rule 146 (primary -> array .)
    KEYWORD_end     reduce using rule 146 (primary -> array .)
    KEYWORD_elsif   reduce using rule 146 (primary -> array .)
    KEYWORD_else    reduce using rule 146 (primary -> array .)
    KEYWORD_return  reduce using rule 146 (primary -> array .)
    KEYWORD_if      reduce using rule 146 (primary -> array .)
    KEYWORD_begin   reduce using rule 146 (primary -> array .)
    KEYWORD_for     reduce using rule 146 (primary -> array .)
    KEYWORD_puts    reduce using rule 146 (primary -> array .)
    KEYWORD_break   reduce using rule 146 (primary -> array .)
    KEYWORD_next    reduce using rule 146 (primary -> array .)
    KEYWORD_redo    reduce using rule 146 (primary -> array .)
    KEYWORD_exit    reduce using rule 146 (primary -> array .)
    VARIABLES       reduce using rule 146 (primary -> array .)
    CONSTANTS       reduce using rule 146 (primary -> array .)
    BOOLEAN_CONSTANTS reduce using rule 146 (primary -> array .)
    OPEN_PAREN      reduce using rule 146 (primary -> array .)
    PLUS            reduce using rule 146 (primary -> array .)
    MINUS           reduce using rule 146 (primary -> array .)
    BITNOT          reduce using rule 146 (primary -> array .)
    BITCOMP         reduce using rule 146 (primary -> array .)
    INT_CONSTANTS   reduce using rule 146 (primary -> array .)
    FLOAT_CONSTANTS reduce using rule 146 (primary -> array .)
    CLOSE_PAREN     reduce using rule 146 (primary -> array .)
    SIGIL_AT        reduce using rule 146 (primary -> array .)
    SIGIL_DOUBLE_AT reduce using rule 146 (primary -> array .)


state 117

    (142) primary -> CHAR_CONSTANTS .

    COMMA           reduce using rule 142 (primary -> CHAR_CONSTANTS .)
    KEYWORD_while   reduce using rule 142 (primary -> CHAR_CONSTANTS .)
    KEYWORD_until   reduce using rule 142 (primary -> CHAR_CONSTANTS .)
    DELIM           reduce using rule 142 (primary -> CHAR_CONSTANTS .)
    newline         reduce using rule 142 (primary -> CHAR_CONSTANTS .)
    $end            reduce using rule 142 (primary -> CHAR_CONSTANTS .)
    KEYWORD_end     reduce using rule 142 (primary -> CHAR_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 142 (primary -> CHAR_CONSTANTS .)
    KEYWORD_else    reduce using rule 142 (primary -> CHAR_CONSTANTS .)
    KEYWORD_return  reduce using rule 142 (primary -> CHAR_CONSTANTS .)
    KEYWORD_if      reduce using rule 142 (primary -> CHAR_CONSTANTS .)
    KEYWORD_begin   reduce using rule 142 (primary -> CHAR_CONSTANTS .)
    KEYWORD_for     reduce using rule 142 (primary -> CHAR_CONSTANTS .)
    KEYWORD_puts    reduce using rule 142 (primary -> CHAR_CONSTANTS .)
    KEYWORD_break   reduce using rule 142 (primary -> CHAR_CONSTANTS .)
    KEYWORD_next    reduce using rule 142 (primary -> CHAR_CONSTANTS .)
    KEYWORD_redo    reduce using rule 142 (primary -> CHAR_CONSTANTS .)
    KEYWORD_exit    reduce using rule 142 (primary -> CHAR_CONSTANTS .)
    VARIABLES       reduce using rule 142 (primary -> CHAR_CONSTANTS .)
    CONSTANTS       reduce using rule 142 (primary -> CHAR_CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 142 (primary -> CHAR_CONSTANTS .)
    OPEN_PAREN      reduce using rule 142 (primary -> CHAR_CONSTANTS .)
    PLUS            reduce using rule 142 (primary -> CHAR_CONSTANTS .)
    MINUS           reduce using rule 142 (primary -> CHAR_CONSTANTS .)
    BITNOT          reduce using rule 142 (primary -> CHAR_CONSTANTS .)
    BITCOMP         reduce using rule 142 (primary -> CHAR_CONSTANTS .)
    INT_CONSTANTS   reduce using rule 142 (primary -> CHAR_CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 142 (primary -> CHAR_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 142 (primary -> CHAR_CONSTANTS .)
    SIGIL_AT        reduce using rule 142 (primary -> CHAR_CONSTANTS .)
    SIGIL_DOUBLE_AT reduce using rule 142 (primary -> CHAR_CONSTANTS .)


state 118

    (62) func_arg_expr -> VARIABLES . EQUAL primary
    (145) primary -> VARIABLES .
    (182) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET

    EQUAL           shift and go to state 177
    COMMA           reduce using rule 145 (primary -> VARIABLES .)
    KEYWORD_while   reduce using rule 145 (primary -> VARIABLES .)
    KEYWORD_until   reduce using rule 145 (primary -> VARIABLES .)
    DELIM           reduce using rule 145 (primary -> VARIABLES .)
    newline         reduce using rule 145 (primary -> VARIABLES .)
    $end            reduce using rule 145 (primary -> VARIABLES .)
    KEYWORD_end     reduce using rule 145 (primary -> VARIABLES .)
    KEYWORD_elsif   reduce using rule 145 (primary -> VARIABLES .)
    KEYWORD_else    reduce using rule 145 (primary -> VARIABLES .)
    CLOSE_PAREN     reduce using rule 145 (primary -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 85


state 119

    (164) expr8 -> expr8 BITAND . expr9
    (166) expr9 -> . expr9 SHIFTL expr10
    (167) expr9 -> . expr9 SHIFTR expr10
    (168) expr9 -> . expr10
    (169) expr10 -> . expr10 PLUS expr11
    (170) expr10 -> . expr10 MINUS expr11
    (171) expr10 -> . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (194) none -> .

    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr13                         shift and go to state 16
    expr9                          shift and go to state 178
    array                          shift and go to state 55

state 120

    (167) expr9 -> expr9 SHIFTR . expr10
    (169) expr10 -> . expr10 PLUS expr11
    (170) expr10 -> . expr10 MINUS expr11
    (171) expr10 -> . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (194) none -> .

    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr10                         shift and go to state 179
    expr11                         shift and go to state 15
    expr13                         shift and go to state 16
    array                          shift and go to state 55

state 121

    (166) expr9 -> expr9 SHIFTL . expr10
    (169) expr10 -> . expr10 PLUS expr11
    (170) expr10 -> . expr10 MINUS expr11
    (171) expr10 -> . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (194) none -> .

    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr10                         shift and go to state 180
    expr11                         shift and go to state 15
    expr13                         shift and go to state 16
    array                          shift and go to state 55

state 122

    (74) top_stmt -> KEYWORD_for OPEN_PAREN . multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (112) multi_var -> . VARIABLES
    (113) multi_var -> . CONSTANTS
    (114) multi_var -> . array
    (115) multi_var -> . multi_var COMMA VARIABLES
    (116) multi_var -> . multi_var COMMA CONSTANTS
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET

    VARIABLES       shift and go to state 123
    CONSTANTS       shift and go to state 125

    multi_var                      shift and go to state 181
    array                          shift and go to state 126

state 123

    (112) multi_var -> VARIABLES .
    (182) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET

    KEYWORD_in      reduce using rule 112 (multi_var -> VARIABLES .)
    COMMA           reduce using rule 112 (multi_var -> VARIABLES .)
    CLOSE_PAREN     reduce using rule 112 (multi_var -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 85


state 124

    (75) top_stmt -> KEYWORD_for multi_var . KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (115) multi_var -> multi_var . COMMA VARIABLES
    (116) multi_var -> multi_var . COMMA CONSTANTS

    KEYWORD_in      shift and go to state 182
    COMMA           shift and go to state 183


state 125

    (113) multi_var -> CONSTANTS .

    KEYWORD_in      reduce using rule 113 (multi_var -> CONSTANTS .)
    COMMA           reduce using rule 113 (multi_var -> CONSTANTS .)
    CLOSE_PAREN     reduce using rule 113 (multi_var -> CONSTANTS .)


state 126

    (114) multi_var -> array .

    KEYWORD_in      reduce using rule 114 (multi_var -> array .)
    COMMA           reduce using rule 114 (multi_var -> array .)
    CLOSE_PAREN     reduce using rule 114 (multi_var -> array .)


state 127

    (132) mrhs -> VARIABLES . DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (133) mrhs -> VARIABLES . DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (134) mrhs -> VARIABLES . DOT VARIABLES
    (53) fname -> VARIABLES .
    (180) expr13 -> VARIABLES .
    (182) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET

    DOT             shift and go to state 165
    OPEN_PAREN      reduce using rule 53 (fname -> VARIABLES .)
    VARIABLES       reduce using rule 53 (fname -> VARIABLES .)
    CONSTANTS       reduce using rule 53 (fname -> VARIABLES .)
    INT_CONSTANTS   reduce using rule 53 (fname -> VARIABLES .)
    FLOAT_CONSTANTS reduce using rule 53 (fname -> VARIABLES .)
    STRING_CONSTANTS reduce using rule 53 (fname -> VARIABLES .)
    CHAR_CONSTANTS  reduce using rule 53 (fname -> VARIABLES .)
    BOOLEAN_CONSTANTS reduce using rule 53 (fname -> VARIABLES .)
    MULTIPLY        reduce using rule 180 (expr13 -> VARIABLES .)
    DIV             reduce using rule 180 (expr13 -> VARIABLES .)
    MOD             reduce using rule 180 (expr13 -> VARIABLES .)
    PLUS            reduce using rule 180 (expr13 -> VARIABLES .)
    MINUS           reduce using rule 180 (expr13 -> VARIABLES .)
    SHIFTL          reduce using rule 180 (expr13 -> VARIABLES .)
    SHIFTR          reduce using rule 180 (expr13 -> VARIABLES .)
    BITAND          reduce using rule 180 (expr13 -> VARIABLES .)
    LESSEQUAL       reduce using rule 180 (expr13 -> VARIABLES .)
    LESS            reduce using rule 180 (expr13 -> VARIABLES .)
    GREATER         reduce using rule 180 (expr13 -> VARIABLES .)
    GREATEREQUAL    reduce using rule 180 (expr13 -> VARIABLES .)
    BITXOR          reduce using rule 180 (expr13 -> VARIABLES .)
    PIPE            reduce using rule 180 (expr13 -> VARIABLES .)
    DOUBLEEQUAL     reduce using rule 180 (expr13 -> VARIABLES .)
    NOTEQUAL        reduce using rule 180 (expr13 -> VARIABLES .)
    LOGICALAND      reduce using rule 180 (expr13 -> VARIABLES .)
    LOGICALOR       reduce using rule 180 (expr13 -> VARIABLES .)
    KEYWORD_while   reduce using rule 180 (expr13 -> VARIABLES .)
    KEYWORD_until   reduce using rule 180 (expr13 -> VARIABLES .)
    DELIM           reduce using rule 180 (expr13 -> VARIABLES .)
    newline         reduce using rule 180 (expr13 -> VARIABLES .)
    $end            reduce using rule 180 (expr13 -> VARIABLES .)
    KEYWORD_end     reduce using rule 180 (expr13 -> VARIABLES .)
    KEYWORD_elsif   reduce using rule 180 (expr13 -> VARIABLES .)
    KEYWORD_else    reduce using rule 180 (expr13 -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 85


state 128

    (87) func_call_stmt -> mlhs EQUAL fname . OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> mlhs EQUAL fname . func_ret_arg
    (100) func_ret_arg -> . func_arg_expr
    (101) func_ret_arg -> . primary
    (102) func_ret_arg -> . func_ret_arg COMMA func_arg_expr
    (103) func_ret_arg -> . func_ret_arg COMMA primary
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary
    (139) primary -> . INT_CONSTANTS
    (140) primary -> . FLOAT_CONSTANTS
    (141) primary -> . STRING_CONSTANTS
    (142) primary -> . CHAR_CONSTANTS
    (143) primary -> . BOOLEAN_CONSTANTS
    (144) primary -> . CONSTANTS
    (145) primary -> . VARIABLES
    (146) primary -> . array
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET

    OPEN_PAREN      shift and go to state 184
    VARIABLES       shift and go to state 118
    CONSTANTS       shift and go to state 114
    INT_CONSTANTS   shift and go to state 108
    FLOAT_CONSTANTS shift and go to state 109
    STRING_CONSTANTS shift and go to state 112
    CHAR_CONSTANTS  shift and go to state 117
    BOOLEAN_CONSTANTS shift and go to state 107

    func_arg_expr                  shift and go to state 110
    primary                        shift and go to state 111
    func_ret_arg                   shift and go to state 185
    array                          shift and go to state 116

state 129

    (124) expr -> mlhs EQUAL mrhs .

    KEYWORD_while   reduce using rule 124 (expr -> mlhs EQUAL mrhs .)
    KEYWORD_until   reduce using rule 124 (expr -> mlhs EQUAL mrhs .)
    DELIM           reduce using rule 124 (expr -> mlhs EQUAL mrhs .)
    newline         reduce using rule 124 (expr -> mlhs EQUAL mrhs .)
    KEYWORD_end     reduce using rule 124 (expr -> mlhs EQUAL mrhs .)
    KEYWORD_elsif   reduce using rule 124 (expr -> mlhs EQUAL mrhs .)
    KEYWORD_else    reduce using rule 124 (expr -> mlhs EQUAL mrhs .)
    $end            reduce using rule 124 (expr -> mlhs EQUAL mrhs .)


state 130

    (135) mrhs -> CONSTANTS . DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (136) mrhs -> CONSTANTS . DOT KEYWORD_new
    (137) mrhs -> CONSTANTS . DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (54) fname -> CONSTANTS .
    (179) expr13 -> CONSTANTS .

    DOT             shift and go to state 167
    OPEN_PAREN      reduce using rule 54 (fname -> CONSTANTS .)
    VARIABLES       reduce using rule 54 (fname -> CONSTANTS .)
    CONSTANTS       reduce using rule 54 (fname -> CONSTANTS .)
    INT_CONSTANTS   reduce using rule 54 (fname -> CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 54 (fname -> CONSTANTS .)
    STRING_CONSTANTS reduce using rule 54 (fname -> CONSTANTS .)
    CHAR_CONSTANTS  reduce using rule 54 (fname -> CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 54 (fname -> CONSTANTS .)
    MULTIPLY        reduce using rule 179 (expr13 -> CONSTANTS .)
    DIV             reduce using rule 179 (expr13 -> CONSTANTS .)
    MOD             reduce using rule 179 (expr13 -> CONSTANTS .)
    PLUS            reduce using rule 179 (expr13 -> CONSTANTS .)
    MINUS           reduce using rule 179 (expr13 -> CONSTANTS .)
    SHIFTL          reduce using rule 179 (expr13 -> CONSTANTS .)
    SHIFTR          reduce using rule 179 (expr13 -> CONSTANTS .)
    BITAND          reduce using rule 179 (expr13 -> CONSTANTS .)
    LESSEQUAL       reduce using rule 179 (expr13 -> CONSTANTS .)
    LESS            reduce using rule 179 (expr13 -> CONSTANTS .)
    GREATER         reduce using rule 179 (expr13 -> CONSTANTS .)
    GREATEREQUAL    reduce using rule 179 (expr13 -> CONSTANTS .)
    BITXOR          reduce using rule 179 (expr13 -> CONSTANTS .)
    PIPE            reduce using rule 179 (expr13 -> CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 179 (expr13 -> CONSTANTS .)
    NOTEQUAL        reduce using rule 179 (expr13 -> CONSTANTS .)
    LOGICALAND      reduce using rule 179 (expr13 -> CONSTANTS .)
    LOGICALOR       reduce using rule 179 (expr13 -> CONSTANTS .)
    KEYWORD_while   reduce using rule 179 (expr13 -> CONSTANTS .)
    KEYWORD_until   reduce using rule 179 (expr13 -> CONSTANTS .)
    DELIM           reduce using rule 179 (expr13 -> CONSTANTS .)
    newline         reduce using rule 179 (expr13 -> CONSTANTS .)
    $end            reduce using rule 179 (expr13 -> CONSTANTS .)
    KEYWORD_end     reduce using rule 179 (expr13 -> CONSTANTS .)
    KEYWORD_elsif   reduce using rule 179 (expr13 -> CONSTANTS .)
    KEYWORD_else    reduce using rule 179 (expr13 -> CONSTANTS .)


state 131

    (111) opt_do -> newline .

    KEYWORD_if      reduce using rule 111 (opt_do -> newline .)
    KEYWORD_while   reduce using rule 111 (opt_do -> newline .)
    KEYWORD_begin   reduce using rule 111 (opt_do -> newline .)
    KEYWORD_until   reduce using rule 111 (opt_do -> newline .)
    KEYWORD_for     reduce using rule 111 (opt_do -> newline .)
    KEYWORD_puts    reduce using rule 111 (opt_do -> newline .)
    KEYWORD_break   reduce using rule 111 (opt_do -> newline .)
    KEYWORD_next    reduce using rule 111 (opt_do -> newline .)
    KEYWORD_redo    reduce using rule 111 (opt_do -> newline .)
    KEYWORD_exit    reduce using rule 111 (opt_do -> newline .)
    VARIABLES       reduce using rule 111 (opt_do -> newline .)
    CONSTANTS       reduce using rule 111 (opt_do -> newline .)
    BOOLEAN_CONSTANTS reduce using rule 111 (opt_do -> newline .)
    OPEN_PAREN      reduce using rule 111 (opt_do -> newline .)
    PLUS            reduce using rule 111 (opt_do -> newline .)
    MINUS           reduce using rule 111 (opt_do -> newline .)
    BITNOT          reduce using rule 111 (opt_do -> newline .)
    BITCOMP         reduce using rule 111 (opt_do -> newline .)
    DELIM           reduce using rule 111 (opt_do -> newline .)
    newline         reduce using rule 111 (opt_do -> newline .)
    KEYWORD_end     reduce using rule 111 (opt_do -> newline .)
    INT_CONSTANTS   reduce using rule 111 (opt_do -> newline .)
    FLOAT_CONSTANTS reduce using rule 111 (opt_do -> newline .)


state 132

    (110) opt_do -> KEYWORD_do .

    KEYWORD_if      reduce using rule 110 (opt_do -> KEYWORD_do .)
    KEYWORD_while   reduce using rule 110 (opt_do -> KEYWORD_do .)
    KEYWORD_begin   reduce using rule 110 (opt_do -> KEYWORD_do .)
    KEYWORD_until   reduce using rule 110 (opt_do -> KEYWORD_do .)
    KEYWORD_for     reduce using rule 110 (opt_do -> KEYWORD_do .)
    KEYWORD_puts    reduce using rule 110 (opt_do -> KEYWORD_do .)
    KEYWORD_break   reduce using rule 110 (opt_do -> KEYWORD_do .)
    KEYWORD_next    reduce using rule 110 (opt_do -> KEYWORD_do .)
    KEYWORD_redo    reduce using rule 110 (opt_do -> KEYWORD_do .)
    KEYWORD_exit    reduce using rule 110 (opt_do -> KEYWORD_do .)
    VARIABLES       reduce using rule 110 (opt_do -> KEYWORD_do .)
    CONSTANTS       reduce using rule 110 (opt_do -> KEYWORD_do .)
    BOOLEAN_CONSTANTS reduce using rule 110 (opt_do -> KEYWORD_do .)
    OPEN_PAREN      reduce using rule 110 (opt_do -> KEYWORD_do .)
    PLUS            reduce using rule 110 (opt_do -> KEYWORD_do .)
    MINUS           reduce using rule 110 (opt_do -> KEYWORD_do .)
    BITNOT          reduce using rule 110 (opt_do -> KEYWORD_do .)
    BITCOMP         reduce using rule 110 (opt_do -> KEYWORD_do .)
    DELIM           reduce using rule 110 (opt_do -> KEYWORD_do .)
    newline         reduce using rule 110 (opt_do -> KEYWORD_do .)
    KEYWORD_end     reduce using rule 110 (opt_do -> KEYWORD_do .)
    INT_CONSTANTS   reduce using rule 110 (opt_do -> KEYWORD_do .)
    FLOAT_CONSTANTS reduce using rule 110 (opt_do -> KEYWORD_do .)


state 133

    (68) top_stmt -> KEYWORD_while expr3 opt_do . gen_stmts opt_terms KEYWORD_end
    (76) gen_stmts -> . top_stmt
    (77) gen_stmts -> . gen_stmts terms top_stmt
    (78) gen_stmts -> . none
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (194) none -> .
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . mlhs EQUAL mrhs
    (147) expr1 -> . expr3
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . mlhs EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . mlhs EQUAL fname func_ret_arg
    (125) mlhs -> . VARIABLES
    (126) mlhs -> . CONSTANTS
    (127) mlhs -> . array
    (148) expr3 -> . expr3 LOGICALOR expr4
    (149) expr3 -> . expr4
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (150) expr4 -> . expr4 LOGICALAND expr5
    (151) expr4 -> . expr5
    (152) expr5 -> . expr6 DOUBLEEQUAL expr6
    (153) expr5 -> . expr6 NOTEQUAL expr6
    (154) expr5 -> . expr6
    (155) expr6 -> . expr7 LESSEQUAL expr7
    (156) expr6 -> . expr7 LESS expr7
    (157) expr6 -> . expr7 GREATER expr7
    (158) expr6 -> . expr7 GREATEREQUAL expr7
    (159) expr6 -> . expr7
    (160) expr6 -> . BOOLEAN_CONSTANTS
    (161) expr7 -> . expr7 BITXOR expr8
    (162) expr7 -> . expr7 PIPE expr8
    (163) expr7 -> . expr8
    (164) expr8 -> . expr8 BITAND expr9
    (165) expr8 -> . expr9
    (166) expr9 -> . expr9 SHIFTL expr10
    (167) expr9 -> . expr9 SHIFTR expr10
    (168) expr9 -> . expr10
    (169) expr10 -> . expr10 PLUS expr11
    (170) expr10 -> . expr10 MINUS expr11
    (171) expr10 -> . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP

    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 38
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 51
    DELIM           reduce using rule 194 (none -> .)
    newline         reduce using rule 194 (none -> .)
    KEYWORD_end     reduce using rule 194 (none -> .)
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 48
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    VARIABLES       shift and go to state 98
    CONSTANTS       shift and go to state 101
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29

    mlhs                           shift and go to state 2
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr13                         shift and go to state 16
    array                          shift and go to state 26
    expr3                          shift and go to state 41
    expr1                          shift and go to state 42
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    puts_stmt                      shift and go to state 18
    expr5                          shift and go to state 45
    func_call_stmt                 shift and go to state 32
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    expr4                          shift and go to state 8
    fname                          shift and go to state 44
    exit_stmt                      shift and go to state 49
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 20
    uexpr                          shift and go to state 10
    none                           shift and go to state 99
    gen_stmts                      shift and go to state 186
    expr                           shift and go to state 35
    top_stmt                       shift and go to state 102

state 134

    (158) expr6 -> expr7 GREATEREQUAL expr7 .
    (161) expr7 -> expr7 . BITXOR expr8
    (162) expr7 -> expr7 . PIPE expr8

    DOUBLEEQUAL     reduce using rule 158 (expr6 -> expr7 GREATEREQUAL expr7 .)
    NOTEQUAL        reduce using rule 158 (expr6 -> expr7 GREATEREQUAL expr7 .)
    LOGICALAND      reduce using rule 158 (expr6 -> expr7 GREATEREQUAL expr7 .)
    LOGICALOR       reduce using rule 158 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_then    reduce using rule 158 (expr6 -> expr7 GREATEREQUAL expr7 .)
    newline         reduce using rule 158 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_while   reduce using rule 158 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_until   reduce using rule 158 (expr6 -> expr7 GREATEREQUAL expr7 .)
    DELIM           reduce using rule 158 (expr6 -> expr7 GREATEREQUAL expr7 .)
    $end            reduce using rule 158 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_end     reduce using rule 158 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_elsif   reduce using rule 158 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_else    reduce using rule 158 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_do      reduce using rule 158 (expr6 -> expr7 GREATEREQUAL expr7 .)
    CLOSE_PAREN     reduce using rule 158 (expr6 -> expr7 GREATEREQUAL expr7 .)
    BITXOR          shift and go to state 61
    PIPE            shift and go to state 60


state 135

    (157) expr6 -> expr7 GREATER expr7 .
    (161) expr7 -> expr7 . BITXOR expr8
    (162) expr7 -> expr7 . PIPE expr8

    DOUBLEEQUAL     reduce using rule 157 (expr6 -> expr7 GREATER expr7 .)
    NOTEQUAL        reduce using rule 157 (expr6 -> expr7 GREATER expr7 .)
    LOGICALAND      reduce using rule 157 (expr6 -> expr7 GREATER expr7 .)
    LOGICALOR       reduce using rule 157 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_then    reduce using rule 157 (expr6 -> expr7 GREATER expr7 .)
    newline         reduce using rule 157 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_while   reduce using rule 157 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_until   reduce using rule 157 (expr6 -> expr7 GREATER expr7 .)
    DELIM           reduce using rule 157 (expr6 -> expr7 GREATER expr7 .)
    $end            reduce using rule 157 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_end     reduce using rule 157 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_elsif   reduce using rule 157 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_else    reduce using rule 157 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_do      reduce using rule 157 (expr6 -> expr7 GREATER expr7 .)
    CLOSE_PAREN     reduce using rule 157 (expr6 -> expr7 GREATER expr7 .)
    BITXOR          shift and go to state 61
    PIPE            shift and go to state 60


state 136

    (156) expr6 -> expr7 LESS expr7 .
    (161) expr7 -> expr7 . BITXOR expr8
    (162) expr7 -> expr7 . PIPE expr8

    DOUBLEEQUAL     reduce using rule 156 (expr6 -> expr7 LESS expr7 .)
    NOTEQUAL        reduce using rule 156 (expr6 -> expr7 LESS expr7 .)
    LOGICALAND      reduce using rule 156 (expr6 -> expr7 LESS expr7 .)
    LOGICALOR       reduce using rule 156 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_then    reduce using rule 156 (expr6 -> expr7 LESS expr7 .)
    newline         reduce using rule 156 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_while   reduce using rule 156 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_until   reduce using rule 156 (expr6 -> expr7 LESS expr7 .)
    DELIM           reduce using rule 156 (expr6 -> expr7 LESS expr7 .)
    $end            reduce using rule 156 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_end     reduce using rule 156 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_elsif   reduce using rule 156 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_else    reduce using rule 156 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_do      reduce using rule 156 (expr6 -> expr7 LESS expr7 .)
    CLOSE_PAREN     reduce using rule 156 (expr6 -> expr7 LESS expr7 .)
    BITXOR          shift and go to state 61
    PIPE            shift and go to state 60


state 137

    (162) expr7 -> expr7 PIPE expr8 .
    (164) expr8 -> expr8 . BITAND expr9

    LESSEQUAL       reduce using rule 162 (expr7 -> expr7 PIPE expr8 .)
    LESS            reduce using rule 162 (expr7 -> expr7 PIPE expr8 .)
    GREATER         reduce using rule 162 (expr7 -> expr7 PIPE expr8 .)
    GREATEREQUAL    reduce using rule 162 (expr7 -> expr7 PIPE expr8 .)
    BITXOR          reduce using rule 162 (expr7 -> expr7 PIPE expr8 .)
    PIPE            reduce using rule 162 (expr7 -> expr7 PIPE expr8 .)
    DOUBLEEQUAL     reduce using rule 162 (expr7 -> expr7 PIPE expr8 .)
    NOTEQUAL        reduce using rule 162 (expr7 -> expr7 PIPE expr8 .)
    LOGICALAND      reduce using rule 162 (expr7 -> expr7 PIPE expr8 .)
    LOGICALOR       reduce using rule 162 (expr7 -> expr7 PIPE expr8 .)
    CLOSE_PAREN     reduce using rule 162 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_do      reduce using rule 162 (expr7 -> expr7 PIPE expr8 .)
    newline         reduce using rule 162 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_while   reduce using rule 162 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_until   reduce using rule 162 (expr7 -> expr7 PIPE expr8 .)
    DELIM           reduce using rule 162 (expr7 -> expr7 PIPE expr8 .)
    $end            reduce using rule 162 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_end     reduce using rule 162 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_elsif   reduce using rule 162 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_else    reduce using rule 162 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_then    reduce using rule 162 (expr7 -> expr7 PIPE expr8 .)
    CLOSE_BRACKET   reduce using rule 162 (expr7 -> expr7 PIPE expr8 .)
    BITAND          shift and go to state 119


state 138

    (161) expr7 -> expr7 BITXOR expr8 .
    (164) expr8 -> expr8 . BITAND expr9

    LESSEQUAL       reduce using rule 161 (expr7 -> expr7 BITXOR expr8 .)
    LESS            reduce using rule 161 (expr7 -> expr7 BITXOR expr8 .)
    GREATER         reduce using rule 161 (expr7 -> expr7 BITXOR expr8 .)
    GREATEREQUAL    reduce using rule 161 (expr7 -> expr7 BITXOR expr8 .)
    BITXOR          reduce using rule 161 (expr7 -> expr7 BITXOR expr8 .)
    PIPE            reduce using rule 161 (expr7 -> expr7 BITXOR expr8 .)
    DOUBLEEQUAL     reduce using rule 161 (expr7 -> expr7 BITXOR expr8 .)
    NOTEQUAL        reduce using rule 161 (expr7 -> expr7 BITXOR expr8 .)
    LOGICALAND      reduce using rule 161 (expr7 -> expr7 BITXOR expr8 .)
    LOGICALOR       reduce using rule 161 (expr7 -> expr7 BITXOR expr8 .)
    CLOSE_PAREN     reduce using rule 161 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_do      reduce using rule 161 (expr7 -> expr7 BITXOR expr8 .)
    newline         reduce using rule 161 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_while   reduce using rule 161 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_until   reduce using rule 161 (expr7 -> expr7 BITXOR expr8 .)
    DELIM           reduce using rule 161 (expr7 -> expr7 BITXOR expr8 .)
    $end            reduce using rule 161 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_end     reduce using rule 161 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_elsif   reduce using rule 161 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_else    reduce using rule 161 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_then    reduce using rule 161 (expr7 -> expr7 BITXOR expr8 .)
    CLOSE_BRACKET   reduce using rule 161 (expr7 -> expr7 BITXOR expr8 .)
    BITAND          shift and go to state 119


state 139

    (155) expr6 -> expr7 LESSEQUAL expr7 .
    (161) expr7 -> expr7 . BITXOR expr8
    (162) expr7 -> expr7 . PIPE expr8

    DOUBLEEQUAL     reduce using rule 155 (expr6 -> expr7 LESSEQUAL expr7 .)
    NOTEQUAL        reduce using rule 155 (expr6 -> expr7 LESSEQUAL expr7 .)
    LOGICALAND      reduce using rule 155 (expr6 -> expr7 LESSEQUAL expr7 .)
    LOGICALOR       reduce using rule 155 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_then    reduce using rule 155 (expr6 -> expr7 LESSEQUAL expr7 .)
    newline         reduce using rule 155 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_while   reduce using rule 155 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_until   reduce using rule 155 (expr6 -> expr7 LESSEQUAL expr7 .)
    DELIM           reduce using rule 155 (expr6 -> expr7 LESSEQUAL expr7 .)
    $end            reduce using rule 155 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_end     reduce using rule 155 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_elsif   reduce using rule 155 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_else    reduce using rule 155 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_do      reduce using rule 155 (expr6 -> expr7 LESSEQUAL expr7 .)
    CLOSE_PAREN     reduce using rule 155 (expr6 -> expr7 LESSEQUAL expr7 .)
    BITXOR          shift and go to state 61
    PIPE            shift and go to state 60


state 140

    (150) expr4 -> expr4 LOGICALAND expr5 .

    LOGICALAND      reduce using rule 150 (expr4 -> expr4 LOGICALAND expr5 .)
    LOGICALOR       reduce using rule 150 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_while   reduce using rule 150 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_until   reduce using rule 150 (expr4 -> expr4 LOGICALAND expr5 .)
    DELIM           reduce using rule 150 (expr4 -> expr4 LOGICALAND expr5 .)
    newline         reduce using rule 150 (expr4 -> expr4 LOGICALAND expr5 .)
    $end            reduce using rule 150 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_end     reduce using rule 150 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_elsif   reduce using rule 150 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_else    reduce using rule 150 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_then    reduce using rule 150 (expr4 -> expr4 LOGICALAND expr5 .)
    CLOSE_PAREN     reduce using rule 150 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_do      reduce using rule 150 (expr4 -> expr4 LOGICALAND expr5 .)


state 141

    (69) top_stmt -> top_stmt KEYWORD_while expr3 .
    (148) expr3 -> expr3 . LOGICALOR expr4

    KEYWORD_while   reduce using rule 69 (top_stmt -> top_stmt KEYWORD_while expr3 .)
    KEYWORD_until   reduce using rule 69 (top_stmt -> top_stmt KEYWORD_while expr3 .)
    DELIM           reduce using rule 69 (top_stmt -> top_stmt KEYWORD_while expr3 .)
    newline         reduce using rule 69 (top_stmt -> top_stmt KEYWORD_while expr3 .)
    KEYWORD_end     reduce using rule 69 (top_stmt -> top_stmt KEYWORD_while expr3 .)
    KEYWORD_elsif   reduce using rule 69 (top_stmt -> top_stmt KEYWORD_while expr3 .)
    KEYWORD_else    reduce using rule 69 (top_stmt -> top_stmt KEYWORD_while expr3 .)
    $end            reduce using rule 69 (top_stmt -> top_stmt KEYWORD_while expr3 .)
    LOGICALOR       shift and go to state 104


state 142

    (71) top_stmt -> top_stmt KEYWORD_until expr3 .
    (148) expr3 -> expr3 . LOGICALOR expr4

    KEYWORD_while   reduce using rule 71 (top_stmt -> top_stmt KEYWORD_until expr3 .)
    KEYWORD_until   reduce using rule 71 (top_stmt -> top_stmt KEYWORD_until expr3 .)
    DELIM           reduce using rule 71 (top_stmt -> top_stmt KEYWORD_until expr3 .)
    newline         reduce using rule 71 (top_stmt -> top_stmt KEYWORD_until expr3 .)
    KEYWORD_end     reduce using rule 71 (top_stmt -> top_stmt KEYWORD_until expr3 .)
    KEYWORD_elsif   reduce using rule 71 (top_stmt -> top_stmt KEYWORD_until expr3 .)
    KEYWORD_else    reduce using rule 71 (top_stmt -> top_stmt KEYWORD_until expr3 .)
    $end            reduce using rule 71 (top_stmt -> top_stmt KEYWORD_until expr3 .)
    LOGICALOR       shift and go to state 104


state 143

    (169) expr10 -> expr10 PLUS expr11 .
    (172) expr11 -> expr11 . MULTIPLY expr13
    (173) expr11 -> expr11 . DIV expr13
    (174) expr11 -> expr11 . MOD expr13

    PLUS            reduce using rule 169 (expr10 -> expr10 PLUS expr11 .)
    MINUS           reduce using rule 169 (expr10 -> expr10 PLUS expr11 .)
    SHIFTL          reduce using rule 169 (expr10 -> expr10 PLUS expr11 .)
    SHIFTR          reduce using rule 169 (expr10 -> expr10 PLUS expr11 .)
    BITAND          reduce using rule 169 (expr10 -> expr10 PLUS expr11 .)
    LESSEQUAL       reduce using rule 169 (expr10 -> expr10 PLUS expr11 .)
    LESS            reduce using rule 169 (expr10 -> expr10 PLUS expr11 .)
    GREATER         reduce using rule 169 (expr10 -> expr10 PLUS expr11 .)
    GREATEREQUAL    reduce using rule 169 (expr10 -> expr10 PLUS expr11 .)
    BITXOR          reduce using rule 169 (expr10 -> expr10 PLUS expr11 .)
    PIPE            reduce using rule 169 (expr10 -> expr10 PLUS expr11 .)
    DOUBLEEQUAL     reduce using rule 169 (expr10 -> expr10 PLUS expr11 .)
    NOTEQUAL        reduce using rule 169 (expr10 -> expr10 PLUS expr11 .)
    LOGICALAND      reduce using rule 169 (expr10 -> expr10 PLUS expr11 .)
    LOGICALOR       reduce using rule 169 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_while   reduce using rule 169 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_until   reduce using rule 169 (expr10 -> expr10 PLUS expr11 .)
    DELIM           reduce using rule 169 (expr10 -> expr10 PLUS expr11 .)
    newline         reduce using rule 169 (expr10 -> expr10 PLUS expr11 .)
    $end            reduce using rule 169 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_end     reduce using rule 169 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_elsif   reduce using rule 169 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_else    reduce using rule 169 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_then    reduce using rule 169 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_do      reduce using rule 169 (expr10 -> expr10 PLUS expr11 .)
    CLOSE_PAREN     reduce using rule 169 (expr10 -> expr10 PLUS expr11 .)
    CLOSE_BRACKET   reduce using rule 169 (expr10 -> expr10 PLUS expr11 .)
    MULTIPLY        shift and go to state 70
    DIV             shift and go to state 71
    MOD             shift and go to state 72


state 144

    (170) expr10 -> expr10 MINUS expr11 .
    (172) expr11 -> expr11 . MULTIPLY expr13
    (173) expr11 -> expr11 . DIV expr13
    (174) expr11 -> expr11 . MOD expr13

    PLUS            reduce using rule 170 (expr10 -> expr10 MINUS expr11 .)
    MINUS           reduce using rule 170 (expr10 -> expr10 MINUS expr11 .)
    SHIFTL          reduce using rule 170 (expr10 -> expr10 MINUS expr11 .)
    SHIFTR          reduce using rule 170 (expr10 -> expr10 MINUS expr11 .)
    BITAND          reduce using rule 170 (expr10 -> expr10 MINUS expr11 .)
    LESSEQUAL       reduce using rule 170 (expr10 -> expr10 MINUS expr11 .)
    LESS            reduce using rule 170 (expr10 -> expr10 MINUS expr11 .)
    GREATER         reduce using rule 170 (expr10 -> expr10 MINUS expr11 .)
    GREATEREQUAL    reduce using rule 170 (expr10 -> expr10 MINUS expr11 .)
    BITXOR          reduce using rule 170 (expr10 -> expr10 MINUS expr11 .)
    PIPE            reduce using rule 170 (expr10 -> expr10 MINUS expr11 .)
    DOUBLEEQUAL     reduce using rule 170 (expr10 -> expr10 MINUS expr11 .)
    NOTEQUAL        reduce using rule 170 (expr10 -> expr10 MINUS expr11 .)
    LOGICALAND      reduce using rule 170 (expr10 -> expr10 MINUS expr11 .)
    LOGICALOR       reduce using rule 170 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_while   reduce using rule 170 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_until   reduce using rule 170 (expr10 -> expr10 MINUS expr11 .)
    DELIM           reduce using rule 170 (expr10 -> expr10 MINUS expr11 .)
    newline         reduce using rule 170 (expr10 -> expr10 MINUS expr11 .)
    $end            reduce using rule 170 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_end     reduce using rule 170 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_elsif   reduce using rule 170 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_else    reduce using rule 170 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_then    reduce using rule 170 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_do      reduce using rule 170 (expr10 -> expr10 MINUS expr11 .)
    CLOSE_PAREN     reduce using rule 170 (expr10 -> expr10 MINUS expr11 .)
    CLOSE_BRACKET   reduce using rule 170 (expr10 -> expr10 MINUS expr11 .)
    MULTIPLY        shift and go to state 70
    DIV             shift and go to state 71
    MOD             shift and go to state 72


state 145

    (172) expr11 -> expr11 MULTIPLY expr13 .

    MULTIPLY        reduce using rule 172 (expr11 -> expr11 MULTIPLY expr13 .)
    DIV             reduce using rule 172 (expr11 -> expr11 MULTIPLY expr13 .)
    MOD             reduce using rule 172 (expr11 -> expr11 MULTIPLY expr13 .)
    PLUS            reduce using rule 172 (expr11 -> expr11 MULTIPLY expr13 .)
    MINUS           reduce using rule 172 (expr11 -> expr11 MULTIPLY expr13 .)
    SHIFTL          reduce using rule 172 (expr11 -> expr11 MULTIPLY expr13 .)
    SHIFTR          reduce using rule 172 (expr11 -> expr11 MULTIPLY expr13 .)
    BITAND          reduce using rule 172 (expr11 -> expr11 MULTIPLY expr13 .)
    LESSEQUAL       reduce using rule 172 (expr11 -> expr11 MULTIPLY expr13 .)
    LESS            reduce using rule 172 (expr11 -> expr11 MULTIPLY expr13 .)
    GREATER         reduce using rule 172 (expr11 -> expr11 MULTIPLY expr13 .)
    GREATEREQUAL    reduce using rule 172 (expr11 -> expr11 MULTIPLY expr13 .)
    BITXOR          reduce using rule 172 (expr11 -> expr11 MULTIPLY expr13 .)
    PIPE            reduce using rule 172 (expr11 -> expr11 MULTIPLY expr13 .)
    DOUBLEEQUAL     reduce using rule 172 (expr11 -> expr11 MULTIPLY expr13 .)
    NOTEQUAL        reduce using rule 172 (expr11 -> expr11 MULTIPLY expr13 .)
    LOGICALAND      reduce using rule 172 (expr11 -> expr11 MULTIPLY expr13 .)
    LOGICALOR       reduce using rule 172 (expr11 -> expr11 MULTIPLY expr13 .)
    KEYWORD_while   reduce using rule 172 (expr11 -> expr11 MULTIPLY expr13 .)
    KEYWORD_until   reduce using rule 172 (expr11 -> expr11 MULTIPLY expr13 .)
    DELIM           reduce using rule 172 (expr11 -> expr11 MULTIPLY expr13 .)
    newline         reduce using rule 172 (expr11 -> expr11 MULTIPLY expr13 .)
    $end            reduce using rule 172 (expr11 -> expr11 MULTIPLY expr13 .)
    KEYWORD_do      reduce using rule 172 (expr11 -> expr11 MULTIPLY expr13 .)
    KEYWORD_then    reduce using rule 172 (expr11 -> expr11 MULTIPLY expr13 .)
    CLOSE_PAREN     reduce using rule 172 (expr11 -> expr11 MULTIPLY expr13 .)
    KEYWORD_end     reduce using rule 172 (expr11 -> expr11 MULTIPLY expr13 .)
    KEYWORD_elsif   reduce using rule 172 (expr11 -> expr11 MULTIPLY expr13 .)
    KEYWORD_else    reduce using rule 172 (expr11 -> expr11 MULTIPLY expr13 .)
    CLOSE_BRACKET   reduce using rule 172 (expr11 -> expr11 MULTIPLY expr13 .)


state 146

    (173) expr11 -> expr11 DIV expr13 .

    MULTIPLY        reduce using rule 173 (expr11 -> expr11 DIV expr13 .)
    DIV             reduce using rule 173 (expr11 -> expr11 DIV expr13 .)
    MOD             reduce using rule 173 (expr11 -> expr11 DIV expr13 .)
    PLUS            reduce using rule 173 (expr11 -> expr11 DIV expr13 .)
    MINUS           reduce using rule 173 (expr11 -> expr11 DIV expr13 .)
    SHIFTL          reduce using rule 173 (expr11 -> expr11 DIV expr13 .)
    SHIFTR          reduce using rule 173 (expr11 -> expr11 DIV expr13 .)
    BITAND          reduce using rule 173 (expr11 -> expr11 DIV expr13 .)
    LESSEQUAL       reduce using rule 173 (expr11 -> expr11 DIV expr13 .)
    LESS            reduce using rule 173 (expr11 -> expr11 DIV expr13 .)
    GREATER         reduce using rule 173 (expr11 -> expr11 DIV expr13 .)
    GREATEREQUAL    reduce using rule 173 (expr11 -> expr11 DIV expr13 .)
    BITXOR          reduce using rule 173 (expr11 -> expr11 DIV expr13 .)
    PIPE            reduce using rule 173 (expr11 -> expr11 DIV expr13 .)
    DOUBLEEQUAL     reduce using rule 173 (expr11 -> expr11 DIV expr13 .)
    NOTEQUAL        reduce using rule 173 (expr11 -> expr11 DIV expr13 .)
    LOGICALAND      reduce using rule 173 (expr11 -> expr11 DIV expr13 .)
    LOGICALOR       reduce using rule 173 (expr11 -> expr11 DIV expr13 .)
    KEYWORD_while   reduce using rule 173 (expr11 -> expr11 DIV expr13 .)
    KEYWORD_until   reduce using rule 173 (expr11 -> expr11 DIV expr13 .)
    DELIM           reduce using rule 173 (expr11 -> expr11 DIV expr13 .)
    newline         reduce using rule 173 (expr11 -> expr11 DIV expr13 .)
    $end            reduce using rule 173 (expr11 -> expr11 DIV expr13 .)
    KEYWORD_do      reduce using rule 173 (expr11 -> expr11 DIV expr13 .)
    KEYWORD_then    reduce using rule 173 (expr11 -> expr11 DIV expr13 .)
    CLOSE_PAREN     reduce using rule 173 (expr11 -> expr11 DIV expr13 .)
    KEYWORD_end     reduce using rule 173 (expr11 -> expr11 DIV expr13 .)
    KEYWORD_elsif   reduce using rule 173 (expr11 -> expr11 DIV expr13 .)
    KEYWORD_else    reduce using rule 173 (expr11 -> expr11 DIV expr13 .)
    CLOSE_BRACKET   reduce using rule 173 (expr11 -> expr11 DIV expr13 .)


state 147

    (174) expr11 -> expr11 MOD expr13 .

    MULTIPLY        reduce using rule 174 (expr11 -> expr11 MOD expr13 .)
    DIV             reduce using rule 174 (expr11 -> expr11 MOD expr13 .)
    MOD             reduce using rule 174 (expr11 -> expr11 MOD expr13 .)
    PLUS            reduce using rule 174 (expr11 -> expr11 MOD expr13 .)
    MINUS           reduce using rule 174 (expr11 -> expr11 MOD expr13 .)
    SHIFTL          reduce using rule 174 (expr11 -> expr11 MOD expr13 .)
    SHIFTR          reduce using rule 174 (expr11 -> expr11 MOD expr13 .)
    BITAND          reduce using rule 174 (expr11 -> expr11 MOD expr13 .)
    LESSEQUAL       reduce using rule 174 (expr11 -> expr11 MOD expr13 .)
    LESS            reduce using rule 174 (expr11 -> expr11 MOD expr13 .)
    GREATER         reduce using rule 174 (expr11 -> expr11 MOD expr13 .)
    GREATEREQUAL    reduce using rule 174 (expr11 -> expr11 MOD expr13 .)
    BITXOR          reduce using rule 174 (expr11 -> expr11 MOD expr13 .)
    PIPE            reduce using rule 174 (expr11 -> expr11 MOD expr13 .)
    DOUBLEEQUAL     reduce using rule 174 (expr11 -> expr11 MOD expr13 .)
    NOTEQUAL        reduce using rule 174 (expr11 -> expr11 MOD expr13 .)
    LOGICALAND      reduce using rule 174 (expr11 -> expr11 MOD expr13 .)
    LOGICALOR       reduce using rule 174 (expr11 -> expr11 MOD expr13 .)
    KEYWORD_while   reduce using rule 174 (expr11 -> expr11 MOD expr13 .)
    KEYWORD_until   reduce using rule 174 (expr11 -> expr11 MOD expr13 .)
    DELIM           reduce using rule 174 (expr11 -> expr11 MOD expr13 .)
    newline         reduce using rule 174 (expr11 -> expr11 MOD expr13 .)
    $end            reduce using rule 174 (expr11 -> expr11 MOD expr13 .)
    KEYWORD_do      reduce using rule 174 (expr11 -> expr11 MOD expr13 .)
    KEYWORD_then    reduce using rule 174 (expr11 -> expr11 MOD expr13 .)
    CLOSE_PAREN     reduce using rule 174 (expr11 -> expr11 MOD expr13 .)
    KEYWORD_end     reduce using rule 174 (expr11 -> expr11 MOD expr13 .)
    KEYWORD_elsif   reduce using rule 174 (expr11 -> expr11 MOD expr13 .)
    KEYWORD_else    reduce using rule 174 (expr11 -> expr11 MOD expr13 .)
    CLOSE_BRACKET   reduce using rule 174 (expr11 -> expr11 MOD expr13 .)


state 148

    (59) arguments -> CONSTANTS .
    (63) func_arg_expr -> CONSTANTS . EQUAL primary

    CLOSE_PAREN     reduce using rule 59 (arguments -> CONSTANTS .)
    COMMA           reduce using rule 59 (arguments -> CONSTANTS .)
    KEYWORD_return  reduce using rule 59 (arguments -> CONSTANTS .)
    SIGIL_AT        reduce using rule 59 (arguments -> CONSTANTS .)
    SIGIL_DOUBLE_AT reduce using rule 59 (arguments -> CONSTANTS .)
    KEYWORD_puts    reduce using rule 59 (arguments -> CONSTANTS .)
    DELIM           reduce using rule 59 (arguments -> CONSTANTS .)
    newline         reduce using rule 59 (arguments -> CONSTANTS .)
    KEYWORD_end     reduce using rule 59 (arguments -> CONSTANTS .)
    $end            reduce using rule 59 (arguments -> CONSTANTS .)
    KEYWORD_if      reduce using rule 59 (arguments -> CONSTANTS .)
    KEYWORD_while   reduce using rule 59 (arguments -> CONSTANTS .)
    KEYWORD_begin   reduce using rule 59 (arguments -> CONSTANTS .)
    KEYWORD_until   reduce using rule 59 (arguments -> CONSTANTS .)
    KEYWORD_for     reduce using rule 59 (arguments -> CONSTANTS .)
    KEYWORD_break   reduce using rule 59 (arguments -> CONSTANTS .)
    KEYWORD_next    reduce using rule 59 (arguments -> CONSTANTS .)
    KEYWORD_redo    reduce using rule 59 (arguments -> CONSTANTS .)
    KEYWORD_exit    reduce using rule 59 (arguments -> CONSTANTS .)
    VARIABLES       reduce using rule 59 (arguments -> CONSTANTS .)
    CONSTANTS       reduce using rule 59 (arguments -> CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 59 (arguments -> CONSTANTS .)
    OPEN_PAREN      reduce using rule 59 (arguments -> CONSTANTS .)
    PLUS            reduce using rule 59 (arguments -> CONSTANTS .)
    MINUS           reduce using rule 59 (arguments -> CONSTANTS .)
    BITNOT          reduce using rule 59 (arguments -> CONSTANTS .)
    BITCOMP         reduce using rule 59 (arguments -> CONSTANTS .)
    INT_CONSTANTS   reduce using rule 59 (arguments -> CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 59 (arguments -> CONSTANTS .)
    EQUAL           shift and go to state 175


state 149

    (58) arguments -> VARIABLES .
    (62) func_arg_expr -> VARIABLES . EQUAL primary

    CLOSE_PAREN     reduce using rule 58 (arguments -> VARIABLES .)
    COMMA           reduce using rule 58 (arguments -> VARIABLES .)
    KEYWORD_return  reduce using rule 58 (arguments -> VARIABLES .)
    SIGIL_AT        reduce using rule 58 (arguments -> VARIABLES .)
    SIGIL_DOUBLE_AT reduce using rule 58 (arguments -> VARIABLES .)
    KEYWORD_puts    reduce using rule 58 (arguments -> VARIABLES .)
    DELIM           reduce using rule 58 (arguments -> VARIABLES .)
    newline         reduce using rule 58 (arguments -> VARIABLES .)
    KEYWORD_end     reduce using rule 58 (arguments -> VARIABLES .)
    $end            reduce using rule 58 (arguments -> VARIABLES .)
    KEYWORD_if      reduce using rule 58 (arguments -> VARIABLES .)
    KEYWORD_while   reduce using rule 58 (arguments -> VARIABLES .)
    KEYWORD_begin   reduce using rule 58 (arguments -> VARIABLES .)
    KEYWORD_until   reduce using rule 58 (arguments -> VARIABLES .)
    KEYWORD_for     reduce using rule 58 (arguments -> VARIABLES .)
    KEYWORD_break   reduce using rule 58 (arguments -> VARIABLES .)
    KEYWORD_next    reduce using rule 58 (arguments -> VARIABLES .)
    KEYWORD_redo    reduce using rule 58 (arguments -> VARIABLES .)
    KEYWORD_exit    reduce using rule 58 (arguments -> VARIABLES .)
    VARIABLES       reduce using rule 58 (arguments -> VARIABLES .)
    CONSTANTS       reduce using rule 58 (arguments -> VARIABLES .)
    BOOLEAN_CONSTANTS reduce using rule 58 (arguments -> VARIABLES .)
    OPEN_PAREN      reduce using rule 58 (arguments -> VARIABLES .)
    PLUS            reduce using rule 58 (arguments -> VARIABLES .)
    MINUS           reduce using rule 58 (arguments -> VARIABLES .)
    BITNOT          reduce using rule 58 (arguments -> VARIABLES .)
    BITCOMP         reduce using rule 58 (arguments -> VARIABLES .)
    INT_CONSTANTS   reduce using rule 58 (arguments -> VARIABLES .)
    FLOAT_CONSTANTS reduce using rule 58 (arguments -> VARIABLES .)
    EQUAL           shift and go to state 177


state 150

    (61) arguments -> newline .

    CLOSE_PAREN     reduce using rule 61 (arguments -> newline .)
    COMMA           reduce using rule 61 (arguments -> newline .)
    KEYWORD_return  reduce using rule 61 (arguments -> newline .)
    SIGIL_AT        reduce using rule 61 (arguments -> newline .)
    SIGIL_DOUBLE_AT reduce using rule 61 (arguments -> newline .)
    KEYWORD_puts    reduce using rule 61 (arguments -> newline .)
    DELIM           reduce using rule 61 (arguments -> newline .)
    newline         reduce using rule 61 (arguments -> newline .)
    KEYWORD_end     reduce using rule 61 (arguments -> newline .)
    $end            reduce using rule 61 (arguments -> newline .)
    KEYWORD_if      reduce using rule 61 (arguments -> newline .)
    KEYWORD_while   reduce using rule 61 (arguments -> newline .)
    KEYWORD_begin   reduce using rule 61 (arguments -> newline .)
    KEYWORD_until   reduce using rule 61 (arguments -> newline .)
    KEYWORD_for     reduce using rule 61 (arguments -> newline .)
    KEYWORD_break   reduce using rule 61 (arguments -> newline .)
    KEYWORD_next    reduce using rule 61 (arguments -> newline .)
    KEYWORD_redo    reduce using rule 61 (arguments -> newline .)
    KEYWORD_exit    reduce using rule 61 (arguments -> newline .)
    VARIABLES       reduce using rule 61 (arguments -> newline .)
    CONSTANTS       reduce using rule 61 (arguments -> newline .)
    BOOLEAN_CONSTANTS reduce using rule 61 (arguments -> newline .)
    OPEN_PAREN      reduce using rule 61 (arguments -> newline .)
    PLUS            reduce using rule 61 (arguments -> newline .)
    MINUS           reduce using rule 61 (arguments -> newline .)
    BITNOT          reduce using rule 61 (arguments -> newline .)
    BITCOMP         reduce using rule 61 (arguments -> newline .)
    INT_CONSTANTS   reduce using rule 61 (arguments -> newline .)
    FLOAT_CONSTANTS reduce using rule 61 (arguments -> newline .)


state 151

    (14) func_defn -> KEYWORD_def fname OPEN_PAREN . arguments CLOSE_PAREN func_stmts opt_terms KEYWORD_end
    (15) func_defn -> KEYWORD_def fname OPEN_PAREN . CLOSE_PAREN func_stmts opt_terms KEYWORD_end
    (55) arguments -> . arguments COMMA VARIABLES
    (56) arguments -> . arguments COMMA CONSTANTS
    (57) arguments -> . arguments COMMA func_arg_expr
    (58) arguments -> . VARIABLES
    (59) arguments -> . CONSTANTS
    (60) arguments -> . func_arg_expr
    (61) arguments -> . newline
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary

    CLOSE_PAREN     shift and go to state 188
    VARIABLES       shift and go to state 149
    CONSTANTS       shift and go to state 148
    newline         shift and go to state 150

    func_arg_expr                  shift and go to state 153
    arguments                      shift and go to state 187

state 152

    (16) func_defn -> KEYWORD_def fname arguments . func_stmts opt_terms KEYWORD_end
    (55) arguments -> arguments . COMMA VARIABLES
    (56) arguments -> arguments . COMMA CONSTANTS
    (57) arguments -> arguments . COMMA func_arg_expr
    (95) func_stmts -> . func_stmt
    (96) func_stmts -> . func_stmts terms func_stmt
    (97) func_stmts -> . none
    (98) func_stmt -> . top_stmt
    (99) func_stmt -> . KEYWORD_return func_ret_arg
    (194) none -> .
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . mlhs EQUAL mrhs
    (147) expr1 -> . expr3
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . mlhs EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . mlhs EQUAL fname func_ret_arg
    (125) mlhs -> . VARIABLES
    (126) mlhs -> . CONSTANTS
    (127) mlhs -> . array
    (148) expr3 -> . expr3 LOGICALOR expr4
    (149) expr3 -> . expr4
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (150) expr4 -> . expr4 LOGICALAND expr5
    (151) expr4 -> . expr5
    (152) expr5 -> . expr6 DOUBLEEQUAL expr6
    (153) expr5 -> . expr6 NOTEQUAL expr6
    (154) expr5 -> . expr6
    (155) expr6 -> . expr7 LESSEQUAL expr7
    (156) expr6 -> . expr7 LESS expr7
    (157) expr6 -> . expr7 GREATER expr7
    (158) expr6 -> . expr7 GREATEREQUAL expr7
    (159) expr6 -> . expr7
    (160) expr6 -> . BOOLEAN_CONSTANTS
    (161) expr7 -> . expr7 BITXOR expr8
    (162) expr7 -> . expr7 PIPE expr8
    (163) expr7 -> . expr8
    (164) expr8 -> . expr8 BITAND expr9
    (165) expr8 -> . expr9
    (166) expr9 -> . expr9 SHIFTL expr10
    (167) expr9 -> . expr9 SHIFTR expr10
    (168) expr9 -> . expr10
    (169) expr10 -> . expr10 PLUS expr11
    (170) expr10 -> . expr10 MINUS expr11
    (171) expr10 -> . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP

    COMMA           shift and go to state 192
    KEYWORD_return  shift and go to state 191
    DELIM           reduce using rule 194 (none -> .)
    newline         reduce using rule 194 (none -> .)
    KEYWORD_end     reduce using rule 194 (none -> .)
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)
    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 38
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 51
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 48
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    VARIABLES       shift and go to state 98
    CONSTANTS       shift and go to state 101
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29

    func_stmt                      shift and go to state 189
    mlhs                           shift and go to state 2
    func_stmts                     shift and go to state 190
    expr11                         shift and go to state 15
    expr13                         shift and go to state 16
    array                          shift and go to state 26
    expr3                          shift and go to state 41
    expr1                          shift and go to state 42
    expr6                          shift and go to state 43
    puts_stmt                      shift and go to state 18
    expr5                          shift and go to state 45
    func_call_stmt                 shift and go to state 32
    expr7                          shift and go to state 7
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    expr4                          shift and go to state 8
    fname                          shift and go to state 44
    exit_stmt                      shift and go to state 49
    stmt                           shift and go to state 20
    loop_stmt                      shift and go to state 9
    uexpr                          shift and go to state 10
    none                           shift and go to state 193
    expr                           shift and go to state 35
    expr10                         shift and go to state 14
    top_stmt                       shift and go to state 194

state 153

    (60) arguments -> func_arg_expr .

    CLOSE_PAREN     reduce using rule 60 (arguments -> func_arg_expr .)
    COMMA           reduce using rule 60 (arguments -> func_arg_expr .)
    KEYWORD_return  reduce using rule 60 (arguments -> func_arg_expr .)
    SIGIL_AT        reduce using rule 60 (arguments -> func_arg_expr .)
    SIGIL_DOUBLE_AT reduce using rule 60 (arguments -> func_arg_expr .)
    KEYWORD_puts    reduce using rule 60 (arguments -> func_arg_expr .)
    DELIM           reduce using rule 60 (arguments -> func_arg_expr .)
    newline         reduce using rule 60 (arguments -> func_arg_expr .)
    KEYWORD_end     reduce using rule 60 (arguments -> func_arg_expr .)
    $end            reduce using rule 60 (arguments -> func_arg_expr .)
    KEYWORD_if      reduce using rule 60 (arguments -> func_arg_expr .)
    KEYWORD_while   reduce using rule 60 (arguments -> func_arg_expr .)
    KEYWORD_begin   reduce using rule 60 (arguments -> func_arg_expr .)
    KEYWORD_until   reduce using rule 60 (arguments -> func_arg_expr .)
    KEYWORD_for     reduce using rule 60 (arguments -> func_arg_expr .)
    KEYWORD_break   reduce using rule 60 (arguments -> func_arg_expr .)
    KEYWORD_next    reduce using rule 60 (arguments -> func_arg_expr .)
    KEYWORD_redo    reduce using rule 60 (arguments -> func_arg_expr .)
    KEYWORD_exit    reduce using rule 60 (arguments -> func_arg_expr .)
    VARIABLES       reduce using rule 60 (arguments -> func_arg_expr .)
    CONSTANTS       reduce using rule 60 (arguments -> func_arg_expr .)
    BOOLEAN_CONSTANTS reduce using rule 60 (arguments -> func_arg_expr .)
    OPEN_PAREN      reduce using rule 60 (arguments -> func_arg_expr .)
    PLUS            reduce using rule 60 (arguments -> func_arg_expr .)
    MINUS           reduce using rule 60 (arguments -> func_arg_expr .)
    BITNOT          reduce using rule 60 (arguments -> func_arg_expr .)
    BITCOMP         reduce using rule 60 (arguments -> func_arg_expr .)
    INT_CONSTANTS   reduce using rule 60 (arguments -> func_arg_expr .)
    FLOAT_CONSTANTS reduce using rule 60 (arguments -> func_arg_expr .)


state 154

    (11) statement -> CONSTANTS DOT KEYWORD_new . OPEN_PAREN arguments CLOSE_PAREN
    (12) statement -> CONSTANTS DOT KEYWORD_new . OPEN_PAREN CLOSE_PAREN
    (13) statement -> CONSTANTS DOT KEYWORD_new . arguments
    (55) arguments -> . arguments COMMA VARIABLES
    (56) arguments -> . arguments COMMA CONSTANTS
    (57) arguments -> . arguments COMMA func_arg_expr
    (58) arguments -> . VARIABLES
    (59) arguments -> . CONSTANTS
    (60) arguments -> . func_arg_expr
    (61) arguments -> . newline
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary

    OPEN_PAREN      shift and go to state 195
    VARIABLES       shift and go to state 149
    CONSTANTS       shift and go to state 148
    newline         shift and go to state 150

    func_arg_expr                  shift and go to state 153
    arguments                      shift and go to state 196

state 155

    (191) terms -> terms term .

    SIGIL_AT        reduce using rule 191 (terms -> terms term .)
    DELIM           reduce using rule 191 (terms -> terms term .)
    newline         reduce using rule 191 (terms -> terms term .)
    KEYWORD_if      reduce using rule 191 (terms -> terms term .)
    KEYWORD_while   reduce using rule 191 (terms -> terms term .)
    KEYWORD_begin   reduce using rule 191 (terms -> terms term .)
    KEYWORD_until   reduce using rule 191 (terms -> terms term .)
    KEYWORD_for     reduce using rule 191 (terms -> terms term .)
    KEYWORD_puts    reduce using rule 191 (terms -> terms term .)
    KEYWORD_break   reduce using rule 191 (terms -> terms term .)
    KEYWORD_next    reduce using rule 191 (terms -> terms term .)
    KEYWORD_redo    reduce using rule 191 (terms -> terms term .)
    KEYWORD_exit    reduce using rule 191 (terms -> terms term .)
    VARIABLES       reduce using rule 191 (terms -> terms term .)
    CONSTANTS       reduce using rule 191 (terms -> terms term .)
    BOOLEAN_CONSTANTS reduce using rule 191 (terms -> terms term .)
    OPEN_PAREN      reduce using rule 191 (terms -> terms term .)
    PLUS            reduce using rule 191 (terms -> terms term .)
    MINUS           reduce using rule 191 (terms -> terms term .)
    BITNOT          reduce using rule 191 (terms -> terms term .)
    BITCOMP         reduce using rule 191 (terms -> terms term .)
    INT_CONSTANTS   reduce using rule 191 (terms -> terms term .)
    FLOAT_CONSTANTS reduce using rule 191 (terms -> terms term .)
    KEYWORD_elsif   reduce using rule 191 (terms -> terms term .)
    KEYWORD_else    reduce using rule 191 (terms -> terms term .)
    KEYWORD_end     reduce using rule 191 (terms -> terms term .)
    SIGIL_DOUBLE_AT reduce using rule 191 (terms -> terms term .)
    KEYWORD_return  reduce using rule 191 (terms -> terms term .)
    KEYWORD_def     reduce using rule 191 (terms -> terms term .)
    KEYWORD_class   reduce using rule 191 (terms -> terms term .)
    $end            reduce using rule 191 (terms -> terms term .)


state 156

    (4) statements -> statements terms statement .

    DELIM           reduce using rule 4 (statements -> statements terms statement .)
    newline         reduce using rule 4 (statements -> statements terms statement .)
    $end            reduce using rule 4 (statements -> statements terms statement .)


state 157

    (72) top_stmt -> KEYWORD_until expr3 opt_do . gen_stmts opt_terms KEYWORD_end
    (76) gen_stmts -> . top_stmt
    (77) gen_stmts -> . gen_stmts terms top_stmt
    (78) gen_stmts -> . none
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (194) none -> .
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . mlhs EQUAL mrhs
    (147) expr1 -> . expr3
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . mlhs EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . mlhs EQUAL fname func_ret_arg
    (125) mlhs -> . VARIABLES
    (126) mlhs -> . CONSTANTS
    (127) mlhs -> . array
    (148) expr3 -> . expr3 LOGICALOR expr4
    (149) expr3 -> . expr4
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (150) expr4 -> . expr4 LOGICALAND expr5
    (151) expr4 -> . expr5
    (152) expr5 -> . expr6 DOUBLEEQUAL expr6
    (153) expr5 -> . expr6 NOTEQUAL expr6
    (154) expr5 -> . expr6
    (155) expr6 -> . expr7 LESSEQUAL expr7
    (156) expr6 -> . expr7 LESS expr7
    (157) expr6 -> . expr7 GREATER expr7
    (158) expr6 -> . expr7 GREATEREQUAL expr7
    (159) expr6 -> . expr7
    (160) expr6 -> . BOOLEAN_CONSTANTS
    (161) expr7 -> . expr7 BITXOR expr8
    (162) expr7 -> . expr7 PIPE expr8
    (163) expr7 -> . expr8
    (164) expr8 -> . expr8 BITAND expr9
    (165) expr8 -> . expr9
    (166) expr9 -> . expr9 SHIFTL expr10
    (167) expr9 -> . expr9 SHIFTR expr10
    (168) expr9 -> . expr10
    (169) expr10 -> . expr10 PLUS expr11
    (170) expr10 -> . expr10 MINUS expr11
    (171) expr10 -> . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP

    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 38
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 51
    DELIM           reduce using rule 194 (none -> .)
    newline         reduce using rule 194 (none -> .)
    KEYWORD_end     reduce using rule 194 (none -> .)
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 48
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    VARIABLES       shift and go to state 98
    CONSTANTS       shift and go to state 101
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29

    mlhs                           shift and go to state 2
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr13                         shift and go to state 16
    array                          shift and go to state 26
    expr3                          shift and go to state 41
    expr1                          shift and go to state 42
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    puts_stmt                      shift and go to state 18
    expr5                          shift and go to state 45
    func_call_stmt                 shift and go to state 32
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    expr4                          shift and go to state 8
    fname                          shift and go to state 44
    exit_stmt                      shift and go to state 49
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 20
    uexpr                          shift and go to state 10
    none                           shift and go to state 99
    gen_stmts                      shift and go to state 197
    expr                           shift and go to state 35
    top_stmt                       shift and go to state 102

state 158

    (109) opt_then -> newline .

    KEYWORD_if      reduce using rule 109 (opt_then -> newline .)
    KEYWORD_while   reduce using rule 109 (opt_then -> newline .)
    KEYWORD_begin   reduce using rule 109 (opt_then -> newline .)
    KEYWORD_until   reduce using rule 109 (opt_then -> newline .)
    KEYWORD_for     reduce using rule 109 (opt_then -> newline .)
    KEYWORD_puts    reduce using rule 109 (opt_then -> newline .)
    KEYWORD_break   reduce using rule 109 (opt_then -> newline .)
    KEYWORD_next    reduce using rule 109 (opt_then -> newline .)
    KEYWORD_redo    reduce using rule 109 (opt_then -> newline .)
    KEYWORD_exit    reduce using rule 109 (opt_then -> newline .)
    VARIABLES       reduce using rule 109 (opt_then -> newline .)
    CONSTANTS       reduce using rule 109 (opt_then -> newline .)
    BOOLEAN_CONSTANTS reduce using rule 109 (opt_then -> newline .)
    OPEN_PAREN      reduce using rule 109 (opt_then -> newline .)
    PLUS            reduce using rule 109 (opt_then -> newline .)
    MINUS           reduce using rule 109 (opt_then -> newline .)
    BITNOT          reduce using rule 109 (opt_then -> newline .)
    BITCOMP         reduce using rule 109 (opt_then -> newline .)
    DELIM           reduce using rule 109 (opt_then -> newline .)
    newline         reduce using rule 109 (opt_then -> newline .)
    KEYWORD_elsif   reduce using rule 109 (opt_then -> newline .)
    KEYWORD_else    reduce using rule 109 (opt_then -> newline .)
    KEYWORD_end     reduce using rule 109 (opt_then -> newline .)
    INT_CONSTANTS   reduce using rule 109 (opt_then -> newline .)
    FLOAT_CONSTANTS reduce using rule 109 (opt_then -> newline .)


state 159

    (108) opt_then -> KEYWORD_then .

    KEYWORD_if      reduce using rule 108 (opt_then -> KEYWORD_then .)
    KEYWORD_while   reduce using rule 108 (opt_then -> KEYWORD_then .)
    KEYWORD_begin   reduce using rule 108 (opt_then -> KEYWORD_then .)
    KEYWORD_until   reduce using rule 108 (opt_then -> KEYWORD_then .)
    KEYWORD_for     reduce using rule 108 (opt_then -> KEYWORD_then .)
    KEYWORD_puts    reduce using rule 108 (opt_then -> KEYWORD_then .)
    KEYWORD_break   reduce using rule 108 (opt_then -> KEYWORD_then .)
    KEYWORD_next    reduce using rule 108 (opt_then -> KEYWORD_then .)
    KEYWORD_redo    reduce using rule 108 (opt_then -> KEYWORD_then .)
    KEYWORD_exit    reduce using rule 108 (opt_then -> KEYWORD_then .)
    VARIABLES       reduce using rule 108 (opt_then -> KEYWORD_then .)
    CONSTANTS       reduce using rule 108 (opt_then -> KEYWORD_then .)
    BOOLEAN_CONSTANTS reduce using rule 108 (opt_then -> KEYWORD_then .)
    OPEN_PAREN      reduce using rule 108 (opt_then -> KEYWORD_then .)
    PLUS            reduce using rule 108 (opt_then -> KEYWORD_then .)
    MINUS           reduce using rule 108 (opt_then -> KEYWORD_then .)
    BITNOT          reduce using rule 108 (opt_then -> KEYWORD_then .)
    BITCOMP         reduce using rule 108 (opt_then -> KEYWORD_then .)
    DELIM           reduce using rule 108 (opt_then -> KEYWORD_then .)
    newline         reduce using rule 108 (opt_then -> KEYWORD_then .)
    KEYWORD_elsif   reduce using rule 108 (opt_then -> KEYWORD_then .)
    KEYWORD_else    reduce using rule 108 (opt_then -> KEYWORD_then .)
    KEYWORD_end     reduce using rule 108 (opt_then -> KEYWORD_then .)
    INT_CONSTANTS   reduce using rule 108 (opt_then -> KEYWORD_then .)
    FLOAT_CONSTANTS reduce using rule 108 (opt_then -> KEYWORD_then .)


state 160

    (67) top_stmt -> KEYWORD_if expr3 opt_then . gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (76) gen_stmts -> . top_stmt
    (77) gen_stmts -> . gen_stmts terms top_stmt
    (78) gen_stmts -> . none
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (194) none -> .
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . mlhs EQUAL mrhs
    (147) expr1 -> . expr3
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . mlhs EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . mlhs EQUAL fname func_ret_arg
    (125) mlhs -> . VARIABLES
    (126) mlhs -> . CONSTANTS
    (127) mlhs -> . array
    (148) expr3 -> . expr3 LOGICALOR expr4
    (149) expr3 -> . expr4
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (150) expr4 -> . expr4 LOGICALAND expr5
    (151) expr4 -> . expr5
    (152) expr5 -> . expr6 DOUBLEEQUAL expr6
    (153) expr5 -> . expr6 NOTEQUAL expr6
    (154) expr5 -> . expr6
    (155) expr6 -> . expr7 LESSEQUAL expr7
    (156) expr6 -> . expr7 LESS expr7
    (157) expr6 -> . expr7 GREATER expr7
    (158) expr6 -> . expr7 GREATEREQUAL expr7
    (159) expr6 -> . expr7
    (160) expr6 -> . BOOLEAN_CONSTANTS
    (161) expr7 -> . expr7 BITXOR expr8
    (162) expr7 -> . expr7 PIPE expr8
    (163) expr7 -> . expr8
    (164) expr8 -> . expr8 BITAND expr9
    (165) expr8 -> . expr9
    (166) expr9 -> . expr9 SHIFTL expr10
    (167) expr9 -> . expr9 SHIFTR expr10
    (168) expr9 -> . expr10
    (169) expr10 -> . expr10 PLUS expr11
    (170) expr10 -> . expr10 MINUS expr11
    (171) expr10 -> . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP

    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 38
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 51
    DELIM           reduce using rule 194 (none -> .)
    newline         reduce using rule 194 (none -> .)
    KEYWORD_elsif   reduce using rule 194 (none -> .)
    KEYWORD_else    reduce using rule 194 (none -> .)
    KEYWORD_end     reduce using rule 194 (none -> .)
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 48
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    VARIABLES       shift and go to state 98
    CONSTANTS       shift and go to state 101
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29

    mlhs                           shift and go to state 2
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr13                         shift and go to state 16
    array                          shift and go to state 26
    expr3                          shift and go to state 41
    expr1                          shift and go to state 42
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    puts_stmt                      shift and go to state 18
    expr5                          shift and go to state 45
    func_call_stmt                 shift and go to state 32
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    expr4                          shift and go to state 8
    fname                          shift and go to state 44
    exit_stmt                      shift and go to state 49
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 20
    uexpr                          shift and go to state 10
    none                           shift and go to state 99
    gen_stmts                      shift and go to state 198
    expr                           shift and go to state 35
    top_stmt                       shift and go to state 102

state 161

    (182) array -> VARIABLES OPEN_BRACKET expr7 . CLOSE_BRACKET
    (161) expr7 -> expr7 . BITXOR expr8
    (162) expr7 -> expr7 . PIPE expr8

    CLOSE_BRACKET   shift and go to state 199
    BITXOR          shift and go to state 61
    PIPE            shift and go to state 60


state 162

    (8) statement -> VARIABLES DOT VARIABLES . OPEN_PAREN arguments CLOSE_PAREN
    (9) statement -> VARIABLES DOT VARIABLES . OPEN_PAREN CLOSE_PAREN
    (10) statement -> VARIABLES DOT VARIABLES . arguments
    (55) arguments -> . arguments COMMA VARIABLES
    (56) arguments -> . arguments COMMA CONSTANTS
    (57) arguments -> . arguments COMMA func_arg_expr
    (58) arguments -> . VARIABLES
    (59) arguments -> . CONSTANTS
    (60) arguments -> . func_arg_expr
    (61) arguments -> . newline
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary

    OPEN_PAREN      shift and go to state 200
    VARIABLES       shift and go to state 149
    CONSTANTS       shift and go to state 148
    newline         shift and go to state 150

    func_arg_expr                  shift and go to state 153
    arguments                      shift and go to state 201

state 163

    (176) expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .

    MULTIPLY        reduce using rule 176 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    DIV             reduce using rule 176 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    MOD             reduce using rule 176 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    PLUS            reduce using rule 176 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    MINUS           reduce using rule 176 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    SHIFTL          reduce using rule 176 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    SHIFTR          reduce using rule 176 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    BITAND          reduce using rule 176 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    LESSEQUAL       reduce using rule 176 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    LESS            reduce using rule 176 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    GREATER         reduce using rule 176 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    GREATEREQUAL    reduce using rule 176 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    BITXOR          reduce using rule 176 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    PIPE            reduce using rule 176 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    DOUBLEEQUAL     reduce using rule 176 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    NOTEQUAL        reduce using rule 176 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    LOGICALAND      reduce using rule 176 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    LOGICALOR       reduce using rule 176 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_while   reduce using rule 176 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_until   reduce using rule 176 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    DELIM           reduce using rule 176 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    newline         reduce using rule 176 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    $end            reduce using rule 176 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_do      reduce using rule 176 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_then    reduce using rule 176 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 176 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_end     reduce using rule 176 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_elsif   reduce using rule 176 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_else    reduce using rule 176 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 176 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)


state 164

    (124) expr -> mlhs EQUAL . mrhs
    (128) mrhs -> . expr1
    (129) mrhs -> . str_expr
    (130) mrhs -> . KEYWORD_gets
    (131) mrhs -> . OPEN_BRACKET CLOSE_BRACKET
    (132) mrhs -> . VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (133) mrhs -> . VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (134) mrhs -> . VARIABLES DOT VARIABLES
    (135) mrhs -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (136) mrhs -> . CONSTANTS DOT KEYWORD_new
    (137) mrhs -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (147) expr1 -> . expr3
    (138) str_expr -> . STRING_CONSTANTS
    (148) expr3 -> . expr3 LOGICALOR expr4
    (149) expr3 -> . expr4
    (150) expr4 -> . expr4 LOGICALAND expr5
    (151) expr4 -> . expr5
    (152) expr5 -> . expr6 DOUBLEEQUAL expr6
    (153) expr5 -> . expr6 NOTEQUAL expr6
    (154) expr5 -> . expr6
    (155) expr6 -> . expr7 LESSEQUAL expr7
    (156) expr6 -> . expr7 LESS expr7
    (157) expr6 -> . expr7 GREATER expr7
    (158) expr6 -> . expr7 GREATEREQUAL expr7
    (159) expr6 -> . expr7
    (160) expr6 -> . BOOLEAN_CONSTANTS
    (161) expr7 -> . expr7 BITXOR expr8
    (162) expr7 -> . expr7 PIPE expr8
    (163) expr7 -> . expr8
    (164) expr8 -> . expr8 BITAND expr9
    (165) expr8 -> . expr9
    (166) expr9 -> . expr9 SHIFTL expr10
    (167) expr9 -> . expr9 SHIFTR expr10
    (168) expr9 -> . expr10
    (169) expr10 -> . expr10 PLUS expr11
    (170) expr10 -> . expr10 MINUS expr11
    (171) expr10 -> . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (194) none -> .

    KEYWORD_gets    shift and go to state 93
    OPEN_BRACKET    shift and go to state 91
    VARIABLES       shift and go to state 202
    CONSTANTS       shift and go to state 203
    STRING_CONSTANTS shift and go to state 96
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)

    expr11                         shift and go to state 15
    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    str_expr                       shift and go to state 89
    expr13                         shift and go to state 16
    expr3                          shift and go to state 41
    mrhs                           shift and go to state 129
    expr1                          shift and go to state 92
    expr6                          shift and go to state 43
    expr4                          shift and go to state 8
    expr5                          shift and go to state 45
    expr10                         shift and go to state 14
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    array                          shift and go to state 55
    expr7                          shift and go to state 7

state 165

    (132) mrhs -> VARIABLES DOT . VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (133) mrhs -> VARIABLES DOT . VARIABLES OPEN_PAREN CLOSE_PAREN
    (134) mrhs -> VARIABLES DOT . VARIABLES

    VARIABLES       shift and go to state 204


state 166

    (131) mrhs -> OPEN_BRACKET CLOSE_BRACKET .

    KEYWORD_while   reduce using rule 131 (mrhs -> OPEN_BRACKET CLOSE_BRACKET .)
    KEYWORD_until   reduce using rule 131 (mrhs -> OPEN_BRACKET CLOSE_BRACKET .)
    DELIM           reduce using rule 131 (mrhs -> OPEN_BRACKET CLOSE_BRACKET .)
    newline         reduce using rule 131 (mrhs -> OPEN_BRACKET CLOSE_BRACKET .)
    $end            reduce using rule 131 (mrhs -> OPEN_BRACKET CLOSE_BRACKET .)
    KEYWORD_end     reduce using rule 131 (mrhs -> OPEN_BRACKET CLOSE_BRACKET .)
    KEYWORD_elsif   reduce using rule 131 (mrhs -> OPEN_BRACKET CLOSE_BRACKET .)
    KEYWORD_else    reduce using rule 131 (mrhs -> OPEN_BRACKET CLOSE_BRACKET .)


state 167

    (135) mrhs -> CONSTANTS DOT . KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (136) mrhs -> CONSTANTS DOT . KEYWORD_new
    (137) mrhs -> CONSTANTS DOT . KEYWORD_new OPEN_PAREN CLOSE_PAREN

    KEYWORD_new     shift and go to state 205


state 168

    (77) gen_stmts -> gen_stmts terms . top_stmt
    (189) opt_terms -> terms .
    (191) terms -> terms . term
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (192) term -> . DELIM
    (193) term -> . newline
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . mlhs EQUAL mrhs
    (147) expr1 -> . expr3
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . mlhs EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . mlhs EQUAL fname func_ret_arg
    (125) mlhs -> . VARIABLES
    (126) mlhs -> . CONSTANTS
    (127) mlhs -> . array
    (148) expr3 -> . expr3 LOGICALOR expr4
    (149) expr3 -> . expr4
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (150) expr4 -> . expr4 LOGICALAND expr5
    (151) expr4 -> . expr5
    (152) expr5 -> . expr6 DOUBLEEQUAL expr6
    (153) expr5 -> . expr6 NOTEQUAL expr6
    (154) expr5 -> . expr6
    (155) expr6 -> . expr7 LESSEQUAL expr7
    (156) expr6 -> . expr7 LESS expr7
    (157) expr6 -> . expr7 GREATER expr7
    (158) expr6 -> . expr7 GREATEREQUAL expr7
    (159) expr6 -> . expr7
    (160) expr6 -> . BOOLEAN_CONSTANTS
    (161) expr7 -> . expr7 BITXOR expr8
    (162) expr7 -> . expr7 PIPE expr8
    (163) expr7 -> . expr8
    (164) expr8 -> . expr8 BITAND expr9
    (165) expr8 -> . expr9
    (166) expr9 -> . expr9 SHIFTL expr10
    (167) expr9 -> . expr9 SHIFTR expr10
    (168) expr9 -> . expr10
    (169) expr10 -> . expr10 PLUS expr11
    (170) expr10 -> . expr10 MINUS expr11
    (171) expr10 -> . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP
    (194) none -> .

    KEYWORD_end     reduce using rule 189 (opt_terms -> terms .)
    KEYWORD_elsif   reduce using rule 189 (opt_terms -> terms .)
    KEYWORD_else    reduce using rule 189 (opt_terms -> terms .)
    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 38
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 51
    DELIM           shift and go to state 80
    newline         shift and go to state 79
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 48
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    VARIABLES       shift and go to state 98
    CONSTANTS       shift and go to state 101
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)

    mlhs                           shift and go to state 2
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr13                         shift and go to state 16
    array                          shift and go to state 26
    expr3                          shift and go to state 41
    expr1                          shift and go to state 42
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    puts_stmt                      shift and go to state 18
    expr5                          shift and go to state 45
    func_call_stmt                 shift and go to state 32
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    expr4                          shift and go to state 8
    fname                          shift and go to state 44
    exit_stmt                      shift and go to state 49
    none                           shift and go to state 34
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 20
    uexpr                          shift and go to state 10
    term                           shift and go to state 155
    expr                           shift and go to state 35
    top_stmt                       shift and go to state 206

state 169

    (70) top_stmt -> KEYWORD_begin gen_stmts opt_terms . KEYWORD_end KEYWORD_while expr3
    (73) top_stmt -> KEYWORD_begin gen_stmts opt_terms . KEYWORD_end KEYWORD_until expr3

    KEYWORD_end     shift and go to state 207


state 170

    (17) class_defn -> KEYWORD_class CONSTANTS newline . class_stmts opt_terms KEYWORD_end
    (18) class_stmts -> . class_stmt
    (19) class_stmts -> . class_stmts terms class_stmt
    (20) class_stmts -> . none
    (21) class_stmt -> . class_mlhs EQUAL class_mrhs
    (22) class_stmt -> . class_func
    (194) none -> .
    (31) class_mlhs -> . class_mlhs terms SIGIL_DOUBLE_AT
    (32) class_mlhs -> . SIGIL_DOUBLE_AT
    (33) class_func -> . KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (34) class_func -> . KEYWORD_def fname arguments class_method_stmts opt_terms KEYWORD_end
    (35) class_func -> . KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end

    DELIM           reduce using rule 194 (none -> .)
    newline         reduce using rule 194 (none -> .)
    KEYWORD_end     reduce using rule 194 (none -> .)
    SIGIL_DOUBLE_AT shift and go to state 210
    KEYWORD_def     shift and go to state 213

    none                           shift and go to state 208
    class_mlhs                     shift and go to state 209
    class_func                     shift and go to state 211
    class_stmts                    shift and go to state 212
    class_stmt                     shift and go to state 214

state 171

    (148) expr3 -> expr3 LOGICALOR expr4 .
    (150) expr4 -> expr4 . LOGICALAND expr5

    LOGICALOR       reduce using rule 148 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_while   reduce using rule 148 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_until   reduce using rule 148 (expr3 -> expr3 LOGICALOR expr4 .)
    DELIM           reduce using rule 148 (expr3 -> expr3 LOGICALOR expr4 .)
    newline         reduce using rule 148 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_end     reduce using rule 148 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_then    reduce using rule 148 (expr3 -> expr3 LOGICALOR expr4 .)
    $end            reduce using rule 148 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_elsif   reduce using rule 148 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_else    reduce using rule 148 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_do      reduce using rule 148 (expr3 -> expr3 LOGICALOR expr4 .)
    CLOSE_PAREN     reduce using rule 148 (expr3 -> expr3 LOGICALOR expr4 .)
    LOGICALAND      shift and go to state 63


state 172

    (153) expr5 -> expr6 NOTEQUAL expr6 .

    LOGICALAND      reduce using rule 153 (expr5 -> expr6 NOTEQUAL expr6 .)
    LOGICALOR       reduce using rule 153 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_while   reduce using rule 153 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_until   reduce using rule 153 (expr5 -> expr6 NOTEQUAL expr6 .)
    DELIM           reduce using rule 153 (expr5 -> expr6 NOTEQUAL expr6 .)
    newline         reduce using rule 153 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_end     reduce using rule 153 (expr5 -> expr6 NOTEQUAL expr6 .)
    $end            reduce using rule 153 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_elsif   reduce using rule 153 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_else    reduce using rule 153 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_do      reduce using rule 153 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_then    reduce using rule 153 (expr5 -> expr6 NOTEQUAL expr6 .)
    CLOSE_PAREN     reduce using rule 153 (expr5 -> expr6 NOTEQUAL expr6 .)


state 173

    (152) expr5 -> expr6 DOUBLEEQUAL expr6 .

    LOGICALAND      reduce using rule 152 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    LOGICALOR       reduce using rule 152 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_while   reduce using rule 152 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_until   reduce using rule 152 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    DELIM           reduce using rule 152 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    newline         reduce using rule 152 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_end     reduce using rule 152 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    $end            reduce using rule 152 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_elsif   reduce using rule 152 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_else    reduce using rule 152 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_do      reduce using rule 152 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_then    reduce using rule 152 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    CLOSE_PAREN     reduce using rule 152 (expr5 -> expr6 DOUBLEEQUAL expr6 .)


state 174

    (85) func_call_stmt -> fname OPEN_PAREN func_ret_arg . CLOSE_PAREN
    (102) func_ret_arg -> func_ret_arg . COMMA func_arg_expr
    (103) func_ret_arg -> func_ret_arg . COMMA primary

    CLOSE_PAREN     shift and go to state 215
    COMMA           shift and go to state 176


state 175

    (63) func_arg_expr -> CONSTANTS EQUAL . primary
    (139) primary -> . INT_CONSTANTS
    (140) primary -> . FLOAT_CONSTANTS
    (141) primary -> . STRING_CONSTANTS
    (142) primary -> . CHAR_CONSTANTS
    (143) primary -> . BOOLEAN_CONSTANTS
    (144) primary -> . CONSTANTS
    (145) primary -> . VARIABLES
    (146) primary -> . array
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET

    INT_CONSTANTS   shift and go to state 108
    FLOAT_CONSTANTS shift and go to state 109
    STRING_CONSTANTS shift and go to state 112
    CHAR_CONSTANTS  shift and go to state 117
    BOOLEAN_CONSTANTS shift and go to state 107
    CONSTANTS       shift and go to state 218
    VARIABLES       shift and go to state 216

    array                          shift and go to state 116
    primary                        shift and go to state 217

state 176

    (102) func_ret_arg -> func_ret_arg COMMA . func_arg_expr
    (103) func_ret_arg -> func_ret_arg COMMA . primary
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary
    (139) primary -> . INT_CONSTANTS
    (140) primary -> . FLOAT_CONSTANTS
    (141) primary -> . STRING_CONSTANTS
    (142) primary -> . CHAR_CONSTANTS
    (143) primary -> . BOOLEAN_CONSTANTS
    (144) primary -> . CONSTANTS
    (145) primary -> . VARIABLES
    (146) primary -> . array
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET

    VARIABLES       shift and go to state 118
    CONSTANTS       shift and go to state 114
    INT_CONSTANTS   shift and go to state 108
    FLOAT_CONSTANTS shift and go to state 109
    STRING_CONSTANTS shift and go to state 112
    CHAR_CONSTANTS  shift and go to state 117
    BOOLEAN_CONSTANTS shift and go to state 107

    func_arg_expr                  shift and go to state 219
    array                          shift and go to state 116
    primary                        shift and go to state 220

state 177

    (62) func_arg_expr -> VARIABLES EQUAL . primary
    (139) primary -> . INT_CONSTANTS
    (140) primary -> . FLOAT_CONSTANTS
    (141) primary -> . STRING_CONSTANTS
    (142) primary -> . CHAR_CONSTANTS
    (143) primary -> . BOOLEAN_CONSTANTS
    (144) primary -> . CONSTANTS
    (145) primary -> . VARIABLES
    (146) primary -> . array
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET

    INT_CONSTANTS   shift and go to state 108
    FLOAT_CONSTANTS shift and go to state 109
    STRING_CONSTANTS shift and go to state 112
    CHAR_CONSTANTS  shift and go to state 117
    BOOLEAN_CONSTANTS shift and go to state 107
    CONSTANTS       shift and go to state 218
    VARIABLES       shift and go to state 216

    array                          shift and go to state 116
    primary                        shift and go to state 221

state 178

    (164) expr8 -> expr8 BITAND expr9 .
    (166) expr9 -> expr9 . SHIFTL expr10
    (167) expr9 -> expr9 . SHIFTR expr10

    BITAND          reduce using rule 164 (expr8 -> expr8 BITAND expr9 .)
    LESSEQUAL       reduce using rule 164 (expr8 -> expr8 BITAND expr9 .)
    LESS            reduce using rule 164 (expr8 -> expr8 BITAND expr9 .)
    GREATER         reduce using rule 164 (expr8 -> expr8 BITAND expr9 .)
    GREATEREQUAL    reduce using rule 164 (expr8 -> expr8 BITAND expr9 .)
    BITXOR          reduce using rule 164 (expr8 -> expr8 BITAND expr9 .)
    PIPE            reduce using rule 164 (expr8 -> expr8 BITAND expr9 .)
    DOUBLEEQUAL     reduce using rule 164 (expr8 -> expr8 BITAND expr9 .)
    NOTEQUAL        reduce using rule 164 (expr8 -> expr8 BITAND expr9 .)
    LOGICALAND      reduce using rule 164 (expr8 -> expr8 BITAND expr9 .)
    LOGICALOR       reduce using rule 164 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_do      reduce using rule 164 (expr8 -> expr8 BITAND expr9 .)
    newline         reduce using rule 164 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_while   reduce using rule 164 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_until   reduce using rule 164 (expr8 -> expr8 BITAND expr9 .)
    DELIM           reduce using rule 164 (expr8 -> expr8 BITAND expr9 .)
    $end            reduce using rule 164 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_end     reduce using rule 164 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_elsif   reduce using rule 164 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_else    reduce using rule 164 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_then    reduce using rule 164 (expr8 -> expr8 BITAND expr9 .)
    CLOSE_PAREN     reduce using rule 164 (expr8 -> expr8 BITAND expr9 .)
    CLOSE_BRACKET   reduce using rule 164 (expr8 -> expr8 BITAND expr9 .)
    SHIFTL          shift and go to state 121
    SHIFTR          shift and go to state 120


state 179

    (167) expr9 -> expr9 SHIFTR expr10 .
    (169) expr10 -> expr10 . PLUS expr11
    (170) expr10 -> expr10 . MINUS expr11

    SHIFTL          reduce using rule 167 (expr9 -> expr9 SHIFTR expr10 .)
    SHIFTR          reduce using rule 167 (expr9 -> expr9 SHIFTR expr10 .)
    BITAND          reduce using rule 167 (expr9 -> expr9 SHIFTR expr10 .)
    LESSEQUAL       reduce using rule 167 (expr9 -> expr9 SHIFTR expr10 .)
    LESS            reduce using rule 167 (expr9 -> expr9 SHIFTR expr10 .)
    GREATER         reduce using rule 167 (expr9 -> expr9 SHIFTR expr10 .)
    GREATEREQUAL    reduce using rule 167 (expr9 -> expr9 SHIFTR expr10 .)
    BITXOR          reduce using rule 167 (expr9 -> expr9 SHIFTR expr10 .)
    PIPE            reduce using rule 167 (expr9 -> expr9 SHIFTR expr10 .)
    DOUBLEEQUAL     reduce using rule 167 (expr9 -> expr9 SHIFTR expr10 .)
    NOTEQUAL        reduce using rule 167 (expr9 -> expr9 SHIFTR expr10 .)
    LOGICALAND      reduce using rule 167 (expr9 -> expr9 SHIFTR expr10 .)
    LOGICALOR       reduce using rule 167 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_while   reduce using rule 167 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_until   reduce using rule 167 (expr9 -> expr9 SHIFTR expr10 .)
    DELIM           reduce using rule 167 (expr9 -> expr9 SHIFTR expr10 .)
    newline         reduce using rule 167 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_end     reduce using rule 167 (expr9 -> expr9 SHIFTR expr10 .)
    $end            reduce using rule 167 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_do      reduce using rule 167 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_then    reduce using rule 167 (expr9 -> expr9 SHIFTR expr10 .)
    CLOSE_PAREN     reduce using rule 167 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_elsif   reduce using rule 167 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_else    reduce using rule 167 (expr9 -> expr9 SHIFTR expr10 .)
    CLOSE_BRACKET   reduce using rule 167 (expr9 -> expr9 SHIFTR expr10 .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69


state 180

    (166) expr9 -> expr9 SHIFTL expr10 .
    (169) expr10 -> expr10 . PLUS expr11
    (170) expr10 -> expr10 . MINUS expr11

    SHIFTL          reduce using rule 166 (expr9 -> expr9 SHIFTL expr10 .)
    SHIFTR          reduce using rule 166 (expr9 -> expr9 SHIFTL expr10 .)
    BITAND          reduce using rule 166 (expr9 -> expr9 SHIFTL expr10 .)
    LESSEQUAL       reduce using rule 166 (expr9 -> expr9 SHIFTL expr10 .)
    LESS            reduce using rule 166 (expr9 -> expr9 SHIFTL expr10 .)
    GREATER         reduce using rule 166 (expr9 -> expr9 SHIFTL expr10 .)
    GREATEREQUAL    reduce using rule 166 (expr9 -> expr9 SHIFTL expr10 .)
    BITXOR          reduce using rule 166 (expr9 -> expr9 SHIFTL expr10 .)
    PIPE            reduce using rule 166 (expr9 -> expr9 SHIFTL expr10 .)
    DOUBLEEQUAL     reduce using rule 166 (expr9 -> expr9 SHIFTL expr10 .)
    NOTEQUAL        reduce using rule 166 (expr9 -> expr9 SHIFTL expr10 .)
    LOGICALAND      reduce using rule 166 (expr9 -> expr9 SHIFTL expr10 .)
    LOGICALOR       reduce using rule 166 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_while   reduce using rule 166 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_until   reduce using rule 166 (expr9 -> expr9 SHIFTL expr10 .)
    DELIM           reduce using rule 166 (expr9 -> expr9 SHIFTL expr10 .)
    newline         reduce using rule 166 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_end     reduce using rule 166 (expr9 -> expr9 SHIFTL expr10 .)
    $end            reduce using rule 166 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_do      reduce using rule 166 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_then    reduce using rule 166 (expr9 -> expr9 SHIFTL expr10 .)
    CLOSE_PAREN     reduce using rule 166 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_elsif   reduce using rule 166 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_else    reduce using rule 166 (expr9 -> expr9 SHIFTL expr10 .)
    CLOSE_BRACKET   reduce using rule 166 (expr9 -> expr9 SHIFTL expr10 .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69


state 181

    (74) top_stmt -> KEYWORD_for OPEN_PAREN multi_var . CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (115) multi_var -> multi_var . COMMA VARIABLES
    (116) multi_var -> multi_var . COMMA CONSTANTS

    CLOSE_PAREN     shift and go to state 222
    COMMA           shift and go to state 183


state 182

    (75) top_stmt -> KEYWORD_for multi_var KEYWORD_in . for_range opt_do gen_stmts opt_terms KEYWORD_end
    (117) for_range -> . OPEN_PAREN INT_CONSTANTS DOUBLEDOT INT_CONSTANTS CLOSE_PAREN
    (118) for_range -> . INT_CONSTANTS DOUBLEDOT INT_CONSTANTS
    (119) for_range -> . OPEN_PAREN INT_CONSTANTS TRIPLEDOT INT_CONSTANTS CLOSE_PAREN
    (120) for_range -> . INT_CONSTANTS TRIPLEDOT INT_CONSTANTS
    (121) for_range -> . VARIABLES
    (122) for_range -> . array
    (123) for_range -> . CONSTANTS
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET

    OPEN_PAREN      shift and go to state 224
    INT_CONSTANTS   shift and go to state 223
    VARIABLES       shift and go to state 225
    CONSTANTS       shift and go to state 227

    for_range                      shift and go to state 226
    array                          shift and go to state 228

state 183

    (115) multi_var -> multi_var COMMA . VARIABLES
    (116) multi_var -> multi_var COMMA . CONSTANTS

    VARIABLES       shift and go to state 229
    CONSTANTS       shift and go to state 230


state 184

    (87) func_call_stmt -> mlhs EQUAL fname OPEN_PAREN . func_ret_arg CLOSE_PAREN
    (100) func_ret_arg -> . func_arg_expr
    (101) func_ret_arg -> . primary
    (102) func_ret_arg -> . func_ret_arg COMMA func_arg_expr
    (103) func_ret_arg -> . func_ret_arg COMMA primary
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary
    (139) primary -> . INT_CONSTANTS
    (140) primary -> . FLOAT_CONSTANTS
    (141) primary -> . STRING_CONSTANTS
    (142) primary -> . CHAR_CONSTANTS
    (143) primary -> . BOOLEAN_CONSTANTS
    (144) primary -> . CONSTANTS
    (145) primary -> . VARIABLES
    (146) primary -> . array
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET

    VARIABLES       shift and go to state 118
    CONSTANTS       shift and go to state 114
    INT_CONSTANTS   shift and go to state 108
    FLOAT_CONSTANTS shift and go to state 109
    STRING_CONSTANTS shift and go to state 112
    CHAR_CONSTANTS  shift and go to state 117
    BOOLEAN_CONSTANTS shift and go to state 107

    func_arg_expr                  shift and go to state 110
    primary                        shift and go to state 111
    func_ret_arg                   shift and go to state 231
    array                          shift and go to state 116

state 185

    (88) func_call_stmt -> mlhs EQUAL fname func_ret_arg .
    (102) func_ret_arg -> func_ret_arg . COMMA func_arg_expr
    (103) func_ret_arg -> func_ret_arg . COMMA primary

    KEYWORD_while   reduce using rule 88 (func_call_stmt -> mlhs EQUAL fname func_ret_arg .)
    KEYWORD_until   reduce using rule 88 (func_call_stmt -> mlhs EQUAL fname func_ret_arg .)
    DELIM           reduce using rule 88 (func_call_stmt -> mlhs EQUAL fname func_ret_arg .)
    newline         reduce using rule 88 (func_call_stmt -> mlhs EQUAL fname func_ret_arg .)
    KEYWORD_end     reduce using rule 88 (func_call_stmt -> mlhs EQUAL fname func_ret_arg .)
    $end            reduce using rule 88 (func_call_stmt -> mlhs EQUAL fname func_ret_arg .)
    KEYWORD_elsif   reduce using rule 88 (func_call_stmt -> mlhs EQUAL fname func_ret_arg .)
    KEYWORD_else    reduce using rule 88 (func_call_stmt -> mlhs EQUAL fname func_ret_arg .)
    COMMA           shift and go to state 176


state 186

    (68) top_stmt -> KEYWORD_while expr3 opt_do gen_stmts . opt_terms KEYWORD_end
    (77) gen_stmts -> gen_stmts . terms top_stmt
    (188) opt_terms -> . none
    (189) opt_terms -> . terms
    (190) terms -> . term
    (191) terms -> . terms term
    (194) none -> .
    (192) term -> . DELIM
    (193) term -> . newline

    KEYWORD_end     reduce using rule 194 (none -> .)
    DELIM           shift and go to state 80
    newline         shift and go to state 79

    none                           shift and go to state 81
    terms                          shift and go to state 168
    term                           shift and go to state 77
    opt_terms                      shift and go to state 232

state 187

    (14) func_defn -> KEYWORD_def fname OPEN_PAREN arguments . CLOSE_PAREN func_stmts opt_terms KEYWORD_end
    (55) arguments -> arguments . COMMA VARIABLES
    (56) arguments -> arguments . COMMA CONSTANTS
    (57) arguments -> arguments . COMMA func_arg_expr

    CLOSE_PAREN     shift and go to state 233
    COMMA           shift and go to state 192


state 188

    (15) func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN . func_stmts opt_terms KEYWORD_end
    (95) func_stmts -> . func_stmt
    (96) func_stmts -> . func_stmts terms func_stmt
    (97) func_stmts -> . none
    (98) func_stmt -> . top_stmt
    (99) func_stmt -> . KEYWORD_return func_ret_arg
    (194) none -> .
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . mlhs EQUAL mrhs
    (147) expr1 -> . expr3
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . mlhs EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . mlhs EQUAL fname func_ret_arg
    (125) mlhs -> . VARIABLES
    (126) mlhs -> . CONSTANTS
    (127) mlhs -> . array
    (148) expr3 -> . expr3 LOGICALOR expr4
    (149) expr3 -> . expr4
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (150) expr4 -> . expr4 LOGICALAND expr5
    (151) expr4 -> . expr5
    (152) expr5 -> . expr6 DOUBLEEQUAL expr6
    (153) expr5 -> . expr6 NOTEQUAL expr6
    (154) expr5 -> . expr6
    (155) expr6 -> . expr7 LESSEQUAL expr7
    (156) expr6 -> . expr7 LESS expr7
    (157) expr6 -> . expr7 GREATER expr7
    (158) expr6 -> . expr7 GREATEREQUAL expr7
    (159) expr6 -> . expr7
    (160) expr6 -> . BOOLEAN_CONSTANTS
    (161) expr7 -> . expr7 BITXOR expr8
    (162) expr7 -> . expr7 PIPE expr8
    (163) expr7 -> . expr8
    (164) expr8 -> . expr8 BITAND expr9
    (165) expr8 -> . expr9
    (166) expr9 -> . expr9 SHIFTL expr10
    (167) expr9 -> . expr9 SHIFTR expr10
    (168) expr9 -> . expr10
    (169) expr10 -> . expr10 PLUS expr11
    (170) expr10 -> . expr10 MINUS expr11
    (171) expr10 -> . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP

    KEYWORD_return  shift and go to state 191
    DELIM           reduce using rule 194 (none -> .)
    newline         reduce using rule 194 (none -> .)
    KEYWORD_end     reduce using rule 194 (none -> .)
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)
    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 38
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 51
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 48
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    VARIABLES       shift and go to state 98
    CONSTANTS       shift and go to state 101
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29

    func_stmt                      shift and go to state 189
    mlhs                           shift and go to state 2
    func_stmts                     shift and go to state 234
    expr11                         shift and go to state 15
    expr13                         shift and go to state 16
    array                          shift and go to state 26
    expr3                          shift and go to state 41
    expr1                          shift and go to state 42
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    puts_stmt                      shift and go to state 18
    expr5                          shift and go to state 45
    func_call_stmt                 shift and go to state 32
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    expr4                          shift and go to state 8
    fname                          shift and go to state 44
    exit_stmt                      shift and go to state 49
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 20
    uexpr                          shift and go to state 10
    none                           shift and go to state 193
    expr                           shift and go to state 35
    expr10                         shift and go to state 14
    top_stmt                       shift and go to state 194

state 189

    (95) func_stmts -> func_stmt .

    DELIM           reduce using rule 95 (func_stmts -> func_stmt .)
    newline         reduce using rule 95 (func_stmts -> func_stmt .)
    KEYWORD_end     reduce using rule 95 (func_stmts -> func_stmt .)


state 190

    (16) func_defn -> KEYWORD_def fname arguments func_stmts . opt_terms KEYWORD_end
    (96) func_stmts -> func_stmts . terms func_stmt
    (188) opt_terms -> . none
    (189) opt_terms -> . terms
    (190) terms -> . term
    (191) terms -> . terms term
    (194) none -> .
    (192) term -> . DELIM
    (193) term -> . newline

    KEYWORD_end     reduce using rule 194 (none -> .)
    DELIM           shift and go to state 80
    newline         shift and go to state 79

    none                           shift and go to state 81
    terms                          shift and go to state 235
    term                           shift and go to state 77
    opt_terms                      shift and go to state 236

state 191

    (99) func_stmt -> KEYWORD_return . func_ret_arg
    (100) func_ret_arg -> . func_arg_expr
    (101) func_ret_arg -> . primary
    (102) func_ret_arg -> . func_ret_arg COMMA func_arg_expr
    (103) func_ret_arg -> . func_ret_arg COMMA primary
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary
    (139) primary -> . INT_CONSTANTS
    (140) primary -> . FLOAT_CONSTANTS
    (141) primary -> . STRING_CONSTANTS
    (142) primary -> . CHAR_CONSTANTS
    (143) primary -> . BOOLEAN_CONSTANTS
    (144) primary -> . CONSTANTS
    (145) primary -> . VARIABLES
    (146) primary -> . array
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET

    VARIABLES       shift and go to state 118
    CONSTANTS       shift and go to state 114
    INT_CONSTANTS   shift and go to state 108
    FLOAT_CONSTANTS shift and go to state 109
    STRING_CONSTANTS shift and go to state 112
    CHAR_CONSTANTS  shift and go to state 117
    BOOLEAN_CONSTANTS shift and go to state 107

    func_arg_expr                  shift and go to state 110
    func_ret_arg                   shift and go to state 237
    array                          shift and go to state 116
    primary                        shift and go to state 111

state 192

    (55) arguments -> arguments COMMA . VARIABLES
    (56) arguments -> arguments COMMA . CONSTANTS
    (57) arguments -> arguments COMMA . func_arg_expr
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary

    VARIABLES       shift and go to state 238
    CONSTANTS       shift and go to state 240

    func_arg_expr                  shift and go to state 239

state 193

    (97) func_stmts -> none .
    (183) uexpr -> none .

    DELIM           reduce using rule 97 (func_stmts -> none .)
    newline         reduce using rule 97 (func_stmts -> none .)
    KEYWORD_end     reduce using rule 97 (func_stmts -> none .)
    INT_CONSTANTS   reduce using rule 183 (uexpr -> none .)
    FLOAT_CONSTANTS reduce using rule 183 (uexpr -> none .)


state 194

    (98) func_stmt -> top_stmt .
    (69) top_stmt -> top_stmt . KEYWORD_while expr3
    (71) top_stmt -> top_stmt . KEYWORD_until expr3

    DELIM           reduce using rule 98 (func_stmt -> top_stmt .)
    newline         reduce using rule 98 (func_stmt -> top_stmt .)
    KEYWORD_end     reduce using rule 98 (func_stmt -> top_stmt .)
    KEYWORD_while   shift and go to state 66
    KEYWORD_until   shift and go to state 67


state 195

    (11) statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN . arguments CLOSE_PAREN
    (12) statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN . CLOSE_PAREN
    (55) arguments -> . arguments COMMA VARIABLES
    (56) arguments -> . arguments COMMA CONSTANTS
    (57) arguments -> . arguments COMMA func_arg_expr
    (58) arguments -> . VARIABLES
    (59) arguments -> . CONSTANTS
    (60) arguments -> . func_arg_expr
    (61) arguments -> . newline
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary

    CLOSE_PAREN     shift and go to state 242
    VARIABLES       shift and go to state 149
    CONSTANTS       shift and go to state 148
    newline         shift and go to state 150

    func_arg_expr                  shift and go to state 153
    arguments                      shift and go to state 241

state 196

    (13) statement -> CONSTANTS DOT KEYWORD_new arguments .
    (55) arguments -> arguments . COMMA VARIABLES
    (56) arguments -> arguments . COMMA CONSTANTS
    (57) arguments -> arguments . COMMA func_arg_expr

    DELIM           reduce using rule 13 (statement -> CONSTANTS DOT KEYWORD_new arguments .)
    newline         reduce using rule 13 (statement -> CONSTANTS DOT KEYWORD_new arguments .)
    $end            reduce using rule 13 (statement -> CONSTANTS DOT KEYWORD_new arguments .)
    COMMA           shift and go to state 192


state 197

    (72) top_stmt -> KEYWORD_until expr3 opt_do gen_stmts . opt_terms KEYWORD_end
    (77) gen_stmts -> gen_stmts . terms top_stmt
    (188) opt_terms -> . none
    (189) opt_terms -> . terms
    (190) terms -> . term
    (191) terms -> . terms term
    (194) none -> .
    (192) term -> . DELIM
    (193) term -> . newline

    KEYWORD_end     reduce using rule 194 (none -> .)
    DELIM           shift and go to state 80
    newline         shift and go to state 79

    none                           shift and go to state 81
    terms                          shift and go to state 168
    term                           shift and go to state 77
    opt_terms                      shift and go to state 243

state 198

    (67) top_stmt -> KEYWORD_if expr3 opt_then gen_stmts . opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (77) gen_stmts -> gen_stmts . terms top_stmt
    (188) opt_terms -> . none
    (189) opt_terms -> . terms
    (190) terms -> . term
    (191) terms -> . terms term
    (194) none -> .
    (192) term -> . DELIM
    (193) term -> . newline

    KEYWORD_elsif   reduce using rule 194 (none -> .)
    KEYWORD_else    reduce using rule 194 (none -> .)
    KEYWORD_end     reduce using rule 194 (none -> .)
    DELIM           shift and go to state 80
    newline         shift and go to state 79

    none                           shift and go to state 81
    terms                          shift and go to state 168
    term                           shift and go to state 77
    opt_terms                      shift and go to state 244

state 199

    (182) array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .

    MULTIPLY        reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    DIV             reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    MOD             reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    PLUS            reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    MINUS           reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    SHIFTL          reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    SHIFTR          reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    BITAND          reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    LESSEQUAL       reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    LESS            reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    GREATER         reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    GREATEREQUAL    reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    BITXOR          reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    PIPE            reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    DOUBLEEQUAL     reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    NOTEQUAL        reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    LOGICALAND      reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    LOGICALOR       reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_then    reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    newline         reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_while   reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_until   reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    DELIM           reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    $end            reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_do      reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    CLOSE_PAREN     reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_end     reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_elsif   reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_else    reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    COMMA           reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    EQUAL           reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_return  reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_if      reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_begin   reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_for     reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_puts    reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_break   reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_next    reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_redo    reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_exit    reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    VARIABLES       reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    CONSTANTS       reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    BOOLEAN_CONSTANTS reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    OPEN_PAREN      reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    BITNOT          reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    BITCOMP         reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    INT_CONSTANTS   reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    FLOAT_CONSTANTS reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    SIGIL_AT        reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    SIGIL_DOUBLE_AT reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_in      reduce using rule 182 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)


state 200

    (8) statement -> VARIABLES DOT VARIABLES OPEN_PAREN . arguments CLOSE_PAREN
    (9) statement -> VARIABLES DOT VARIABLES OPEN_PAREN . CLOSE_PAREN
    (55) arguments -> . arguments COMMA VARIABLES
    (56) arguments -> . arguments COMMA CONSTANTS
    (57) arguments -> . arguments COMMA func_arg_expr
    (58) arguments -> . VARIABLES
    (59) arguments -> . CONSTANTS
    (60) arguments -> . func_arg_expr
    (61) arguments -> . newline
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary

    CLOSE_PAREN     shift and go to state 246
    VARIABLES       shift and go to state 149
    CONSTANTS       shift and go to state 148
    newline         shift and go to state 150

    func_arg_expr                  shift and go to state 153
    arguments                      shift and go to state 245

state 201

    (10) statement -> VARIABLES DOT VARIABLES arguments .
    (55) arguments -> arguments . COMMA VARIABLES
    (56) arguments -> arguments . COMMA CONSTANTS
    (57) arguments -> arguments . COMMA func_arg_expr

    DELIM           reduce using rule 10 (statement -> VARIABLES DOT VARIABLES arguments .)
    newline         reduce using rule 10 (statement -> VARIABLES DOT VARIABLES arguments .)
    $end            reduce using rule 10 (statement -> VARIABLES DOT VARIABLES arguments .)
    COMMA           shift and go to state 192


state 202

    (132) mrhs -> VARIABLES . DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (133) mrhs -> VARIABLES . DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (134) mrhs -> VARIABLES . DOT VARIABLES
    (180) expr13 -> VARIABLES .
    (182) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET

    DOT             shift and go to state 165
    MULTIPLY        reduce using rule 180 (expr13 -> VARIABLES .)
    DIV             reduce using rule 180 (expr13 -> VARIABLES .)
    MOD             reduce using rule 180 (expr13 -> VARIABLES .)
    PLUS            reduce using rule 180 (expr13 -> VARIABLES .)
    MINUS           reduce using rule 180 (expr13 -> VARIABLES .)
    SHIFTL          reduce using rule 180 (expr13 -> VARIABLES .)
    SHIFTR          reduce using rule 180 (expr13 -> VARIABLES .)
    BITAND          reduce using rule 180 (expr13 -> VARIABLES .)
    LESSEQUAL       reduce using rule 180 (expr13 -> VARIABLES .)
    LESS            reduce using rule 180 (expr13 -> VARIABLES .)
    GREATER         reduce using rule 180 (expr13 -> VARIABLES .)
    GREATEREQUAL    reduce using rule 180 (expr13 -> VARIABLES .)
    BITXOR          reduce using rule 180 (expr13 -> VARIABLES .)
    PIPE            reduce using rule 180 (expr13 -> VARIABLES .)
    DOUBLEEQUAL     reduce using rule 180 (expr13 -> VARIABLES .)
    NOTEQUAL        reduce using rule 180 (expr13 -> VARIABLES .)
    LOGICALAND      reduce using rule 180 (expr13 -> VARIABLES .)
    LOGICALOR       reduce using rule 180 (expr13 -> VARIABLES .)
    KEYWORD_while   reduce using rule 180 (expr13 -> VARIABLES .)
    KEYWORD_until   reduce using rule 180 (expr13 -> VARIABLES .)
    DELIM           reduce using rule 180 (expr13 -> VARIABLES .)
    newline         reduce using rule 180 (expr13 -> VARIABLES .)
    $end            reduce using rule 180 (expr13 -> VARIABLES .)
    KEYWORD_end     reduce using rule 180 (expr13 -> VARIABLES .)
    KEYWORD_elsif   reduce using rule 180 (expr13 -> VARIABLES .)
    KEYWORD_else    reduce using rule 180 (expr13 -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 85


state 203

    (135) mrhs -> CONSTANTS . DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (136) mrhs -> CONSTANTS . DOT KEYWORD_new
    (137) mrhs -> CONSTANTS . DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (179) expr13 -> CONSTANTS .

    DOT             shift and go to state 167
    MULTIPLY        reduce using rule 179 (expr13 -> CONSTANTS .)
    DIV             reduce using rule 179 (expr13 -> CONSTANTS .)
    MOD             reduce using rule 179 (expr13 -> CONSTANTS .)
    PLUS            reduce using rule 179 (expr13 -> CONSTANTS .)
    MINUS           reduce using rule 179 (expr13 -> CONSTANTS .)
    SHIFTL          reduce using rule 179 (expr13 -> CONSTANTS .)
    SHIFTR          reduce using rule 179 (expr13 -> CONSTANTS .)
    BITAND          reduce using rule 179 (expr13 -> CONSTANTS .)
    LESSEQUAL       reduce using rule 179 (expr13 -> CONSTANTS .)
    LESS            reduce using rule 179 (expr13 -> CONSTANTS .)
    GREATER         reduce using rule 179 (expr13 -> CONSTANTS .)
    GREATEREQUAL    reduce using rule 179 (expr13 -> CONSTANTS .)
    BITXOR          reduce using rule 179 (expr13 -> CONSTANTS .)
    PIPE            reduce using rule 179 (expr13 -> CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 179 (expr13 -> CONSTANTS .)
    NOTEQUAL        reduce using rule 179 (expr13 -> CONSTANTS .)
    LOGICALAND      reduce using rule 179 (expr13 -> CONSTANTS .)
    LOGICALOR       reduce using rule 179 (expr13 -> CONSTANTS .)
    KEYWORD_while   reduce using rule 179 (expr13 -> CONSTANTS .)
    KEYWORD_until   reduce using rule 179 (expr13 -> CONSTANTS .)
    DELIM           reduce using rule 179 (expr13 -> CONSTANTS .)
    newline         reduce using rule 179 (expr13 -> CONSTANTS .)
    $end            reduce using rule 179 (expr13 -> CONSTANTS .)
    KEYWORD_end     reduce using rule 179 (expr13 -> CONSTANTS .)
    KEYWORD_elsif   reduce using rule 179 (expr13 -> CONSTANTS .)
    KEYWORD_else    reduce using rule 179 (expr13 -> CONSTANTS .)


state 204

    (132) mrhs -> VARIABLES DOT VARIABLES . OPEN_PAREN arguments CLOSE_PAREN
    (133) mrhs -> VARIABLES DOT VARIABLES . OPEN_PAREN CLOSE_PAREN
    (134) mrhs -> VARIABLES DOT VARIABLES .

    OPEN_PAREN      shift and go to state 247
    KEYWORD_while   reduce using rule 134 (mrhs -> VARIABLES DOT VARIABLES .)
    KEYWORD_until   reduce using rule 134 (mrhs -> VARIABLES DOT VARIABLES .)
    DELIM           reduce using rule 134 (mrhs -> VARIABLES DOT VARIABLES .)
    newline         reduce using rule 134 (mrhs -> VARIABLES DOT VARIABLES .)
    $end            reduce using rule 134 (mrhs -> VARIABLES DOT VARIABLES .)
    KEYWORD_end     reduce using rule 134 (mrhs -> VARIABLES DOT VARIABLES .)
    KEYWORD_elsif   reduce using rule 134 (mrhs -> VARIABLES DOT VARIABLES .)
    KEYWORD_else    reduce using rule 134 (mrhs -> VARIABLES DOT VARIABLES .)


state 205

    (135) mrhs -> CONSTANTS DOT KEYWORD_new . OPEN_PAREN arguments CLOSE_PAREN
    (136) mrhs -> CONSTANTS DOT KEYWORD_new .
    (137) mrhs -> CONSTANTS DOT KEYWORD_new . OPEN_PAREN CLOSE_PAREN

    OPEN_PAREN      shift and go to state 248
    KEYWORD_while   reduce using rule 136 (mrhs -> CONSTANTS DOT KEYWORD_new .)
    KEYWORD_until   reduce using rule 136 (mrhs -> CONSTANTS DOT KEYWORD_new .)
    DELIM           reduce using rule 136 (mrhs -> CONSTANTS DOT KEYWORD_new .)
    newline         reduce using rule 136 (mrhs -> CONSTANTS DOT KEYWORD_new .)
    $end            reduce using rule 136 (mrhs -> CONSTANTS DOT KEYWORD_new .)
    KEYWORD_end     reduce using rule 136 (mrhs -> CONSTANTS DOT KEYWORD_new .)
    KEYWORD_elsif   reduce using rule 136 (mrhs -> CONSTANTS DOT KEYWORD_new .)
    KEYWORD_else    reduce using rule 136 (mrhs -> CONSTANTS DOT KEYWORD_new .)


state 206

    (77) gen_stmts -> gen_stmts terms top_stmt .
    (69) top_stmt -> top_stmt . KEYWORD_while expr3
    (71) top_stmt -> top_stmt . KEYWORD_until expr3

    DELIM           reduce using rule 77 (gen_stmts -> gen_stmts terms top_stmt .)
    newline         reduce using rule 77 (gen_stmts -> gen_stmts terms top_stmt .)
    KEYWORD_end     reduce using rule 77 (gen_stmts -> gen_stmts terms top_stmt .)
    KEYWORD_elsif   reduce using rule 77 (gen_stmts -> gen_stmts terms top_stmt .)
    KEYWORD_else    reduce using rule 77 (gen_stmts -> gen_stmts terms top_stmt .)
    KEYWORD_while   shift and go to state 66
    KEYWORD_until   shift and go to state 67


state 207

    (70) top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end . KEYWORD_while expr3
    (73) top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end . KEYWORD_until expr3

    KEYWORD_while   shift and go to state 250
    KEYWORD_until   shift and go to state 249


state 208

    (20) class_stmts -> none .

    DELIM           reduce using rule 20 (class_stmts -> none .)
    newline         reduce using rule 20 (class_stmts -> none .)
    KEYWORD_end     reduce using rule 20 (class_stmts -> none .)


state 209

    (21) class_stmt -> class_mlhs . EQUAL class_mrhs
    (31) class_mlhs -> class_mlhs . terms SIGIL_DOUBLE_AT
    (190) terms -> . term
    (191) terms -> . terms term
    (192) term -> . DELIM
    (193) term -> . newline

    EQUAL           shift and go to state 252
    DELIM           shift and go to state 80
    newline         shift and go to state 79

    term                           shift and go to state 77
    terms                          shift and go to state 251

state 210

    (32) class_mlhs -> SIGIL_DOUBLE_AT .

    EQUAL           reduce using rule 32 (class_mlhs -> SIGIL_DOUBLE_AT .)
    DELIM           reduce using rule 32 (class_mlhs -> SIGIL_DOUBLE_AT .)
    newline         reduce using rule 32 (class_mlhs -> SIGIL_DOUBLE_AT .)


state 211

    (22) class_stmt -> class_func .

    DELIM           reduce using rule 22 (class_stmt -> class_func .)
    newline         reduce using rule 22 (class_stmt -> class_func .)
    KEYWORD_end     reduce using rule 22 (class_stmt -> class_func .)


state 212

    (17) class_defn -> KEYWORD_class CONSTANTS newline class_stmts . opt_terms KEYWORD_end
    (19) class_stmts -> class_stmts . terms class_stmt
    (188) opt_terms -> . none
    (189) opt_terms -> . terms
    (190) terms -> . term
    (191) terms -> . terms term
    (194) none -> .
    (192) term -> . DELIM
    (193) term -> . newline

    KEYWORD_end     reduce using rule 194 (none -> .)
    DELIM           shift and go to state 80
    newline         shift and go to state 79

    term                           shift and go to state 77
    terms                          shift and go to state 253
    none                           shift and go to state 81
    opt_terms                      shift and go to state 254

state 213

    (33) class_func -> KEYWORD_def . fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (34) class_func -> KEYWORD_def . fname arguments class_method_stmts opt_terms KEYWORD_end
    (35) class_func -> KEYWORD_def . fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS

    VARIABLES       shift and go to state 74
    CONSTANTS       shift and go to state 73

    fname                          shift and go to state 255

state 214

    (18) class_stmts -> class_stmt .

    DELIM           reduce using rule 18 (class_stmts -> class_stmt .)
    newline         reduce using rule 18 (class_stmts -> class_stmt .)
    KEYWORD_end     reduce using rule 18 (class_stmts -> class_stmt .)


state 215

    (85) func_call_stmt -> fname OPEN_PAREN func_ret_arg CLOSE_PAREN .

    KEYWORD_while   reduce using rule 85 (func_call_stmt -> fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    KEYWORD_until   reduce using rule 85 (func_call_stmt -> fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    DELIM           reduce using rule 85 (func_call_stmt -> fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    newline         reduce using rule 85 (func_call_stmt -> fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    KEYWORD_end     reduce using rule 85 (func_call_stmt -> fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    $end            reduce using rule 85 (func_call_stmt -> fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    KEYWORD_elsif   reduce using rule 85 (func_call_stmt -> fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    KEYWORD_else    reduce using rule 85 (func_call_stmt -> fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)


state 216

    (145) primary -> VARIABLES .
    (182) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET

    COMMA           reduce using rule 145 (primary -> VARIABLES .)
    KEYWORD_while   reduce using rule 145 (primary -> VARIABLES .)
    KEYWORD_until   reduce using rule 145 (primary -> VARIABLES .)
    DELIM           reduce using rule 145 (primary -> VARIABLES .)
    newline         reduce using rule 145 (primary -> VARIABLES .)
    $end            reduce using rule 145 (primary -> VARIABLES .)
    KEYWORD_end     reduce using rule 145 (primary -> VARIABLES .)
    KEYWORD_elsif   reduce using rule 145 (primary -> VARIABLES .)
    KEYWORD_else    reduce using rule 145 (primary -> VARIABLES .)
    KEYWORD_return  reduce using rule 145 (primary -> VARIABLES .)
    KEYWORD_if      reduce using rule 145 (primary -> VARIABLES .)
    KEYWORD_begin   reduce using rule 145 (primary -> VARIABLES .)
    KEYWORD_for     reduce using rule 145 (primary -> VARIABLES .)
    KEYWORD_puts    reduce using rule 145 (primary -> VARIABLES .)
    KEYWORD_break   reduce using rule 145 (primary -> VARIABLES .)
    KEYWORD_next    reduce using rule 145 (primary -> VARIABLES .)
    KEYWORD_redo    reduce using rule 145 (primary -> VARIABLES .)
    KEYWORD_exit    reduce using rule 145 (primary -> VARIABLES .)
    VARIABLES       reduce using rule 145 (primary -> VARIABLES .)
    CONSTANTS       reduce using rule 145 (primary -> VARIABLES .)
    BOOLEAN_CONSTANTS reduce using rule 145 (primary -> VARIABLES .)
    OPEN_PAREN      reduce using rule 145 (primary -> VARIABLES .)
    PLUS            reduce using rule 145 (primary -> VARIABLES .)
    MINUS           reduce using rule 145 (primary -> VARIABLES .)
    BITNOT          reduce using rule 145 (primary -> VARIABLES .)
    BITCOMP         reduce using rule 145 (primary -> VARIABLES .)
    INT_CONSTANTS   reduce using rule 145 (primary -> VARIABLES .)
    FLOAT_CONSTANTS reduce using rule 145 (primary -> VARIABLES .)
    CLOSE_PAREN     reduce using rule 145 (primary -> VARIABLES .)
    SIGIL_AT        reduce using rule 145 (primary -> VARIABLES .)
    SIGIL_DOUBLE_AT reduce using rule 145 (primary -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 85


state 217

    (63) func_arg_expr -> CONSTANTS EQUAL primary .

    CLOSE_PAREN     reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    COMMA           reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    DELIM           reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    newline         reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    $end            reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_return  reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    SIGIL_AT        reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    SIGIL_DOUBLE_AT reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_puts    reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_end     reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_while   reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_until   reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_elsif   reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_else    reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_if      reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_begin   reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_for     reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_break   reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_next    reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_redo    reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_exit    reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    VARIABLES       reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    CONSTANTS       reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    BOOLEAN_CONSTANTS reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    OPEN_PAREN      reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    PLUS            reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    MINUS           reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    BITNOT          reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    BITCOMP         reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    INT_CONSTANTS   reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    FLOAT_CONSTANTS reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)


state 218

    (144) primary -> CONSTANTS .

    COMMA           reduce using rule 144 (primary -> CONSTANTS .)
    KEYWORD_while   reduce using rule 144 (primary -> CONSTANTS .)
    KEYWORD_until   reduce using rule 144 (primary -> CONSTANTS .)
    DELIM           reduce using rule 144 (primary -> CONSTANTS .)
    newline         reduce using rule 144 (primary -> CONSTANTS .)
    $end            reduce using rule 144 (primary -> CONSTANTS .)
    KEYWORD_end     reduce using rule 144 (primary -> CONSTANTS .)
    KEYWORD_elsif   reduce using rule 144 (primary -> CONSTANTS .)
    KEYWORD_else    reduce using rule 144 (primary -> CONSTANTS .)
    KEYWORD_return  reduce using rule 144 (primary -> CONSTANTS .)
    KEYWORD_if      reduce using rule 144 (primary -> CONSTANTS .)
    KEYWORD_begin   reduce using rule 144 (primary -> CONSTANTS .)
    KEYWORD_for     reduce using rule 144 (primary -> CONSTANTS .)
    KEYWORD_puts    reduce using rule 144 (primary -> CONSTANTS .)
    KEYWORD_break   reduce using rule 144 (primary -> CONSTANTS .)
    KEYWORD_next    reduce using rule 144 (primary -> CONSTANTS .)
    KEYWORD_redo    reduce using rule 144 (primary -> CONSTANTS .)
    KEYWORD_exit    reduce using rule 144 (primary -> CONSTANTS .)
    VARIABLES       reduce using rule 144 (primary -> CONSTANTS .)
    CONSTANTS       reduce using rule 144 (primary -> CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 144 (primary -> CONSTANTS .)
    OPEN_PAREN      reduce using rule 144 (primary -> CONSTANTS .)
    PLUS            reduce using rule 144 (primary -> CONSTANTS .)
    MINUS           reduce using rule 144 (primary -> CONSTANTS .)
    BITNOT          reduce using rule 144 (primary -> CONSTANTS .)
    BITCOMP         reduce using rule 144 (primary -> CONSTANTS .)
    INT_CONSTANTS   reduce using rule 144 (primary -> CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 144 (primary -> CONSTANTS .)
    CLOSE_PAREN     reduce using rule 144 (primary -> CONSTANTS .)
    SIGIL_AT        reduce using rule 144 (primary -> CONSTANTS .)
    SIGIL_DOUBLE_AT reduce using rule 144 (primary -> CONSTANTS .)


state 219

    (102) func_ret_arg -> func_ret_arg COMMA func_arg_expr .

    CLOSE_PAREN     reduce using rule 102 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)
    COMMA           reduce using rule 102 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)
    DELIM           reduce using rule 102 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)
    newline         reduce using rule 102 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)
    KEYWORD_end     reduce using rule 102 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)
    KEYWORD_while   reduce using rule 102 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)
    KEYWORD_until   reduce using rule 102 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)
    $end            reduce using rule 102 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)
    KEYWORD_elsif   reduce using rule 102 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)
    KEYWORD_else    reduce using rule 102 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)


state 220

    (103) func_ret_arg -> func_ret_arg COMMA primary .

    CLOSE_PAREN     reduce using rule 103 (func_ret_arg -> func_ret_arg COMMA primary .)
    COMMA           reduce using rule 103 (func_ret_arg -> func_ret_arg COMMA primary .)
    DELIM           reduce using rule 103 (func_ret_arg -> func_ret_arg COMMA primary .)
    newline         reduce using rule 103 (func_ret_arg -> func_ret_arg COMMA primary .)
    KEYWORD_end     reduce using rule 103 (func_ret_arg -> func_ret_arg COMMA primary .)
    KEYWORD_while   reduce using rule 103 (func_ret_arg -> func_ret_arg COMMA primary .)
    KEYWORD_until   reduce using rule 103 (func_ret_arg -> func_ret_arg COMMA primary .)
    $end            reduce using rule 103 (func_ret_arg -> func_ret_arg COMMA primary .)
    KEYWORD_elsif   reduce using rule 103 (func_ret_arg -> func_ret_arg COMMA primary .)
    KEYWORD_else    reduce using rule 103 (func_ret_arg -> func_ret_arg COMMA primary .)


state 221

    (62) func_arg_expr -> VARIABLES EQUAL primary .

    CLOSE_PAREN     reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    COMMA           reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    DELIM           reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    newline         reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    $end            reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_return  reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    SIGIL_AT        reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    SIGIL_DOUBLE_AT reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_puts    reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_end     reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_while   reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_until   reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_elsif   reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_else    reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_if      reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_begin   reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_for     reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_break   reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_next    reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_redo    reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_exit    reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    VARIABLES       reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    CONSTANTS       reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    BOOLEAN_CONSTANTS reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    OPEN_PAREN      reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    PLUS            reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    MINUS           reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    BITNOT          reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    BITCOMP         reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    INT_CONSTANTS   reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    FLOAT_CONSTANTS reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)


state 222

    (74) top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN . KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end

    KEYWORD_in      shift and go to state 256


state 223

    (118) for_range -> INT_CONSTANTS . DOUBLEDOT INT_CONSTANTS
    (120) for_range -> INT_CONSTANTS . TRIPLEDOT INT_CONSTANTS

    DOUBLEDOT       shift and go to state 257
    TRIPLEDOT       shift and go to state 258


state 224

    (117) for_range -> OPEN_PAREN . INT_CONSTANTS DOUBLEDOT INT_CONSTANTS CLOSE_PAREN
    (119) for_range -> OPEN_PAREN . INT_CONSTANTS TRIPLEDOT INT_CONSTANTS CLOSE_PAREN

    INT_CONSTANTS   shift and go to state 259


state 225

    (121) for_range -> VARIABLES .
    (182) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET

    KEYWORD_do      reduce using rule 121 (for_range -> VARIABLES .)
    newline         reduce using rule 121 (for_range -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 85


state 226

    (75) top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range . opt_do gen_stmts opt_terms KEYWORD_end
    (110) opt_do -> . KEYWORD_do
    (111) opt_do -> . newline

    KEYWORD_do      shift and go to state 132
    newline         shift and go to state 131

    opt_do                         shift and go to state 260

state 227

    (123) for_range -> CONSTANTS .

    KEYWORD_do      reduce using rule 123 (for_range -> CONSTANTS .)
    newline         reduce using rule 123 (for_range -> CONSTANTS .)


state 228

    (122) for_range -> array .

    KEYWORD_do      reduce using rule 122 (for_range -> array .)
    newline         reduce using rule 122 (for_range -> array .)


state 229

    (115) multi_var -> multi_var COMMA VARIABLES .

    KEYWORD_in      reduce using rule 115 (multi_var -> multi_var COMMA VARIABLES .)
    COMMA           reduce using rule 115 (multi_var -> multi_var COMMA VARIABLES .)
    CLOSE_PAREN     reduce using rule 115 (multi_var -> multi_var COMMA VARIABLES .)


state 230

    (116) multi_var -> multi_var COMMA CONSTANTS .

    KEYWORD_in      reduce using rule 116 (multi_var -> multi_var COMMA CONSTANTS .)
    COMMA           reduce using rule 116 (multi_var -> multi_var COMMA CONSTANTS .)
    CLOSE_PAREN     reduce using rule 116 (multi_var -> multi_var COMMA CONSTANTS .)


state 231

    (87) func_call_stmt -> mlhs EQUAL fname OPEN_PAREN func_ret_arg . CLOSE_PAREN
    (102) func_ret_arg -> func_ret_arg . COMMA func_arg_expr
    (103) func_ret_arg -> func_ret_arg . COMMA primary

    CLOSE_PAREN     shift and go to state 261
    COMMA           shift and go to state 176


state 232

    (68) top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 262


state 233

    (14) func_defn -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN . func_stmts opt_terms KEYWORD_end
    (95) func_stmts -> . func_stmt
    (96) func_stmts -> . func_stmts terms func_stmt
    (97) func_stmts -> . none
    (98) func_stmt -> . top_stmt
    (99) func_stmt -> . KEYWORD_return func_ret_arg
    (194) none -> .
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . mlhs EQUAL mrhs
    (147) expr1 -> . expr3
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . mlhs EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . mlhs EQUAL fname func_ret_arg
    (125) mlhs -> . VARIABLES
    (126) mlhs -> . CONSTANTS
    (127) mlhs -> . array
    (148) expr3 -> . expr3 LOGICALOR expr4
    (149) expr3 -> . expr4
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (150) expr4 -> . expr4 LOGICALAND expr5
    (151) expr4 -> . expr5
    (152) expr5 -> . expr6 DOUBLEEQUAL expr6
    (153) expr5 -> . expr6 NOTEQUAL expr6
    (154) expr5 -> . expr6
    (155) expr6 -> . expr7 LESSEQUAL expr7
    (156) expr6 -> . expr7 LESS expr7
    (157) expr6 -> . expr7 GREATER expr7
    (158) expr6 -> . expr7 GREATEREQUAL expr7
    (159) expr6 -> . expr7
    (160) expr6 -> . BOOLEAN_CONSTANTS
    (161) expr7 -> . expr7 BITXOR expr8
    (162) expr7 -> . expr7 PIPE expr8
    (163) expr7 -> . expr8
    (164) expr8 -> . expr8 BITAND expr9
    (165) expr8 -> . expr9
    (166) expr9 -> . expr9 SHIFTL expr10
    (167) expr9 -> . expr9 SHIFTR expr10
    (168) expr9 -> . expr10
    (169) expr10 -> . expr10 PLUS expr11
    (170) expr10 -> . expr10 MINUS expr11
    (171) expr10 -> . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP

    KEYWORD_return  shift and go to state 191
    DELIM           reduce using rule 194 (none -> .)
    newline         reduce using rule 194 (none -> .)
    KEYWORD_end     reduce using rule 194 (none -> .)
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)
    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 38
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 51
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 48
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    VARIABLES       shift and go to state 98
    CONSTANTS       shift and go to state 101
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29

    func_stmt                      shift and go to state 189
    mlhs                           shift and go to state 2
    func_stmts                     shift and go to state 263
    expr11                         shift and go to state 15
    expr13                         shift and go to state 16
    array                          shift and go to state 26
    expr3                          shift and go to state 41
    expr1                          shift and go to state 42
    expr6                          shift and go to state 43
    puts_stmt                      shift and go to state 18
    expr5                          shift and go to state 45
    func_call_stmt                 shift and go to state 32
    expr7                          shift and go to state 7
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    expr4                          shift and go to state 8
    fname                          shift and go to state 44
    exit_stmt                      shift and go to state 49
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 20
    uexpr                          shift and go to state 10
    none                           shift and go to state 193
    expr                           shift and go to state 35
    expr10                         shift and go to state 14
    top_stmt                       shift and go to state 194

state 234

    (15) func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN func_stmts . opt_terms KEYWORD_end
    (96) func_stmts -> func_stmts . terms func_stmt
    (188) opt_terms -> . none
    (189) opt_terms -> . terms
    (190) terms -> . term
    (191) terms -> . terms term
    (194) none -> .
    (192) term -> . DELIM
    (193) term -> . newline

    KEYWORD_end     reduce using rule 194 (none -> .)
    DELIM           shift and go to state 80
    newline         shift and go to state 79

    none                           shift and go to state 81
    terms                          shift and go to state 235
    term                           shift and go to state 77
    opt_terms                      shift and go to state 264

state 235

    (96) func_stmts -> func_stmts terms . func_stmt
    (189) opt_terms -> terms .
    (191) terms -> terms . term
    (98) func_stmt -> . top_stmt
    (99) func_stmt -> . KEYWORD_return func_ret_arg
    (192) term -> . DELIM
    (193) term -> . newline
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . mlhs EQUAL mrhs
    (147) expr1 -> . expr3
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . mlhs EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . mlhs EQUAL fname func_ret_arg
    (125) mlhs -> . VARIABLES
    (126) mlhs -> . CONSTANTS
    (127) mlhs -> . array
    (148) expr3 -> . expr3 LOGICALOR expr4
    (149) expr3 -> . expr4
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (150) expr4 -> . expr4 LOGICALAND expr5
    (151) expr4 -> . expr5
    (152) expr5 -> . expr6 DOUBLEEQUAL expr6
    (153) expr5 -> . expr6 NOTEQUAL expr6
    (154) expr5 -> . expr6
    (155) expr6 -> . expr7 LESSEQUAL expr7
    (156) expr6 -> . expr7 LESS expr7
    (157) expr6 -> . expr7 GREATER expr7
    (158) expr6 -> . expr7 GREATEREQUAL expr7
    (159) expr6 -> . expr7
    (160) expr6 -> . BOOLEAN_CONSTANTS
    (161) expr7 -> . expr7 BITXOR expr8
    (162) expr7 -> . expr7 PIPE expr8
    (163) expr7 -> . expr8
    (164) expr8 -> . expr8 BITAND expr9
    (165) expr8 -> . expr9
    (166) expr9 -> . expr9 SHIFTL expr10
    (167) expr9 -> . expr9 SHIFTR expr10
    (168) expr9 -> . expr10
    (169) expr10 -> . expr10 PLUS expr11
    (170) expr10 -> . expr10 MINUS expr11
    (171) expr10 -> . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP
    (194) none -> .

    KEYWORD_end     reduce using rule 189 (opt_terms -> terms .)
    KEYWORD_return  shift and go to state 191
    DELIM           shift and go to state 80
    newline         shift and go to state 79
    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 38
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 51
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 48
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    VARIABLES       shift and go to state 98
    CONSTANTS       shift and go to state 101
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)

    func_stmt                      shift and go to state 265
    mlhs                           shift and go to state 2
    expr11                         shift and go to state 15
    expr13                         shift and go to state 16
    array                          shift and go to state 26
    expr3                          shift and go to state 41
    expr1                          shift and go to state 42
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    puts_stmt                      shift and go to state 18
    expr5                          shift and go to state 45
    func_call_stmt                 shift and go to state 32
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    expr4                          shift and go to state 8
    fname                          shift and go to state 44
    exit_stmt                      shift and go to state 49
    none                           shift and go to state 34
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 20
    uexpr                          shift and go to state 10
    term                           shift and go to state 155
    expr                           shift and go to state 35
    expr10                         shift and go to state 14
    top_stmt                       shift and go to state 194

state 236

    (16) func_defn -> KEYWORD_def fname arguments func_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 266


state 237

    (99) func_stmt -> KEYWORD_return func_ret_arg .
    (102) func_ret_arg -> func_ret_arg . COMMA func_arg_expr
    (103) func_ret_arg -> func_ret_arg . COMMA primary

    DELIM           reduce using rule 99 (func_stmt -> KEYWORD_return func_ret_arg .)
    newline         reduce using rule 99 (func_stmt -> KEYWORD_return func_ret_arg .)
    KEYWORD_end     reduce using rule 99 (func_stmt -> KEYWORD_return func_ret_arg .)
    COMMA           shift and go to state 176


state 238

    (55) arguments -> arguments COMMA VARIABLES .
    (62) func_arg_expr -> VARIABLES . EQUAL primary

    CLOSE_PAREN     reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    COMMA           reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_return  reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    SIGIL_AT        reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    SIGIL_DOUBLE_AT reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_puts    reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    DELIM           reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    newline         reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_end     reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    $end            reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_if      reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_while   reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_begin   reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_until   reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_for     reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_break   reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_next    reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_redo    reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_exit    reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    VARIABLES       reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    CONSTANTS       reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    BOOLEAN_CONSTANTS reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    OPEN_PAREN      reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    PLUS            reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    MINUS           reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    BITNOT          reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    BITCOMP         reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    INT_CONSTANTS   reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    FLOAT_CONSTANTS reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    EQUAL           shift and go to state 177


state 239

    (57) arguments -> arguments COMMA func_arg_expr .

    CLOSE_PAREN     reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    COMMA           reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_return  reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    SIGIL_AT        reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    SIGIL_DOUBLE_AT reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_puts    reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    DELIM           reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    newline         reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_end     reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    $end            reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_if      reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_while   reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_begin   reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_until   reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_for     reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_break   reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_next    reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_redo    reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_exit    reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    VARIABLES       reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    CONSTANTS       reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    BOOLEAN_CONSTANTS reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    OPEN_PAREN      reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    PLUS            reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    MINUS           reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    BITNOT          reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    BITCOMP         reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    INT_CONSTANTS   reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    FLOAT_CONSTANTS reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)


state 240

    (56) arguments -> arguments COMMA CONSTANTS .
    (63) func_arg_expr -> CONSTANTS . EQUAL primary

    CLOSE_PAREN     reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    COMMA           reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_return  reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    SIGIL_AT        reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    SIGIL_DOUBLE_AT reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_puts    reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    DELIM           reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    newline         reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_end     reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    $end            reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_if      reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_while   reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_begin   reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_until   reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_for     reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_break   reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_next    reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_redo    reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_exit    reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    VARIABLES       reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    CONSTANTS       reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    OPEN_PAREN      reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    PLUS            reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    MINUS           reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    BITNOT          reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    BITCOMP         reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    INT_CONSTANTS   reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    EQUAL           shift and go to state 175


state 241

    (11) statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments . CLOSE_PAREN
    (55) arguments -> arguments . COMMA VARIABLES
    (56) arguments -> arguments . COMMA CONSTANTS
    (57) arguments -> arguments . COMMA func_arg_expr

    CLOSE_PAREN     shift and go to state 267
    COMMA           shift and go to state 192


state 242

    (12) statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .

    DELIM           reduce using rule 12 (statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    newline         reduce using rule 12 (statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    $end            reduce using rule 12 (statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)


state 243

    (72) top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 268


state 244

    (67) top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms . elsif_tail opt_else_stmt KEYWORD_end
    (106) elsif_tail -> . none
    (107) elsif_tail -> . KEYWORD_elsif expr3 opt_then gen_stmts opt_terms elsif_tail
    (194) none -> .

    KEYWORD_elsif   shift and go to state 270
    KEYWORD_else    reduce using rule 194 (none -> .)
    KEYWORD_end     reduce using rule 194 (none -> .)

    none                           shift and go to state 269
    elsif_tail                     shift and go to state 271

state 245

    (8) statement -> VARIABLES DOT VARIABLES OPEN_PAREN arguments . CLOSE_PAREN
    (55) arguments -> arguments . COMMA VARIABLES
    (56) arguments -> arguments . COMMA CONSTANTS
    (57) arguments -> arguments . COMMA func_arg_expr

    CLOSE_PAREN     shift and go to state 272
    COMMA           shift and go to state 192


state 246

    (9) statement -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .

    DELIM           reduce using rule 9 (statement -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    newline         reduce using rule 9 (statement -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    $end            reduce using rule 9 (statement -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)


state 247

    (132) mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN . arguments CLOSE_PAREN
    (133) mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN . CLOSE_PAREN
    (55) arguments -> . arguments COMMA VARIABLES
    (56) arguments -> . arguments COMMA CONSTANTS
    (57) arguments -> . arguments COMMA func_arg_expr
    (58) arguments -> . VARIABLES
    (59) arguments -> . CONSTANTS
    (60) arguments -> . func_arg_expr
    (61) arguments -> . newline
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary

    CLOSE_PAREN     shift and go to state 274
    VARIABLES       shift and go to state 149
    CONSTANTS       shift and go to state 148
    newline         shift and go to state 150

    func_arg_expr                  shift and go to state 153
    arguments                      shift and go to state 273

state 248

    (135) mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN . arguments CLOSE_PAREN
    (137) mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN . CLOSE_PAREN
    (55) arguments -> . arguments COMMA VARIABLES
    (56) arguments -> . arguments COMMA CONSTANTS
    (57) arguments -> . arguments COMMA func_arg_expr
    (58) arguments -> . VARIABLES
    (59) arguments -> . CONSTANTS
    (60) arguments -> . func_arg_expr
    (61) arguments -> . newline
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary

    CLOSE_PAREN     shift and go to state 276
    VARIABLES       shift and go to state 149
    CONSTANTS       shift and go to state 148
    newline         shift and go to state 150

    func_arg_expr                  shift and go to state 153
    arguments                      shift and go to state 275

state 249

    (73) top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until . expr3
    (148) expr3 -> . expr3 LOGICALOR expr4
    (149) expr3 -> . expr4
    (150) expr4 -> . expr4 LOGICALAND expr5
    (151) expr4 -> . expr5
    (152) expr5 -> . expr6 DOUBLEEQUAL expr6
    (153) expr5 -> . expr6 NOTEQUAL expr6
    (154) expr5 -> . expr6
    (155) expr6 -> . expr7 LESSEQUAL expr7
    (156) expr6 -> . expr7 LESS expr7
    (157) expr6 -> . expr7 GREATER expr7
    (158) expr6 -> . expr7 GREATEREQUAL expr7
    (159) expr6 -> . expr7
    (160) expr6 -> . BOOLEAN_CONSTANTS
    (161) expr7 -> . expr7 BITXOR expr8
    (162) expr7 -> . expr7 PIPE expr8
    (163) expr7 -> . expr8
    (164) expr8 -> . expr8 BITAND expr9
    (165) expr8 -> . expr9
    (166) expr9 -> . expr9 SHIFTL expr10
    (167) expr9 -> . expr9 SHIFTR expr10
    (168) expr9 -> . expr10
    (169) expr10 -> . expr10 PLUS expr11
    (170) expr10 -> . expr10 MINUS expr11
    (171) expr10 -> . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (194) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr13                         shift and go to state 16
    expr3                          shift and go to state 277
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    expr4                          shift and go to state 8
    expr5                          shift and go to state 45
    expr10                         shift and go to state 14
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    array                          shift and go to state 55
    expr11                         shift and go to state 15

state 250

    (70) top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while . expr3
    (148) expr3 -> . expr3 LOGICALOR expr4
    (149) expr3 -> . expr4
    (150) expr4 -> . expr4 LOGICALAND expr5
    (151) expr4 -> . expr5
    (152) expr5 -> . expr6 DOUBLEEQUAL expr6
    (153) expr5 -> . expr6 NOTEQUAL expr6
    (154) expr5 -> . expr6
    (155) expr6 -> . expr7 LESSEQUAL expr7
    (156) expr6 -> . expr7 LESS expr7
    (157) expr6 -> . expr7 GREATER expr7
    (158) expr6 -> . expr7 GREATEREQUAL expr7
    (159) expr6 -> . expr7
    (160) expr6 -> . BOOLEAN_CONSTANTS
    (161) expr7 -> . expr7 BITXOR expr8
    (162) expr7 -> . expr7 PIPE expr8
    (163) expr7 -> . expr8
    (164) expr8 -> . expr8 BITAND expr9
    (165) expr8 -> . expr9
    (166) expr9 -> . expr9 SHIFTL expr10
    (167) expr9 -> . expr9 SHIFTR expr10
    (168) expr9 -> . expr10
    (169) expr10 -> . expr10 PLUS expr11
    (170) expr10 -> . expr10 MINUS expr11
    (171) expr10 -> . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (194) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr13                         shift and go to state 16
    expr3                          shift and go to state 278
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    expr4                          shift and go to state 8
    expr5                          shift and go to state 45
    expr10                         shift and go to state 14
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    array                          shift and go to state 55
    expr11                         shift and go to state 15

state 251

    (31) class_mlhs -> class_mlhs terms . SIGIL_DOUBLE_AT
    (191) terms -> terms . term
    (192) term -> . DELIM
    (193) term -> . newline

    SIGIL_DOUBLE_AT shift and go to state 279
    DELIM           shift and go to state 80
    newline         shift and go to state 79

    term                           shift and go to state 155

state 252

    (21) class_stmt -> class_mlhs EQUAL . class_mrhs
    (23) class_mrhs -> . literal
    (24) literal -> . INT_CONSTANTS
    (25) literal -> . FLOAT_CONSTANTS
    (26) literal -> . STRING_CONSTANTS
    (27) literal -> . BOOLEAN_CONSTANTS
    (28) literal -> . CHAR_CONSTANTS
    (29) literal -> . SIGIL_AT
    (30) literal -> . SIGIL_DOUBLE_AT

    INT_CONSTANTS   shift and go to state 282
    FLOAT_CONSTANTS shift and go to state 283
    STRING_CONSTANTS shift and go to state 285
    BOOLEAN_CONSTANTS shift and go to state 281
    CHAR_CONSTANTS  shift and go to state 288
    SIGIL_AT        shift and go to state 280
    SIGIL_DOUBLE_AT shift and go to state 284

    literal                        shift and go to state 286
    class_mrhs                     shift and go to state 287

state 253

    (19) class_stmts -> class_stmts terms . class_stmt
    (189) opt_terms -> terms .
    (191) terms -> terms . term
    (21) class_stmt -> . class_mlhs EQUAL class_mrhs
    (22) class_stmt -> . class_func
    (192) term -> . DELIM
    (193) term -> . newline
    (31) class_mlhs -> . class_mlhs terms SIGIL_DOUBLE_AT
    (32) class_mlhs -> . SIGIL_DOUBLE_AT
    (33) class_func -> . KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (34) class_func -> . KEYWORD_def fname arguments class_method_stmts opt_terms KEYWORD_end
    (35) class_func -> . KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end

    KEYWORD_end     reduce using rule 189 (opt_terms -> terms .)
    DELIM           shift and go to state 80
    newline         shift and go to state 79
    SIGIL_DOUBLE_AT shift and go to state 210
    KEYWORD_def     shift and go to state 213

    term                           shift and go to state 155
    class_mlhs                     shift and go to state 209
    class_func                     shift and go to state 211
    class_stmt                     shift and go to state 289

state 254

    (17) class_defn -> KEYWORD_class CONSTANTS newline class_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 290


state 255

    (33) class_func -> KEYWORD_def fname . OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (34) class_func -> KEYWORD_def fname . arguments class_method_stmts opt_terms KEYWORD_end
    (35) class_func -> KEYWORD_def fname . OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (55) arguments -> . arguments COMMA VARIABLES
    (56) arguments -> . arguments COMMA CONSTANTS
    (57) arguments -> . arguments COMMA func_arg_expr
    (58) arguments -> . VARIABLES
    (59) arguments -> . CONSTANTS
    (60) arguments -> . func_arg_expr
    (61) arguments -> . newline
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary

    OPEN_PAREN      shift and go to state 291
    VARIABLES       shift and go to state 149
    CONSTANTS       shift and go to state 148
    newline         shift and go to state 150

    func_arg_expr                  shift and go to state 153
    arguments                      shift and go to state 292

state 256

    (74) top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in . for_range opt_do gen_stmts opt_terms KEYWORD_end
    (117) for_range -> . OPEN_PAREN INT_CONSTANTS DOUBLEDOT INT_CONSTANTS CLOSE_PAREN
    (118) for_range -> . INT_CONSTANTS DOUBLEDOT INT_CONSTANTS
    (119) for_range -> . OPEN_PAREN INT_CONSTANTS TRIPLEDOT INT_CONSTANTS CLOSE_PAREN
    (120) for_range -> . INT_CONSTANTS TRIPLEDOT INT_CONSTANTS
    (121) for_range -> . VARIABLES
    (122) for_range -> . array
    (123) for_range -> . CONSTANTS
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET

    OPEN_PAREN      shift and go to state 224
    INT_CONSTANTS   shift and go to state 223
    VARIABLES       shift and go to state 225
    CONSTANTS       shift and go to state 227

    for_range                      shift and go to state 293
    array                          shift and go to state 228

state 257

    (118) for_range -> INT_CONSTANTS DOUBLEDOT . INT_CONSTANTS

    INT_CONSTANTS   shift and go to state 294


state 258

    (120) for_range -> INT_CONSTANTS TRIPLEDOT . INT_CONSTANTS

    INT_CONSTANTS   shift and go to state 295


state 259

    (117) for_range -> OPEN_PAREN INT_CONSTANTS . DOUBLEDOT INT_CONSTANTS CLOSE_PAREN
    (119) for_range -> OPEN_PAREN INT_CONSTANTS . TRIPLEDOT INT_CONSTANTS CLOSE_PAREN

    DOUBLEDOT       shift and go to state 296
    TRIPLEDOT       shift and go to state 297


state 260

    (75) top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range opt_do . gen_stmts opt_terms KEYWORD_end
    (76) gen_stmts -> . top_stmt
    (77) gen_stmts -> . gen_stmts terms top_stmt
    (78) gen_stmts -> . none
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (194) none -> .
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . mlhs EQUAL mrhs
    (147) expr1 -> . expr3
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . mlhs EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . mlhs EQUAL fname func_ret_arg
    (125) mlhs -> . VARIABLES
    (126) mlhs -> . CONSTANTS
    (127) mlhs -> . array
    (148) expr3 -> . expr3 LOGICALOR expr4
    (149) expr3 -> . expr4
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (150) expr4 -> . expr4 LOGICALAND expr5
    (151) expr4 -> . expr5
    (152) expr5 -> . expr6 DOUBLEEQUAL expr6
    (153) expr5 -> . expr6 NOTEQUAL expr6
    (154) expr5 -> . expr6
    (155) expr6 -> . expr7 LESSEQUAL expr7
    (156) expr6 -> . expr7 LESS expr7
    (157) expr6 -> . expr7 GREATER expr7
    (158) expr6 -> . expr7 GREATEREQUAL expr7
    (159) expr6 -> . expr7
    (160) expr6 -> . BOOLEAN_CONSTANTS
    (161) expr7 -> . expr7 BITXOR expr8
    (162) expr7 -> . expr7 PIPE expr8
    (163) expr7 -> . expr8
    (164) expr8 -> . expr8 BITAND expr9
    (165) expr8 -> . expr9
    (166) expr9 -> . expr9 SHIFTL expr10
    (167) expr9 -> . expr9 SHIFTR expr10
    (168) expr9 -> . expr10
    (169) expr10 -> . expr10 PLUS expr11
    (170) expr10 -> . expr10 MINUS expr11
    (171) expr10 -> . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP

    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 38
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 51
    DELIM           reduce using rule 194 (none -> .)
    newline         reduce using rule 194 (none -> .)
    KEYWORD_end     reduce using rule 194 (none -> .)
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 48
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    VARIABLES       shift and go to state 98
    CONSTANTS       shift and go to state 101
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29

    mlhs                           shift and go to state 2
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr13                         shift and go to state 16
    array                          shift and go to state 26
    expr3                          shift and go to state 41
    expr1                          shift and go to state 42
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    puts_stmt                      shift and go to state 18
    expr5                          shift and go to state 45
    func_call_stmt                 shift and go to state 32
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    expr4                          shift and go to state 8
    fname                          shift and go to state 44
    exit_stmt                      shift and go to state 49
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 20
    uexpr                          shift and go to state 10
    none                           shift and go to state 99
    gen_stmts                      shift and go to state 298
    expr                           shift and go to state 35
    top_stmt                       shift and go to state 102

state 261

    (87) func_call_stmt -> mlhs EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN .

    KEYWORD_while   reduce using rule 87 (func_call_stmt -> mlhs EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    KEYWORD_until   reduce using rule 87 (func_call_stmt -> mlhs EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    DELIM           reduce using rule 87 (func_call_stmt -> mlhs EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    newline         reduce using rule 87 (func_call_stmt -> mlhs EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    KEYWORD_end     reduce using rule 87 (func_call_stmt -> mlhs EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    $end            reduce using rule 87 (func_call_stmt -> mlhs EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    KEYWORD_elsif   reduce using rule 87 (func_call_stmt -> mlhs EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    KEYWORD_else    reduce using rule 87 (func_call_stmt -> mlhs EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)


state 262

    (68) top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end .

    KEYWORD_while   reduce using rule 68 (top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_until   reduce using rule 68 (top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    DELIM           reduce using rule 68 (top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 68 (top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_end     reduce using rule 68 (top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_elsif   reduce using rule 68 (top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_else    reduce using rule 68 (top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    $end            reduce using rule 68 (top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end .)


state 263

    (14) func_defn -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN func_stmts . opt_terms KEYWORD_end
    (96) func_stmts -> func_stmts . terms func_stmt
    (188) opt_terms -> . none
    (189) opt_terms -> . terms
    (190) terms -> . term
    (191) terms -> . terms term
    (194) none -> .
    (192) term -> . DELIM
    (193) term -> . newline

    KEYWORD_end     reduce using rule 194 (none -> .)
    DELIM           shift and go to state 80
    newline         shift and go to state 79

    none                           shift and go to state 81
    terms                          shift and go to state 235
    term                           shift and go to state 77
    opt_terms                      shift and go to state 299

state 264

    (15) func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN func_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 300


state 265

    (96) func_stmts -> func_stmts terms func_stmt .

    DELIM           reduce using rule 96 (func_stmts -> func_stmts terms func_stmt .)
    newline         reduce using rule 96 (func_stmts -> func_stmts terms func_stmt .)
    KEYWORD_end     reduce using rule 96 (func_stmts -> func_stmts terms func_stmt .)


state 266

    (16) func_defn -> KEYWORD_def fname arguments func_stmts opt_terms KEYWORD_end .

    DELIM           reduce using rule 16 (func_defn -> KEYWORD_def fname arguments func_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 16 (func_defn -> KEYWORD_def fname arguments func_stmts opt_terms KEYWORD_end .)
    $end            reduce using rule 16 (func_defn -> KEYWORD_def fname arguments func_stmts opt_terms KEYWORD_end .)


state 267

    (11) statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .

    DELIM           reduce using rule 11 (statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    newline         reduce using rule 11 (statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    $end            reduce using rule 11 (statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)


state 268

    (72) top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end .

    KEYWORD_while   reduce using rule 72 (top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_until   reduce using rule 72 (top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    DELIM           reduce using rule 72 (top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 72 (top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_end     reduce using rule 72 (top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_elsif   reduce using rule 72 (top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_else    reduce using rule 72 (top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    $end            reduce using rule 72 (top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end .)


state 269

    (106) elsif_tail -> none .

    KEYWORD_else    reduce using rule 106 (elsif_tail -> none .)
    KEYWORD_end     reduce using rule 106 (elsif_tail -> none .)


state 270

    (107) elsif_tail -> KEYWORD_elsif . expr3 opt_then gen_stmts opt_terms elsif_tail
    (148) expr3 -> . expr3 LOGICALOR expr4
    (149) expr3 -> . expr4
    (150) expr4 -> . expr4 LOGICALAND expr5
    (151) expr4 -> . expr5
    (152) expr5 -> . expr6 DOUBLEEQUAL expr6
    (153) expr5 -> . expr6 NOTEQUAL expr6
    (154) expr5 -> . expr6
    (155) expr6 -> . expr7 LESSEQUAL expr7
    (156) expr6 -> . expr7 LESS expr7
    (157) expr6 -> . expr7 GREATER expr7
    (158) expr6 -> . expr7 GREATEREQUAL expr7
    (159) expr6 -> . expr7
    (160) expr6 -> . BOOLEAN_CONSTANTS
    (161) expr7 -> . expr7 BITXOR expr8
    (162) expr7 -> . expr7 PIPE expr8
    (163) expr7 -> . expr8
    (164) expr8 -> . expr8 BITAND expr9
    (165) expr8 -> . expr9
    (166) expr9 -> . expr9 SHIFTL expr10
    (167) expr9 -> . expr9 SHIFTR expr10
    (168) expr9 -> . expr10
    (169) expr10 -> . expr10 PLUS expr11
    (170) expr10 -> . expr10 MINUS expr11
    (171) expr10 -> . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (194) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr5                          shift and go to state 45
    expr3                          shift and go to state 301
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    expr4                          shift and go to state 8
    expr10                         shift and go to state 14
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    expr13                         shift and go to state 16
    array                          shift and go to state 55
    expr11                         shift and go to state 15

state 271

    (67) top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail . opt_else_stmt KEYWORD_end
    (104) opt_else_stmt -> . KEYWORD_else gen_stmts opt_terms
    (105) opt_else_stmt -> . none
    (194) none -> .

    KEYWORD_else    shift and go to state 303
    KEYWORD_end     reduce using rule 194 (none -> .)

    none                           shift and go to state 302
    opt_else_stmt                  shift and go to state 304

state 272

    (8) statement -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .

    DELIM           reduce using rule 8 (statement -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    newline         reduce using rule 8 (statement -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    $end            reduce using rule 8 (statement -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)


state 273

    (132) mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments . CLOSE_PAREN
    (55) arguments -> arguments . COMMA VARIABLES
    (56) arguments -> arguments . COMMA CONSTANTS
    (57) arguments -> arguments . COMMA func_arg_expr

    CLOSE_PAREN     shift and go to state 305
    COMMA           shift and go to state 192


state 274

    (133) mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .

    KEYWORD_while   reduce using rule 133 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    KEYWORD_until   reduce using rule 133 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    DELIM           reduce using rule 133 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    newline         reduce using rule 133 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    $end            reduce using rule 133 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    KEYWORD_end     reduce using rule 133 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    KEYWORD_elsif   reduce using rule 133 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    KEYWORD_else    reduce using rule 133 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)


state 275

    (135) mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments . CLOSE_PAREN
    (55) arguments -> arguments . COMMA VARIABLES
    (56) arguments -> arguments . COMMA CONSTANTS
    (57) arguments -> arguments . COMMA func_arg_expr

    CLOSE_PAREN     shift and go to state 306
    COMMA           shift and go to state 192


state 276

    (137) mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .

    KEYWORD_while   reduce using rule 137 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    KEYWORD_until   reduce using rule 137 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    DELIM           reduce using rule 137 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    newline         reduce using rule 137 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    $end            reduce using rule 137 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    KEYWORD_end     reduce using rule 137 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    KEYWORD_elsif   reduce using rule 137 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    KEYWORD_else    reduce using rule 137 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)


state 277

    (73) top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3 .
    (148) expr3 -> expr3 . LOGICALOR expr4

    KEYWORD_while   reduce using rule 73 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3 .)
    KEYWORD_until   reduce using rule 73 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3 .)
    DELIM           reduce using rule 73 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3 .)
    newline         reduce using rule 73 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3 .)
    KEYWORD_end     reduce using rule 73 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3 .)
    KEYWORD_elsif   reduce using rule 73 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3 .)
    KEYWORD_else    reduce using rule 73 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3 .)
    $end            reduce using rule 73 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3 .)
    LOGICALOR       shift and go to state 104


state 278

    (70) top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3 .
    (148) expr3 -> expr3 . LOGICALOR expr4

    KEYWORD_while   reduce using rule 70 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3 .)
    KEYWORD_until   reduce using rule 70 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3 .)
    DELIM           reduce using rule 70 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3 .)
    newline         reduce using rule 70 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3 .)
    KEYWORD_end     reduce using rule 70 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3 .)
    KEYWORD_elsif   reduce using rule 70 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3 .)
    KEYWORD_else    reduce using rule 70 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3 .)
    $end            reduce using rule 70 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3 .)
    LOGICALOR       shift and go to state 104


state 279

    (31) class_mlhs -> class_mlhs terms SIGIL_DOUBLE_AT .

    EQUAL           reduce using rule 31 (class_mlhs -> class_mlhs terms SIGIL_DOUBLE_AT .)
    DELIM           reduce using rule 31 (class_mlhs -> class_mlhs terms SIGIL_DOUBLE_AT .)
    newline         reduce using rule 31 (class_mlhs -> class_mlhs terms SIGIL_DOUBLE_AT .)


state 280

    (29) literal -> SIGIL_AT .

    COMMA           reduce using rule 29 (literal -> SIGIL_AT .)
    DELIM           reduce using rule 29 (literal -> SIGIL_AT .)
    newline         reduce using rule 29 (literal -> SIGIL_AT .)
    KEYWORD_end     reduce using rule 29 (literal -> SIGIL_AT .)


state 281

    (27) literal -> BOOLEAN_CONSTANTS .

    COMMA           reduce using rule 27 (literal -> BOOLEAN_CONSTANTS .)
    DELIM           reduce using rule 27 (literal -> BOOLEAN_CONSTANTS .)
    newline         reduce using rule 27 (literal -> BOOLEAN_CONSTANTS .)
    KEYWORD_end     reduce using rule 27 (literal -> BOOLEAN_CONSTANTS .)


state 282

    (24) literal -> INT_CONSTANTS .

    COMMA           reduce using rule 24 (literal -> INT_CONSTANTS .)
    DELIM           reduce using rule 24 (literal -> INT_CONSTANTS .)
    newline         reduce using rule 24 (literal -> INT_CONSTANTS .)
    KEYWORD_end     reduce using rule 24 (literal -> INT_CONSTANTS .)


state 283

    (25) literal -> FLOAT_CONSTANTS .

    COMMA           reduce using rule 25 (literal -> FLOAT_CONSTANTS .)
    DELIM           reduce using rule 25 (literal -> FLOAT_CONSTANTS .)
    newline         reduce using rule 25 (literal -> FLOAT_CONSTANTS .)
    KEYWORD_end     reduce using rule 25 (literal -> FLOAT_CONSTANTS .)


state 284

    (30) literal -> SIGIL_DOUBLE_AT .

    COMMA           reduce using rule 30 (literal -> SIGIL_DOUBLE_AT .)
    DELIM           reduce using rule 30 (literal -> SIGIL_DOUBLE_AT .)
    newline         reduce using rule 30 (literal -> SIGIL_DOUBLE_AT .)
    KEYWORD_end     reduce using rule 30 (literal -> SIGIL_DOUBLE_AT .)


state 285

    (26) literal -> STRING_CONSTANTS .

    COMMA           reduce using rule 26 (literal -> STRING_CONSTANTS .)
    DELIM           reduce using rule 26 (literal -> STRING_CONSTANTS .)
    newline         reduce using rule 26 (literal -> STRING_CONSTANTS .)
    KEYWORD_end     reduce using rule 26 (literal -> STRING_CONSTANTS .)


state 286

    (23) class_mrhs -> literal .

    DELIM           reduce using rule 23 (class_mrhs -> literal .)
    newline         reduce using rule 23 (class_mrhs -> literal .)
    KEYWORD_end     reduce using rule 23 (class_mrhs -> literal .)


state 287

    (21) class_stmt -> class_mlhs EQUAL class_mrhs .

    DELIM           reduce using rule 21 (class_stmt -> class_mlhs EQUAL class_mrhs .)
    newline         reduce using rule 21 (class_stmt -> class_mlhs EQUAL class_mrhs .)
    KEYWORD_end     reduce using rule 21 (class_stmt -> class_mlhs EQUAL class_mrhs .)


state 288

    (28) literal -> CHAR_CONSTANTS .

    COMMA           reduce using rule 28 (literal -> CHAR_CONSTANTS .)
    DELIM           reduce using rule 28 (literal -> CHAR_CONSTANTS .)
    newline         reduce using rule 28 (literal -> CHAR_CONSTANTS .)
    KEYWORD_end     reduce using rule 28 (literal -> CHAR_CONSTANTS .)


state 289

    (19) class_stmts -> class_stmts terms class_stmt .

    DELIM           reduce using rule 19 (class_stmts -> class_stmts terms class_stmt .)
    newline         reduce using rule 19 (class_stmts -> class_stmts terms class_stmt .)
    KEYWORD_end     reduce using rule 19 (class_stmts -> class_stmts terms class_stmt .)


state 290

    (17) class_defn -> KEYWORD_class CONSTANTS newline class_stmts opt_terms KEYWORD_end .

    DELIM           reduce using rule 17 (class_defn -> KEYWORD_class CONSTANTS newline class_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 17 (class_defn -> KEYWORD_class CONSTANTS newline class_stmts opt_terms KEYWORD_end .)
    $end            reduce using rule 17 (class_defn -> KEYWORD_class CONSTANTS newline class_stmts opt_terms KEYWORD_end .)


state 291

    (33) class_func -> KEYWORD_def fname OPEN_PAREN . arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (35) class_func -> KEYWORD_def fname OPEN_PAREN . CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (55) arguments -> . arguments COMMA VARIABLES
    (56) arguments -> . arguments COMMA CONSTANTS
    (57) arguments -> . arguments COMMA func_arg_expr
    (58) arguments -> . VARIABLES
    (59) arguments -> . CONSTANTS
    (60) arguments -> . func_arg_expr
    (61) arguments -> . newline
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary

    CLOSE_PAREN     shift and go to state 308
    VARIABLES       shift and go to state 149
    CONSTANTS       shift and go to state 148
    newline         shift and go to state 150

    func_arg_expr                  shift and go to state 153
    arguments                      shift and go to state 307

state 292

    (34) class_func -> KEYWORD_def fname arguments . class_method_stmts opt_terms KEYWORD_end
    (55) arguments -> arguments . COMMA VARIABLES
    (56) arguments -> arguments . COMMA CONSTANTS
    (57) arguments -> arguments . COMMA func_arg_expr
    (36) class_method_stmts -> . class_method_stmt
    (37) class_method_stmts -> . class_method_stmts terms class_method_stmt
    (38) class_method_stmts -> . none
    (39) class_method_stmt -> . class_method_mlhs EQUAL class_method_mrhs
    (40) class_method_stmt -> . KEYWORD_return class_method_ret_arg
    (41) class_method_stmt -> . puts_stmt
    (194) none -> .
    (42) class_method_mlhs -> . class_method_mlhs terms SIGIL_AT
    (43) class_method_mlhs -> . SIGIL_AT
    (44) class_method_mlhs -> . SIGIL_DOUBLE_AT
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr

    COMMA           shift and go to state 192
    KEYWORD_return  shift and go to state 312
    DELIM           reduce using rule 194 (none -> .)
    newline         reduce using rule 194 (none -> .)
    KEYWORD_end     reduce using rule 194 (none -> .)
    SIGIL_AT        shift and go to state 310
    SIGIL_DOUBLE_AT shift and go to state 314
    KEYWORD_puts    shift and go to state 33

    class_method_stmt              shift and go to state 309
    none                           shift and go to state 316
    class_method_mlhs              shift and go to state 315
    puts_stmt                      shift and go to state 313
    class_method_stmts             shift and go to state 311

state 293

    (74) top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range . opt_do gen_stmts opt_terms KEYWORD_end
    (110) opt_do -> . KEYWORD_do
    (111) opt_do -> . newline

    KEYWORD_do      shift and go to state 132
    newline         shift and go to state 131

    opt_do                         shift and go to state 317

state 294

    (118) for_range -> INT_CONSTANTS DOUBLEDOT INT_CONSTANTS .

    KEYWORD_do      reduce using rule 118 (for_range -> INT_CONSTANTS DOUBLEDOT INT_CONSTANTS .)
    newline         reduce using rule 118 (for_range -> INT_CONSTANTS DOUBLEDOT INT_CONSTANTS .)


state 295

    (120) for_range -> INT_CONSTANTS TRIPLEDOT INT_CONSTANTS .

    KEYWORD_do      reduce using rule 120 (for_range -> INT_CONSTANTS TRIPLEDOT INT_CONSTANTS .)
    newline         reduce using rule 120 (for_range -> INT_CONSTANTS TRIPLEDOT INT_CONSTANTS .)


state 296

    (117) for_range -> OPEN_PAREN INT_CONSTANTS DOUBLEDOT . INT_CONSTANTS CLOSE_PAREN

    INT_CONSTANTS   shift and go to state 318


state 297

    (119) for_range -> OPEN_PAREN INT_CONSTANTS TRIPLEDOT . INT_CONSTANTS CLOSE_PAREN

    INT_CONSTANTS   shift and go to state 319


state 298

    (75) top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts . opt_terms KEYWORD_end
    (77) gen_stmts -> gen_stmts . terms top_stmt
    (188) opt_terms -> . none
    (189) opt_terms -> . terms
    (190) terms -> . term
    (191) terms -> . terms term
    (194) none -> .
    (192) term -> . DELIM
    (193) term -> . newline

    KEYWORD_end     reduce using rule 194 (none -> .)
    DELIM           shift and go to state 80
    newline         shift and go to state 79

    none                           shift and go to state 81
    terms                          shift and go to state 168
    term                           shift and go to state 77
    opt_terms                      shift and go to state 320

state 299

    (14) func_defn -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN func_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 321


state 300

    (15) func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN func_stmts opt_terms KEYWORD_end .

    DELIM           reduce using rule 15 (func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN func_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 15 (func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN func_stmts opt_terms KEYWORD_end .)
    $end            reduce using rule 15 (func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN func_stmts opt_terms KEYWORD_end .)


state 301

    (107) elsif_tail -> KEYWORD_elsif expr3 . opt_then gen_stmts opt_terms elsif_tail
    (148) expr3 -> expr3 . LOGICALOR expr4
    (108) opt_then -> . KEYWORD_then
    (109) opt_then -> . newline

    LOGICALOR       shift and go to state 104
    KEYWORD_then    shift and go to state 159
    newline         shift and go to state 158

    opt_then                       shift and go to state 322

state 302

    (105) opt_else_stmt -> none .

    KEYWORD_end     reduce using rule 105 (opt_else_stmt -> none .)


state 303

    (104) opt_else_stmt -> KEYWORD_else . gen_stmts opt_terms
    (76) gen_stmts -> . top_stmt
    (77) gen_stmts -> . gen_stmts terms top_stmt
    (78) gen_stmts -> . none
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (194) none -> .
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . mlhs EQUAL mrhs
    (147) expr1 -> . expr3
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . mlhs EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . mlhs EQUAL fname func_ret_arg
    (125) mlhs -> . VARIABLES
    (126) mlhs -> . CONSTANTS
    (127) mlhs -> . array
    (148) expr3 -> . expr3 LOGICALOR expr4
    (149) expr3 -> . expr4
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (150) expr4 -> . expr4 LOGICALAND expr5
    (151) expr4 -> . expr5
    (152) expr5 -> . expr6 DOUBLEEQUAL expr6
    (153) expr5 -> . expr6 NOTEQUAL expr6
    (154) expr5 -> . expr6
    (155) expr6 -> . expr7 LESSEQUAL expr7
    (156) expr6 -> . expr7 LESS expr7
    (157) expr6 -> . expr7 GREATER expr7
    (158) expr6 -> . expr7 GREATEREQUAL expr7
    (159) expr6 -> . expr7
    (160) expr6 -> . BOOLEAN_CONSTANTS
    (161) expr7 -> . expr7 BITXOR expr8
    (162) expr7 -> . expr7 PIPE expr8
    (163) expr7 -> . expr8
    (164) expr8 -> . expr8 BITAND expr9
    (165) expr8 -> . expr9
    (166) expr9 -> . expr9 SHIFTL expr10
    (167) expr9 -> . expr9 SHIFTR expr10
    (168) expr9 -> . expr10
    (169) expr10 -> . expr10 PLUS expr11
    (170) expr10 -> . expr10 MINUS expr11
    (171) expr10 -> . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP

    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 38
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 51
    DELIM           reduce using rule 194 (none -> .)
    newline         reduce using rule 194 (none -> .)
    KEYWORD_end     reduce using rule 194 (none -> .)
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 48
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    VARIABLES       shift and go to state 98
    CONSTANTS       shift and go to state 101
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29

    mlhs                           shift and go to state 2
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr13                         shift and go to state 16
    array                          shift and go to state 26
    expr3                          shift and go to state 41
    expr1                          shift and go to state 42
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    puts_stmt                      shift and go to state 18
    expr5                          shift and go to state 45
    func_call_stmt                 shift and go to state 32
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    expr4                          shift and go to state 8
    fname                          shift and go to state 44
    exit_stmt                      shift and go to state 49
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 20
    uexpr                          shift and go to state 10
    none                           shift and go to state 99
    gen_stmts                      shift and go to state 323
    expr                           shift and go to state 35
    top_stmt                       shift and go to state 102

state 304

    (67) top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt . KEYWORD_end

    KEYWORD_end     shift and go to state 324


state 305

    (132) mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .

    KEYWORD_while   reduce using rule 132 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    KEYWORD_until   reduce using rule 132 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    DELIM           reduce using rule 132 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    newline         reduce using rule 132 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    $end            reduce using rule 132 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    KEYWORD_end     reduce using rule 132 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    KEYWORD_elsif   reduce using rule 132 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    KEYWORD_else    reduce using rule 132 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)


state 306

    (135) mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .

    KEYWORD_while   reduce using rule 135 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    KEYWORD_until   reduce using rule 135 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    DELIM           reduce using rule 135 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    newline         reduce using rule 135 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    $end            reduce using rule 135 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    KEYWORD_end     reduce using rule 135 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    KEYWORD_elsif   reduce using rule 135 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    KEYWORD_else    reduce using rule 135 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)


state 307

    (33) class_func -> KEYWORD_def fname OPEN_PAREN arguments . CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (55) arguments -> arguments . COMMA VARIABLES
    (56) arguments -> arguments . COMMA CONSTANTS
    (57) arguments -> arguments . COMMA func_arg_expr

    CLOSE_PAREN     shift and go to state 325
    COMMA           shift and go to state 192


state 308

    (35) class_func -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN . class_method_stmts opt_terms KEYWORD_end
    (36) class_method_stmts -> . class_method_stmt
    (37) class_method_stmts -> . class_method_stmts terms class_method_stmt
    (38) class_method_stmts -> . none
    (39) class_method_stmt -> . class_method_mlhs EQUAL class_method_mrhs
    (40) class_method_stmt -> . KEYWORD_return class_method_ret_arg
    (41) class_method_stmt -> . puts_stmt
    (194) none -> .
    (42) class_method_mlhs -> . class_method_mlhs terms SIGIL_AT
    (43) class_method_mlhs -> . SIGIL_AT
    (44) class_method_mlhs -> . SIGIL_DOUBLE_AT
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr

    KEYWORD_return  shift and go to state 312
    DELIM           reduce using rule 194 (none -> .)
    newline         reduce using rule 194 (none -> .)
    KEYWORD_end     reduce using rule 194 (none -> .)
    SIGIL_AT        shift and go to state 310
    SIGIL_DOUBLE_AT shift and go to state 314
    KEYWORD_puts    shift and go to state 33

    class_method_stmt              shift and go to state 309
    none                           shift and go to state 316
    class_method_mlhs              shift and go to state 315
    puts_stmt                      shift and go to state 313
    class_method_stmts             shift and go to state 326

state 309

    (36) class_method_stmts -> class_method_stmt .

    DELIM           reduce using rule 36 (class_method_stmts -> class_method_stmt .)
    newline         reduce using rule 36 (class_method_stmts -> class_method_stmt .)
    KEYWORD_end     reduce using rule 36 (class_method_stmts -> class_method_stmt .)


state 310

    (43) class_method_mlhs -> SIGIL_AT .

    EQUAL           reduce using rule 43 (class_method_mlhs -> SIGIL_AT .)
    DELIM           reduce using rule 43 (class_method_mlhs -> SIGIL_AT .)
    newline         reduce using rule 43 (class_method_mlhs -> SIGIL_AT .)


state 311

    (34) class_func -> KEYWORD_def fname arguments class_method_stmts . opt_terms KEYWORD_end
    (37) class_method_stmts -> class_method_stmts . terms class_method_stmt
    (188) opt_terms -> . none
    (189) opt_terms -> . terms
    (190) terms -> . term
    (191) terms -> . terms term
    (194) none -> .
    (192) term -> . DELIM
    (193) term -> . newline

    KEYWORD_end     reduce using rule 194 (none -> .)
    DELIM           shift and go to state 80
    newline         shift and go to state 79

    none                           shift and go to state 81
    terms                          shift and go to state 327
    term                           shift and go to state 77
    opt_terms                      shift and go to state 328

state 312

    (40) class_method_stmt -> KEYWORD_return . class_method_ret_arg
    (47) class_method_ret_arg -> . class_method_arg_expr
    (48) class_method_ret_arg -> . literal
    (49) class_method_ret_arg -> . class_method_ret_arg COMMA class_method_arg_expr
    (50) class_method_ret_arg -> . class_method_ret_arg COMMA literal
    (51) class_method_arg_expr -> . SIGIL_AT EQUAL literal
    (52) class_method_arg_expr -> . SIGIL_DOUBLE_AT EQUAL literal
    (24) literal -> . INT_CONSTANTS
    (25) literal -> . FLOAT_CONSTANTS
    (26) literal -> . STRING_CONSTANTS
    (27) literal -> . BOOLEAN_CONSTANTS
    (28) literal -> . CHAR_CONSTANTS
    (29) literal -> . SIGIL_AT
    (30) literal -> . SIGIL_DOUBLE_AT

    SIGIL_AT        shift and go to state 329
    SIGIL_DOUBLE_AT shift and go to state 330
    INT_CONSTANTS   shift and go to state 282
    FLOAT_CONSTANTS shift and go to state 283
    STRING_CONSTANTS shift and go to state 285
    BOOLEAN_CONSTANTS shift and go to state 281
    CHAR_CONSTANTS  shift and go to state 288

    class_method_arg_expr          shift and go to state 333
    literal                        shift and go to state 331
    class_method_ret_arg           shift and go to state 332

state 313

    (41) class_method_stmt -> puts_stmt .

    DELIM           reduce using rule 41 (class_method_stmt -> puts_stmt .)
    newline         reduce using rule 41 (class_method_stmt -> puts_stmt .)
    KEYWORD_end     reduce using rule 41 (class_method_stmt -> puts_stmt .)


state 314

    (44) class_method_mlhs -> SIGIL_DOUBLE_AT .

    EQUAL           reduce using rule 44 (class_method_mlhs -> SIGIL_DOUBLE_AT .)
    DELIM           reduce using rule 44 (class_method_mlhs -> SIGIL_DOUBLE_AT .)
    newline         reduce using rule 44 (class_method_mlhs -> SIGIL_DOUBLE_AT .)


state 315

    (39) class_method_stmt -> class_method_mlhs . EQUAL class_method_mrhs
    (42) class_method_mlhs -> class_method_mlhs . terms SIGIL_AT
    (190) terms -> . term
    (191) terms -> . terms term
    (192) term -> . DELIM
    (193) term -> . newline

    EQUAL           shift and go to state 335
    DELIM           shift and go to state 80
    newline         shift and go to state 79

    term                           shift and go to state 77
    terms                          shift and go to state 334

state 316

    (38) class_method_stmts -> none .

    DELIM           reduce using rule 38 (class_method_stmts -> none .)
    newline         reduce using rule 38 (class_method_stmts -> none .)
    KEYWORD_end     reduce using rule 38 (class_method_stmts -> none .)


state 317

    (74) top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do . gen_stmts opt_terms KEYWORD_end
    (76) gen_stmts -> . top_stmt
    (77) gen_stmts -> . gen_stmts terms top_stmt
    (78) gen_stmts -> . none
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (194) none -> .
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . mlhs EQUAL mrhs
    (147) expr1 -> . expr3
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . mlhs EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . mlhs EQUAL fname func_ret_arg
    (125) mlhs -> . VARIABLES
    (126) mlhs -> . CONSTANTS
    (127) mlhs -> . array
    (148) expr3 -> . expr3 LOGICALOR expr4
    (149) expr3 -> . expr4
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (150) expr4 -> . expr4 LOGICALAND expr5
    (151) expr4 -> . expr5
    (152) expr5 -> . expr6 DOUBLEEQUAL expr6
    (153) expr5 -> . expr6 NOTEQUAL expr6
    (154) expr5 -> . expr6
    (155) expr6 -> . expr7 LESSEQUAL expr7
    (156) expr6 -> . expr7 LESS expr7
    (157) expr6 -> . expr7 GREATER expr7
    (158) expr6 -> . expr7 GREATEREQUAL expr7
    (159) expr6 -> . expr7
    (160) expr6 -> . BOOLEAN_CONSTANTS
    (161) expr7 -> . expr7 BITXOR expr8
    (162) expr7 -> . expr7 PIPE expr8
    (163) expr7 -> . expr8
    (164) expr8 -> . expr8 BITAND expr9
    (165) expr8 -> . expr9
    (166) expr9 -> . expr9 SHIFTL expr10
    (167) expr9 -> . expr9 SHIFTR expr10
    (168) expr9 -> . expr10
    (169) expr10 -> . expr10 PLUS expr11
    (170) expr10 -> . expr10 MINUS expr11
    (171) expr10 -> . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP

    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 38
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 51
    DELIM           reduce using rule 194 (none -> .)
    newline         reduce using rule 194 (none -> .)
    KEYWORD_end     reduce using rule 194 (none -> .)
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 48
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    VARIABLES       shift and go to state 98
    CONSTANTS       shift and go to state 101
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29

    mlhs                           shift and go to state 2
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr13                         shift and go to state 16
    array                          shift and go to state 26
    expr3                          shift and go to state 41
    expr1                          shift and go to state 42
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    puts_stmt                      shift and go to state 18
    expr5                          shift and go to state 45
    func_call_stmt                 shift and go to state 32
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    expr4                          shift and go to state 8
    fname                          shift and go to state 44
    exit_stmt                      shift and go to state 49
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 20
    uexpr                          shift and go to state 10
    none                           shift and go to state 99
    gen_stmts                      shift and go to state 336
    expr                           shift and go to state 35
    top_stmt                       shift and go to state 102

state 318

    (117) for_range -> OPEN_PAREN INT_CONSTANTS DOUBLEDOT INT_CONSTANTS . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 337


state 319

    (119) for_range -> OPEN_PAREN INT_CONSTANTS TRIPLEDOT INT_CONSTANTS . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 338


state 320

    (75) top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 339


state 321

    (14) func_defn -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN func_stmts opt_terms KEYWORD_end .

    DELIM           reduce using rule 14 (func_defn -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN func_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 14 (func_defn -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN func_stmts opt_terms KEYWORD_end .)
    $end            reduce using rule 14 (func_defn -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN func_stmts opt_terms KEYWORD_end .)


state 322

    (107) elsif_tail -> KEYWORD_elsif expr3 opt_then . gen_stmts opt_terms elsif_tail
    (76) gen_stmts -> . top_stmt
    (77) gen_stmts -> . gen_stmts terms top_stmt
    (78) gen_stmts -> . none
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (194) none -> .
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . mlhs EQUAL mrhs
    (147) expr1 -> . expr3
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . mlhs EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . mlhs EQUAL fname func_ret_arg
    (125) mlhs -> . VARIABLES
    (126) mlhs -> . CONSTANTS
    (127) mlhs -> . array
    (148) expr3 -> . expr3 LOGICALOR expr4
    (149) expr3 -> . expr4
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (182) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (150) expr4 -> . expr4 LOGICALAND expr5
    (151) expr4 -> . expr5
    (152) expr5 -> . expr6 DOUBLEEQUAL expr6
    (153) expr5 -> . expr6 NOTEQUAL expr6
    (154) expr5 -> . expr6
    (155) expr6 -> . expr7 LESSEQUAL expr7
    (156) expr6 -> . expr7 LESS expr7
    (157) expr6 -> . expr7 GREATER expr7
    (158) expr6 -> . expr7 GREATEREQUAL expr7
    (159) expr6 -> . expr7
    (160) expr6 -> . BOOLEAN_CONSTANTS
    (161) expr7 -> . expr7 BITXOR expr8
    (162) expr7 -> . expr7 PIPE expr8
    (163) expr7 -> . expr8
    (164) expr8 -> . expr8 BITAND expr9
    (165) expr8 -> . expr9
    (166) expr9 -> . expr9 SHIFTL expr10
    (167) expr9 -> . expr9 SHIFTR expr10
    (168) expr9 -> . expr10
    (169) expr10 -> . expr10 PLUS expr11
    (170) expr10 -> . expr10 MINUS expr11
    (171) expr10 -> . expr11
    (172) expr11 -> . expr11 MULTIPLY expr13
    (173) expr11 -> . expr11 DIV expr13
    (174) expr11 -> . expr11 MOD expr13
    (175) expr11 -> . expr13
    (176) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (177) expr13 -> . uexpr INT_CONSTANTS
    (178) expr13 -> . uexpr FLOAT_CONSTANTS
    (179) expr13 -> . CONSTANTS
    (180) expr13 -> . VARIABLES
    (181) expr13 -> . array
    (183) uexpr -> . none
    (184) uexpr -> . PLUS
    (185) uexpr -> . MINUS
    (186) uexpr -> . BITNOT
    (187) uexpr -> . BITCOMP

    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 38
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 51
    DELIM           reduce using rule 194 (none -> .)
    newline         reduce using rule 194 (none -> .)
    KEYWORD_elsif   reduce using rule 194 (none -> .)
    KEYWORD_else    reduce using rule 194 (none -> .)
    KEYWORD_end     reduce using rule 194 (none -> .)
    INT_CONSTANTS   reduce using rule 194 (none -> .)
    FLOAT_CONSTANTS reduce using rule 194 (none -> .)
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 48
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    VARIABLES       shift and go to state 98
    CONSTANTS       shift and go to state 101
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29

    mlhs                           shift and go to state 2
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr13                         shift and go to state 16
    array                          shift and go to state 26
    expr3                          shift and go to state 41
    expr1                          shift and go to state 42
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    puts_stmt                      shift and go to state 18
    expr5                          shift and go to state 45
    func_call_stmt                 shift and go to state 32
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    expr4                          shift and go to state 8
    fname                          shift and go to state 44
    exit_stmt                      shift and go to state 49
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 20
    uexpr                          shift and go to state 10
    none                           shift and go to state 99
    gen_stmts                      shift and go to state 340
    expr                           shift and go to state 35
    top_stmt                       shift and go to state 102

state 323

    (104) opt_else_stmt -> KEYWORD_else gen_stmts . opt_terms
    (77) gen_stmts -> gen_stmts . terms top_stmt
    (188) opt_terms -> . none
    (189) opt_terms -> . terms
    (190) terms -> . term
    (191) terms -> . terms term
    (194) none -> .
    (192) term -> . DELIM
    (193) term -> . newline

    KEYWORD_end     reduce using rule 194 (none -> .)
    DELIM           shift and go to state 80
    newline         shift and go to state 79

    term                           shift and go to state 77
    terms                          shift and go to state 168
    none                           shift and go to state 81
    opt_terms                      shift and go to state 341

state 324

    (67) top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end .

    KEYWORD_while   reduce using rule 67 (top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end .)
    KEYWORD_until   reduce using rule 67 (top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end .)
    DELIM           reduce using rule 67 (top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end .)
    newline         reduce using rule 67 (top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end .)
    KEYWORD_end     reduce using rule 67 (top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end .)
    KEYWORD_elsif   reduce using rule 67 (top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end .)
    KEYWORD_else    reduce using rule 67 (top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end .)
    $end            reduce using rule 67 (top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end .)


state 325

    (33) class_func -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN . class_method_stmts opt_terms KEYWORD_end
    (36) class_method_stmts -> . class_method_stmt
    (37) class_method_stmts -> . class_method_stmts terms class_method_stmt
    (38) class_method_stmts -> . none
    (39) class_method_stmt -> . class_method_mlhs EQUAL class_method_mrhs
    (40) class_method_stmt -> . KEYWORD_return class_method_ret_arg
    (41) class_method_stmt -> . puts_stmt
    (194) none -> .
    (42) class_method_mlhs -> . class_method_mlhs terms SIGIL_AT
    (43) class_method_mlhs -> . SIGIL_AT
    (44) class_method_mlhs -> . SIGIL_DOUBLE_AT
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr

    KEYWORD_return  shift and go to state 312
    DELIM           reduce using rule 194 (none -> .)
    newline         reduce using rule 194 (none -> .)
    KEYWORD_end     reduce using rule 194 (none -> .)
    SIGIL_AT        shift and go to state 310
    SIGIL_DOUBLE_AT shift and go to state 314
    KEYWORD_puts    shift and go to state 33

    class_method_stmt              shift and go to state 309
    none                           shift and go to state 316
    class_method_mlhs              shift and go to state 315
    puts_stmt                      shift and go to state 313
    class_method_stmts             shift and go to state 342

state 326

    (35) class_func -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts . opt_terms KEYWORD_end
    (37) class_method_stmts -> class_method_stmts . terms class_method_stmt
    (188) opt_terms -> . none
    (189) opt_terms -> . terms
    (190) terms -> . term
    (191) terms -> . terms term
    (194) none -> .
    (192) term -> . DELIM
    (193) term -> . newline

    KEYWORD_end     reduce using rule 194 (none -> .)
    DELIM           shift and go to state 80
    newline         shift and go to state 79

    none                           shift and go to state 81
    terms                          shift and go to state 327
    opt_terms                      shift and go to state 343
    term                           shift and go to state 77

state 327

    (37) class_method_stmts -> class_method_stmts terms . class_method_stmt
    (189) opt_terms -> terms .
    (191) terms -> terms . term
    (39) class_method_stmt -> . class_method_mlhs EQUAL class_method_mrhs
    (40) class_method_stmt -> . KEYWORD_return class_method_ret_arg
    (41) class_method_stmt -> . puts_stmt
    (192) term -> . DELIM
    (193) term -> . newline
    (42) class_method_mlhs -> . class_method_mlhs terms SIGIL_AT
    (43) class_method_mlhs -> . SIGIL_AT
    (44) class_method_mlhs -> . SIGIL_DOUBLE_AT
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr

    KEYWORD_end     reduce using rule 189 (opt_terms -> terms .)
    KEYWORD_return  shift and go to state 312
    DELIM           shift and go to state 80
    newline         shift and go to state 79
    SIGIL_AT        shift and go to state 310
    SIGIL_DOUBLE_AT shift and go to state 314
    KEYWORD_puts    shift and go to state 33

    class_method_stmt              shift and go to state 344
    term                           shift and go to state 155
    puts_stmt                      shift and go to state 313
    class_method_mlhs              shift and go to state 315

state 328

    (34) class_func -> KEYWORD_def fname arguments class_method_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 345


state 329

    (51) class_method_arg_expr -> SIGIL_AT . EQUAL literal
    (29) literal -> SIGIL_AT .

    EQUAL           shift and go to state 346
    COMMA           reduce using rule 29 (literal -> SIGIL_AT .)
    DELIM           reduce using rule 29 (literal -> SIGIL_AT .)
    newline         reduce using rule 29 (literal -> SIGIL_AT .)
    KEYWORD_end     reduce using rule 29 (literal -> SIGIL_AT .)


state 330

    (52) class_method_arg_expr -> SIGIL_DOUBLE_AT . EQUAL literal
    (30) literal -> SIGIL_DOUBLE_AT .

    EQUAL           shift and go to state 347
    COMMA           reduce using rule 30 (literal -> SIGIL_DOUBLE_AT .)
    DELIM           reduce using rule 30 (literal -> SIGIL_DOUBLE_AT .)
    newline         reduce using rule 30 (literal -> SIGIL_DOUBLE_AT .)
    KEYWORD_end     reduce using rule 30 (literal -> SIGIL_DOUBLE_AT .)


state 331

    (48) class_method_ret_arg -> literal .

    COMMA           reduce using rule 48 (class_method_ret_arg -> literal .)
    DELIM           reduce using rule 48 (class_method_ret_arg -> literal .)
    newline         reduce using rule 48 (class_method_ret_arg -> literal .)
    KEYWORD_end     reduce using rule 48 (class_method_ret_arg -> literal .)


state 332

    (40) class_method_stmt -> KEYWORD_return class_method_ret_arg .
    (49) class_method_ret_arg -> class_method_ret_arg . COMMA class_method_arg_expr
    (50) class_method_ret_arg -> class_method_ret_arg . COMMA literal

    DELIM           reduce using rule 40 (class_method_stmt -> KEYWORD_return class_method_ret_arg .)
    newline         reduce using rule 40 (class_method_stmt -> KEYWORD_return class_method_ret_arg .)
    KEYWORD_end     reduce using rule 40 (class_method_stmt -> KEYWORD_return class_method_ret_arg .)
    COMMA           shift and go to state 348


state 333

    (47) class_method_ret_arg -> class_method_arg_expr .

    COMMA           reduce using rule 47 (class_method_ret_arg -> class_method_arg_expr .)
    DELIM           reduce using rule 47 (class_method_ret_arg -> class_method_arg_expr .)
    newline         reduce using rule 47 (class_method_ret_arg -> class_method_arg_expr .)
    KEYWORD_end     reduce using rule 47 (class_method_ret_arg -> class_method_arg_expr .)


state 334

    (42) class_method_mlhs -> class_method_mlhs terms . SIGIL_AT
    (191) terms -> terms . term
    (192) term -> . DELIM
    (193) term -> . newline

    SIGIL_AT        shift and go to state 349
    DELIM           shift and go to state 80
    newline         shift and go to state 79

    term                           shift and go to state 155

state 335

    (39) class_method_stmt -> class_method_mlhs EQUAL . class_method_mrhs
    (45) class_method_mrhs -> . literal
    (46) class_method_mrhs -> . VARIABLES
    (24) literal -> . INT_CONSTANTS
    (25) literal -> . FLOAT_CONSTANTS
    (26) literal -> . STRING_CONSTANTS
    (27) literal -> . BOOLEAN_CONSTANTS
    (28) literal -> . CHAR_CONSTANTS
    (29) literal -> . SIGIL_AT
    (30) literal -> . SIGIL_DOUBLE_AT

    VARIABLES       shift and go to state 351
    INT_CONSTANTS   shift and go to state 282
    FLOAT_CONSTANTS shift and go to state 283
    STRING_CONSTANTS shift and go to state 285
    BOOLEAN_CONSTANTS shift and go to state 281
    CHAR_CONSTANTS  shift and go to state 288
    SIGIL_AT        shift and go to state 280
    SIGIL_DOUBLE_AT shift and go to state 284

    class_method_mrhs              shift and go to state 350
    literal                        shift and go to state 352

state 336

    (74) top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts . opt_terms KEYWORD_end
    (77) gen_stmts -> gen_stmts . terms top_stmt
    (188) opt_terms -> . none
    (189) opt_terms -> . terms
    (190) terms -> . term
    (191) terms -> . terms term
    (194) none -> .
    (192) term -> . DELIM
    (193) term -> . newline

    KEYWORD_end     reduce using rule 194 (none -> .)
    DELIM           shift and go to state 80
    newline         shift and go to state 79

    none                           shift and go to state 81
    terms                          shift and go to state 168
    term                           shift and go to state 77
    opt_terms                      shift and go to state 353

state 337

    (117) for_range -> OPEN_PAREN INT_CONSTANTS DOUBLEDOT INT_CONSTANTS CLOSE_PAREN .

    KEYWORD_do      reduce using rule 117 (for_range -> OPEN_PAREN INT_CONSTANTS DOUBLEDOT INT_CONSTANTS CLOSE_PAREN .)
    newline         reduce using rule 117 (for_range -> OPEN_PAREN INT_CONSTANTS DOUBLEDOT INT_CONSTANTS CLOSE_PAREN .)


state 338

    (119) for_range -> OPEN_PAREN INT_CONSTANTS TRIPLEDOT INT_CONSTANTS CLOSE_PAREN .

    KEYWORD_do      reduce using rule 119 (for_range -> OPEN_PAREN INT_CONSTANTS TRIPLEDOT INT_CONSTANTS CLOSE_PAREN .)
    newline         reduce using rule 119 (for_range -> OPEN_PAREN INT_CONSTANTS TRIPLEDOT INT_CONSTANTS CLOSE_PAREN .)


state 339

    (75) top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .

    KEYWORD_while   reduce using rule 75 (top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_until   reduce using rule 75 (top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    DELIM           reduce using rule 75 (top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 75 (top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_end     reduce using rule 75 (top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_elsif   reduce using rule 75 (top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_else    reduce using rule 75 (top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    $end            reduce using rule 75 (top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)


state 340

    (107) elsif_tail -> KEYWORD_elsif expr3 opt_then gen_stmts . opt_terms elsif_tail
    (77) gen_stmts -> gen_stmts . terms top_stmt
    (188) opt_terms -> . none
    (189) opt_terms -> . terms
    (190) terms -> . term
    (191) terms -> . terms term
    (194) none -> .
    (192) term -> . DELIM
    (193) term -> . newline

    KEYWORD_elsif   reduce using rule 194 (none -> .)
    KEYWORD_else    reduce using rule 194 (none -> .)
    KEYWORD_end     reduce using rule 194 (none -> .)
    DELIM           shift and go to state 80
    newline         shift and go to state 79

    none                           shift and go to state 81
    terms                          shift and go to state 168
    term                           shift and go to state 77
    opt_terms                      shift and go to state 354

state 341

    (104) opt_else_stmt -> KEYWORD_else gen_stmts opt_terms .

    KEYWORD_end     reduce using rule 104 (opt_else_stmt -> KEYWORD_else gen_stmts opt_terms .)


state 342

    (33) class_func -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts . opt_terms KEYWORD_end
    (37) class_method_stmts -> class_method_stmts . terms class_method_stmt
    (188) opt_terms -> . none
    (189) opt_terms -> . terms
    (190) terms -> . term
    (191) terms -> . terms term
    (194) none -> .
    (192) term -> . DELIM
    (193) term -> . newline

    KEYWORD_end     reduce using rule 194 (none -> .)
    DELIM           shift and go to state 80
    newline         shift and go to state 79

    none                           shift and go to state 81
    terms                          shift and go to state 327
    term                           shift and go to state 77
    opt_terms                      shift and go to state 355

state 343

    (35) class_func -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 356


state 344

    (37) class_method_stmts -> class_method_stmts terms class_method_stmt .

    DELIM           reduce using rule 37 (class_method_stmts -> class_method_stmts terms class_method_stmt .)
    newline         reduce using rule 37 (class_method_stmts -> class_method_stmts terms class_method_stmt .)
    KEYWORD_end     reduce using rule 37 (class_method_stmts -> class_method_stmts terms class_method_stmt .)


state 345

    (34) class_func -> KEYWORD_def fname arguments class_method_stmts opt_terms KEYWORD_end .

    DELIM           reduce using rule 34 (class_func -> KEYWORD_def fname arguments class_method_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 34 (class_func -> KEYWORD_def fname arguments class_method_stmts opt_terms KEYWORD_end .)
    KEYWORD_end     reduce using rule 34 (class_func -> KEYWORD_def fname arguments class_method_stmts opt_terms KEYWORD_end .)


state 346

    (51) class_method_arg_expr -> SIGIL_AT EQUAL . literal
    (24) literal -> . INT_CONSTANTS
    (25) literal -> . FLOAT_CONSTANTS
    (26) literal -> . STRING_CONSTANTS
    (27) literal -> . BOOLEAN_CONSTANTS
    (28) literal -> . CHAR_CONSTANTS
    (29) literal -> . SIGIL_AT
    (30) literal -> . SIGIL_DOUBLE_AT

    INT_CONSTANTS   shift and go to state 282
    FLOAT_CONSTANTS shift and go to state 283
    STRING_CONSTANTS shift and go to state 285
    BOOLEAN_CONSTANTS shift and go to state 281
    CHAR_CONSTANTS  shift and go to state 288
    SIGIL_AT        shift and go to state 280
    SIGIL_DOUBLE_AT shift and go to state 284

    literal                        shift and go to state 357

state 347

    (52) class_method_arg_expr -> SIGIL_DOUBLE_AT EQUAL . literal
    (24) literal -> . INT_CONSTANTS
    (25) literal -> . FLOAT_CONSTANTS
    (26) literal -> . STRING_CONSTANTS
    (27) literal -> . BOOLEAN_CONSTANTS
    (28) literal -> . CHAR_CONSTANTS
    (29) literal -> . SIGIL_AT
    (30) literal -> . SIGIL_DOUBLE_AT

    INT_CONSTANTS   shift and go to state 282
    FLOAT_CONSTANTS shift and go to state 283
    STRING_CONSTANTS shift and go to state 285
    BOOLEAN_CONSTANTS shift and go to state 281
    CHAR_CONSTANTS  shift and go to state 288
    SIGIL_AT        shift and go to state 280
    SIGIL_DOUBLE_AT shift and go to state 284

    literal                        shift and go to state 358

state 348

    (49) class_method_ret_arg -> class_method_ret_arg COMMA . class_method_arg_expr
    (50) class_method_ret_arg -> class_method_ret_arg COMMA . literal
    (51) class_method_arg_expr -> . SIGIL_AT EQUAL literal
    (52) class_method_arg_expr -> . SIGIL_DOUBLE_AT EQUAL literal
    (24) literal -> . INT_CONSTANTS
    (25) literal -> . FLOAT_CONSTANTS
    (26) literal -> . STRING_CONSTANTS
    (27) literal -> . BOOLEAN_CONSTANTS
    (28) literal -> . CHAR_CONSTANTS
    (29) literal -> . SIGIL_AT
    (30) literal -> . SIGIL_DOUBLE_AT

    SIGIL_AT        shift and go to state 329
    SIGIL_DOUBLE_AT shift and go to state 330
    INT_CONSTANTS   shift and go to state 282
    FLOAT_CONSTANTS shift and go to state 283
    STRING_CONSTANTS shift and go to state 285
    BOOLEAN_CONSTANTS shift and go to state 281
    CHAR_CONSTANTS  shift and go to state 288

    class_method_arg_expr          shift and go to state 360
    literal                        shift and go to state 359

state 349

    (42) class_method_mlhs -> class_method_mlhs terms SIGIL_AT .

    EQUAL           reduce using rule 42 (class_method_mlhs -> class_method_mlhs terms SIGIL_AT .)
    DELIM           reduce using rule 42 (class_method_mlhs -> class_method_mlhs terms SIGIL_AT .)
    newline         reduce using rule 42 (class_method_mlhs -> class_method_mlhs terms SIGIL_AT .)


state 350

    (39) class_method_stmt -> class_method_mlhs EQUAL class_method_mrhs .

    DELIM           reduce using rule 39 (class_method_stmt -> class_method_mlhs EQUAL class_method_mrhs .)
    newline         reduce using rule 39 (class_method_stmt -> class_method_mlhs EQUAL class_method_mrhs .)
    KEYWORD_end     reduce using rule 39 (class_method_stmt -> class_method_mlhs EQUAL class_method_mrhs .)


state 351

    (46) class_method_mrhs -> VARIABLES .

    DELIM           reduce using rule 46 (class_method_mrhs -> VARIABLES .)
    newline         reduce using rule 46 (class_method_mrhs -> VARIABLES .)
    KEYWORD_end     reduce using rule 46 (class_method_mrhs -> VARIABLES .)


state 352

    (45) class_method_mrhs -> literal .

    DELIM           reduce using rule 45 (class_method_mrhs -> literal .)
    newline         reduce using rule 45 (class_method_mrhs -> literal .)
    KEYWORD_end     reduce using rule 45 (class_method_mrhs -> literal .)


state 353

    (74) top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 361


state 354

    (107) elsif_tail -> KEYWORD_elsif expr3 opt_then gen_stmts opt_terms . elsif_tail
    (106) elsif_tail -> . none
    (107) elsif_tail -> . KEYWORD_elsif expr3 opt_then gen_stmts opt_terms elsif_tail
    (194) none -> .

    KEYWORD_elsif   shift and go to state 270
    KEYWORD_else    reduce using rule 194 (none -> .)
    KEYWORD_end     reduce using rule 194 (none -> .)

    none                           shift and go to state 269
    elsif_tail                     shift and go to state 362

state 355

    (33) class_func -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 363


state 356

    (35) class_func -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end .

    DELIM           reduce using rule 35 (class_func -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 35 (class_func -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end .)
    KEYWORD_end     reduce using rule 35 (class_func -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end .)


state 357

    (51) class_method_arg_expr -> SIGIL_AT EQUAL literal .

    COMMA           reduce using rule 51 (class_method_arg_expr -> SIGIL_AT EQUAL literal .)
    DELIM           reduce using rule 51 (class_method_arg_expr -> SIGIL_AT EQUAL literal .)
    newline         reduce using rule 51 (class_method_arg_expr -> SIGIL_AT EQUAL literal .)
    KEYWORD_end     reduce using rule 51 (class_method_arg_expr -> SIGIL_AT EQUAL literal .)


state 358

    (52) class_method_arg_expr -> SIGIL_DOUBLE_AT EQUAL literal .

    COMMA           reduce using rule 52 (class_method_arg_expr -> SIGIL_DOUBLE_AT EQUAL literal .)
    DELIM           reduce using rule 52 (class_method_arg_expr -> SIGIL_DOUBLE_AT EQUAL literal .)
    newline         reduce using rule 52 (class_method_arg_expr -> SIGIL_DOUBLE_AT EQUAL literal .)
    KEYWORD_end     reduce using rule 52 (class_method_arg_expr -> SIGIL_DOUBLE_AT EQUAL literal .)


state 359

    (50) class_method_ret_arg -> class_method_ret_arg COMMA literal .

    COMMA           reduce using rule 50 (class_method_ret_arg -> class_method_ret_arg COMMA literal .)
    DELIM           reduce using rule 50 (class_method_ret_arg -> class_method_ret_arg COMMA literal .)
    newline         reduce using rule 50 (class_method_ret_arg -> class_method_ret_arg COMMA literal .)
    KEYWORD_end     reduce using rule 50 (class_method_ret_arg -> class_method_ret_arg COMMA literal .)


state 360

    (49) class_method_ret_arg -> class_method_ret_arg COMMA class_method_arg_expr .

    COMMA           reduce using rule 49 (class_method_ret_arg -> class_method_ret_arg COMMA class_method_arg_expr .)
    DELIM           reduce using rule 49 (class_method_ret_arg -> class_method_ret_arg COMMA class_method_arg_expr .)
    newline         reduce using rule 49 (class_method_ret_arg -> class_method_ret_arg COMMA class_method_arg_expr .)
    KEYWORD_end     reduce using rule 49 (class_method_ret_arg -> class_method_ret_arg COMMA class_method_arg_expr .)


state 361

    (74) top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .

    KEYWORD_while   reduce using rule 74 (top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_until   reduce using rule 74 (top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    DELIM           reduce using rule 74 (top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 74 (top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_end     reduce using rule 74 (top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_elsif   reduce using rule 74 (top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_else    reduce using rule 74 (top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    $end            reduce using rule 74 (top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)


state 362

    (107) elsif_tail -> KEYWORD_elsif expr3 opt_then gen_stmts opt_terms elsif_tail .

    KEYWORD_else    reduce using rule 107 (elsif_tail -> KEYWORD_elsif expr3 opt_then gen_stmts opt_terms elsif_tail .)
    KEYWORD_end     reduce using rule 107 (elsif_tail -> KEYWORD_elsif expr3 opt_then gen_stmts opt_terms elsif_tail .)


state 363

    (33) class_func -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end .

    DELIM           reduce using rule 33 (class_func -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 33 (class_func -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end .)
    KEYWORD_end     reduce using rule 33 (class_func -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end .)

