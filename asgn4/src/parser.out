Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    KEYWORD_unless
    BLOCK_END
    KEYWORD___ENCODING__
    BITANDEQUAL
    SQUOTES
    KEYWORD_END
    KEYWORD_self
    KEYWORD_when
    MINUSEQUAL
    KEYWORD_nil
    OR
    DIVEQUAL
    KEYWORD_or
    IFF
    LOGICALANDEQUAL
    KEYWORD_retry
    DOUBLESTAR
    KEYWORD_undef
    COLON
    SIGIL_DOLLAR
    DOUBLE_COLON
    DOUBLESTAREQUAL
    KEYWORD_false
    KEYWORD_definedQ
    SHIFTLEQUAL
    AND
    NOT
    KEYWORD_not
    KEYWORD_yield
    KEYWORD_ensure
    QUESTION_MARK
    MODEQUAL
    QUESTIONCOLON
    KEYWORD_true
    LOGICALOREQUAL
    KEYWORD___END__
    PLUSEQUAL
    KEYWORD_super
    KEYWORD_alias
    MULTIPLYEQUAL
    SHIFTREQUAL
    KEYWORD___LINE__
    KEYWORD_BEGIN
    BLOCK_BEGIN
    DQUOTES
    TRIPLEEQUAL
    PIPEEQUAL
    KEYWORD_and
    KEYWORD___FILE__
    KEYWORD_rescue
    KEYWORD_module
    DOLLAR
    BACK_SLASH
    KEYWORD_case
    BITXOREQUAL

Grammar

Rule 0     S' -> program
Rule 1     program -> top_top_compstmt
Rule 2     top_top_compstmt -> statements opt_terms
Rule 3     statements -> statement
Rule 4     statements -> statements terms statement
Rule 5     statement -> top_compstmt
Rule 6     statement -> func_defn
Rule 7     statement -> class_defn
Rule 8     statement -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
Rule 9     statement -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN
Rule 10    statement -> VARIABLES DOT VARIABLES arguments
Rule 11    statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
Rule 12    statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
Rule 13    statement -> CONSTANTS DOT KEYWORD_new arguments
Rule 14    func_defn -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN func_stmts opt_terms KEYWORD_end
Rule 15    func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN func_stmts opt_terms KEYWORD_end
Rule 16    func_defn -> KEYWORD_def fname arguments func_stmts opt_terms KEYWORD_end
Rule 17    class_defn -> KEYWORD_class CONSTANTS newline class_stmts opt_terms KEYWORD_end
Rule 18    class_stmts -> class_stmt
Rule 19    class_stmts -> class_stmts terms class_stmt
Rule 20    class_stmts -> none
Rule 21    class_stmt -> class_mlhs EQUAL class_mrhs
Rule 22    class_stmt -> class_func
Rule 23    class_mrhs -> literal
Rule 24    literal -> INT_CONSTANTS
Rule 25    literal -> FLOAT_CONSTANTS
Rule 26    literal -> STRING_CONSTANTS
Rule 27    literal -> BOOLEAN_CONSTANTS
Rule 28    literal -> CHAR_CONSTANTS
Rule 29    literal -> SIGIL_AT
Rule 30    literal -> SIGIL_DOUBLE_AT
Rule 31    class_mlhs -> class_mlhs terms SIGIL_DOUBLE_AT
Rule 32    class_mlhs -> SIGIL_DOUBLE_AT
Rule 33    class_func -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
Rule 34    class_func -> KEYWORD_def fname arguments class_method_stmts opt_terms KEYWORD_end
Rule 35    class_func -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
Rule 36    class_method_stmts -> class_method_stmt
Rule 37    class_method_stmts -> class_method_stmts terms class_method_stmt
Rule 38    class_method_stmts -> none
Rule 39    class_method_stmt -> class_method_mlhs EQUAL class_method_mrhs
Rule 40    class_method_stmt -> KEYWORD_return class_method_ret_arg
Rule 41    class_method_stmt -> puts_stmt
Rule 42    class_method_mlhs -> class_method_mlhs terms SIGIL_AT
Rule 43    class_method_mlhs -> SIGIL_AT
Rule 44    class_method_mlhs -> SIGIL_DOUBLE_AT
Rule 45    class_method_mrhs -> literal
Rule 46    class_method_mrhs -> VARIABLES
Rule 47    class_method_ret_arg -> class_method_arg_expr
Rule 48    class_method_ret_arg -> literal
Rule 49    class_method_ret_arg -> class_method_ret_arg COMMA class_method_arg_expr
Rule 50    class_method_ret_arg -> class_method_ret_arg COMMA literal
Rule 51    class_method_arg_expr -> SIGIL_AT EQUAL literal
Rule 52    class_method_arg_expr -> SIGIL_DOUBLE_AT EQUAL literal
Rule 53    fname -> VARIABLES
Rule 54    fname -> CONSTANTS
Rule 55    arguments -> arguments COMMA VARIABLES
Rule 56    arguments -> arguments COMMA CONSTANTS
Rule 57    arguments -> arguments COMMA func_arg_expr
Rule 58    arguments -> VARIABLES
Rule 59    arguments -> CONSTANTS
Rule 60    arguments -> func_arg_expr
Rule 61    arguments -> newline
Rule 62    func_arg_expr -> VARIABLES EQUAL primary
Rule 63    func_arg_expr -> CONSTANTS EQUAL primary
Rule 64    top_compstmt -> top_stmts
Rule 65    top_stmts -> top_stmt
Rule 66    top_stmt -> stmt
Rule 67    top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
Rule 68    top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
Rule 69    top_stmt -> top_stmt KEYWORD_while expr3
Rule 70    top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
Rule 71    top_stmt -> top_stmt KEYWORD_until expr3
Rule 72    top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
Rule 73    top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
Rule 74    top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
Rule 75    top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
Rule 76    gen_stmts -> top_stmt
Rule 77    gen_stmts -> gen_stmts terms top_stmt
Rule 78    gen_stmts -> none
Rule 79    stmt -> expr
Rule 80    stmt -> expr1
Rule 81    stmt -> puts_stmt
Rule 82    stmt -> loop_stmt
Rule 83    stmt -> exit_stmt
Rule 84    stmt -> func_call_stmt
Rule 85    func_call_stmt -> fname OPEN_PAREN func_ret_arg CLOSE_PAREN
Rule 86    func_call_stmt -> fname func_ret_arg
Rule 87    func_call_stmt -> MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
Rule 88    func_call_stmt -> MLHS EQUAL fname func_ret_arg
Rule 89    loop_stmt -> KEYWORD_break
Rule 90    loop_stmt -> KEYWORD_next
Rule 91    loop_stmt -> KEYWORD_redo
Rule 92    exit_stmt -> KEYWORD_exit
Rule 93    puts_stmt -> KEYWORD_puts mrhs
Rule 94    puts_stmt -> KEYWORD_puts expr
Rule 95    func_stmts -> func_stmt
Rule 96    func_stmts -> func_stmts terms func_stmt
Rule 97    func_stmts -> none
Rule 98    func_stmt -> top_stmt
Rule 99    func_stmt -> KEYWORD_return func_ret_arg
Rule 100   func_ret_arg -> func_arg_expr
Rule 101   func_ret_arg -> primary
Rule 102   func_ret_arg -> func_ret_arg COMMA func_arg_expr
Rule 103   func_ret_arg -> func_ret_arg COMMA primary
Rule 104   opt_else_stmt -> KEYWORD_else gen_stmts opt_terms
Rule 105   opt_else_stmt -> none
Rule 106   elsif_tail -> none
Rule 107   elsif_tail -> KEYWORD_elsif expr3 opt_then gen_stmts opt_terms elsif_tail
Rule 108   opt_then -> KEYWORD_then
Rule 109   opt_then -> newline
Rule 110   opt_do -> KEYWORD_do
Rule 111   opt_do -> newline
Rule 112   multi_var -> VARIABLES
Rule 113   multi_var -> CONSTANTS
Rule 114   multi_var -> array
Rule 115   multi_var -> multi_var COMMA VARIABLES
Rule 116   multi_var -> multi_var COMMA CONSTANTS
Rule 117   for_range -> OPEN_PAREN INT_CONSTANTS DOUBLEDOT INT_CONSTANTS CLOSE_PAREN
Rule 118   for_range -> INT_CONSTANTS DOUBLEDOT INT_CONSTANTS
Rule 119   for_range -> OPEN_PAREN INT_CONSTANTS TRIPLEDOT INT_CONSTANTS CLOSE_PAREN
Rule 120   for_range -> INT_CONSTANTS TRIPLEDOT INT_CONSTANTS
Rule 121   for_range -> VARIABLES
Rule 122   for_range -> array
Rule 123   for_range -> CONSTANTS
Rule 124   expr -> MLHS EQUAL MRHS
Rule 125   MLHS -> mlhs
Rule 126   MLHS -> MLHS COMMA mlhs
Rule 127   MRHS -> mrhs
Rule 128   MRHS -> MRHS COMMA mrhs
Rule 129   mlhs -> VARIABLES
Rule 130   mlhs -> CONSTANTS
Rule 131   mlhs -> array
Rule 132   mrhs -> expr1
Rule 133   mrhs -> str_expr
Rule 134   mrhs -> KEYWORD_gets
Rule 135   mrhs -> OPEN_BRACKET CLOSE_BRACKET
Rule 136   mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
Rule 137   mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN
Rule 138   mrhs -> VARIABLES DOT VARIABLES
Rule 139   mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
Rule 140   mrhs -> CONSTANTS DOT KEYWORD_new
Rule 141   mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
Rule 142   str_expr -> STRING_CONSTANTS
Rule 143   primary -> INT_CONSTANTS
Rule 144   primary -> FLOAT_CONSTANTS
Rule 145   primary -> STRING_CONSTANTS
Rule 146   primary -> CHAR_CONSTANTS
Rule 147   primary -> BOOLEAN_CONSTANTS
Rule 148   primary -> CONSTANTS
Rule 149   primary -> VARIABLES
Rule 150   primary -> array
Rule 151   expr1 -> expr3
Rule 152   expr3 -> expr3 LOGICALOR expr4
Rule 153   expr3 -> expr4
Rule 154   expr4 -> expr4 LOGICALAND expr5
Rule 155   expr4 -> expr5
Rule 156   expr5 -> expr6 DOUBLEEQUAL expr6
Rule 157   expr5 -> expr6 NOTEQUAL expr6
Rule 158   expr5 -> expr6
Rule 159   expr6 -> expr7 LESSEQUAL expr7
Rule 160   expr6 -> expr7 LESS expr7
Rule 161   expr6 -> expr7 GREATER expr7
Rule 162   expr6 -> expr7 GREATEREQUAL expr7
Rule 163   expr6 -> expr7
Rule 164   expr6 -> BOOLEAN_CONSTANTS
Rule 165   expr7 -> expr7 BITXOR expr8
Rule 166   expr7 -> expr7 PIPE expr8
Rule 167   expr7 -> expr8
Rule 168   expr8 -> expr8 BITAND expr9
Rule 169   expr8 -> expr9
Rule 170   expr9 -> expr9 SHIFTL expr10
Rule 171   expr9 -> expr9 SHIFTR expr10
Rule 172   expr9 -> expr10
Rule 173   expr10 -> expr10 PLUS expr11
Rule 174   expr10 -> expr10 MINUS expr11
Rule 175   expr10 -> expr11
Rule 176   expr11 -> expr11 MULTIPLY expr13
Rule 177   expr11 -> expr11 DIV expr13
Rule 178   expr11 -> expr11 MOD expr13
Rule 179   expr11 -> expr13
Rule 180   expr13 -> OPEN_PAREN expr1 CLOSE_PAREN
Rule 181   expr13 -> uexpr INT_CONSTANTS
Rule 182   expr13 -> uexpr FLOAT_CONSTANTS
Rule 183   expr13 -> CONSTANTS
Rule 184   expr13 -> VARIABLES
Rule 185   expr13 -> array
Rule 186   array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
Rule 187   uexpr -> none
Rule 188   uexpr -> PLUS
Rule 189   uexpr -> MINUS
Rule 190   uexpr -> BITNOT
Rule 191   uexpr -> BITCOMP
Rule 192   opt_terms -> none
Rule 193   opt_terms -> terms
Rule 194   terms -> term
Rule 195   terms -> terms term
Rule 196   term -> DELIM
Rule 197   term -> newline
Rule 198   none -> <empty>

Terminals, with rules where they appear

AND                  : 
BACK_SLASH           : 
BITAND               : 168
BITANDEQUAL          : 
BITCOMP              : 191
BITNOT               : 190
BITXOR               : 165
BITXOREQUAL          : 
BLOCK_BEGIN          : 
BLOCK_END            : 
BOOLEAN_CONSTANTS    : 27 147 164
CHAR_CONSTANTS       : 28 146
CLOSE_BRACKET        : 135 186
CLOSE_PAREN          : 8 9 11 12 14 15 33 35 74 85 87 117 119 136 137 139 141 180
COLON                : 
COMMA                : 49 50 55 56 57 102 103 115 116 126 128
CONSTANTS            : 11 12 13 17 54 56 59 63 113 116 123 130 139 140 141 148 183
DELIM                : 196
DIV                  : 177
DIVEQUAL             : 
DOLLAR               : 
DOT                  : 8 9 10 11 12 13 136 137 138 139 140 141
DOUBLEDOT            : 117 118
DOUBLEEQUAL          : 156
DOUBLESTAR           : 
DOUBLESTAREQUAL      : 
DOUBLE_COLON         : 
DQUOTES              : 
EQUAL                : 21 39 51 52 62 63 87 88 124
FLOAT_CONSTANTS      : 25 144 182
GREATER              : 161
GREATEREQUAL         : 162
IFF                  : 
INT_CONSTANTS        : 24 117 117 118 118 119 119 120 120 143 181
KEYWORD_BEGIN        : 
KEYWORD_END          : 
KEYWORD___ENCODING__ : 
KEYWORD___END__      : 
KEYWORD___FILE__     : 
KEYWORD___LINE__     : 
KEYWORD_alias        : 
KEYWORD_and          : 
KEYWORD_begin        : 70 73
KEYWORD_break        : 89
KEYWORD_case         : 
KEYWORD_class        : 17
KEYWORD_def          : 14 15 16 33 34 35
KEYWORD_definedQ     : 
KEYWORD_do           : 110
KEYWORD_else         : 104
KEYWORD_elsif        : 107
KEYWORD_end          : 14 15 16 17 33 34 35 67 68 70 72 73 74 75
KEYWORD_ensure       : 
KEYWORD_exit         : 92
KEYWORD_false        : 
KEYWORD_for          : 74 75
KEYWORD_gets         : 134
KEYWORD_if           : 67
KEYWORD_in           : 74 75
KEYWORD_module       : 
KEYWORD_new          : 11 12 13 139 140 141
KEYWORD_next         : 90
KEYWORD_nil          : 
KEYWORD_not          : 
KEYWORD_or           : 
KEYWORD_puts         : 93 94
KEYWORD_redo         : 91
KEYWORD_rescue       : 
KEYWORD_retry        : 
KEYWORD_return       : 40 99
KEYWORD_self         : 
KEYWORD_super        : 
KEYWORD_then         : 108
KEYWORD_true         : 
KEYWORD_undef        : 
KEYWORD_unless       : 
KEYWORD_until        : 71 72 73
KEYWORD_when         : 
KEYWORD_while        : 68 69 70
KEYWORD_yield        : 
LESS                 : 160
LESSEQUAL            : 159
LOGICALAND           : 154
LOGICALANDEQUAL      : 
LOGICALOR            : 152
LOGICALOREQUAL       : 
MINUS                : 174 189
MINUSEQUAL           : 
MOD                  : 178
MODEQUAL             : 
MULTIPLY             : 176
MULTIPLYEQUAL        : 
NOT                  : 
NOTEQUAL             : 157
OPEN_BRACKET         : 135 186
OPEN_PAREN           : 8 9 11 12 14 15 33 35 74 85 87 117 119 136 137 139 141 180
OR                   : 
PIPE                 : 166
PIPEEQUAL            : 
PLUS                 : 173 188
PLUSEQUAL            : 
QUESTIONCOLON        : 
QUESTION_MARK        : 
SHIFTL               : 170
SHIFTLEQUAL          : 
SHIFTR               : 171
SHIFTREQUAL          : 
SIGIL_AT             : 29 42 43 51
SIGIL_DOLLAR         : 
SIGIL_DOUBLE_AT      : 30 31 32 44 52
SQUOTES              : 
STRING_CONSTANTS     : 26 142 145
TRIPLEDOT            : 119 120
TRIPLEEQUAL          : 
VARIABLES            : 8 8 9 9 10 10 46 53 55 58 62 112 115 121 129 136 136 137 137 138 138 149 184 186
error                : 
newline              : 17 61 109 111 197

Nonterminals, with rules where they appear

MLHS                 : 87 88 124 126
MRHS                 : 124 128
arguments            : 8 10 11 13 14 16 33 34 55 56 57 136 139
array                : 114 122 131 150 185
class_defn           : 7
class_func           : 22
class_method_arg_expr : 47 49
class_method_mlhs    : 39 42
class_method_mrhs    : 39
class_method_ret_arg : 40 49 50
class_method_stmt    : 36 37
class_method_stmts   : 33 34 35 37
class_mlhs           : 21 31
class_mrhs           : 21
class_stmt           : 18 19
class_stmts          : 17 19
elsif_tail           : 67 107
exit_stmt            : 83
expr                 : 79 94
expr1                : 80 132 180
expr10               : 170 171 172 173 174
expr11               : 173 174 175 176 177 178
expr13               : 176 177 178 179
expr3                : 67 68 69 70 71 72 73 107 151 152
expr4                : 152 153 154
expr5                : 154 155
expr6                : 156 156 157 157 158
expr7                : 159 159 160 160 161 161 162 162 163 165 166 186
expr8                : 165 166 167 168
expr9                : 168 169 170 171
fname                : 14 15 16 33 34 35 85 86 87 88
for_range            : 74 75
func_arg_expr        : 57 60 100 102
func_call_stmt       : 84
func_defn            : 6
func_ret_arg         : 85 86 87 88 99 102 103
func_stmt            : 95 96
func_stmts           : 14 15 16 96
gen_stmts            : 67 68 70 72 73 74 75 77 104 107
literal              : 23 45 48 50 51 52
loop_stmt            : 82
mlhs                 : 125 126
mrhs                 : 93 127 128
multi_var            : 74 75 115 116
none                 : 20 38 78 97 105 106 187 192
opt_do               : 68 72 74 75
opt_else_stmt        : 67
opt_terms            : 2 14 15 16 17 33 34 35 67 68 70 72 73 74 75 104 107
opt_then             : 67 107
primary              : 62 63 101 103
program              : 0
puts_stmt            : 41 81
statement            : 3 4
statements           : 2 4
stmt                 : 66
str_expr             : 133
term                 : 194 195
terms                : 4 19 31 37 42 77 96 193 195
top_compstmt         : 5
top_stmt             : 65 69 71 76 77 98
top_stmts            : 64
top_top_compstmt     : 1
uexpr                : 181 182

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . top_top_compstmt
    (2) top_top_compstmt -> . statements opt_terms
    (3) statements -> . statement
    (4) statements -> . statements terms statement
    (5) statement -> . top_compstmt
    (6) statement -> . func_defn
    (7) statement -> . class_defn
    (8) statement -> . VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (9) statement -> . VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (10) statement -> . VARIABLES DOT VARIABLES arguments
    (11) statement -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (12) statement -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (13) statement -> . CONSTANTS DOT KEYWORD_new arguments
    (64) top_compstmt -> . top_stmts
    (14) func_defn -> . KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN func_stmts opt_terms KEYWORD_end
    (15) func_defn -> . KEYWORD_def fname OPEN_PAREN CLOSE_PAREN func_stmts opt_terms KEYWORD_end
    (16) func_defn -> . KEYWORD_def fname arguments func_stmts opt_terms KEYWORD_end
    (17) class_defn -> . KEYWORD_class CONSTANTS newline class_stmts opt_terms KEYWORD_end
    (65) top_stmts -> . top_stmt
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . MLHS EQUAL MRHS
    (151) expr1 -> . expr3
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . MLHS EQUAL fname func_ret_arg
    (125) MLHS -> . mlhs
    (126) MLHS -> . MLHS COMMA mlhs
    (152) expr3 -> . expr3 LOGICALOR expr4
    (153) expr3 -> . expr4
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (129) mlhs -> . VARIABLES
    (130) mlhs -> . CONSTANTS
    (131) mlhs -> . array
    (154) expr4 -> . expr4 LOGICALAND expr5
    (155) expr4 -> . expr5
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (156) expr5 -> . expr6 DOUBLEEQUAL expr6
    (157) expr5 -> . expr6 NOTEQUAL expr6
    (158) expr5 -> . expr6
    (159) expr6 -> . expr7 LESSEQUAL expr7
    (160) expr6 -> . expr7 LESS expr7
    (161) expr6 -> . expr7 GREATER expr7
    (162) expr6 -> . expr7 GREATEREQUAL expr7
    (163) expr6 -> . expr7
    (164) expr6 -> . BOOLEAN_CONSTANTS
    (165) expr7 -> . expr7 BITXOR expr8
    (166) expr7 -> . expr7 PIPE expr8
    (167) expr7 -> . expr8
    (168) expr8 -> . expr8 BITAND expr9
    (169) expr8 -> . expr9
    (170) expr9 -> . expr9 SHIFTL expr10
    (171) expr9 -> . expr9 SHIFTR expr10
    (172) expr9 -> . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP
    (198) none -> .

    VARIABLES       shift and go to state 28
    CONSTANTS       shift and go to state 22
    KEYWORD_def     shift and go to state 21
    KEYWORD_class   shift and go to state 39
    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 38
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 52
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 48
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)

    statements                     shift and go to state 24
    mlhs                           shift and go to state 2
    func_defn                      shift and go to state 37
    puts_stmt                      shift and go to state 18
    expr11                         shift and go to state 15
    expr13                         shift and go to state 16
    top_stmts                      shift and go to state 17
    array                          shift and go to state 26
    expr3                          shift and go to state 41
    program                        shift and go to state 5
    expr6                          shift and go to state 43
    fname                          shift and go to state 44
    expr5                          shift and go to state 45
    func_call_stmt                 shift and go to state 32
    expr7                          shift and go to state 7
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    expr4                          shift and go to state 8
    statement                      shift and go to state 31
    exit_stmt                      shift and go to state 49
    top_compstmt                   shift and go to state 19
    MLHS                           shift and go to state 50
    stmt                           shift and go to state 20
    loop_stmt                      shift and go to state 9
    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr                           shift and go to state 35
    top_top_compstmt               shift and go to state 51
    class_defn                     shift and go to state 36
    expr10                         shift and go to state 14
    expr1                          shift and go to state 42
    top_stmt                       shift and go to state 13

state 1

    (91) loop_stmt -> KEYWORD_redo .

    KEYWORD_while   reduce using rule 91 (loop_stmt -> KEYWORD_redo .)
    KEYWORD_until   reduce using rule 91 (loop_stmt -> KEYWORD_redo .)
    DELIM           reduce using rule 91 (loop_stmt -> KEYWORD_redo .)
    newline         reduce using rule 91 (loop_stmt -> KEYWORD_redo .)
    KEYWORD_end     reduce using rule 91 (loop_stmt -> KEYWORD_redo .)
    $end            reduce using rule 91 (loop_stmt -> KEYWORD_redo .)
    KEYWORD_elsif   reduce using rule 91 (loop_stmt -> KEYWORD_redo .)
    KEYWORD_else    reduce using rule 91 (loop_stmt -> KEYWORD_redo .)


state 2

    (125) MLHS -> mlhs .

    EQUAL           reduce using rule 125 (MLHS -> mlhs .)
    COMMA           reduce using rule 125 (MLHS -> mlhs .)


state 3

    (189) uexpr -> MINUS .

    INT_CONSTANTS   reduce using rule 189 (uexpr -> MINUS .)
    FLOAT_CONSTANTS reduce using rule 189 (uexpr -> MINUS .)


state 4

    (68) top_stmt -> KEYWORD_while . expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (152) expr3 -> . expr3 LOGICALOR expr4
    (153) expr3 -> . expr4
    (154) expr4 -> . expr4 LOGICALAND expr5
    (155) expr4 -> . expr5
    (156) expr5 -> . expr6 DOUBLEEQUAL expr6
    (157) expr5 -> . expr6 NOTEQUAL expr6
    (158) expr5 -> . expr6
    (159) expr6 -> . expr7 LESSEQUAL expr7
    (160) expr6 -> . expr7 LESS expr7
    (161) expr6 -> . expr7 GREATER expr7
    (162) expr6 -> . expr7 GREATEREQUAL expr7
    (163) expr6 -> . expr7
    (164) expr6 -> . BOOLEAN_CONSTANTS
    (165) expr7 -> . expr7 BITXOR expr8
    (166) expr7 -> . expr7 PIPE expr8
    (167) expr7 -> . expr8
    (168) expr8 -> . expr8 BITAND expr9
    (169) expr8 -> . expr9
    (170) expr9 -> . expr9 SHIFTL expr10
    (171) expr9 -> . expr9 SHIFTR expr10
    (172) expr9 -> . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (198) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr13                         shift and go to state 16
    expr9                          shift and go to state 47
    expr3                          shift and go to state 54
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    expr4                          shift and go to state 8
    expr5                          shift and go to state 45
    expr10                         shift and go to state 14
    expr8                          shift and go to state 46
    array                          shift and go to state 55
    expr11                         shift and go to state 15

state 5

    (0) S' -> program .



state 6

    (188) uexpr -> PLUS .

    INT_CONSTANTS   reduce using rule 188 (uexpr -> PLUS .)
    FLOAT_CONSTANTS reduce using rule 188 (uexpr -> PLUS .)


state 7

    (159) expr6 -> expr7 . LESSEQUAL expr7
    (160) expr6 -> expr7 . LESS expr7
    (161) expr6 -> expr7 . GREATER expr7
    (162) expr6 -> expr7 . GREATEREQUAL expr7
    (163) expr6 -> expr7 .
    (165) expr7 -> expr7 . BITXOR expr8
    (166) expr7 -> expr7 . PIPE expr8

    LESSEQUAL       shift and go to state 62
    LESS            shift and go to state 59
    GREATER         shift and go to state 58
    GREATEREQUAL    shift and go to state 57
    DOUBLEEQUAL     reduce using rule 163 (expr6 -> expr7 .)
    NOTEQUAL        reduce using rule 163 (expr6 -> expr7 .)
    LOGICALAND      reduce using rule 163 (expr6 -> expr7 .)
    LOGICALOR       reduce using rule 163 (expr6 -> expr7 .)
    KEYWORD_then    reduce using rule 163 (expr6 -> expr7 .)
    newline         reduce using rule 163 (expr6 -> expr7 .)
    KEYWORD_while   reduce using rule 163 (expr6 -> expr7 .)
    KEYWORD_until   reduce using rule 163 (expr6 -> expr7 .)
    DELIM           reduce using rule 163 (expr6 -> expr7 .)
    KEYWORD_end     reduce using rule 163 (expr6 -> expr7 .)
    KEYWORD_elsif   reduce using rule 163 (expr6 -> expr7 .)
    KEYWORD_else    reduce using rule 163 (expr6 -> expr7 .)
    COMMA           reduce using rule 163 (expr6 -> expr7 .)
    $end            reduce using rule 163 (expr6 -> expr7 .)
    KEYWORD_do      reduce using rule 163 (expr6 -> expr7 .)
    CLOSE_PAREN     reduce using rule 163 (expr6 -> expr7 .)
    BITXOR          shift and go to state 61
    PIPE            shift and go to state 60


state 8

    (153) expr3 -> expr4 .
    (154) expr4 -> expr4 . LOGICALAND expr5

    LOGICALOR       reduce using rule 153 (expr3 -> expr4 .)
    KEYWORD_while   reduce using rule 153 (expr3 -> expr4 .)
    KEYWORD_until   reduce using rule 153 (expr3 -> expr4 .)
    DELIM           reduce using rule 153 (expr3 -> expr4 .)
    newline         reduce using rule 153 (expr3 -> expr4 .)
    KEYWORD_end     reduce using rule 153 (expr3 -> expr4 .)
    KEYWORD_then    reduce using rule 153 (expr3 -> expr4 .)
    $end            reduce using rule 153 (expr3 -> expr4 .)
    KEYWORD_elsif   reduce using rule 153 (expr3 -> expr4 .)
    KEYWORD_else    reduce using rule 153 (expr3 -> expr4 .)
    KEYWORD_do      reduce using rule 153 (expr3 -> expr4 .)
    COMMA           reduce using rule 153 (expr3 -> expr4 .)
    CLOSE_PAREN     reduce using rule 153 (expr3 -> expr4 .)
    LOGICALAND      shift and go to state 63


state 9

    (82) stmt -> loop_stmt .

    KEYWORD_while   reduce using rule 82 (stmt -> loop_stmt .)
    KEYWORD_until   reduce using rule 82 (stmt -> loop_stmt .)
    DELIM           reduce using rule 82 (stmt -> loop_stmt .)
    newline         reduce using rule 82 (stmt -> loop_stmt .)
    KEYWORD_end     reduce using rule 82 (stmt -> loop_stmt .)
    $end            reduce using rule 82 (stmt -> loop_stmt .)
    KEYWORD_elsif   reduce using rule 82 (stmt -> loop_stmt .)
    KEYWORD_else    reduce using rule 82 (stmt -> loop_stmt .)


state 10

    (181) expr13 -> uexpr . INT_CONSTANTS
    (182) expr13 -> uexpr . FLOAT_CONSTANTS

    INT_CONSTANTS   shift and go to state 64
    FLOAT_CONSTANTS shift and go to state 65


state 11

    (164) expr6 -> BOOLEAN_CONSTANTS .

    DOUBLEEQUAL     reduce using rule 164 (expr6 -> BOOLEAN_CONSTANTS .)
    NOTEQUAL        reduce using rule 164 (expr6 -> BOOLEAN_CONSTANTS .)
    LOGICALAND      reduce using rule 164 (expr6 -> BOOLEAN_CONSTANTS .)
    LOGICALOR       reduce using rule 164 (expr6 -> BOOLEAN_CONSTANTS .)
    KEYWORD_then    reduce using rule 164 (expr6 -> BOOLEAN_CONSTANTS .)
    newline         reduce using rule 164 (expr6 -> BOOLEAN_CONSTANTS .)
    KEYWORD_while   reduce using rule 164 (expr6 -> BOOLEAN_CONSTANTS .)
    KEYWORD_until   reduce using rule 164 (expr6 -> BOOLEAN_CONSTANTS .)
    DELIM           reduce using rule 164 (expr6 -> BOOLEAN_CONSTANTS .)
    KEYWORD_end     reduce using rule 164 (expr6 -> BOOLEAN_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 164 (expr6 -> BOOLEAN_CONSTANTS .)
    KEYWORD_else    reduce using rule 164 (expr6 -> BOOLEAN_CONSTANTS .)
    COMMA           reduce using rule 164 (expr6 -> BOOLEAN_CONSTANTS .)
    $end            reduce using rule 164 (expr6 -> BOOLEAN_CONSTANTS .)
    KEYWORD_do      reduce using rule 164 (expr6 -> BOOLEAN_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 164 (expr6 -> BOOLEAN_CONSTANTS .)


state 12

    (90) loop_stmt -> KEYWORD_next .

    KEYWORD_while   reduce using rule 90 (loop_stmt -> KEYWORD_next .)
    KEYWORD_until   reduce using rule 90 (loop_stmt -> KEYWORD_next .)
    DELIM           reduce using rule 90 (loop_stmt -> KEYWORD_next .)
    newline         reduce using rule 90 (loop_stmt -> KEYWORD_next .)
    KEYWORD_end     reduce using rule 90 (loop_stmt -> KEYWORD_next .)
    $end            reduce using rule 90 (loop_stmt -> KEYWORD_next .)
    KEYWORD_elsif   reduce using rule 90 (loop_stmt -> KEYWORD_next .)
    KEYWORD_else    reduce using rule 90 (loop_stmt -> KEYWORD_next .)


state 13

    (65) top_stmts -> top_stmt .
    (69) top_stmt -> top_stmt . KEYWORD_while expr3
    (71) top_stmt -> top_stmt . KEYWORD_until expr3

    DELIM           reduce using rule 65 (top_stmts -> top_stmt .)
    newline         reduce using rule 65 (top_stmts -> top_stmt .)
    $end            reduce using rule 65 (top_stmts -> top_stmt .)
    KEYWORD_while   shift and go to state 66
    KEYWORD_until   shift and go to state 67


state 14

    (172) expr9 -> expr10 .
    (173) expr10 -> expr10 . PLUS expr11
    (174) expr10 -> expr10 . MINUS expr11

    SHIFTL          reduce using rule 172 (expr9 -> expr10 .)
    SHIFTR          reduce using rule 172 (expr9 -> expr10 .)
    BITAND          reduce using rule 172 (expr9 -> expr10 .)
    LESSEQUAL       reduce using rule 172 (expr9 -> expr10 .)
    LESS            reduce using rule 172 (expr9 -> expr10 .)
    GREATER         reduce using rule 172 (expr9 -> expr10 .)
    GREATEREQUAL    reduce using rule 172 (expr9 -> expr10 .)
    BITXOR          reduce using rule 172 (expr9 -> expr10 .)
    PIPE            reduce using rule 172 (expr9 -> expr10 .)
    DOUBLEEQUAL     reduce using rule 172 (expr9 -> expr10 .)
    NOTEQUAL        reduce using rule 172 (expr9 -> expr10 .)
    LOGICALAND      reduce using rule 172 (expr9 -> expr10 .)
    LOGICALOR       reduce using rule 172 (expr9 -> expr10 .)
    KEYWORD_then    reduce using rule 172 (expr9 -> expr10 .)
    newline         reduce using rule 172 (expr9 -> expr10 .)
    KEYWORD_while   reduce using rule 172 (expr9 -> expr10 .)
    KEYWORD_until   reduce using rule 172 (expr9 -> expr10 .)
    DELIM           reduce using rule 172 (expr9 -> expr10 .)
    $end            reduce using rule 172 (expr9 -> expr10 .)
    KEYWORD_end     reduce using rule 172 (expr9 -> expr10 .)
    KEYWORD_elsif   reduce using rule 172 (expr9 -> expr10 .)
    KEYWORD_else    reduce using rule 172 (expr9 -> expr10 .)
    KEYWORD_do      reduce using rule 172 (expr9 -> expr10 .)
    CLOSE_PAREN     reduce using rule 172 (expr9 -> expr10 .)
    COMMA           reduce using rule 172 (expr9 -> expr10 .)
    CLOSE_BRACKET   reduce using rule 172 (expr9 -> expr10 .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69


state 15

    (175) expr10 -> expr11 .
    (176) expr11 -> expr11 . MULTIPLY expr13
    (177) expr11 -> expr11 . DIV expr13
    (178) expr11 -> expr11 . MOD expr13

    PLUS            reduce using rule 175 (expr10 -> expr11 .)
    MINUS           reduce using rule 175 (expr10 -> expr11 .)
    SHIFTL          reduce using rule 175 (expr10 -> expr11 .)
    SHIFTR          reduce using rule 175 (expr10 -> expr11 .)
    BITAND          reduce using rule 175 (expr10 -> expr11 .)
    LESSEQUAL       reduce using rule 175 (expr10 -> expr11 .)
    LESS            reduce using rule 175 (expr10 -> expr11 .)
    GREATER         reduce using rule 175 (expr10 -> expr11 .)
    GREATEREQUAL    reduce using rule 175 (expr10 -> expr11 .)
    BITXOR          reduce using rule 175 (expr10 -> expr11 .)
    PIPE            reduce using rule 175 (expr10 -> expr11 .)
    DOUBLEEQUAL     reduce using rule 175 (expr10 -> expr11 .)
    NOTEQUAL        reduce using rule 175 (expr10 -> expr11 .)
    LOGICALAND      reduce using rule 175 (expr10 -> expr11 .)
    LOGICALOR       reduce using rule 175 (expr10 -> expr11 .)
    KEYWORD_while   reduce using rule 175 (expr10 -> expr11 .)
    KEYWORD_until   reduce using rule 175 (expr10 -> expr11 .)
    DELIM           reduce using rule 175 (expr10 -> expr11 .)
    newline         reduce using rule 175 (expr10 -> expr11 .)
    KEYWORD_end     reduce using rule 175 (expr10 -> expr11 .)
    $end            reduce using rule 175 (expr10 -> expr11 .)
    KEYWORD_elsif   reduce using rule 175 (expr10 -> expr11 .)
    KEYWORD_else    reduce using rule 175 (expr10 -> expr11 .)
    KEYWORD_do      reduce using rule 175 (expr10 -> expr11 .)
    KEYWORD_then    reduce using rule 175 (expr10 -> expr11 .)
    CLOSE_PAREN     reduce using rule 175 (expr10 -> expr11 .)
    COMMA           reduce using rule 175 (expr10 -> expr11 .)
    CLOSE_BRACKET   reduce using rule 175 (expr10 -> expr11 .)
    MULTIPLY        shift and go to state 70
    DIV             shift and go to state 71
    MOD             shift and go to state 72


state 16

    (179) expr11 -> expr13 .

    MULTIPLY        reduce using rule 179 (expr11 -> expr13 .)
    DIV             reduce using rule 179 (expr11 -> expr13 .)
    MOD             reduce using rule 179 (expr11 -> expr13 .)
    PLUS            reduce using rule 179 (expr11 -> expr13 .)
    MINUS           reduce using rule 179 (expr11 -> expr13 .)
    SHIFTL          reduce using rule 179 (expr11 -> expr13 .)
    SHIFTR          reduce using rule 179 (expr11 -> expr13 .)
    BITAND          reduce using rule 179 (expr11 -> expr13 .)
    LESSEQUAL       reduce using rule 179 (expr11 -> expr13 .)
    LESS            reduce using rule 179 (expr11 -> expr13 .)
    GREATER         reduce using rule 179 (expr11 -> expr13 .)
    GREATEREQUAL    reduce using rule 179 (expr11 -> expr13 .)
    BITXOR          reduce using rule 179 (expr11 -> expr13 .)
    PIPE            reduce using rule 179 (expr11 -> expr13 .)
    DOUBLEEQUAL     reduce using rule 179 (expr11 -> expr13 .)
    NOTEQUAL        reduce using rule 179 (expr11 -> expr13 .)
    LOGICALAND      reduce using rule 179 (expr11 -> expr13 .)
    LOGICALOR       reduce using rule 179 (expr11 -> expr13 .)
    KEYWORD_while   reduce using rule 179 (expr11 -> expr13 .)
    KEYWORD_until   reduce using rule 179 (expr11 -> expr13 .)
    DELIM           reduce using rule 179 (expr11 -> expr13 .)
    newline         reduce using rule 179 (expr11 -> expr13 .)
    KEYWORD_end     reduce using rule 179 (expr11 -> expr13 .)
    $end            reduce using rule 179 (expr11 -> expr13 .)
    KEYWORD_do      reduce using rule 179 (expr11 -> expr13 .)
    KEYWORD_then    reduce using rule 179 (expr11 -> expr13 .)
    CLOSE_PAREN     reduce using rule 179 (expr11 -> expr13 .)
    KEYWORD_elsif   reduce using rule 179 (expr11 -> expr13 .)
    KEYWORD_else    reduce using rule 179 (expr11 -> expr13 .)
    COMMA           reduce using rule 179 (expr11 -> expr13 .)
    CLOSE_BRACKET   reduce using rule 179 (expr11 -> expr13 .)


state 17

    (64) top_compstmt -> top_stmts .

    DELIM           reduce using rule 64 (top_compstmt -> top_stmts .)
    newline         reduce using rule 64 (top_compstmt -> top_stmts .)
    $end            reduce using rule 64 (top_compstmt -> top_stmts .)


state 18

    (81) stmt -> puts_stmt .

    KEYWORD_while   reduce using rule 81 (stmt -> puts_stmt .)
    KEYWORD_until   reduce using rule 81 (stmt -> puts_stmt .)
    DELIM           reduce using rule 81 (stmt -> puts_stmt .)
    newline         reduce using rule 81 (stmt -> puts_stmt .)
    KEYWORD_end     reduce using rule 81 (stmt -> puts_stmt .)
    $end            reduce using rule 81 (stmt -> puts_stmt .)
    KEYWORD_elsif   reduce using rule 81 (stmt -> puts_stmt .)
    KEYWORD_else    reduce using rule 81 (stmt -> puts_stmt .)


state 19

    (5) statement -> top_compstmt .

    DELIM           reduce using rule 5 (statement -> top_compstmt .)
    newline         reduce using rule 5 (statement -> top_compstmt .)
    $end            reduce using rule 5 (statement -> top_compstmt .)


state 20

    (66) top_stmt -> stmt .

    KEYWORD_while   reduce using rule 66 (top_stmt -> stmt .)
    KEYWORD_until   reduce using rule 66 (top_stmt -> stmt .)
    DELIM           reduce using rule 66 (top_stmt -> stmt .)
    newline         reduce using rule 66 (top_stmt -> stmt .)
    KEYWORD_end     reduce using rule 66 (top_stmt -> stmt .)
    KEYWORD_elsif   reduce using rule 66 (top_stmt -> stmt .)
    KEYWORD_else    reduce using rule 66 (top_stmt -> stmt .)
    $end            reduce using rule 66 (top_stmt -> stmt .)


state 21

    (14) func_defn -> KEYWORD_def . fname OPEN_PAREN arguments CLOSE_PAREN func_stmts opt_terms KEYWORD_end
    (15) func_defn -> KEYWORD_def . fname OPEN_PAREN CLOSE_PAREN func_stmts opt_terms KEYWORD_end
    (16) func_defn -> KEYWORD_def . fname arguments func_stmts opt_terms KEYWORD_end
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS

    VARIABLES       shift and go to state 74
    CONSTANTS       shift and go to state 73

    fname                          shift and go to state 75

state 22

    (11) statement -> CONSTANTS . DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (12) statement -> CONSTANTS . DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (13) statement -> CONSTANTS . DOT KEYWORD_new arguments
    (54) fname -> CONSTANTS .
    (130) mlhs -> CONSTANTS .
    (183) expr13 -> CONSTANTS .

    DOT             shift and go to state 76
    OPEN_PAREN      reduce using rule 54 (fname -> CONSTANTS .)
    VARIABLES       reduce using rule 54 (fname -> CONSTANTS .)
    CONSTANTS       reduce using rule 54 (fname -> CONSTANTS .)
    INT_CONSTANTS   reduce using rule 54 (fname -> CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 54 (fname -> CONSTANTS .)
    STRING_CONSTANTS reduce using rule 54 (fname -> CONSTANTS .)
    CHAR_CONSTANTS  reduce using rule 54 (fname -> CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 54 (fname -> CONSTANTS .)
    EQUAL           reduce using rule 130 (mlhs -> CONSTANTS .)
    COMMA           reduce using rule 130 (mlhs -> CONSTANTS .)
    MULTIPLY        reduce using rule 183 (expr13 -> CONSTANTS .)
    DIV             reduce using rule 183 (expr13 -> CONSTANTS .)
    MOD             reduce using rule 183 (expr13 -> CONSTANTS .)
    PLUS            reduce using rule 183 (expr13 -> CONSTANTS .)
    MINUS           reduce using rule 183 (expr13 -> CONSTANTS .)
    SHIFTL          reduce using rule 183 (expr13 -> CONSTANTS .)
    SHIFTR          reduce using rule 183 (expr13 -> CONSTANTS .)
    BITAND          reduce using rule 183 (expr13 -> CONSTANTS .)
    LESSEQUAL       reduce using rule 183 (expr13 -> CONSTANTS .)
    LESS            reduce using rule 183 (expr13 -> CONSTANTS .)
    GREATER         reduce using rule 183 (expr13 -> CONSTANTS .)
    GREATEREQUAL    reduce using rule 183 (expr13 -> CONSTANTS .)
    BITXOR          reduce using rule 183 (expr13 -> CONSTANTS .)
    PIPE            reduce using rule 183 (expr13 -> CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 183 (expr13 -> CONSTANTS .)
    NOTEQUAL        reduce using rule 183 (expr13 -> CONSTANTS .)
    LOGICALAND      reduce using rule 183 (expr13 -> CONSTANTS .)
    LOGICALOR       reduce using rule 183 (expr13 -> CONSTANTS .)
    KEYWORD_while   reduce using rule 183 (expr13 -> CONSTANTS .)
    KEYWORD_until   reduce using rule 183 (expr13 -> CONSTANTS .)
    DELIM           reduce using rule 183 (expr13 -> CONSTANTS .)
    newline         reduce using rule 183 (expr13 -> CONSTANTS .)
    $end            reduce using rule 183 (expr13 -> CONSTANTS .)


state 23

    (92) exit_stmt -> KEYWORD_exit .

    KEYWORD_while   reduce using rule 92 (exit_stmt -> KEYWORD_exit .)
    KEYWORD_until   reduce using rule 92 (exit_stmt -> KEYWORD_exit .)
    DELIM           reduce using rule 92 (exit_stmt -> KEYWORD_exit .)
    newline         reduce using rule 92 (exit_stmt -> KEYWORD_exit .)
    KEYWORD_elsif   reduce using rule 92 (exit_stmt -> KEYWORD_exit .)
    KEYWORD_else    reduce using rule 92 (exit_stmt -> KEYWORD_exit .)
    KEYWORD_end     reduce using rule 92 (exit_stmt -> KEYWORD_exit .)
    $end            reduce using rule 92 (exit_stmt -> KEYWORD_exit .)


state 24

    (2) top_top_compstmt -> statements . opt_terms
    (4) statements -> statements . terms statement
    (192) opt_terms -> . none
    (193) opt_terms -> . terms
    (194) terms -> . term
    (195) terms -> . terms term
    (198) none -> .
    (196) term -> . DELIM
    (197) term -> . newline

    $end            reduce using rule 198 (none -> .)
    DELIM           shift and go to state 80
    newline         shift and go to state 79

    term                           shift and go to state 77
    terms                          shift and go to state 78
    none                           shift and go to state 81
    opt_terms                      shift and go to state 82

state 25

    (72) top_stmt -> KEYWORD_until . expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (152) expr3 -> . expr3 LOGICALOR expr4
    (153) expr3 -> . expr4
    (154) expr4 -> . expr4 LOGICALAND expr5
    (155) expr4 -> . expr5
    (156) expr5 -> . expr6 DOUBLEEQUAL expr6
    (157) expr5 -> . expr6 NOTEQUAL expr6
    (158) expr5 -> . expr6
    (159) expr6 -> . expr7 LESSEQUAL expr7
    (160) expr6 -> . expr7 LESS expr7
    (161) expr6 -> . expr7 GREATER expr7
    (162) expr6 -> . expr7 GREATEREQUAL expr7
    (163) expr6 -> . expr7
    (164) expr6 -> . BOOLEAN_CONSTANTS
    (165) expr7 -> . expr7 BITXOR expr8
    (166) expr7 -> . expr7 PIPE expr8
    (167) expr7 -> . expr8
    (168) expr8 -> . expr8 BITAND expr9
    (169) expr8 -> . expr9
    (170) expr9 -> . expr9 SHIFTL expr10
    (171) expr9 -> . expr9 SHIFTR expr10
    (172) expr9 -> . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (198) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr13                         shift and go to state 16
    expr9                          shift and go to state 47
    expr3                          shift and go to state 83
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    expr4                          shift and go to state 8
    expr5                          shift and go to state 45
    expr10                         shift and go to state 14
    expr8                          shift and go to state 46
    array                          shift and go to state 55
    expr11                         shift and go to state 15

state 26

    (131) mlhs -> array .
    (185) expr13 -> array .

    EQUAL           reduce using rule 131 (mlhs -> array .)
    COMMA           reduce using rule 131 (mlhs -> array .)
    MULTIPLY        reduce using rule 185 (expr13 -> array .)
    DIV             reduce using rule 185 (expr13 -> array .)
    MOD             reduce using rule 185 (expr13 -> array .)
    PLUS            reduce using rule 185 (expr13 -> array .)
    MINUS           reduce using rule 185 (expr13 -> array .)
    SHIFTL          reduce using rule 185 (expr13 -> array .)
    SHIFTR          reduce using rule 185 (expr13 -> array .)
    BITAND          reduce using rule 185 (expr13 -> array .)
    LESSEQUAL       reduce using rule 185 (expr13 -> array .)
    LESS            reduce using rule 185 (expr13 -> array .)
    GREATER         reduce using rule 185 (expr13 -> array .)
    GREATEREQUAL    reduce using rule 185 (expr13 -> array .)
    BITXOR          reduce using rule 185 (expr13 -> array .)
    PIPE            reduce using rule 185 (expr13 -> array .)
    DOUBLEEQUAL     reduce using rule 185 (expr13 -> array .)
    NOTEQUAL        reduce using rule 185 (expr13 -> array .)
    LOGICALAND      reduce using rule 185 (expr13 -> array .)
    LOGICALOR       reduce using rule 185 (expr13 -> array .)
    KEYWORD_while   reduce using rule 185 (expr13 -> array .)
    KEYWORD_until   reduce using rule 185 (expr13 -> array .)
    DELIM           reduce using rule 185 (expr13 -> array .)
    newline         reduce using rule 185 (expr13 -> array .)
    KEYWORD_elsif   reduce using rule 185 (expr13 -> array .)
    KEYWORD_else    reduce using rule 185 (expr13 -> array .)
    KEYWORD_end     reduce using rule 185 (expr13 -> array .)
    $end            reduce using rule 185 (expr13 -> array .)


state 27

    (67) top_stmt -> KEYWORD_if . expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (152) expr3 -> . expr3 LOGICALOR expr4
    (153) expr3 -> . expr4
    (154) expr4 -> . expr4 LOGICALAND expr5
    (155) expr4 -> . expr5
    (156) expr5 -> . expr6 DOUBLEEQUAL expr6
    (157) expr5 -> . expr6 NOTEQUAL expr6
    (158) expr5 -> . expr6
    (159) expr6 -> . expr7 LESSEQUAL expr7
    (160) expr6 -> . expr7 LESS expr7
    (161) expr6 -> . expr7 GREATER expr7
    (162) expr6 -> . expr7 GREATEREQUAL expr7
    (163) expr6 -> . expr7
    (164) expr6 -> . BOOLEAN_CONSTANTS
    (165) expr7 -> . expr7 BITXOR expr8
    (166) expr7 -> . expr7 PIPE expr8
    (167) expr7 -> . expr8
    (168) expr8 -> . expr8 BITAND expr9
    (169) expr8 -> . expr9
    (170) expr9 -> . expr9 SHIFTL expr10
    (171) expr9 -> . expr9 SHIFTR expr10
    (172) expr9 -> . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (198) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)

    expr11                         shift and go to state 15
    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr4                          shift and go to state 8
    expr5                          shift and go to state 45
    expr3                          shift and go to state 84
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    expr10                         shift and go to state 14
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    expr13                         shift and go to state 16
    array                          shift and go to state 55

state 28

    (8) statement -> VARIABLES . DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (9) statement -> VARIABLES . DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (10) statement -> VARIABLES . DOT VARIABLES arguments
    (53) fname -> VARIABLES .
    (129) mlhs -> VARIABLES .
    (186) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET
    (184) expr13 -> VARIABLES .

    DOT             shift and go to state 86
    OPEN_PAREN      reduce using rule 53 (fname -> VARIABLES .)
    VARIABLES       reduce using rule 53 (fname -> VARIABLES .)
    CONSTANTS       reduce using rule 53 (fname -> VARIABLES .)
    INT_CONSTANTS   reduce using rule 53 (fname -> VARIABLES .)
    FLOAT_CONSTANTS reduce using rule 53 (fname -> VARIABLES .)
    STRING_CONSTANTS reduce using rule 53 (fname -> VARIABLES .)
    CHAR_CONSTANTS  reduce using rule 53 (fname -> VARIABLES .)
    BOOLEAN_CONSTANTS reduce using rule 53 (fname -> VARIABLES .)
    EQUAL           reduce using rule 129 (mlhs -> VARIABLES .)
    COMMA           reduce using rule 129 (mlhs -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 85
    MULTIPLY        reduce using rule 184 (expr13 -> VARIABLES .)
    DIV             reduce using rule 184 (expr13 -> VARIABLES .)
    MOD             reduce using rule 184 (expr13 -> VARIABLES .)
    PLUS            reduce using rule 184 (expr13 -> VARIABLES .)
    MINUS           reduce using rule 184 (expr13 -> VARIABLES .)
    SHIFTL          reduce using rule 184 (expr13 -> VARIABLES .)
    SHIFTR          reduce using rule 184 (expr13 -> VARIABLES .)
    BITAND          reduce using rule 184 (expr13 -> VARIABLES .)
    LESSEQUAL       reduce using rule 184 (expr13 -> VARIABLES .)
    LESS            reduce using rule 184 (expr13 -> VARIABLES .)
    GREATER         reduce using rule 184 (expr13 -> VARIABLES .)
    GREATEREQUAL    reduce using rule 184 (expr13 -> VARIABLES .)
    BITXOR          reduce using rule 184 (expr13 -> VARIABLES .)
    PIPE            reduce using rule 184 (expr13 -> VARIABLES .)
    DOUBLEEQUAL     reduce using rule 184 (expr13 -> VARIABLES .)
    NOTEQUAL        reduce using rule 184 (expr13 -> VARIABLES .)
    LOGICALAND      reduce using rule 184 (expr13 -> VARIABLES .)
    LOGICALOR       reduce using rule 184 (expr13 -> VARIABLES .)
    KEYWORD_while   reduce using rule 184 (expr13 -> VARIABLES .)
    KEYWORD_until   reduce using rule 184 (expr13 -> VARIABLES .)
    DELIM           reduce using rule 184 (expr13 -> VARIABLES .)
    newline         reduce using rule 184 (expr13 -> VARIABLES .)
    $end            reduce using rule 184 (expr13 -> VARIABLES .)


state 29

    (191) uexpr -> BITCOMP .

    INT_CONSTANTS   reduce using rule 191 (uexpr -> BITCOMP .)
    FLOAT_CONSTANTS reduce using rule 191 (uexpr -> BITCOMP .)


state 30

    (180) expr13 -> OPEN_PAREN . expr1 CLOSE_PAREN
    (151) expr1 -> . expr3
    (152) expr3 -> . expr3 LOGICALOR expr4
    (153) expr3 -> . expr4
    (154) expr4 -> . expr4 LOGICALAND expr5
    (155) expr4 -> . expr5
    (156) expr5 -> . expr6 DOUBLEEQUAL expr6
    (157) expr5 -> . expr6 NOTEQUAL expr6
    (158) expr5 -> . expr6
    (159) expr6 -> . expr7 LESSEQUAL expr7
    (160) expr6 -> . expr7 LESS expr7
    (161) expr6 -> . expr7 GREATER expr7
    (162) expr6 -> . expr7 GREATEREQUAL expr7
    (163) expr6 -> . expr7
    (164) expr6 -> . BOOLEAN_CONSTANTS
    (165) expr7 -> . expr7 BITXOR expr8
    (166) expr7 -> . expr7 PIPE expr8
    (167) expr7 -> . expr8
    (168) expr8 -> . expr8 BITAND expr9
    (169) expr8 -> . expr9
    (170) expr9 -> . expr9 SHIFTL expr10
    (171) expr9 -> . expr9 SHIFTR expr10
    (172) expr9 -> . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (198) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr13                         shift and go to state 16
    expr3                          shift and go to state 41
    expr1                          shift and go to state 87
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    expr4                          shift and go to state 8
    expr5                          shift and go to state 45
    expr10                         shift and go to state 14
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    array                          shift and go to state 55
    expr11                         shift and go to state 15

state 31

    (3) statements -> statement .

    DELIM           reduce using rule 3 (statements -> statement .)
    newline         reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)


state 32

    (84) stmt -> func_call_stmt .

    KEYWORD_while   reduce using rule 84 (stmt -> func_call_stmt .)
    KEYWORD_until   reduce using rule 84 (stmt -> func_call_stmt .)
    DELIM           reduce using rule 84 (stmt -> func_call_stmt .)
    newline         reduce using rule 84 (stmt -> func_call_stmt .)
    KEYWORD_end     reduce using rule 84 (stmt -> func_call_stmt .)
    $end            reduce using rule 84 (stmt -> func_call_stmt .)
    KEYWORD_elsif   reduce using rule 84 (stmt -> func_call_stmt .)
    KEYWORD_else    reduce using rule 84 (stmt -> func_call_stmt .)


state 33

    (93) puts_stmt -> KEYWORD_puts . mrhs
    (94) puts_stmt -> KEYWORD_puts . expr
    (132) mrhs -> . expr1
    (133) mrhs -> . str_expr
    (134) mrhs -> . KEYWORD_gets
    (135) mrhs -> . OPEN_BRACKET CLOSE_BRACKET
    (136) mrhs -> . VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (137) mrhs -> . VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (138) mrhs -> . VARIABLES DOT VARIABLES
    (139) mrhs -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (140) mrhs -> . CONSTANTS DOT KEYWORD_new
    (141) mrhs -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (124) expr -> . MLHS EQUAL MRHS
    (151) expr1 -> . expr3
    (142) str_expr -> . STRING_CONSTANTS
    (125) MLHS -> . mlhs
    (126) MLHS -> . MLHS COMMA mlhs
    (152) expr3 -> . expr3 LOGICALOR expr4
    (153) expr3 -> . expr4
    (129) mlhs -> . VARIABLES
    (130) mlhs -> . CONSTANTS
    (131) mlhs -> . array
    (154) expr4 -> . expr4 LOGICALAND expr5
    (155) expr4 -> . expr5
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (156) expr5 -> . expr6 DOUBLEEQUAL expr6
    (157) expr5 -> . expr6 NOTEQUAL expr6
    (158) expr5 -> . expr6
    (159) expr6 -> . expr7 LESSEQUAL expr7
    (160) expr6 -> . expr7 LESS expr7
    (161) expr6 -> . expr7 GREATER expr7
    (162) expr6 -> . expr7 GREATEREQUAL expr7
    (163) expr6 -> . expr7
    (164) expr6 -> . BOOLEAN_CONSTANTS
    (165) expr7 -> . expr7 BITXOR expr8
    (166) expr7 -> . expr7 PIPE expr8
    (167) expr7 -> . expr8
    (168) expr8 -> . expr8 BITAND expr9
    (169) expr8 -> . expr9
    (170) expr9 -> . expr9 SHIFTL expr10
    (171) expr9 -> . expr9 SHIFTR expr10
    (172) expr9 -> . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP
    (198) none -> .

    KEYWORD_gets    shift and go to state 92
    OPEN_BRACKET    shift and go to state 90
    VARIABLES       shift and go to state 89
    CONSTANTS       shift and go to state 97
    STRING_CONSTANTS shift and go to state 96
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)

    expr11                         shift and go to state 15
    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    str_expr                       shift and go to state 88
    expr                           shift and go to state 95
    expr13                         shift and go to state 16
    MLHS                           shift and go to state 93
    mlhs                           shift and go to state 2
    expr3                          shift and go to state 41
    mrhs                           shift and go to state 94
    expr1                          shift and go to state 91
    expr6                          shift and go to state 43
    expr4                          shift and go to state 8
    expr5                          shift and go to state 45
    expr10                         shift and go to state 14
    array                          shift and go to state 26
    expr9                          shift and go to state 47
    expr8                          shift and go to state 46
    expr7                          shift and go to state 7

state 34

    (187) uexpr -> none .

    INT_CONSTANTS   reduce using rule 187 (uexpr -> none .)
    FLOAT_CONSTANTS reduce using rule 187 (uexpr -> none .)


state 35

    (79) stmt -> expr .

    KEYWORD_while   reduce using rule 79 (stmt -> expr .)
    KEYWORD_until   reduce using rule 79 (stmt -> expr .)
    DELIM           reduce using rule 79 (stmt -> expr .)
    newline         reduce using rule 79 (stmt -> expr .)
    KEYWORD_end     reduce using rule 79 (stmt -> expr .)
    $end            reduce using rule 79 (stmt -> expr .)
    KEYWORD_elsif   reduce using rule 79 (stmt -> expr .)
    KEYWORD_else    reduce using rule 79 (stmt -> expr .)


state 36

    (7) statement -> class_defn .

    DELIM           reduce using rule 7 (statement -> class_defn .)
    newline         reduce using rule 7 (statement -> class_defn .)
    $end            reduce using rule 7 (statement -> class_defn .)


state 37

    (6) statement -> func_defn .

    DELIM           reduce using rule 6 (statement -> func_defn .)
    newline         reduce using rule 6 (statement -> func_defn .)
    $end            reduce using rule 6 (statement -> func_defn .)


state 38

    (70) top_stmt -> KEYWORD_begin . gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (73) top_stmt -> KEYWORD_begin . gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (76) gen_stmts -> . top_stmt
    (77) gen_stmts -> . gen_stmts terms top_stmt
    (78) gen_stmts -> . none
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (198) none -> .
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . MLHS EQUAL MRHS
    (151) expr1 -> . expr3
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . MLHS EQUAL fname func_ret_arg
    (125) MLHS -> . mlhs
    (126) MLHS -> . MLHS COMMA mlhs
    (152) expr3 -> . expr3 LOGICALOR expr4
    (153) expr3 -> . expr4
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (129) mlhs -> . VARIABLES
    (130) mlhs -> . CONSTANTS
    (131) mlhs -> . array
    (154) expr4 -> . expr4 LOGICALAND expr5
    (155) expr4 -> . expr5
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (156) expr5 -> . expr6 DOUBLEEQUAL expr6
    (157) expr5 -> . expr6 NOTEQUAL expr6
    (158) expr5 -> . expr6
    (159) expr6 -> . expr7 LESSEQUAL expr7
    (160) expr6 -> . expr7 LESS expr7
    (161) expr6 -> . expr7 GREATER expr7
    (162) expr6 -> . expr7 GREATEREQUAL expr7
    (163) expr6 -> . expr7
    (164) expr6 -> . BOOLEAN_CONSTANTS
    (165) expr7 -> . expr7 BITXOR expr8
    (166) expr7 -> . expr7 PIPE expr8
    (167) expr7 -> . expr8
    (168) expr8 -> . expr8 BITAND expr9
    (169) expr8 -> . expr9
    (170) expr9 -> . expr9 SHIFTL expr10
    (171) expr9 -> . expr9 SHIFTR expr10
    (172) expr9 -> . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP

    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 38
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 52
    DELIM           reduce using rule 198 (none -> .)
    newline         reduce using rule 198 (none -> .)
    KEYWORD_end     reduce using rule 198 (none -> .)
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 48
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    VARIABLES       shift and go to state 98
    CONSTANTS       shift and go to state 101
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29

    mlhs                           shift and go to state 2
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr13                         shift and go to state 16
    array                          shift and go to state 26
    expr3                          shift and go to state 41
    expr1                          shift and go to state 42
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    puts_stmt                      shift and go to state 18
    expr5                          shift and go to state 45
    func_call_stmt                 shift and go to state 32
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    expr4                          shift and go to state 8
    fname                          shift and go to state 44
    exit_stmt                      shift and go to state 49
    MLHS                           shift and go to state 50
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 20
    uexpr                          shift and go to state 10
    none                           shift and go to state 99
    gen_stmts                      shift and go to state 100
    expr                           shift and go to state 35
    top_stmt                       shift and go to state 102

state 39

    (17) class_defn -> KEYWORD_class . CONSTANTS newline class_stmts opt_terms KEYWORD_end

    CONSTANTS       shift and go to state 103


state 40

    (190) uexpr -> BITNOT .

    INT_CONSTANTS   reduce using rule 190 (uexpr -> BITNOT .)
    FLOAT_CONSTANTS reduce using rule 190 (uexpr -> BITNOT .)


state 41

    (151) expr1 -> expr3 .
    (152) expr3 -> expr3 . LOGICALOR expr4

    KEYWORD_while   reduce using rule 151 (expr1 -> expr3 .)
    KEYWORD_until   reduce using rule 151 (expr1 -> expr3 .)
    DELIM           reduce using rule 151 (expr1 -> expr3 .)
    newline         reduce using rule 151 (expr1 -> expr3 .)
    KEYWORD_end     reduce using rule 151 (expr1 -> expr3 .)
    $end            reduce using rule 151 (expr1 -> expr3 .)
    KEYWORD_elsif   reduce using rule 151 (expr1 -> expr3 .)
    KEYWORD_else    reduce using rule 151 (expr1 -> expr3 .)
    CLOSE_PAREN     reduce using rule 151 (expr1 -> expr3 .)
    COMMA           reduce using rule 151 (expr1 -> expr3 .)
    LOGICALOR       shift and go to state 104


state 42

    (80) stmt -> expr1 .

    KEYWORD_while   reduce using rule 80 (stmt -> expr1 .)
    KEYWORD_until   reduce using rule 80 (stmt -> expr1 .)
    DELIM           reduce using rule 80 (stmt -> expr1 .)
    newline         reduce using rule 80 (stmt -> expr1 .)
    KEYWORD_end     reduce using rule 80 (stmt -> expr1 .)
    $end            reduce using rule 80 (stmt -> expr1 .)
    KEYWORD_elsif   reduce using rule 80 (stmt -> expr1 .)
    KEYWORD_else    reduce using rule 80 (stmt -> expr1 .)


state 43

    (156) expr5 -> expr6 . DOUBLEEQUAL expr6
    (157) expr5 -> expr6 . NOTEQUAL expr6
    (158) expr5 -> expr6 .

    DOUBLEEQUAL     shift and go to state 106
    NOTEQUAL        shift and go to state 105
    LOGICALAND      reduce using rule 158 (expr5 -> expr6 .)
    LOGICALOR       reduce using rule 158 (expr5 -> expr6 .)
    KEYWORD_while   reduce using rule 158 (expr5 -> expr6 .)
    KEYWORD_until   reduce using rule 158 (expr5 -> expr6 .)
    DELIM           reduce using rule 158 (expr5 -> expr6 .)
    newline         reduce using rule 158 (expr5 -> expr6 .)
    $end            reduce using rule 158 (expr5 -> expr6 .)
    KEYWORD_do      reduce using rule 158 (expr5 -> expr6 .)
    KEYWORD_then    reduce using rule 158 (expr5 -> expr6 .)
    CLOSE_PAREN     reduce using rule 158 (expr5 -> expr6 .)
    KEYWORD_end     reduce using rule 158 (expr5 -> expr6 .)
    KEYWORD_elsif   reduce using rule 158 (expr5 -> expr6 .)
    KEYWORD_else    reduce using rule 158 (expr5 -> expr6 .)
    COMMA           reduce using rule 158 (expr5 -> expr6 .)


state 44

    (85) func_call_stmt -> fname . OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> fname . func_ret_arg
    (100) func_ret_arg -> . func_arg_expr
    (101) func_ret_arg -> . primary
    (102) func_ret_arg -> . func_ret_arg COMMA func_arg_expr
    (103) func_ret_arg -> . func_ret_arg COMMA primary
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary
    (143) primary -> . INT_CONSTANTS
    (144) primary -> . FLOAT_CONSTANTS
    (145) primary -> . STRING_CONSTANTS
    (146) primary -> . CHAR_CONSTANTS
    (147) primary -> . BOOLEAN_CONSTANTS
    (148) primary -> . CONSTANTS
    (149) primary -> . VARIABLES
    (150) primary -> . array
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET

    OPEN_PAREN      shift and go to state 113
    VARIABLES       shift and go to state 118
    CONSTANTS       shift and go to state 114
    INT_CONSTANTS   shift and go to state 108
    FLOAT_CONSTANTS shift and go to state 109
    STRING_CONSTANTS shift and go to state 112
    CHAR_CONSTANTS  shift and go to state 117
    BOOLEAN_CONSTANTS shift and go to state 107

    func_arg_expr                  shift and go to state 110
    primary                        shift and go to state 111
    func_ret_arg                   shift and go to state 115
    array                          shift and go to state 116

state 45

    (155) expr4 -> expr5 .

    LOGICALAND      reduce using rule 155 (expr4 -> expr5 .)
    LOGICALOR       reduce using rule 155 (expr4 -> expr5 .)
    KEYWORD_while   reduce using rule 155 (expr4 -> expr5 .)
    KEYWORD_until   reduce using rule 155 (expr4 -> expr5 .)
    DELIM           reduce using rule 155 (expr4 -> expr5 .)
    newline         reduce using rule 155 (expr4 -> expr5 .)
    $end            reduce using rule 155 (expr4 -> expr5 .)
    KEYWORD_end     reduce using rule 155 (expr4 -> expr5 .)
    KEYWORD_elsif   reduce using rule 155 (expr4 -> expr5 .)
    KEYWORD_else    reduce using rule 155 (expr4 -> expr5 .)
    KEYWORD_then    reduce using rule 155 (expr4 -> expr5 .)
    CLOSE_PAREN     reduce using rule 155 (expr4 -> expr5 .)
    COMMA           reduce using rule 155 (expr4 -> expr5 .)
    KEYWORD_do      reduce using rule 155 (expr4 -> expr5 .)


state 46

    (167) expr7 -> expr8 .
    (168) expr8 -> expr8 . BITAND expr9

    LESSEQUAL       reduce using rule 167 (expr7 -> expr8 .)
    LESS            reduce using rule 167 (expr7 -> expr8 .)
    GREATER         reduce using rule 167 (expr7 -> expr8 .)
    GREATEREQUAL    reduce using rule 167 (expr7 -> expr8 .)
    BITXOR          reduce using rule 167 (expr7 -> expr8 .)
    PIPE            reduce using rule 167 (expr7 -> expr8 .)
    DOUBLEEQUAL     reduce using rule 167 (expr7 -> expr8 .)
    NOTEQUAL        reduce using rule 167 (expr7 -> expr8 .)
    LOGICALAND      reduce using rule 167 (expr7 -> expr8 .)
    LOGICALOR       reduce using rule 167 (expr7 -> expr8 .)
    CLOSE_PAREN     reduce using rule 167 (expr7 -> expr8 .)
    KEYWORD_do      reduce using rule 167 (expr7 -> expr8 .)
    newline         reduce using rule 167 (expr7 -> expr8 .)
    KEYWORD_while   reduce using rule 167 (expr7 -> expr8 .)
    KEYWORD_until   reduce using rule 167 (expr7 -> expr8 .)
    DELIM           reduce using rule 167 (expr7 -> expr8 .)
    KEYWORD_end     reduce using rule 167 (expr7 -> expr8 .)
    KEYWORD_elsif   reduce using rule 167 (expr7 -> expr8 .)
    KEYWORD_else    reduce using rule 167 (expr7 -> expr8 .)
    KEYWORD_then    reduce using rule 167 (expr7 -> expr8 .)
    COMMA           reduce using rule 167 (expr7 -> expr8 .)
    $end            reduce using rule 167 (expr7 -> expr8 .)
    CLOSE_BRACKET   reduce using rule 167 (expr7 -> expr8 .)
    BITAND          shift and go to state 119


state 47

    (169) expr8 -> expr9 .
    (170) expr9 -> expr9 . SHIFTL expr10
    (171) expr9 -> expr9 . SHIFTR expr10

    BITAND          reduce using rule 169 (expr8 -> expr9 .)
    LESSEQUAL       reduce using rule 169 (expr8 -> expr9 .)
    LESS            reduce using rule 169 (expr8 -> expr9 .)
    GREATER         reduce using rule 169 (expr8 -> expr9 .)
    GREATEREQUAL    reduce using rule 169 (expr8 -> expr9 .)
    BITXOR          reduce using rule 169 (expr8 -> expr9 .)
    PIPE            reduce using rule 169 (expr8 -> expr9 .)
    DOUBLEEQUAL     reduce using rule 169 (expr8 -> expr9 .)
    NOTEQUAL        reduce using rule 169 (expr8 -> expr9 .)
    LOGICALAND      reduce using rule 169 (expr8 -> expr9 .)
    LOGICALOR       reduce using rule 169 (expr8 -> expr9 .)
    KEYWORD_do      reduce using rule 169 (expr8 -> expr9 .)
    newline         reduce using rule 169 (expr8 -> expr9 .)
    KEYWORD_while   reduce using rule 169 (expr8 -> expr9 .)
    KEYWORD_until   reduce using rule 169 (expr8 -> expr9 .)
    DELIM           reduce using rule 169 (expr8 -> expr9 .)
    KEYWORD_end     reduce using rule 169 (expr8 -> expr9 .)
    $end            reduce using rule 169 (expr8 -> expr9 .)
    KEYWORD_then    reduce using rule 169 (expr8 -> expr9 .)
    CLOSE_PAREN     reduce using rule 169 (expr8 -> expr9 .)
    KEYWORD_elsif   reduce using rule 169 (expr8 -> expr9 .)
    KEYWORD_else    reduce using rule 169 (expr8 -> expr9 .)
    COMMA           reduce using rule 169 (expr8 -> expr9 .)
    CLOSE_BRACKET   reduce using rule 169 (expr8 -> expr9 .)
    SHIFTL          shift and go to state 121
    SHIFTR          shift and go to state 120


state 48

    (89) loop_stmt -> KEYWORD_break .

    KEYWORD_while   reduce using rule 89 (loop_stmt -> KEYWORD_break .)
    KEYWORD_until   reduce using rule 89 (loop_stmt -> KEYWORD_break .)
    DELIM           reduce using rule 89 (loop_stmt -> KEYWORD_break .)
    newline         reduce using rule 89 (loop_stmt -> KEYWORD_break .)
    KEYWORD_end     reduce using rule 89 (loop_stmt -> KEYWORD_break .)
    $end            reduce using rule 89 (loop_stmt -> KEYWORD_break .)
    KEYWORD_elsif   reduce using rule 89 (loop_stmt -> KEYWORD_break .)
    KEYWORD_else    reduce using rule 89 (loop_stmt -> KEYWORD_break .)


state 49

    (83) stmt -> exit_stmt .

    KEYWORD_while   reduce using rule 83 (stmt -> exit_stmt .)
    KEYWORD_until   reduce using rule 83 (stmt -> exit_stmt .)
    DELIM           reduce using rule 83 (stmt -> exit_stmt .)
    newline         reduce using rule 83 (stmt -> exit_stmt .)
    KEYWORD_end     reduce using rule 83 (stmt -> exit_stmt .)
    $end            reduce using rule 83 (stmt -> exit_stmt .)
    KEYWORD_elsif   reduce using rule 83 (stmt -> exit_stmt .)
    KEYWORD_else    reduce using rule 83 (stmt -> exit_stmt .)


state 50

    (124) expr -> MLHS . EQUAL MRHS
    (87) func_call_stmt -> MLHS . EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> MLHS . EQUAL fname func_ret_arg
    (126) MLHS -> MLHS . COMMA mlhs

    EQUAL           shift and go to state 122
    COMMA           shift and go to state 123


state 51

    (1) program -> top_top_compstmt .

    $end            reduce using rule 1 (program -> top_top_compstmt .)


state 52

    (74) top_stmt -> KEYWORD_for . OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> KEYWORD_for . multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (112) multi_var -> . VARIABLES
    (113) multi_var -> . CONSTANTS
    (114) multi_var -> . array
    (115) multi_var -> . multi_var COMMA VARIABLES
    (116) multi_var -> . multi_var COMMA CONSTANTS
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET

    OPEN_PAREN      shift and go to state 124
    VARIABLES       shift and go to state 125
    CONSTANTS       shift and go to state 127

    multi_var                      shift and go to state 126
    array                          shift and go to state 128

state 53

    (184) expr13 -> VARIABLES .
    (186) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET

    MULTIPLY        reduce using rule 184 (expr13 -> VARIABLES .)
    DIV             reduce using rule 184 (expr13 -> VARIABLES .)
    MOD             reduce using rule 184 (expr13 -> VARIABLES .)
    PLUS            reduce using rule 184 (expr13 -> VARIABLES .)
    MINUS           reduce using rule 184 (expr13 -> VARIABLES .)
    SHIFTL          reduce using rule 184 (expr13 -> VARIABLES .)
    SHIFTR          reduce using rule 184 (expr13 -> VARIABLES .)
    BITAND          reduce using rule 184 (expr13 -> VARIABLES .)
    LESSEQUAL       reduce using rule 184 (expr13 -> VARIABLES .)
    LESS            reduce using rule 184 (expr13 -> VARIABLES .)
    GREATER         reduce using rule 184 (expr13 -> VARIABLES .)
    GREATEREQUAL    reduce using rule 184 (expr13 -> VARIABLES .)
    BITXOR          reduce using rule 184 (expr13 -> VARIABLES .)
    PIPE            reduce using rule 184 (expr13 -> VARIABLES .)
    DOUBLEEQUAL     reduce using rule 184 (expr13 -> VARIABLES .)
    NOTEQUAL        reduce using rule 184 (expr13 -> VARIABLES .)
    LOGICALAND      reduce using rule 184 (expr13 -> VARIABLES .)
    LOGICALOR       reduce using rule 184 (expr13 -> VARIABLES .)
    KEYWORD_while   reduce using rule 184 (expr13 -> VARIABLES .)
    KEYWORD_until   reduce using rule 184 (expr13 -> VARIABLES .)
    DELIM           reduce using rule 184 (expr13 -> VARIABLES .)
    newline         reduce using rule 184 (expr13 -> VARIABLES .)
    $end            reduce using rule 184 (expr13 -> VARIABLES .)
    KEYWORD_do      reduce using rule 184 (expr13 -> VARIABLES .)
    KEYWORD_then    reduce using rule 184 (expr13 -> VARIABLES .)
    CLOSE_PAREN     reduce using rule 184 (expr13 -> VARIABLES .)
    KEYWORD_end     reduce using rule 184 (expr13 -> VARIABLES .)
    KEYWORD_elsif   reduce using rule 184 (expr13 -> VARIABLES .)
    KEYWORD_else    reduce using rule 184 (expr13 -> VARIABLES .)
    COMMA           reduce using rule 184 (expr13 -> VARIABLES .)
    CLOSE_BRACKET   reduce using rule 184 (expr13 -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 85


state 54

    (68) top_stmt -> KEYWORD_while expr3 . opt_do gen_stmts opt_terms KEYWORD_end
    (152) expr3 -> expr3 . LOGICALOR expr4
    (110) opt_do -> . KEYWORD_do
    (111) opt_do -> . newline

    LOGICALOR       shift and go to state 104
    KEYWORD_do      shift and go to state 130
    newline         shift and go to state 129

    opt_do                         shift and go to state 131

state 55

    (185) expr13 -> array .

    MULTIPLY        reduce using rule 185 (expr13 -> array .)
    DIV             reduce using rule 185 (expr13 -> array .)
    MOD             reduce using rule 185 (expr13 -> array .)
    PLUS            reduce using rule 185 (expr13 -> array .)
    MINUS           reduce using rule 185 (expr13 -> array .)
    SHIFTL          reduce using rule 185 (expr13 -> array .)
    SHIFTR          reduce using rule 185 (expr13 -> array .)
    BITAND          reduce using rule 185 (expr13 -> array .)
    LESSEQUAL       reduce using rule 185 (expr13 -> array .)
    LESS            reduce using rule 185 (expr13 -> array .)
    GREATER         reduce using rule 185 (expr13 -> array .)
    GREATEREQUAL    reduce using rule 185 (expr13 -> array .)
    BITXOR          reduce using rule 185 (expr13 -> array .)
    PIPE            reduce using rule 185 (expr13 -> array .)
    DOUBLEEQUAL     reduce using rule 185 (expr13 -> array .)
    NOTEQUAL        reduce using rule 185 (expr13 -> array .)
    LOGICALAND      reduce using rule 185 (expr13 -> array .)
    LOGICALOR       reduce using rule 185 (expr13 -> array .)
    KEYWORD_while   reduce using rule 185 (expr13 -> array .)
    KEYWORD_until   reduce using rule 185 (expr13 -> array .)
    DELIM           reduce using rule 185 (expr13 -> array .)
    newline         reduce using rule 185 (expr13 -> array .)
    $end            reduce using rule 185 (expr13 -> array .)
    KEYWORD_do      reduce using rule 185 (expr13 -> array .)
    KEYWORD_then    reduce using rule 185 (expr13 -> array .)
    CLOSE_PAREN     reduce using rule 185 (expr13 -> array .)
    KEYWORD_end     reduce using rule 185 (expr13 -> array .)
    KEYWORD_elsif   reduce using rule 185 (expr13 -> array .)
    KEYWORD_else    reduce using rule 185 (expr13 -> array .)
    COMMA           reduce using rule 185 (expr13 -> array .)
    CLOSE_BRACKET   reduce using rule 185 (expr13 -> array .)


state 56

    (183) expr13 -> CONSTANTS .

    MULTIPLY        reduce using rule 183 (expr13 -> CONSTANTS .)
    DIV             reduce using rule 183 (expr13 -> CONSTANTS .)
    MOD             reduce using rule 183 (expr13 -> CONSTANTS .)
    PLUS            reduce using rule 183 (expr13 -> CONSTANTS .)
    MINUS           reduce using rule 183 (expr13 -> CONSTANTS .)
    SHIFTL          reduce using rule 183 (expr13 -> CONSTANTS .)
    SHIFTR          reduce using rule 183 (expr13 -> CONSTANTS .)
    BITAND          reduce using rule 183 (expr13 -> CONSTANTS .)
    LESSEQUAL       reduce using rule 183 (expr13 -> CONSTANTS .)
    LESS            reduce using rule 183 (expr13 -> CONSTANTS .)
    GREATER         reduce using rule 183 (expr13 -> CONSTANTS .)
    GREATEREQUAL    reduce using rule 183 (expr13 -> CONSTANTS .)
    BITXOR          reduce using rule 183 (expr13 -> CONSTANTS .)
    PIPE            reduce using rule 183 (expr13 -> CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 183 (expr13 -> CONSTANTS .)
    NOTEQUAL        reduce using rule 183 (expr13 -> CONSTANTS .)
    LOGICALAND      reduce using rule 183 (expr13 -> CONSTANTS .)
    LOGICALOR       reduce using rule 183 (expr13 -> CONSTANTS .)
    KEYWORD_while   reduce using rule 183 (expr13 -> CONSTANTS .)
    KEYWORD_until   reduce using rule 183 (expr13 -> CONSTANTS .)
    DELIM           reduce using rule 183 (expr13 -> CONSTANTS .)
    newline         reduce using rule 183 (expr13 -> CONSTANTS .)
    $end            reduce using rule 183 (expr13 -> CONSTANTS .)
    KEYWORD_do      reduce using rule 183 (expr13 -> CONSTANTS .)
    KEYWORD_then    reduce using rule 183 (expr13 -> CONSTANTS .)
    CLOSE_PAREN     reduce using rule 183 (expr13 -> CONSTANTS .)
    KEYWORD_end     reduce using rule 183 (expr13 -> CONSTANTS .)
    KEYWORD_elsif   reduce using rule 183 (expr13 -> CONSTANTS .)
    KEYWORD_else    reduce using rule 183 (expr13 -> CONSTANTS .)
    COMMA           reduce using rule 183 (expr13 -> CONSTANTS .)
    CLOSE_BRACKET   reduce using rule 183 (expr13 -> CONSTANTS .)


state 57

    (162) expr6 -> expr7 GREATEREQUAL . expr7
    (165) expr7 -> . expr7 BITXOR expr8
    (166) expr7 -> . expr7 PIPE expr8
    (167) expr7 -> . expr8
    (168) expr8 -> . expr8 BITAND expr9
    (169) expr8 -> . expr9
    (170) expr9 -> . expr9 SHIFTL expr10
    (171) expr9 -> . expr9 SHIFTR expr10
    (172) expr9 -> . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (198) none -> .

    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr10                         shift and go to state 14
    expr7                          shift and go to state 132
    expr13                         shift and go to state 16
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    array                          shift and go to state 55
    expr11                         shift and go to state 15

state 58

    (161) expr6 -> expr7 GREATER . expr7
    (165) expr7 -> . expr7 BITXOR expr8
    (166) expr7 -> . expr7 PIPE expr8
    (167) expr7 -> . expr8
    (168) expr8 -> . expr8 BITAND expr9
    (169) expr8 -> . expr9
    (170) expr9 -> . expr9 SHIFTL expr10
    (171) expr9 -> . expr9 SHIFTR expr10
    (172) expr9 -> . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (198) none -> .

    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr10                         shift and go to state 14
    expr7                          shift and go to state 133
    expr13                         shift and go to state 16
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    array                          shift and go to state 55
    expr11                         shift and go to state 15

state 59

    (160) expr6 -> expr7 LESS . expr7
    (165) expr7 -> . expr7 BITXOR expr8
    (166) expr7 -> . expr7 PIPE expr8
    (167) expr7 -> . expr8
    (168) expr8 -> . expr8 BITAND expr9
    (169) expr8 -> . expr9
    (170) expr9 -> . expr9 SHIFTL expr10
    (171) expr9 -> . expr9 SHIFTR expr10
    (172) expr9 -> . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (198) none -> .

    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr10                         shift and go to state 14
    expr7                          shift and go to state 134
    expr13                         shift and go to state 16
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    array                          shift and go to state 55
    expr11                         shift and go to state 15

state 60

    (166) expr7 -> expr7 PIPE . expr8
    (168) expr8 -> . expr8 BITAND expr9
    (169) expr8 -> . expr9
    (170) expr9 -> . expr9 SHIFTL expr10
    (171) expr9 -> . expr9 SHIFTR expr10
    (172) expr9 -> . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (198) none -> .

    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr10                         shift and go to state 14
    expr13                         shift and go to state 16
    expr8                          shift and go to state 135
    expr9                          shift and go to state 47
    array                          shift and go to state 55
    expr11                         shift and go to state 15

state 61

    (165) expr7 -> expr7 BITXOR . expr8
    (168) expr8 -> . expr8 BITAND expr9
    (169) expr8 -> . expr9
    (170) expr9 -> . expr9 SHIFTL expr10
    (171) expr9 -> . expr9 SHIFTR expr10
    (172) expr9 -> . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (198) none -> .

    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr10                         shift and go to state 14
    expr13                         shift and go to state 16
    expr8                          shift and go to state 136
    expr9                          shift and go to state 47
    array                          shift and go to state 55
    expr11                         shift and go to state 15

state 62

    (159) expr6 -> expr7 LESSEQUAL . expr7
    (165) expr7 -> . expr7 BITXOR expr8
    (166) expr7 -> . expr7 PIPE expr8
    (167) expr7 -> . expr8
    (168) expr8 -> . expr8 BITAND expr9
    (169) expr8 -> . expr9
    (170) expr9 -> . expr9 SHIFTL expr10
    (171) expr9 -> . expr9 SHIFTR expr10
    (172) expr9 -> . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (198) none -> .

    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr10                         shift and go to state 14
    expr7                          shift and go to state 137
    expr13                         shift and go to state 16
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    array                          shift and go to state 55
    expr11                         shift and go to state 15

state 63

    (154) expr4 -> expr4 LOGICALAND . expr5
    (156) expr5 -> . expr6 DOUBLEEQUAL expr6
    (157) expr5 -> . expr6 NOTEQUAL expr6
    (158) expr5 -> . expr6
    (159) expr6 -> . expr7 LESSEQUAL expr7
    (160) expr6 -> . expr7 LESS expr7
    (161) expr6 -> . expr7 GREATER expr7
    (162) expr6 -> . expr7 GREATEREQUAL expr7
    (163) expr6 -> . expr7
    (164) expr6 -> . BOOLEAN_CONSTANTS
    (165) expr7 -> . expr7 BITXOR expr8
    (166) expr7 -> . expr7 PIPE expr8
    (167) expr7 -> . expr8
    (168) expr8 -> . expr8 BITAND expr9
    (169) expr8 -> . expr9
    (170) expr9 -> . expr9 SHIFTL expr10
    (171) expr9 -> . expr9 SHIFTR expr10
    (172) expr9 -> . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (198) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr13                         shift and go to state 16
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    expr5                          shift and go to state 138
    expr10                         shift and go to state 14
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    array                          shift and go to state 55
    expr11                         shift and go to state 15

state 64

    (181) expr13 -> uexpr INT_CONSTANTS .

    MULTIPLY        reduce using rule 181 (expr13 -> uexpr INT_CONSTANTS .)
    DIV             reduce using rule 181 (expr13 -> uexpr INT_CONSTANTS .)
    MOD             reduce using rule 181 (expr13 -> uexpr INT_CONSTANTS .)
    PLUS            reduce using rule 181 (expr13 -> uexpr INT_CONSTANTS .)
    MINUS           reduce using rule 181 (expr13 -> uexpr INT_CONSTANTS .)
    SHIFTL          reduce using rule 181 (expr13 -> uexpr INT_CONSTANTS .)
    SHIFTR          reduce using rule 181 (expr13 -> uexpr INT_CONSTANTS .)
    BITAND          reduce using rule 181 (expr13 -> uexpr INT_CONSTANTS .)
    LESSEQUAL       reduce using rule 181 (expr13 -> uexpr INT_CONSTANTS .)
    LESS            reduce using rule 181 (expr13 -> uexpr INT_CONSTANTS .)
    GREATER         reduce using rule 181 (expr13 -> uexpr INT_CONSTANTS .)
    GREATEREQUAL    reduce using rule 181 (expr13 -> uexpr INT_CONSTANTS .)
    BITXOR          reduce using rule 181 (expr13 -> uexpr INT_CONSTANTS .)
    PIPE            reduce using rule 181 (expr13 -> uexpr INT_CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 181 (expr13 -> uexpr INT_CONSTANTS .)
    NOTEQUAL        reduce using rule 181 (expr13 -> uexpr INT_CONSTANTS .)
    LOGICALAND      reduce using rule 181 (expr13 -> uexpr INT_CONSTANTS .)
    LOGICALOR       reduce using rule 181 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_while   reduce using rule 181 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_until   reduce using rule 181 (expr13 -> uexpr INT_CONSTANTS .)
    DELIM           reduce using rule 181 (expr13 -> uexpr INT_CONSTANTS .)
    newline         reduce using rule 181 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 181 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_else    reduce using rule 181 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_end     reduce using rule 181 (expr13 -> uexpr INT_CONSTANTS .)
    $end            reduce using rule 181 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_do      reduce using rule 181 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_then    reduce using rule 181 (expr13 -> uexpr INT_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 181 (expr13 -> uexpr INT_CONSTANTS .)
    COMMA           reduce using rule 181 (expr13 -> uexpr INT_CONSTANTS .)
    CLOSE_BRACKET   reduce using rule 181 (expr13 -> uexpr INT_CONSTANTS .)


state 65

    (182) expr13 -> uexpr FLOAT_CONSTANTS .

    MULTIPLY        reduce using rule 182 (expr13 -> uexpr FLOAT_CONSTANTS .)
    DIV             reduce using rule 182 (expr13 -> uexpr FLOAT_CONSTANTS .)
    MOD             reduce using rule 182 (expr13 -> uexpr FLOAT_CONSTANTS .)
    PLUS            reduce using rule 182 (expr13 -> uexpr FLOAT_CONSTANTS .)
    MINUS           reduce using rule 182 (expr13 -> uexpr FLOAT_CONSTANTS .)
    SHIFTL          reduce using rule 182 (expr13 -> uexpr FLOAT_CONSTANTS .)
    SHIFTR          reduce using rule 182 (expr13 -> uexpr FLOAT_CONSTANTS .)
    BITAND          reduce using rule 182 (expr13 -> uexpr FLOAT_CONSTANTS .)
    LESSEQUAL       reduce using rule 182 (expr13 -> uexpr FLOAT_CONSTANTS .)
    LESS            reduce using rule 182 (expr13 -> uexpr FLOAT_CONSTANTS .)
    GREATER         reduce using rule 182 (expr13 -> uexpr FLOAT_CONSTANTS .)
    GREATEREQUAL    reduce using rule 182 (expr13 -> uexpr FLOAT_CONSTANTS .)
    BITXOR          reduce using rule 182 (expr13 -> uexpr FLOAT_CONSTANTS .)
    PIPE            reduce using rule 182 (expr13 -> uexpr FLOAT_CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 182 (expr13 -> uexpr FLOAT_CONSTANTS .)
    NOTEQUAL        reduce using rule 182 (expr13 -> uexpr FLOAT_CONSTANTS .)
    LOGICALAND      reduce using rule 182 (expr13 -> uexpr FLOAT_CONSTANTS .)
    LOGICALOR       reduce using rule 182 (expr13 -> uexpr FLOAT_CONSTANTS .)
    KEYWORD_while   reduce using rule 182 (expr13 -> uexpr FLOAT_CONSTANTS .)
    KEYWORD_until   reduce using rule 182 (expr13 -> uexpr FLOAT_CONSTANTS .)
    DELIM           reduce using rule 182 (expr13 -> uexpr FLOAT_CONSTANTS .)
    newline         reduce using rule 182 (expr13 -> uexpr FLOAT_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 182 (expr13 -> uexpr FLOAT_CONSTANTS .)
    KEYWORD_else    reduce using rule 182 (expr13 -> uexpr FLOAT_CONSTANTS .)
    KEYWORD_end     reduce using rule 182 (expr13 -> uexpr FLOAT_CONSTANTS .)
    $end            reduce using rule 182 (expr13 -> uexpr FLOAT_CONSTANTS .)
    KEYWORD_do      reduce using rule 182 (expr13 -> uexpr FLOAT_CONSTANTS .)
    KEYWORD_then    reduce using rule 182 (expr13 -> uexpr FLOAT_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 182 (expr13 -> uexpr FLOAT_CONSTANTS .)
    COMMA           reduce using rule 182 (expr13 -> uexpr FLOAT_CONSTANTS .)
    CLOSE_BRACKET   reduce using rule 182 (expr13 -> uexpr FLOAT_CONSTANTS .)


state 66

    (69) top_stmt -> top_stmt KEYWORD_while . expr3
    (152) expr3 -> . expr3 LOGICALOR expr4
    (153) expr3 -> . expr4
    (154) expr4 -> . expr4 LOGICALAND expr5
    (155) expr4 -> . expr5
    (156) expr5 -> . expr6 DOUBLEEQUAL expr6
    (157) expr5 -> . expr6 NOTEQUAL expr6
    (158) expr5 -> . expr6
    (159) expr6 -> . expr7 LESSEQUAL expr7
    (160) expr6 -> . expr7 LESS expr7
    (161) expr6 -> . expr7 GREATER expr7
    (162) expr6 -> . expr7 GREATEREQUAL expr7
    (163) expr6 -> . expr7
    (164) expr6 -> . BOOLEAN_CONSTANTS
    (165) expr7 -> . expr7 BITXOR expr8
    (166) expr7 -> . expr7 PIPE expr8
    (167) expr7 -> . expr8
    (168) expr8 -> . expr8 BITAND expr9
    (169) expr8 -> . expr9
    (170) expr9 -> . expr9 SHIFTL expr10
    (171) expr9 -> . expr9 SHIFTR expr10
    (172) expr9 -> . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (198) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr13                         shift and go to state 16
    expr3                          shift and go to state 139
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    expr4                          shift and go to state 8
    expr5                          shift and go to state 45
    expr10                         shift and go to state 14
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    array                          shift and go to state 55
    expr11                         shift and go to state 15

state 67

    (71) top_stmt -> top_stmt KEYWORD_until . expr3
    (152) expr3 -> . expr3 LOGICALOR expr4
    (153) expr3 -> . expr4
    (154) expr4 -> . expr4 LOGICALAND expr5
    (155) expr4 -> . expr5
    (156) expr5 -> . expr6 DOUBLEEQUAL expr6
    (157) expr5 -> . expr6 NOTEQUAL expr6
    (158) expr5 -> . expr6
    (159) expr6 -> . expr7 LESSEQUAL expr7
    (160) expr6 -> . expr7 LESS expr7
    (161) expr6 -> . expr7 GREATER expr7
    (162) expr6 -> . expr7 GREATEREQUAL expr7
    (163) expr6 -> . expr7
    (164) expr6 -> . BOOLEAN_CONSTANTS
    (165) expr7 -> . expr7 BITXOR expr8
    (166) expr7 -> . expr7 PIPE expr8
    (167) expr7 -> . expr8
    (168) expr8 -> . expr8 BITAND expr9
    (169) expr8 -> . expr9
    (170) expr9 -> . expr9 SHIFTL expr10
    (171) expr9 -> . expr9 SHIFTR expr10
    (172) expr9 -> . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (198) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr13                         shift and go to state 16
    expr3                          shift and go to state 140
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    expr4                          shift and go to state 8
    expr5                          shift and go to state 45
    expr10                         shift and go to state 14
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    array                          shift and go to state 55
    expr11                         shift and go to state 15

state 68

    (173) expr10 -> expr10 PLUS . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (198) none -> .

    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr11                         shift and go to state 141
    expr13                         shift and go to state 16
    array                          shift and go to state 55

state 69

    (174) expr10 -> expr10 MINUS . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (198) none -> .

    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr11                         shift and go to state 142
    expr13                         shift and go to state 16
    array                          shift and go to state 55

state 70

    (176) expr11 -> expr11 MULTIPLY . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (198) none -> .

    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr13                         shift and go to state 143
    array                          shift and go to state 55

state 71

    (177) expr11 -> expr11 DIV . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (198) none -> .

    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr13                         shift and go to state 144
    array                          shift and go to state 55

state 72

    (178) expr11 -> expr11 MOD . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (198) none -> .

    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr13                         shift and go to state 145
    array                          shift and go to state 55

state 73

    (54) fname -> CONSTANTS .

    OPEN_PAREN      reduce using rule 54 (fname -> CONSTANTS .)
    VARIABLES       reduce using rule 54 (fname -> CONSTANTS .)
    CONSTANTS       reduce using rule 54 (fname -> CONSTANTS .)
    newline         reduce using rule 54 (fname -> CONSTANTS .)


state 74

    (53) fname -> VARIABLES .

    OPEN_PAREN      reduce using rule 53 (fname -> VARIABLES .)
    VARIABLES       reduce using rule 53 (fname -> VARIABLES .)
    CONSTANTS       reduce using rule 53 (fname -> VARIABLES .)
    newline         reduce using rule 53 (fname -> VARIABLES .)


state 75

    (14) func_defn -> KEYWORD_def fname . OPEN_PAREN arguments CLOSE_PAREN func_stmts opt_terms KEYWORD_end
    (15) func_defn -> KEYWORD_def fname . OPEN_PAREN CLOSE_PAREN func_stmts opt_terms KEYWORD_end
    (16) func_defn -> KEYWORD_def fname . arguments func_stmts opt_terms KEYWORD_end
    (55) arguments -> . arguments COMMA VARIABLES
    (56) arguments -> . arguments COMMA CONSTANTS
    (57) arguments -> . arguments COMMA func_arg_expr
    (58) arguments -> . VARIABLES
    (59) arguments -> . CONSTANTS
    (60) arguments -> . func_arg_expr
    (61) arguments -> . newline
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary

    OPEN_PAREN      shift and go to state 149
    VARIABLES       shift and go to state 147
    CONSTANTS       shift and go to state 146
    newline         shift and go to state 148

    func_arg_expr                  shift and go to state 151
    arguments                      shift and go to state 150

state 76

    (11) statement -> CONSTANTS DOT . KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (12) statement -> CONSTANTS DOT . KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (13) statement -> CONSTANTS DOT . KEYWORD_new arguments

    KEYWORD_new     shift and go to state 152


state 77

    (194) terms -> term .

    DELIM           reduce using rule 194 (terms -> term .)
    newline         reduce using rule 194 (terms -> term .)
    SIGIL_DOUBLE_AT reduce using rule 194 (terms -> term .)
    KEYWORD_def     reduce using rule 194 (terms -> term .)
    KEYWORD_end     reduce using rule 194 (terms -> term .)
    KEYWORD_if      reduce using rule 194 (terms -> term .)
    KEYWORD_while   reduce using rule 194 (terms -> term .)
    KEYWORD_begin   reduce using rule 194 (terms -> term .)
    KEYWORD_until   reduce using rule 194 (terms -> term .)
    KEYWORD_for     reduce using rule 194 (terms -> term .)
    KEYWORD_puts    reduce using rule 194 (terms -> term .)
    KEYWORD_break   reduce using rule 194 (terms -> term .)
    KEYWORD_next    reduce using rule 194 (terms -> term .)
    KEYWORD_redo    reduce using rule 194 (terms -> term .)
    KEYWORD_exit    reduce using rule 194 (terms -> term .)
    VARIABLES       reduce using rule 194 (terms -> term .)
    CONSTANTS       reduce using rule 194 (terms -> term .)
    BOOLEAN_CONSTANTS reduce using rule 194 (terms -> term .)
    OPEN_PAREN      reduce using rule 194 (terms -> term .)
    PLUS            reduce using rule 194 (terms -> term .)
    MINUS           reduce using rule 194 (terms -> term .)
    BITNOT          reduce using rule 194 (terms -> term .)
    BITCOMP         reduce using rule 194 (terms -> term .)
    INT_CONSTANTS   reduce using rule 194 (terms -> term .)
    FLOAT_CONSTANTS reduce using rule 194 (terms -> term .)
    KEYWORD_return  reduce using rule 194 (terms -> term .)
    SIGIL_AT        reduce using rule 194 (terms -> term .)
    KEYWORD_elsif   reduce using rule 194 (terms -> term .)
    KEYWORD_else    reduce using rule 194 (terms -> term .)
    KEYWORD_class   reduce using rule 194 (terms -> term .)
    $end            reduce using rule 194 (terms -> term .)


state 78

    (4) statements -> statements terms . statement
    (193) opt_terms -> terms .
    (195) terms -> terms . term
    (5) statement -> . top_compstmt
    (6) statement -> . func_defn
    (7) statement -> . class_defn
    (8) statement -> . VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (9) statement -> . VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (10) statement -> . VARIABLES DOT VARIABLES arguments
    (11) statement -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (12) statement -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (13) statement -> . CONSTANTS DOT KEYWORD_new arguments
    (196) term -> . DELIM
    (197) term -> . newline
    (64) top_compstmt -> . top_stmts
    (14) func_defn -> . KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN func_stmts opt_terms KEYWORD_end
    (15) func_defn -> . KEYWORD_def fname OPEN_PAREN CLOSE_PAREN func_stmts opt_terms KEYWORD_end
    (16) func_defn -> . KEYWORD_def fname arguments func_stmts opt_terms KEYWORD_end
    (17) class_defn -> . KEYWORD_class CONSTANTS newline class_stmts opt_terms KEYWORD_end
    (65) top_stmts -> . top_stmt
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . MLHS EQUAL MRHS
    (151) expr1 -> . expr3
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . MLHS EQUAL fname func_ret_arg
    (125) MLHS -> . mlhs
    (126) MLHS -> . MLHS COMMA mlhs
    (152) expr3 -> . expr3 LOGICALOR expr4
    (153) expr3 -> . expr4
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (129) mlhs -> . VARIABLES
    (130) mlhs -> . CONSTANTS
    (131) mlhs -> . array
    (154) expr4 -> . expr4 LOGICALAND expr5
    (155) expr4 -> . expr5
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (156) expr5 -> . expr6 DOUBLEEQUAL expr6
    (157) expr5 -> . expr6 NOTEQUAL expr6
    (158) expr5 -> . expr6
    (159) expr6 -> . expr7 LESSEQUAL expr7
    (160) expr6 -> . expr7 LESS expr7
    (161) expr6 -> . expr7 GREATER expr7
    (162) expr6 -> . expr7 GREATEREQUAL expr7
    (163) expr6 -> . expr7
    (164) expr6 -> . BOOLEAN_CONSTANTS
    (165) expr7 -> . expr7 BITXOR expr8
    (166) expr7 -> . expr7 PIPE expr8
    (167) expr7 -> . expr8
    (168) expr8 -> . expr8 BITAND expr9
    (169) expr8 -> . expr9
    (170) expr9 -> . expr9 SHIFTL expr10
    (171) expr9 -> . expr9 SHIFTR expr10
    (172) expr9 -> . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP
    (198) none -> .

    $end            reduce using rule 193 (opt_terms -> terms .)
    VARIABLES       shift and go to state 28
    CONSTANTS       shift and go to state 22
    DELIM           shift and go to state 80
    newline         shift and go to state 79
    KEYWORD_def     shift and go to state 21
    KEYWORD_class   shift and go to state 39
    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 38
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 52
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 48
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)

    mlhs                           shift and go to state 2
    func_defn                      shift and go to state 37
    puts_stmt                      shift and go to state 18
    expr11                         shift and go to state 15
    expr13                         shift and go to state 16
    top_stmts                      shift and go to state 17
    array                          shift and go to state 26
    expr3                          shift and go to state 41
    expr1                          shift and go to state 42
    expr6                          shift and go to state 43
    fname                          shift and go to state 44
    expr5                          shift and go to state 45
    func_call_stmt                 shift and go to state 32
    expr7                          shift and go to state 7
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    expr4                          shift and go to state 8
    statement                      shift and go to state 154
    exit_stmt                      shift and go to state 49
    top_compstmt                   shift and go to state 19
    MLHS                           shift and go to state 50
    none                           shift and go to state 34
    stmt                           shift and go to state 20
    loop_stmt                      shift and go to state 9
    uexpr                          shift and go to state 10
    term                           shift and go to state 153
    expr                           shift and go to state 35
    class_defn                     shift and go to state 36
    expr10                         shift and go to state 14
    top_stmt                       shift and go to state 13

state 79

    (197) term -> newline .

    KEYWORD_return  reduce using rule 197 (term -> newline .)
    DELIM           reduce using rule 197 (term -> newline .)
    newline         reduce using rule 197 (term -> newline .)
    SIGIL_AT        reduce using rule 197 (term -> newline .)
    SIGIL_DOUBLE_AT reduce using rule 197 (term -> newline .)
    KEYWORD_puts    reduce using rule 197 (term -> newline .)
    KEYWORD_end     reduce using rule 197 (term -> newline .)
    KEYWORD_if      reduce using rule 197 (term -> newline .)
    KEYWORD_while   reduce using rule 197 (term -> newline .)
    KEYWORD_begin   reduce using rule 197 (term -> newline .)
    KEYWORD_until   reduce using rule 197 (term -> newline .)
    KEYWORD_for     reduce using rule 197 (term -> newline .)
    KEYWORD_break   reduce using rule 197 (term -> newline .)
    KEYWORD_next    reduce using rule 197 (term -> newline .)
    KEYWORD_redo    reduce using rule 197 (term -> newline .)
    KEYWORD_exit    reduce using rule 197 (term -> newline .)
    VARIABLES       reduce using rule 197 (term -> newline .)
    CONSTANTS       reduce using rule 197 (term -> newline .)
    BOOLEAN_CONSTANTS reduce using rule 197 (term -> newline .)
    OPEN_PAREN      reduce using rule 197 (term -> newline .)
    PLUS            reduce using rule 197 (term -> newline .)
    MINUS           reduce using rule 197 (term -> newline .)
    BITNOT          reduce using rule 197 (term -> newline .)
    BITCOMP         reduce using rule 197 (term -> newline .)
    INT_CONSTANTS   reduce using rule 197 (term -> newline .)
    FLOAT_CONSTANTS reduce using rule 197 (term -> newline .)
    KEYWORD_elsif   reduce using rule 197 (term -> newline .)
    KEYWORD_else    reduce using rule 197 (term -> newline .)
    KEYWORD_def     reduce using rule 197 (term -> newline .)
    KEYWORD_class   reduce using rule 197 (term -> newline .)
    $end            reduce using rule 197 (term -> newline .)


state 80

    (196) term -> DELIM .

    KEYWORD_return  reduce using rule 196 (term -> DELIM .)
    DELIM           reduce using rule 196 (term -> DELIM .)
    newline         reduce using rule 196 (term -> DELIM .)
    SIGIL_AT        reduce using rule 196 (term -> DELIM .)
    SIGIL_DOUBLE_AT reduce using rule 196 (term -> DELIM .)
    KEYWORD_puts    reduce using rule 196 (term -> DELIM .)
    KEYWORD_end     reduce using rule 196 (term -> DELIM .)
    KEYWORD_if      reduce using rule 196 (term -> DELIM .)
    KEYWORD_while   reduce using rule 196 (term -> DELIM .)
    KEYWORD_begin   reduce using rule 196 (term -> DELIM .)
    KEYWORD_until   reduce using rule 196 (term -> DELIM .)
    KEYWORD_for     reduce using rule 196 (term -> DELIM .)
    KEYWORD_break   reduce using rule 196 (term -> DELIM .)
    KEYWORD_next    reduce using rule 196 (term -> DELIM .)
    KEYWORD_redo    reduce using rule 196 (term -> DELIM .)
    KEYWORD_exit    reduce using rule 196 (term -> DELIM .)
    VARIABLES       reduce using rule 196 (term -> DELIM .)
    CONSTANTS       reduce using rule 196 (term -> DELIM .)
    BOOLEAN_CONSTANTS reduce using rule 196 (term -> DELIM .)
    OPEN_PAREN      reduce using rule 196 (term -> DELIM .)
    PLUS            reduce using rule 196 (term -> DELIM .)
    MINUS           reduce using rule 196 (term -> DELIM .)
    BITNOT          reduce using rule 196 (term -> DELIM .)
    BITCOMP         reduce using rule 196 (term -> DELIM .)
    INT_CONSTANTS   reduce using rule 196 (term -> DELIM .)
    FLOAT_CONSTANTS reduce using rule 196 (term -> DELIM .)
    KEYWORD_elsif   reduce using rule 196 (term -> DELIM .)
    KEYWORD_else    reduce using rule 196 (term -> DELIM .)
    KEYWORD_def     reduce using rule 196 (term -> DELIM .)
    KEYWORD_class   reduce using rule 196 (term -> DELIM .)
    $end            reduce using rule 196 (term -> DELIM .)


state 81

    (192) opt_terms -> none .

    KEYWORD_end     reduce using rule 192 (opt_terms -> none .)
    KEYWORD_elsif   reduce using rule 192 (opt_terms -> none .)
    KEYWORD_else    reduce using rule 192 (opt_terms -> none .)
    $end            reduce using rule 192 (opt_terms -> none .)


state 82

    (2) top_top_compstmt -> statements opt_terms .

    $end            reduce using rule 2 (top_top_compstmt -> statements opt_terms .)


state 83

    (72) top_stmt -> KEYWORD_until expr3 . opt_do gen_stmts opt_terms KEYWORD_end
    (152) expr3 -> expr3 . LOGICALOR expr4
    (110) opt_do -> . KEYWORD_do
    (111) opt_do -> . newline

    LOGICALOR       shift and go to state 104
    KEYWORD_do      shift and go to state 130
    newline         shift and go to state 129

    opt_do                         shift and go to state 155

state 84

    (67) top_stmt -> KEYWORD_if expr3 . opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (152) expr3 -> expr3 . LOGICALOR expr4
    (108) opt_then -> . KEYWORD_then
    (109) opt_then -> . newline

    LOGICALOR       shift and go to state 104
    KEYWORD_then    shift and go to state 157
    newline         shift and go to state 156

    opt_then                       shift and go to state 158

state 85

    (186) array -> VARIABLES OPEN_BRACKET . expr7 CLOSE_BRACKET
    (165) expr7 -> . expr7 BITXOR expr8
    (166) expr7 -> . expr7 PIPE expr8
    (167) expr7 -> . expr8
    (168) expr8 -> . expr8 BITAND expr9
    (169) expr8 -> . expr9
    (170) expr9 -> . expr9 SHIFTL expr10
    (171) expr9 -> . expr9 SHIFTR expr10
    (172) expr9 -> . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (198) none -> .

    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr10                         shift and go to state 14
    expr7                          shift and go to state 159
    expr13                         shift and go to state 16
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    array                          shift and go to state 55
    expr11                         shift and go to state 15

state 86

    (8) statement -> VARIABLES DOT . VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (9) statement -> VARIABLES DOT . VARIABLES OPEN_PAREN CLOSE_PAREN
    (10) statement -> VARIABLES DOT . VARIABLES arguments

    VARIABLES       shift and go to state 160


state 87

    (180) expr13 -> OPEN_PAREN expr1 . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 161


state 88

    (133) mrhs -> str_expr .

    KEYWORD_while   reduce using rule 133 (mrhs -> str_expr .)
    KEYWORD_until   reduce using rule 133 (mrhs -> str_expr .)
    DELIM           reduce using rule 133 (mrhs -> str_expr .)
    newline         reduce using rule 133 (mrhs -> str_expr .)
    $end            reduce using rule 133 (mrhs -> str_expr .)
    KEYWORD_end     reduce using rule 133 (mrhs -> str_expr .)
    KEYWORD_elsif   reduce using rule 133 (mrhs -> str_expr .)
    KEYWORD_else    reduce using rule 133 (mrhs -> str_expr .)
    COMMA           reduce using rule 133 (mrhs -> str_expr .)


state 89

    (136) mrhs -> VARIABLES . DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (137) mrhs -> VARIABLES . DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (138) mrhs -> VARIABLES . DOT VARIABLES
    (129) mlhs -> VARIABLES .
    (186) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET
    (184) expr13 -> VARIABLES .

    DOT             shift and go to state 162
    EQUAL           reduce using rule 129 (mlhs -> VARIABLES .)
    COMMA           reduce using rule 129 (mlhs -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 85
    MULTIPLY        reduce using rule 184 (expr13 -> VARIABLES .)
    DIV             reduce using rule 184 (expr13 -> VARIABLES .)
    MOD             reduce using rule 184 (expr13 -> VARIABLES .)
    PLUS            reduce using rule 184 (expr13 -> VARIABLES .)
    MINUS           reduce using rule 184 (expr13 -> VARIABLES .)
    SHIFTL          reduce using rule 184 (expr13 -> VARIABLES .)
    SHIFTR          reduce using rule 184 (expr13 -> VARIABLES .)
    BITAND          reduce using rule 184 (expr13 -> VARIABLES .)
    LESSEQUAL       reduce using rule 184 (expr13 -> VARIABLES .)
    LESS            reduce using rule 184 (expr13 -> VARIABLES .)
    GREATER         reduce using rule 184 (expr13 -> VARIABLES .)
    GREATEREQUAL    reduce using rule 184 (expr13 -> VARIABLES .)
    BITXOR          reduce using rule 184 (expr13 -> VARIABLES .)
    PIPE            reduce using rule 184 (expr13 -> VARIABLES .)
    DOUBLEEQUAL     reduce using rule 184 (expr13 -> VARIABLES .)
    NOTEQUAL        reduce using rule 184 (expr13 -> VARIABLES .)
    LOGICALAND      reduce using rule 184 (expr13 -> VARIABLES .)
    LOGICALOR       reduce using rule 184 (expr13 -> VARIABLES .)
    KEYWORD_while   reduce using rule 184 (expr13 -> VARIABLES .)
    KEYWORD_until   reduce using rule 184 (expr13 -> VARIABLES .)
    DELIM           reduce using rule 184 (expr13 -> VARIABLES .)
    newline         reduce using rule 184 (expr13 -> VARIABLES .)
    $end            reduce using rule 184 (expr13 -> VARIABLES .)
    KEYWORD_end     reduce using rule 184 (expr13 -> VARIABLES .)
    KEYWORD_elsif   reduce using rule 184 (expr13 -> VARIABLES .)
    KEYWORD_else    reduce using rule 184 (expr13 -> VARIABLES .)


state 90

    (135) mrhs -> OPEN_BRACKET . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 163


state 91

    (132) mrhs -> expr1 .

    KEYWORD_while   reduce using rule 132 (mrhs -> expr1 .)
    KEYWORD_until   reduce using rule 132 (mrhs -> expr1 .)
    DELIM           reduce using rule 132 (mrhs -> expr1 .)
    newline         reduce using rule 132 (mrhs -> expr1 .)
    $end            reduce using rule 132 (mrhs -> expr1 .)
    KEYWORD_end     reduce using rule 132 (mrhs -> expr1 .)
    KEYWORD_elsif   reduce using rule 132 (mrhs -> expr1 .)
    KEYWORD_else    reduce using rule 132 (mrhs -> expr1 .)
    COMMA           reduce using rule 132 (mrhs -> expr1 .)


state 92

    (134) mrhs -> KEYWORD_gets .

    KEYWORD_while   reduce using rule 134 (mrhs -> KEYWORD_gets .)
    KEYWORD_until   reduce using rule 134 (mrhs -> KEYWORD_gets .)
    DELIM           reduce using rule 134 (mrhs -> KEYWORD_gets .)
    newline         reduce using rule 134 (mrhs -> KEYWORD_gets .)
    $end            reduce using rule 134 (mrhs -> KEYWORD_gets .)
    KEYWORD_end     reduce using rule 134 (mrhs -> KEYWORD_gets .)
    KEYWORD_elsif   reduce using rule 134 (mrhs -> KEYWORD_gets .)
    KEYWORD_else    reduce using rule 134 (mrhs -> KEYWORD_gets .)
    COMMA           reduce using rule 134 (mrhs -> KEYWORD_gets .)


state 93

    (124) expr -> MLHS . EQUAL MRHS
    (126) MLHS -> MLHS . COMMA mlhs

    EQUAL           shift and go to state 164
    COMMA           shift and go to state 123


state 94

    (93) puts_stmt -> KEYWORD_puts mrhs .

    KEYWORD_while   reduce using rule 93 (puts_stmt -> KEYWORD_puts mrhs .)
    KEYWORD_until   reduce using rule 93 (puts_stmt -> KEYWORD_puts mrhs .)
    DELIM           reduce using rule 93 (puts_stmt -> KEYWORD_puts mrhs .)
    newline         reduce using rule 93 (puts_stmt -> KEYWORD_puts mrhs .)
    $end            reduce using rule 93 (puts_stmt -> KEYWORD_puts mrhs .)
    KEYWORD_end     reduce using rule 93 (puts_stmt -> KEYWORD_puts mrhs .)
    KEYWORD_elsif   reduce using rule 93 (puts_stmt -> KEYWORD_puts mrhs .)
    KEYWORD_else    reduce using rule 93 (puts_stmt -> KEYWORD_puts mrhs .)


state 95

    (94) puts_stmt -> KEYWORD_puts expr .

    KEYWORD_while   reduce using rule 94 (puts_stmt -> KEYWORD_puts expr .)
    KEYWORD_until   reduce using rule 94 (puts_stmt -> KEYWORD_puts expr .)
    DELIM           reduce using rule 94 (puts_stmt -> KEYWORD_puts expr .)
    newline         reduce using rule 94 (puts_stmt -> KEYWORD_puts expr .)
    $end            reduce using rule 94 (puts_stmt -> KEYWORD_puts expr .)
    KEYWORD_end     reduce using rule 94 (puts_stmt -> KEYWORD_puts expr .)
    KEYWORD_elsif   reduce using rule 94 (puts_stmt -> KEYWORD_puts expr .)
    KEYWORD_else    reduce using rule 94 (puts_stmt -> KEYWORD_puts expr .)


state 96

    (142) str_expr -> STRING_CONSTANTS .

    COMMA           reduce using rule 142 (str_expr -> STRING_CONSTANTS .)
    KEYWORD_while   reduce using rule 142 (str_expr -> STRING_CONSTANTS .)
    KEYWORD_until   reduce using rule 142 (str_expr -> STRING_CONSTANTS .)
    DELIM           reduce using rule 142 (str_expr -> STRING_CONSTANTS .)
    newline         reduce using rule 142 (str_expr -> STRING_CONSTANTS .)
    $end            reduce using rule 142 (str_expr -> STRING_CONSTANTS .)
    KEYWORD_end     reduce using rule 142 (str_expr -> STRING_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 142 (str_expr -> STRING_CONSTANTS .)
    KEYWORD_else    reduce using rule 142 (str_expr -> STRING_CONSTANTS .)


state 97

    (139) mrhs -> CONSTANTS . DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (140) mrhs -> CONSTANTS . DOT KEYWORD_new
    (141) mrhs -> CONSTANTS . DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (130) mlhs -> CONSTANTS .
    (183) expr13 -> CONSTANTS .

    DOT             shift and go to state 165
    EQUAL           reduce using rule 130 (mlhs -> CONSTANTS .)
    COMMA           reduce using rule 130 (mlhs -> CONSTANTS .)
    MULTIPLY        reduce using rule 183 (expr13 -> CONSTANTS .)
    DIV             reduce using rule 183 (expr13 -> CONSTANTS .)
    MOD             reduce using rule 183 (expr13 -> CONSTANTS .)
    PLUS            reduce using rule 183 (expr13 -> CONSTANTS .)
    MINUS           reduce using rule 183 (expr13 -> CONSTANTS .)
    SHIFTL          reduce using rule 183 (expr13 -> CONSTANTS .)
    SHIFTR          reduce using rule 183 (expr13 -> CONSTANTS .)
    BITAND          reduce using rule 183 (expr13 -> CONSTANTS .)
    LESSEQUAL       reduce using rule 183 (expr13 -> CONSTANTS .)
    LESS            reduce using rule 183 (expr13 -> CONSTANTS .)
    GREATER         reduce using rule 183 (expr13 -> CONSTANTS .)
    GREATEREQUAL    reduce using rule 183 (expr13 -> CONSTANTS .)
    BITXOR          reduce using rule 183 (expr13 -> CONSTANTS .)
    PIPE            reduce using rule 183 (expr13 -> CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 183 (expr13 -> CONSTANTS .)
    NOTEQUAL        reduce using rule 183 (expr13 -> CONSTANTS .)
    LOGICALAND      reduce using rule 183 (expr13 -> CONSTANTS .)
    LOGICALOR       reduce using rule 183 (expr13 -> CONSTANTS .)
    KEYWORD_while   reduce using rule 183 (expr13 -> CONSTANTS .)
    KEYWORD_until   reduce using rule 183 (expr13 -> CONSTANTS .)
    DELIM           reduce using rule 183 (expr13 -> CONSTANTS .)
    newline         reduce using rule 183 (expr13 -> CONSTANTS .)
    $end            reduce using rule 183 (expr13 -> CONSTANTS .)
    KEYWORD_end     reduce using rule 183 (expr13 -> CONSTANTS .)
    KEYWORD_elsif   reduce using rule 183 (expr13 -> CONSTANTS .)
    KEYWORD_else    reduce using rule 183 (expr13 -> CONSTANTS .)


state 98

    (53) fname -> VARIABLES .
    (129) mlhs -> VARIABLES .
    (186) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET
    (184) expr13 -> VARIABLES .

    OPEN_PAREN      reduce using rule 53 (fname -> VARIABLES .)
    VARIABLES       reduce using rule 53 (fname -> VARIABLES .)
    CONSTANTS       reduce using rule 53 (fname -> VARIABLES .)
    INT_CONSTANTS   reduce using rule 53 (fname -> VARIABLES .)
    FLOAT_CONSTANTS reduce using rule 53 (fname -> VARIABLES .)
    STRING_CONSTANTS reduce using rule 53 (fname -> VARIABLES .)
    CHAR_CONSTANTS  reduce using rule 53 (fname -> VARIABLES .)
    BOOLEAN_CONSTANTS reduce using rule 53 (fname -> VARIABLES .)
    EQUAL           reduce using rule 129 (mlhs -> VARIABLES .)
    COMMA           reduce using rule 129 (mlhs -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 85
    MULTIPLY        reduce using rule 184 (expr13 -> VARIABLES .)
    DIV             reduce using rule 184 (expr13 -> VARIABLES .)
    MOD             reduce using rule 184 (expr13 -> VARIABLES .)
    PLUS            reduce using rule 184 (expr13 -> VARIABLES .)
    MINUS           reduce using rule 184 (expr13 -> VARIABLES .)
    SHIFTL          reduce using rule 184 (expr13 -> VARIABLES .)
    SHIFTR          reduce using rule 184 (expr13 -> VARIABLES .)
    BITAND          reduce using rule 184 (expr13 -> VARIABLES .)
    LESSEQUAL       reduce using rule 184 (expr13 -> VARIABLES .)
    LESS            reduce using rule 184 (expr13 -> VARIABLES .)
    GREATER         reduce using rule 184 (expr13 -> VARIABLES .)
    GREATEREQUAL    reduce using rule 184 (expr13 -> VARIABLES .)
    BITXOR          reduce using rule 184 (expr13 -> VARIABLES .)
    PIPE            reduce using rule 184 (expr13 -> VARIABLES .)
    DOUBLEEQUAL     reduce using rule 184 (expr13 -> VARIABLES .)
    NOTEQUAL        reduce using rule 184 (expr13 -> VARIABLES .)
    LOGICALAND      reduce using rule 184 (expr13 -> VARIABLES .)
    LOGICALOR       reduce using rule 184 (expr13 -> VARIABLES .)
    KEYWORD_while   reduce using rule 184 (expr13 -> VARIABLES .)
    KEYWORD_until   reduce using rule 184 (expr13 -> VARIABLES .)
    DELIM           reduce using rule 184 (expr13 -> VARIABLES .)
    newline         reduce using rule 184 (expr13 -> VARIABLES .)
    KEYWORD_elsif   reduce using rule 184 (expr13 -> VARIABLES .)
    KEYWORD_else    reduce using rule 184 (expr13 -> VARIABLES .)
    KEYWORD_end     reduce using rule 184 (expr13 -> VARIABLES .)


state 99

    (78) gen_stmts -> none .
    (187) uexpr -> none .

    DELIM           reduce using rule 78 (gen_stmts -> none .)
    newline         reduce using rule 78 (gen_stmts -> none .)
    KEYWORD_end     reduce using rule 78 (gen_stmts -> none .)
    KEYWORD_elsif   reduce using rule 78 (gen_stmts -> none .)
    KEYWORD_else    reduce using rule 78 (gen_stmts -> none .)
    INT_CONSTANTS   reduce using rule 187 (uexpr -> none .)
    FLOAT_CONSTANTS reduce using rule 187 (uexpr -> none .)


state 100

    (70) top_stmt -> KEYWORD_begin gen_stmts . opt_terms KEYWORD_end KEYWORD_while expr3
    (73) top_stmt -> KEYWORD_begin gen_stmts . opt_terms KEYWORD_end KEYWORD_until expr3
    (77) gen_stmts -> gen_stmts . terms top_stmt
    (192) opt_terms -> . none
    (193) opt_terms -> . terms
    (194) terms -> . term
    (195) terms -> . terms term
    (198) none -> .
    (196) term -> . DELIM
    (197) term -> . newline

    KEYWORD_end     reduce using rule 198 (none -> .)
    DELIM           shift and go to state 80
    newline         shift and go to state 79

    none                           shift and go to state 81
    terms                          shift and go to state 166
    term                           shift and go to state 77
    opt_terms                      shift and go to state 167

state 101

    (54) fname -> CONSTANTS .
    (130) mlhs -> CONSTANTS .
    (183) expr13 -> CONSTANTS .

    OPEN_PAREN      reduce using rule 54 (fname -> CONSTANTS .)
    VARIABLES       reduce using rule 54 (fname -> CONSTANTS .)
    CONSTANTS       reduce using rule 54 (fname -> CONSTANTS .)
    INT_CONSTANTS   reduce using rule 54 (fname -> CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 54 (fname -> CONSTANTS .)
    STRING_CONSTANTS reduce using rule 54 (fname -> CONSTANTS .)
    CHAR_CONSTANTS  reduce using rule 54 (fname -> CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 54 (fname -> CONSTANTS .)
    EQUAL           reduce using rule 130 (mlhs -> CONSTANTS .)
    COMMA           reduce using rule 130 (mlhs -> CONSTANTS .)
    MULTIPLY        reduce using rule 183 (expr13 -> CONSTANTS .)
    DIV             reduce using rule 183 (expr13 -> CONSTANTS .)
    MOD             reduce using rule 183 (expr13 -> CONSTANTS .)
    PLUS            reduce using rule 183 (expr13 -> CONSTANTS .)
    MINUS           reduce using rule 183 (expr13 -> CONSTANTS .)
    SHIFTL          reduce using rule 183 (expr13 -> CONSTANTS .)
    SHIFTR          reduce using rule 183 (expr13 -> CONSTANTS .)
    BITAND          reduce using rule 183 (expr13 -> CONSTANTS .)
    LESSEQUAL       reduce using rule 183 (expr13 -> CONSTANTS .)
    LESS            reduce using rule 183 (expr13 -> CONSTANTS .)
    GREATER         reduce using rule 183 (expr13 -> CONSTANTS .)
    GREATEREQUAL    reduce using rule 183 (expr13 -> CONSTANTS .)
    BITXOR          reduce using rule 183 (expr13 -> CONSTANTS .)
    PIPE            reduce using rule 183 (expr13 -> CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 183 (expr13 -> CONSTANTS .)
    NOTEQUAL        reduce using rule 183 (expr13 -> CONSTANTS .)
    LOGICALAND      reduce using rule 183 (expr13 -> CONSTANTS .)
    LOGICALOR       reduce using rule 183 (expr13 -> CONSTANTS .)
    KEYWORD_while   reduce using rule 183 (expr13 -> CONSTANTS .)
    KEYWORD_until   reduce using rule 183 (expr13 -> CONSTANTS .)
    DELIM           reduce using rule 183 (expr13 -> CONSTANTS .)
    newline         reduce using rule 183 (expr13 -> CONSTANTS .)
    KEYWORD_elsif   reduce using rule 183 (expr13 -> CONSTANTS .)
    KEYWORD_else    reduce using rule 183 (expr13 -> CONSTANTS .)
    KEYWORD_end     reduce using rule 183 (expr13 -> CONSTANTS .)


state 102

    (76) gen_stmts -> top_stmt .
    (69) top_stmt -> top_stmt . KEYWORD_while expr3
    (71) top_stmt -> top_stmt . KEYWORD_until expr3

    DELIM           reduce using rule 76 (gen_stmts -> top_stmt .)
    newline         reduce using rule 76 (gen_stmts -> top_stmt .)
    KEYWORD_end     reduce using rule 76 (gen_stmts -> top_stmt .)
    KEYWORD_elsif   reduce using rule 76 (gen_stmts -> top_stmt .)
    KEYWORD_else    reduce using rule 76 (gen_stmts -> top_stmt .)
    KEYWORD_while   shift and go to state 66
    KEYWORD_until   shift and go to state 67


state 103

    (17) class_defn -> KEYWORD_class CONSTANTS . newline class_stmts opt_terms KEYWORD_end

    newline         shift and go to state 168


state 104

    (152) expr3 -> expr3 LOGICALOR . expr4
    (154) expr4 -> . expr4 LOGICALAND expr5
    (155) expr4 -> . expr5
    (156) expr5 -> . expr6 DOUBLEEQUAL expr6
    (157) expr5 -> . expr6 NOTEQUAL expr6
    (158) expr5 -> . expr6
    (159) expr6 -> . expr7 LESSEQUAL expr7
    (160) expr6 -> . expr7 LESS expr7
    (161) expr6 -> . expr7 GREATER expr7
    (162) expr6 -> . expr7 GREATEREQUAL expr7
    (163) expr6 -> . expr7
    (164) expr6 -> . BOOLEAN_CONSTANTS
    (165) expr7 -> . expr7 BITXOR expr8
    (166) expr7 -> . expr7 PIPE expr8
    (167) expr7 -> . expr8
    (168) expr8 -> . expr8 BITAND expr9
    (169) expr8 -> . expr9
    (170) expr9 -> . expr9 SHIFTL expr10
    (171) expr9 -> . expr9 SHIFTR expr10
    (172) expr9 -> . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (198) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr13                         shift and go to state 16
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    expr4                          shift and go to state 169
    expr5                          shift and go to state 45
    expr10                         shift and go to state 14
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    array                          shift and go to state 55
    expr11                         shift and go to state 15

state 105

    (157) expr5 -> expr6 NOTEQUAL . expr6
    (159) expr6 -> . expr7 LESSEQUAL expr7
    (160) expr6 -> . expr7 LESS expr7
    (161) expr6 -> . expr7 GREATER expr7
    (162) expr6 -> . expr7 GREATEREQUAL expr7
    (163) expr6 -> . expr7
    (164) expr6 -> . BOOLEAN_CONSTANTS
    (165) expr7 -> . expr7 BITXOR expr8
    (166) expr7 -> . expr7 PIPE expr8
    (167) expr7 -> . expr8
    (168) expr8 -> . expr8 BITAND expr9
    (169) expr8 -> . expr9
    (170) expr9 -> . expr9 SHIFTL expr10
    (171) expr9 -> . expr9 SHIFTR expr10
    (172) expr9 -> . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (198) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr10                         shift and go to state 14
    expr7                          shift and go to state 7
    expr13                         shift and go to state 16
    expr6                          shift and go to state 170
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    array                          shift and go to state 55
    expr11                         shift and go to state 15

state 106

    (156) expr5 -> expr6 DOUBLEEQUAL . expr6
    (159) expr6 -> . expr7 LESSEQUAL expr7
    (160) expr6 -> . expr7 LESS expr7
    (161) expr6 -> . expr7 GREATER expr7
    (162) expr6 -> . expr7 GREATEREQUAL expr7
    (163) expr6 -> . expr7
    (164) expr6 -> . BOOLEAN_CONSTANTS
    (165) expr7 -> . expr7 BITXOR expr8
    (166) expr7 -> . expr7 PIPE expr8
    (167) expr7 -> . expr8
    (168) expr8 -> . expr8 BITAND expr9
    (169) expr8 -> . expr9
    (170) expr9 -> . expr9 SHIFTL expr10
    (171) expr9 -> . expr9 SHIFTR expr10
    (172) expr9 -> . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (198) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr10                         shift and go to state 14
    expr7                          shift and go to state 7
    expr13                         shift and go to state 16
    expr6                          shift and go to state 171
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    array                          shift and go to state 55
    expr11                         shift and go to state 15

state 107

    (147) primary -> BOOLEAN_CONSTANTS .

    COMMA           reduce using rule 147 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_while   reduce using rule 147 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_until   reduce using rule 147 (primary -> BOOLEAN_CONSTANTS .)
    DELIM           reduce using rule 147 (primary -> BOOLEAN_CONSTANTS .)
    newline         reduce using rule 147 (primary -> BOOLEAN_CONSTANTS .)
    $end            reduce using rule 147 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_end     reduce using rule 147 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 147 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_else    reduce using rule 147 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_return  reduce using rule 147 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_if      reduce using rule 147 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_begin   reduce using rule 147 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_for     reduce using rule 147 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_puts    reduce using rule 147 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_break   reduce using rule 147 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_next    reduce using rule 147 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_redo    reduce using rule 147 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_exit    reduce using rule 147 (primary -> BOOLEAN_CONSTANTS .)
    VARIABLES       reduce using rule 147 (primary -> BOOLEAN_CONSTANTS .)
    CONSTANTS       reduce using rule 147 (primary -> BOOLEAN_CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 147 (primary -> BOOLEAN_CONSTANTS .)
    OPEN_PAREN      reduce using rule 147 (primary -> BOOLEAN_CONSTANTS .)
    PLUS            reduce using rule 147 (primary -> BOOLEAN_CONSTANTS .)
    MINUS           reduce using rule 147 (primary -> BOOLEAN_CONSTANTS .)
    BITNOT          reduce using rule 147 (primary -> BOOLEAN_CONSTANTS .)
    BITCOMP         reduce using rule 147 (primary -> BOOLEAN_CONSTANTS .)
    INT_CONSTANTS   reduce using rule 147 (primary -> BOOLEAN_CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 147 (primary -> BOOLEAN_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 147 (primary -> BOOLEAN_CONSTANTS .)
    SIGIL_AT        reduce using rule 147 (primary -> BOOLEAN_CONSTANTS .)
    SIGIL_DOUBLE_AT reduce using rule 147 (primary -> BOOLEAN_CONSTANTS .)


state 108

    (143) primary -> INT_CONSTANTS .

    COMMA           reduce using rule 143 (primary -> INT_CONSTANTS .)
    KEYWORD_while   reduce using rule 143 (primary -> INT_CONSTANTS .)
    KEYWORD_until   reduce using rule 143 (primary -> INT_CONSTANTS .)
    DELIM           reduce using rule 143 (primary -> INT_CONSTANTS .)
    newline         reduce using rule 143 (primary -> INT_CONSTANTS .)
    $end            reduce using rule 143 (primary -> INT_CONSTANTS .)
    KEYWORD_end     reduce using rule 143 (primary -> INT_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 143 (primary -> INT_CONSTANTS .)
    KEYWORD_else    reduce using rule 143 (primary -> INT_CONSTANTS .)
    KEYWORD_return  reduce using rule 143 (primary -> INT_CONSTANTS .)
    KEYWORD_if      reduce using rule 143 (primary -> INT_CONSTANTS .)
    KEYWORD_begin   reduce using rule 143 (primary -> INT_CONSTANTS .)
    KEYWORD_for     reduce using rule 143 (primary -> INT_CONSTANTS .)
    KEYWORD_puts    reduce using rule 143 (primary -> INT_CONSTANTS .)
    KEYWORD_break   reduce using rule 143 (primary -> INT_CONSTANTS .)
    KEYWORD_next    reduce using rule 143 (primary -> INT_CONSTANTS .)
    KEYWORD_redo    reduce using rule 143 (primary -> INT_CONSTANTS .)
    KEYWORD_exit    reduce using rule 143 (primary -> INT_CONSTANTS .)
    VARIABLES       reduce using rule 143 (primary -> INT_CONSTANTS .)
    CONSTANTS       reduce using rule 143 (primary -> INT_CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 143 (primary -> INT_CONSTANTS .)
    OPEN_PAREN      reduce using rule 143 (primary -> INT_CONSTANTS .)
    PLUS            reduce using rule 143 (primary -> INT_CONSTANTS .)
    MINUS           reduce using rule 143 (primary -> INT_CONSTANTS .)
    BITNOT          reduce using rule 143 (primary -> INT_CONSTANTS .)
    BITCOMP         reduce using rule 143 (primary -> INT_CONSTANTS .)
    INT_CONSTANTS   reduce using rule 143 (primary -> INT_CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 143 (primary -> INT_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 143 (primary -> INT_CONSTANTS .)
    SIGIL_AT        reduce using rule 143 (primary -> INT_CONSTANTS .)
    SIGIL_DOUBLE_AT reduce using rule 143 (primary -> INT_CONSTANTS .)


state 109

    (144) primary -> FLOAT_CONSTANTS .

    COMMA           reduce using rule 144 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_while   reduce using rule 144 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_until   reduce using rule 144 (primary -> FLOAT_CONSTANTS .)
    DELIM           reduce using rule 144 (primary -> FLOAT_CONSTANTS .)
    newline         reduce using rule 144 (primary -> FLOAT_CONSTANTS .)
    $end            reduce using rule 144 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_end     reduce using rule 144 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 144 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_else    reduce using rule 144 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_return  reduce using rule 144 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_if      reduce using rule 144 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_begin   reduce using rule 144 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_for     reduce using rule 144 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_puts    reduce using rule 144 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_break   reduce using rule 144 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_next    reduce using rule 144 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_redo    reduce using rule 144 (primary -> FLOAT_CONSTANTS .)
    KEYWORD_exit    reduce using rule 144 (primary -> FLOAT_CONSTANTS .)
    VARIABLES       reduce using rule 144 (primary -> FLOAT_CONSTANTS .)
    CONSTANTS       reduce using rule 144 (primary -> FLOAT_CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 144 (primary -> FLOAT_CONSTANTS .)
    OPEN_PAREN      reduce using rule 144 (primary -> FLOAT_CONSTANTS .)
    PLUS            reduce using rule 144 (primary -> FLOAT_CONSTANTS .)
    MINUS           reduce using rule 144 (primary -> FLOAT_CONSTANTS .)
    BITNOT          reduce using rule 144 (primary -> FLOAT_CONSTANTS .)
    BITCOMP         reduce using rule 144 (primary -> FLOAT_CONSTANTS .)
    INT_CONSTANTS   reduce using rule 144 (primary -> FLOAT_CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 144 (primary -> FLOAT_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 144 (primary -> FLOAT_CONSTANTS .)
    SIGIL_AT        reduce using rule 144 (primary -> FLOAT_CONSTANTS .)
    SIGIL_DOUBLE_AT reduce using rule 144 (primary -> FLOAT_CONSTANTS .)


state 110

    (100) func_ret_arg -> func_arg_expr .

    CLOSE_PAREN     reduce using rule 100 (func_ret_arg -> func_arg_expr .)
    COMMA           reduce using rule 100 (func_ret_arg -> func_arg_expr .)
    DELIM           reduce using rule 100 (func_ret_arg -> func_arg_expr .)
    newline         reduce using rule 100 (func_ret_arg -> func_arg_expr .)
    KEYWORD_end     reduce using rule 100 (func_ret_arg -> func_arg_expr .)
    KEYWORD_while   reduce using rule 100 (func_ret_arg -> func_arg_expr .)
    KEYWORD_until   reduce using rule 100 (func_ret_arg -> func_arg_expr .)
    $end            reduce using rule 100 (func_ret_arg -> func_arg_expr .)
    KEYWORD_elsif   reduce using rule 100 (func_ret_arg -> func_arg_expr .)
    KEYWORD_else    reduce using rule 100 (func_ret_arg -> func_arg_expr .)


state 111

    (101) func_ret_arg -> primary .

    CLOSE_PAREN     reduce using rule 101 (func_ret_arg -> primary .)
    COMMA           reduce using rule 101 (func_ret_arg -> primary .)
    DELIM           reduce using rule 101 (func_ret_arg -> primary .)
    newline         reduce using rule 101 (func_ret_arg -> primary .)
    KEYWORD_end     reduce using rule 101 (func_ret_arg -> primary .)
    KEYWORD_while   reduce using rule 101 (func_ret_arg -> primary .)
    KEYWORD_until   reduce using rule 101 (func_ret_arg -> primary .)
    $end            reduce using rule 101 (func_ret_arg -> primary .)
    KEYWORD_elsif   reduce using rule 101 (func_ret_arg -> primary .)
    KEYWORD_else    reduce using rule 101 (func_ret_arg -> primary .)


state 112

    (145) primary -> STRING_CONSTANTS .

    COMMA           reduce using rule 145 (primary -> STRING_CONSTANTS .)
    KEYWORD_while   reduce using rule 145 (primary -> STRING_CONSTANTS .)
    KEYWORD_until   reduce using rule 145 (primary -> STRING_CONSTANTS .)
    DELIM           reduce using rule 145 (primary -> STRING_CONSTANTS .)
    newline         reduce using rule 145 (primary -> STRING_CONSTANTS .)
    $end            reduce using rule 145 (primary -> STRING_CONSTANTS .)
    KEYWORD_end     reduce using rule 145 (primary -> STRING_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 145 (primary -> STRING_CONSTANTS .)
    KEYWORD_else    reduce using rule 145 (primary -> STRING_CONSTANTS .)
    KEYWORD_return  reduce using rule 145 (primary -> STRING_CONSTANTS .)
    KEYWORD_if      reduce using rule 145 (primary -> STRING_CONSTANTS .)
    KEYWORD_begin   reduce using rule 145 (primary -> STRING_CONSTANTS .)
    KEYWORD_for     reduce using rule 145 (primary -> STRING_CONSTANTS .)
    KEYWORD_puts    reduce using rule 145 (primary -> STRING_CONSTANTS .)
    KEYWORD_break   reduce using rule 145 (primary -> STRING_CONSTANTS .)
    KEYWORD_next    reduce using rule 145 (primary -> STRING_CONSTANTS .)
    KEYWORD_redo    reduce using rule 145 (primary -> STRING_CONSTANTS .)
    KEYWORD_exit    reduce using rule 145 (primary -> STRING_CONSTANTS .)
    VARIABLES       reduce using rule 145 (primary -> STRING_CONSTANTS .)
    CONSTANTS       reduce using rule 145 (primary -> STRING_CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 145 (primary -> STRING_CONSTANTS .)
    OPEN_PAREN      reduce using rule 145 (primary -> STRING_CONSTANTS .)
    PLUS            reduce using rule 145 (primary -> STRING_CONSTANTS .)
    MINUS           reduce using rule 145 (primary -> STRING_CONSTANTS .)
    BITNOT          reduce using rule 145 (primary -> STRING_CONSTANTS .)
    BITCOMP         reduce using rule 145 (primary -> STRING_CONSTANTS .)
    INT_CONSTANTS   reduce using rule 145 (primary -> STRING_CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 145 (primary -> STRING_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 145 (primary -> STRING_CONSTANTS .)
    SIGIL_AT        reduce using rule 145 (primary -> STRING_CONSTANTS .)
    SIGIL_DOUBLE_AT reduce using rule 145 (primary -> STRING_CONSTANTS .)


state 113

    (85) func_call_stmt -> fname OPEN_PAREN . func_ret_arg CLOSE_PAREN
    (100) func_ret_arg -> . func_arg_expr
    (101) func_ret_arg -> . primary
    (102) func_ret_arg -> . func_ret_arg COMMA func_arg_expr
    (103) func_ret_arg -> . func_ret_arg COMMA primary
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary
    (143) primary -> . INT_CONSTANTS
    (144) primary -> . FLOAT_CONSTANTS
    (145) primary -> . STRING_CONSTANTS
    (146) primary -> . CHAR_CONSTANTS
    (147) primary -> . BOOLEAN_CONSTANTS
    (148) primary -> . CONSTANTS
    (149) primary -> . VARIABLES
    (150) primary -> . array
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET

    VARIABLES       shift and go to state 118
    CONSTANTS       shift and go to state 114
    INT_CONSTANTS   shift and go to state 108
    FLOAT_CONSTANTS shift and go to state 109
    STRING_CONSTANTS shift and go to state 112
    CHAR_CONSTANTS  shift and go to state 117
    BOOLEAN_CONSTANTS shift and go to state 107

    func_arg_expr                  shift and go to state 110
    primary                        shift and go to state 111
    func_ret_arg                   shift and go to state 172
    array                          shift and go to state 116

state 114

    (63) func_arg_expr -> CONSTANTS . EQUAL primary
    (148) primary -> CONSTANTS .

    EQUAL           shift and go to state 173
    COMMA           reduce using rule 148 (primary -> CONSTANTS .)
    KEYWORD_while   reduce using rule 148 (primary -> CONSTANTS .)
    KEYWORD_until   reduce using rule 148 (primary -> CONSTANTS .)
    DELIM           reduce using rule 148 (primary -> CONSTANTS .)
    newline         reduce using rule 148 (primary -> CONSTANTS .)
    $end            reduce using rule 148 (primary -> CONSTANTS .)
    KEYWORD_end     reduce using rule 148 (primary -> CONSTANTS .)
    KEYWORD_elsif   reduce using rule 148 (primary -> CONSTANTS .)
    KEYWORD_else    reduce using rule 148 (primary -> CONSTANTS .)
    CLOSE_PAREN     reduce using rule 148 (primary -> CONSTANTS .)


state 115

    (86) func_call_stmt -> fname func_ret_arg .
    (102) func_ret_arg -> func_ret_arg . COMMA func_arg_expr
    (103) func_ret_arg -> func_ret_arg . COMMA primary

    KEYWORD_while   reduce using rule 86 (func_call_stmt -> fname func_ret_arg .)
    KEYWORD_until   reduce using rule 86 (func_call_stmt -> fname func_ret_arg .)
    DELIM           reduce using rule 86 (func_call_stmt -> fname func_ret_arg .)
    newline         reduce using rule 86 (func_call_stmt -> fname func_ret_arg .)
    KEYWORD_elsif   reduce using rule 86 (func_call_stmt -> fname func_ret_arg .)
    KEYWORD_else    reduce using rule 86 (func_call_stmt -> fname func_ret_arg .)
    KEYWORD_end     reduce using rule 86 (func_call_stmt -> fname func_ret_arg .)
    $end            reduce using rule 86 (func_call_stmt -> fname func_ret_arg .)
    COMMA           shift and go to state 174


state 116

    (150) primary -> array .

    COMMA           reduce using rule 150 (primary -> array .)
    KEYWORD_while   reduce using rule 150 (primary -> array .)
    KEYWORD_until   reduce using rule 150 (primary -> array .)
    DELIM           reduce using rule 150 (primary -> array .)
    newline         reduce using rule 150 (primary -> array .)
    $end            reduce using rule 150 (primary -> array .)
    KEYWORD_end     reduce using rule 150 (primary -> array .)
    KEYWORD_elsif   reduce using rule 150 (primary -> array .)
    KEYWORD_else    reduce using rule 150 (primary -> array .)
    KEYWORD_return  reduce using rule 150 (primary -> array .)
    KEYWORD_if      reduce using rule 150 (primary -> array .)
    KEYWORD_begin   reduce using rule 150 (primary -> array .)
    KEYWORD_for     reduce using rule 150 (primary -> array .)
    KEYWORD_puts    reduce using rule 150 (primary -> array .)
    KEYWORD_break   reduce using rule 150 (primary -> array .)
    KEYWORD_next    reduce using rule 150 (primary -> array .)
    KEYWORD_redo    reduce using rule 150 (primary -> array .)
    KEYWORD_exit    reduce using rule 150 (primary -> array .)
    VARIABLES       reduce using rule 150 (primary -> array .)
    CONSTANTS       reduce using rule 150 (primary -> array .)
    BOOLEAN_CONSTANTS reduce using rule 150 (primary -> array .)
    OPEN_PAREN      reduce using rule 150 (primary -> array .)
    PLUS            reduce using rule 150 (primary -> array .)
    MINUS           reduce using rule 150 (primary -> array .)
    BITNOT          reduce using rule 150 (primary -> array .)
    BITCOMP         reduce using rule 150 (primary -> array .)
    INT_CONSTANTS   reduce using rule 150 (primary -> array .)
    FLOAT_CONSTANTS reduce using rule 150 (primary -> array .)
    CLOSE_PAREN     reduce using rule 150 (primary -> array .)
    SIGIL_AT        reduce using rule 150 (primary -> array .)
    SIGIL_DOUBLE_AT reduce using rule 150 (primary -> array .)


state 117

    (146) primary -> CHAR_CONSTANTS .

    COMMA           reduce using rule 146 (primary -> CHAR_CONSTANTS .)
    KEYWORD_while   reduce using rule 146 (primary -> CHAR_CONSTANTS .)
    KEYWORD_until   reduce using rule 146 (primary -> CHAR_CONSTANTS .)
    DELIM           reduce using rule 146 (primary -> CHAR_CONSTANTS .)
    newline         reduce using rule 146 (primary -> CHAR_CONSTANTS .)
    $end            reduce using rule 146 (primary -> CHAR_CONSTANTS .)
    KEYWORD_end     reduce using rule 146 (primary -> CHAR_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 146 (primary -> CHAR_CONSTANTS .)
    KEYWORD_else    reduce using rule 146 (primary -> CHAR_CONSTANTS .)
    KEYWORD_return  reduce using rule 146 (primary -> CHAR_CONSTANTS .)
    KEYWORD_if      reduce using rule 146 (primary -> CHAR_CONSTANTS .)
    KEYWORD_begin   reduce using rule 146 (primary -> CHAR_CONSTANTS .)
    KEYWORD_for     reduce using rule 146 (primary -> CHAR_CONSTANTS .)
    KEYWORD_puts    reduce using rule 146 (primary -> CHAR_CONSTANTS .)
    KEYWORD_break   reduce using rule 146 (primary -> CHAR_CONSTANTS .)
    KEYWORD_next    reduce using rule 146 (primary -> CHAR_CONSTANTS .)
    KEYWORD_redo    reduce using rule 146 (primary -> CHAR_CONSTANTS .)
    KEYWORD_exit    reduce using rule 146 (primary -> CHAR_CONSTANTS .)
    VARIABLES       reduce using rule 146 (primary -> CHAR_CONSTANTS .)
    CONSTANTS       reduce using rule 146 (primary -> CHAR_CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 146 (primary -> CHAR_CONSTANTS .)
    OPEN_PAREN      reduce using rule 146 (primary -> CHAR_CONSTANTS .)
    PLUS            reduce using rule 146 (primary -> CHAR_CONSTANTS .)
    MINUS           reduce using rule 146 (primary -> CHAR_CONSTANTS .)
    BITNOT          reduce using rule 146 (primary -> CHAR_CONSTANTS .)
    BITCOMP         reduce using rule 146 (primary -> CHAR_CONSTANTS .)
    INT_CONSTANTS   reduce using rule 146 (primary -> CHAR_CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 146 (primary -> CHAR_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 146 (primary -> CHAR_CONSTANTS .)
    SIGIL_AT        reduce using rule 146 (primary -> CHAR_CONSTANTS .)
    SIGIL_DOUBLE_AT reduce using rule 146 (primary -> CHAR_CONSTANTS .)


state 118

    (62) func_arg_expr -> VARIABLES . EQUAL primary
    (149) primary -> VARIABLES .
    (186) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET

    EQUAL           shift and go to state 175
    COMMA           reduce using rule 149 (primary -> VARIABLES .)
    KEYWORD_while   reduce using rule 149 (primary -> VARIABLES .)
    KEYWORD_until   reduce using rule 149 (primary -> VARIABLES .)
    DELIM           reduce using rule 149 (primary -> VARIABLES .)
    newline         reduce using rule 149 (primary -> VARIABLES .)
    $end            reduce using rule 149 (primary -> VARIABLES .)
    KEYWORD_end     reduce using rule 149 (primary -> VARIABLES .)
    KEYWORD_elsif   reduce using rule 149 (primary -> VARIABLES .)
    KEYWORD_else    reduce using rule 149 (primary -> VARIABLES .)
    CLOSE_PAREN     reduce using rule 149 (primary -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 85


state 119

    (168) expr8 -> expr8 BITAND . expr9
    (170) expr9 -> . expr9 SHIFTL expr10
    (171) expr9 -> . expr9 SHIFTR expr10
    (172) expr9 -> . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (198) none -> .

    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr13                         shift and go to state 16
    expr9                          shift and go to state 176
    array                          shift and go to state 55

state 120

    (171) expr9 -> expr9 SHIFTR . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (198) none -> .

    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr10                         shift and go to state 177
    expr11                         shift and go to state 15
    expr13                         shift and go to state 16
    array                          shift and go to state 55

state 121

    (170) expr9 -> expr9 SHIFTL . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (198) none -> .

    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr10                         shift and go to state 178
    expr11                         shift and go to state 15
    expr13                         shift and go to state 16
    array                          shift and go to state 55

state 122

    (124) expr -> MLHS EQUAL . MRHS
    (87) func_call_stmt -> MLHS EQUAL . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> MLHS EQUAL . fname func_ret_arg
    (127) MRHS -> . mrhs
    (128) MRHS -> . MRHS COMMA mrhs
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (132) mrhs -> . expr1
    (133) mrhs -> . str_expr
    (134) mrhs -> . KEYWORD_gets
    (135) mrhs -> . OPEN_BRACKET CLOSE_BRACKET
    (136) mrhs -> . VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (137) mrhs -> . VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (138) mrhs -> . VARIABLES DOT VARIABLES
    (139) mrhs -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (140) mrhs -> . CONSTANTS DOT KEYWORD_new
    (141) mrhs -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (151) expr1 -> . expr3
    (142) str_expr -> . STRING_CONSTANTS
    (152) expr3 -> . expr3 LOGICALOR expr4
    (153) expr3 -> . expr4
    (154) expr4 -> . expr4 LOGICALAND expr5
    (155) expr4 -> . expr5
    (156) expr5 -> . expr6 DOUBLEEQUAL expr6
    (157) expr5 -> . expr6 NOTEQUAL expr6
    (158) expr5 -> . expr6
    (159) expr6 -> . expr7 LESSEQUAL expr7
    (160) expr6 -> . expr7 LESS expr7
    (161) expr6 -> . expr7 GREATER expr7
    (162) expr6 -> . expr7 GREATEREQUAL expr7
    (163) expr6 -> . expr7
    (164) expr6 -> . BOOLEAN_CONSTANTS
    (165) expr7 -> . expr7 BITXOR expr8
    (166) expr7 -> . expr7 PIPE expr8
    (167) expr7 -> . expr8
    (168) expr8 -> . expr8 BITAND expr9
    (169) expr8 -> . expr9
    (170) expr9 -> . expr9 SHIFTL expr10
    (171) expr9 -> . expr9 SHIFTR expr10
    (172) expr9 -> . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (198) none -> .

    VARIABLES       shift and go to state 180
    CONSTANTS       shift and go to state 183
    KEYWORD_gets    shift and go to state 92
    OPEN_BRACKET    shift and go to state 90
    STRING_CONSTANTS shift and go to state 96
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)

    expr11                         shift and go to state 15
    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr9                          shift and go to state 47
    str_expr                       shift and go to state 88
    expr5                          shift and go to state 45
    mrhs                           shift and go to state 182
    expr3                          shift and go to state 41
    MRHS                           shift and go to state 179
    expr1                          shift and go to state 91
    expr6                          shift and go to state 43
    fname                          shift and go to state 181
    expr10                         shift and go to state 14
    expr8                          shift and go to state 46
    expr4                          shift and go to state 8
    expr13                         shift and go to state 16
    array                          shift and go to state 55
    expr7                          shift and go to state 7

state 123

    (126) MLHS -> MLHS COMMA . mlhs
    (129) mlhs -> . VARIABLES
    (130) mlhs -> . CONSTANTS
    (131) mlhs -> . array
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET

    VARIABLES       shift and go to state 185
    CONSTANTS       shift and go to state 187

    mlhs                           shift and go to state 184
    array                          shift and go to state 186

state 124

    (74) top_stmt -> KEYWORD_for OPEN_PAREN . multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (112) multi_var -> . VARIABLES
    (113) multi_var -> . CONSTANTS
    (114) multi_var -> . array
    (115) multi_var -> . multi_var COMMA VARIABLES
    (116) multi_var -> . multi_var COMMA CONSTANTS
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET

    VARIABLES       shift and go to state 125
    CONSTANTS       shift and go to state 127

    multi_var                      shift and go to state 188
    array                          shift and go to state 128

state 125

    (112) multi_var -> VARIABLES .
    (186) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET

    KEYWORD_in      reduce using rule 112 (multi_var -> VARIABLES .)
    COMMA           reduce using rule 112 (multi_var -> VARIABLES .)
    CLOSE_PAREN     reduce using rule 112 (multi_var -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 85


state 126

    (75) top_stmt -> KEYWORD_for multi_var . KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (115) multi_var -> multi_var . COMMA VARIABLES
    (116) multi_var -> multi_var . COMMA CONSTANTS

    KEYWORD_in      shift and go to state 189
    COMMA           shift and go to state 190


state 127

    (113) multi_var -> CONSTANTS .

    KEYWORD_in      reduce using rule 113 (multi_var -> CONSTANTS .)
    COMMA           reduce using rule 113 (multi_var -> CONSTANTS .)
    CLOSE_PAREN     reduce using rule 113 (multi_var -> CONSTANTS .)


state 128

    (114) multi_var -> array .

    KEYWORD_in      reduce using rule 114 (multi_var -> array .)
    COMMA           reduce using rule 114 (multi_var -> array .)
    CLOSE_PAREN     reduce using rule 114 (multi_var -> array .)


state 129

    (111) opt_do -> newline .

    KEYWORD_if      reduce using rule 111 (opt_do -> newline .)
    KEYWORD_while   reduce using rule 111 (opt_do -> newline .)
    KEYWORD_begin   reduce using rule 111 (opt_do -> newline .)
    KEYWORD_until   reduce using rule 111 (opt_do -> newline .)
    KEYWORD_for     reduce using rule 111 (opt_do -> newline .)
    KEYWORD_puts    reduce using rule 111 (opt_do -> newline .)
    KEYWORD_break   reduce using rule 111 (opt_do -> newline .)
    KEYWORD_next    reduce using rule 111 (opt_do -> newline .)
    KEYWORD_redo    reduce using rule 111 (opt_do -> newline .)
    KEYWORD_exit    reduce using rule 111 (opt_do -> newline .)
    VARIABLES       reduce using rule 111 (opt_do -> newline .)
    CONSTANTS       reduce using rule 111 (opt_do -> newline .)
    BOOLEAN_CONSTANTS reduce using rule 111 (opt_do -> newline .)
    OPEN_PAREN      reduce using rule 111 (opt_do -> newline .)
    PLUS            reduce using rule 111 (opt_do -> newline .)
    MINUS           reduce using rule 111 (opt_do -> newline .)
    BITNOT          reduce using rule 111 (opt_do -> newline .)
    BITCOMP         reduce using rule 111 (opt_do -> newline .)
    DELIM           reduce using rule 111 (opt_do -> newline .)
    newline         reduce using rule 111 (opt_do -> newline .)
    KEYWORD_end     reduce using rule 111 (opt_do -> newline .)
    INT_CONSTANTS   reduce using rule 111 (opt_do -> newline .)
    FLOAT_CONSTANTS reduce using rule 111 (opt_do -> newline .)


state 130

    (110) opt_do -> KEYWORD_do .

    KEYWORD_if      reduce using rule 110 (opt_do -> KEYWORD_do .)
    KEYWORD_while   reduce using rule 110 (opt_do -> KEYWORD_do .)
    KEYWORD_begin   reduce using rule 110 (opt_do -> KEYWORD_do .)
    KEYWORD_until   reduce using rule 110 (opt_do -> KEYWORD_do .)
    KEYWORD_for     reduce using rule 110 (opt_do -> KEYWORD_do .)
    KEYWORD_puts    reduce using rule 110 (opt_do -> KEYWORD_do .)
    KEYWORD_break   reduce using rule 110 (opt_do -> KEYWORD_do .)
    KEYWORD_next    reduce using rule 110 (opt_do -> KEYWORD_do .)
    KEYWORD_redo    reduce using rule 110 (opt_do -> KEYWORD_do .)
    KEYWORD_exit    reduce using rule 110 (opt_do -> KEYWORD_do .)
    VARIABLES       reduce using rule 110 (opt_do -> KEYWORD_do .)
    CONSTANTS       reduce using rule 110 (opt_do -> KEYWORD_do .)
    BOOLEAN_CONSTANTS reduce using rule 110 (opt_do -> KEYWORD_do .)
    OPEN_PAREN      reduce using rule 110 (opt_do -> KEYWORD_do .)
    PLUS            reduce using rule 110 (opt_do -> KEYWORD_do .)
    MINUS           reduce using rule 110 (opt_do -> KEYWORD_do .)
    BITNOT          reduce using rule 110 (opt_do -> KEYWORD_do .)
    BITCOMP         reduce using rule 110 (opt_do -> KEYWORD_do .)
    DELIM           reduce using rule 110 (opt_do -> KEYWORD_do .)
    newline         reduce using rule 110 (opt_do -> KEYWORD_do .)
    KEYWORD_end     reduce using rule 110 (opt_do -> KEYWORD_do .)
    INT_CONSTANTS   reduce using rule 110 (opt_do -> KEYWORD_do .)
    FLOAT_CONSTANTS reduce using rule 110 (opt_do -> KEYWORD_do .)


state 131

    (68) top_stmt -> KEYWORD_while expr3 opt_do . gen_stmts opt_terms KEYWORD_end
    (76) gen_stmts -> . top_stmt
    (77) gen_stmts -> . gen_stmts terms top_stmt
    (78) gen_stmts -> . none
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (198) none -> .
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . MLHS EQUAL MRHS
    (151) expr1 -> . expr3
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . MLHS EQUAL fname func_ret_arg
    (125) MLHS -> . mlhs
    (126) MLHS -> . MLHS COMMA mlhs
    (152) expr3 -> . expr3 LOGICALOR expr4
    (153) expr3 -> . expr4
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (129) mlhs -> . VARIABLES
    (130) mlhs -> . CONSTANTS
    (131) mlhs -> . array
    (154) expr4 -> . expr4 LOGICALAND expr5
    (155) expr4 -> . expr5
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (156) expr5 -> . expr6 DOUBLEEQUAL expr6
    (157) expr5 -> . expr6 NOTEQUAL expr6
    (158) expr5 -> . expr6
    (159) expr6 -> . expr7 LESSEQUAL expr7
    (160) expr6 -> . expr7 LESS expr7
    (161) expr6 -> . expr7 GREATER expr7
    (162) expr6 -> . expr7 GREATEREQUAL expr7
    (163) expr6 -> . expr7
    (164) expr6 -> . BOOLEAN_CONSTANTS
    (165) expr7 -> . expr7 BITXOR expr8
    (166) expr7 -> . expr7 PIPE expr8
    (167) expr7 -> . expr8
    (168) expr8 -> . expr8 BITAND expr9
    (169) expr8 -> . expr9
    (170) expr9 -> . expr9 SHIFTL expr10
    (171) expr9 -> . expr9 SHIFTR expr10
    (172) expr9 -> . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP

    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 38
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 52
    DELIM           reduce using rule 198 (none -> .)
    newline         reduce using rule 198 (none -> .)
    KEYWORD_end     reduce using rule 198 (none -> .)
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 48
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    VARIABLES       shift and go to state 98
    CONSTANTS       shift and go to state 101
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29

    mlhs                           shift and go to state 2
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr13                         shift and go to state 16
    array                          shift and go to state 26
    expr3                          shift and go to state 41
    expr1                          shift and go to state 42
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    puts_stmt                      shift and go to state 18
    expr5                          shift and go to state 45
    func_call_stmt                 shift and go to state 32
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    expr4                          shift and go to state 8
    fname                          shift and go to state 44
    exit_stmt                      shift and go to state 49
    MLHS                           shift and go to state 50
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 20
    uexpr                          shift and go to state 10
    none                           shift and go to state 99
    gen_stmts                      shift and go to state 191
    expr                           shift and go to state 35
    top_stmt                       shift and go to state 102

state 132

    (162) expr6 -> expr7 GREATEREQUAL expr7 .
    (165) expr7 -> expr7 . BITXOR expr8
    (166) expr7 -> expr7 . PIPE expr8

    DOUBLEEQUAL     reduce using rule 162 (expr6 -> expr7 GREATEREQUAL expr7 .)
    NOTEQUAL        reduce using rule 162 (expr6 -> expr7 GREATEREQUAL expr7 .)
    LOGICALAND      reduce using rule 162 (expr6 -> expr7 GREATEREQUAL expr7 .)
    LOGICALOR       reduce using rule 162 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_then    reduce using rule 162 (expr6 -> expr7 GREATEREQUAL expr7 .)
    newline         reduce using rule 162 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_while   reduce using rule 162 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_until   reduce using rule 162 (expr6 -> expr7 GREATEREQUAL expr7 .)
    DELIM           reduce using rule 162 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_end     reduce using rule 162 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_elsif   reduce using rule 162 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_else    reduce using rule 162 (expr6 -> expr7 GREATEREQUAL expr7 .)
    COMMA           reduce using rule 162 (expr6 -> expr7 GREATEREQUAL expr7 .)
    $end            reduce using rule 162 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_do      reduce using rule 162 (expr6 -> expr7 GREATEREQUAL expr7 .)
    CLOSE_PAREN     reduce using rule 162 (expr6 -> expr7 GREATEREQUAL expr7 .)
    BITXOR          shift and go to state 61
    PIPE            shift and go to state 60


state 133

    (161) expr6 -> expr7 GREATER expr7 .
    (165) expr7 -> expr7 . BITXOR expr8
    (166) expr7 -> expr7 . PIPE expr8

    DOUBLEEQUAL     reduce using rule 161 (expr6 -> expr7 GREATER expr7 .)
    NOTEQUAL        reduce using rule 161 (expr6 -> expr7 GREATER expr7 .)
    LOGICALAND      reduce using rule 161 (expr6 -> expr7 GREATER expr7 .)
    LOGICALOR       reduce using rule 161 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_then    reduce using rule 161 (expr6 -> expr7 GREATER expr7 .)
    newline         reduce using rule 161 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_while   reduce using rule 161 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_until   reduce using rule 161 (expr6 -> expr7 GREATER expr7 .)
    DELIM           reduce using rule 161 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_end     reduce using rule 161 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_elsif   reduce using rule 161 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_else    reduce using rule 161 (expr6 -> expr7 GREATER expr7 .)
    COMMA           reduce using rule 161 (expr6 -> expr7 GREATER expr7 .)
    $end            reduce using rule 161 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_do      reduce using rule 161 (expr6 -> expr7 GREATER expr7 .)
    CLOSE_PAREN     reduce using rule 161 (expr6 -> expr7 GREATER expr7 .)
    BITXOR          shift and go to state 61
    PIPE            shift and go to state 60


state 134

    (160) expr6 -> expr7 LESS expr7 .
    (165) expr7 -> expr7 . BITXOR expr8
    (166) expr7 -> expr7 . PIPE expr8

    DOUBLEEQUAL     reduce using rule 160 (expr6 -> expr7 LESS expr7 .)
    NOTEQUAL        reduce using rule 160 (expr6 -> expr7 LESS expr7 .)
    LOGICALAND      reduce using rule 160 (expr6 -> expr7 LESS expr7 .)
    LOGICALOR       reduce using rule 160 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_then    reduce using rule 160 (expr6 -> expr7 LESS expr7 .)
    newline         reduce using rule 160 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_while   reduce using rule 160 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_until   reduce using rule 160 (expr6 -> expr7 LESS expr7 .)
    DELIM           reduce using rule 160 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_end     reduce using rule 160 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_elsif   reduce using rule 160 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_else    reduce using rule 160 (expr6 -> expr7 LESS expr7 .)
    COMMA           reduce using rule 160 (expr6 -> expr7 LESS expr7 .)
    $end            reduce using rule 160 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_do      reduce using rule 160 (expr6 -> expr7 LESS expr7 .)
    CLOSE_PAREN     reduce using rule 160 (expr6 -> expr7 LESS expr7 .)
    BITXOR          shift and go to state 61
    PIPE            shift and go to state 60


state 135

    (166) expr7 -> expr7 PIPE expr8 .
    (168) expr8 -> expr8 . BITAND expr9

    LESSEQUAL       reduce using rule 166 (expr7 -> expr7 PIPE expr8 .)
    LESS            reduce using rule 166 (expr7 -> expr7 PIPE expr8 .)
    GREATER         reduce using rule 166 (expr7 -> expr7 PIPE expr8 .)
    GREATEREQUAL    reduce using rule 166 (expr7 -> expr7 PIPE expr8 .)
    BITXOR          reduce using rule 166 (expr7 -> expr7 PIPE expr8 .)
    PIPE            reduce using rule 166 (expr7 -> expr7 PIPE expr8 .)
    DOUBLEEQUAL     reduce using rule 166 (expr7 -> expr7 PIPE expr8 .)
    NOTEQUAL        reduce using rule 166 (expr7 -> expr7 PIPE expr8 .)
    LOGICALAND      reduce using rule 166 (expr7 -> expr7 PIPE expr8 .)
    LOGICALOR       reduce using rule 166 (expr7 -> expr7 PIPE expr8 .)
    CLOSE_PAREN     reduce using rule 166 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_do      reduce using rule 166 (expr7 -> expr7 PIPE expr8 .)
    newline         reduce using rule 166 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_while   reduce using rule 166 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_until   reduce using rule 166 (expr7 -> expr7 PIPE expr8 .)
    DELIM           reduce using rule 166 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_end     reduce using rule 166 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_elsif   reduce using rule 166 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_else    reduce using rule 166 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_then    reduce using rule 166 (expr7 -> expr7 PIPE expr8 .)
    COMMA           reduce using rule 166 (expr7 -> expr7 PIPE expr8 .)
    $end            reduce using rule 166 (expr7 -> expr7 PIPE expr8 .)
    CLOSE_BRACKET   reduce using rule 166 (expr7 -> expr7 PIPE expr8 .)
    BITAND          shift and go to state 119


state 136

    (165) expr7 -> expr7 BITXOR expr8 .
    (168) expr8 -> expr8 . BITAND expr9

    LESSEQUAL       reduce using rule 165 (expr7 -> expr7 BITXOR expr8 .)
    LESS            reduce using rule 165 (expr7 -> expr7 BITXOR expr8 .)
    GREATER         reduce using rule 165 (expr7 -> expr7 BITXOR expr8 .)
    GREATEREQUAL    reduce using rule 165 (expr7 -> expr7 BITXOR expr8 .)
    BITXOR          reduce using rule 165 (expr7 -> expr7 BITXOR expr8 .)
    PIPE            reduce using rule 165 (expr7 -> expr7 BITXOR expr8 .)
    DOUBLEEQUAL     reduce using rule 165 (expr7 -> expr7 BITXOR expr8 .)
    NOTEQUAL        reduce using rule 165 (expr7 -> expr7 BITXOR expr8 .)
    LOGICALAND      reduce using rule 165 (expr7 -> expr7 BITXOR expr8 .)
    LOGICALOR       reduce using rule 165 (expr7 -> expr7 BITXOR expr8 .)
    CLOSE_PAREN     reduce using rule 165 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_do      reduce using rule 165 (expr7 -> expr7 BITXOR expr8 .)
    newline         reduce using rule 165 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_while   reduce using rule 165 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_until   reduce using rule 165 (expr7 -> expr7 BITXOR expr8 .)
    DELIM           reduce using rule 165 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_end     reduce using rule 165 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_elsif   reduce using rule 165 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_else    reduce using rule 165 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_then    reduce using rule 165 (expr7 -> expr7 BITXOR expr8 .)
    COMMA           reduce using rule 165 (expr7 -> expr7 BITXOR expr8 .)
    $end            reduce using rule 165 (expr7 -> expr7 BITXOR expr8 .)
    CLOSE_BRACKET   reduce using rule 165 (expr7 -> expr7 BITXOR expr8 .)
    BITAND          shift and go to state 119


state 137

    (159) expr6 -> expr7 LESSEQUAL expr7 .
    (165) expr7 -> expr7 . BITXOR expr8
    (166) expr7 -> expr7 . PIPE expr8

    DOUBLEEQUAL     reduce using rule 159 (expr6 -> expr7 LESSEQUAL expr7 .)
    NOTEQUAL        reduce using rule 159 (expr6 -> expr7 LESSEQUAL expr7 .)
    LOGICALAND      reduce using rule 159 (expr6 -> expr7 LESSEQUAL expr7 .)
    LOGICALOR       reduce using rule 159 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_then    reduce using rule 159 (expr6 -> expr7 LESSEQUAL expr7 .)
    newline         reduce using rule 159 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_while   reduce using rule 159 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_until   reduce using rule 159 (expr6 -> expr7 LESSEQUAL expr7 .)
    DELIM           reduce using rule 159 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_end     reduce using rule 159 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_elsif   reduce using rule 159 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_else    reduce using rule 159 (expr6 -> expr7 LESSEQUAL expr7 .)
    COMMA           reduce using rule 159 (expr6 -> expr7 LESSEQUAL expr7 .)
    $end            reduce using rule 159 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_do      reduce using rule 159 (expr6 -> expr7 LESSEQUAL expr7 .)
    CLOSE_PAREN     reduce using rule 159 (expr6 -> expr7 LESSEQUAL expr7 .)
    BITXOR          shift and go to state 61
    PIPE            shift and go to state 60


state 138

    (154) expr4 -> expr4 LOGICALAND expr5 .

    LOGICALAND      reduce using rule 154 (expr4 -> expr4 LOGICALAND expr5 .)
    LOGICALOR       reduce using rule 154 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_while   reduce using rule 154 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_until   reduce using rule 154 (expr4 -> expr4 LOGICALAND expr5 .)
    DELIM           reduce using rule 154 (expr4 -> expr4 LOGICALAND expr5 .)
    newline         reduce using rule 154 (expr4 -> expr4 LOGICALAND expr5 .)
    $end            reduce using rule 154 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_end     reduce using rule 154 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_elsif   reduce using rule 154 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_else    reduce using rule 154 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_then    reduce using rule 154 (expr4 -> expr4 LOGICALAND expr5 .)
    CLOSE_PAREN     reduce using rule 154 (expr4 -> expr4 LOGICALAND expr5 .)
    COMMA           reduce using rule 154 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_do      reduce using rule 154 (expr4 -> expr4 LOGICALAND expr5 .)


state 139

    (69) top_stmt -> top_stmt KEYWORD_while expr3 .
    (152) expr3 -> expr3 . LOGICALOR expr4

    KEYWORD_while   reduce using rule 69 (top_stmt -> top_stmt KEYWORD_while expr3 .)
    KEYWORD_until   reduce using rule 69 (top_stmt -> top_stmt KEYWORD_while expr3 .)
    DELIM           reduce using rule 69 (top_stmt -> top_stmt KEYWORD_while expr3 .)
    newline         reduce using rule 69 (top_stmt -> top_stmt KEYWORD_while expr3 .)
    KEYWORD_end     reduce using rule 69 (top_stmt -> top_stmt KEYWORD_while expr3 .)
    KEYWORD_elsif   reduce using rule 69 (top_stmt -> top_stmt KEYWORD_while expr3 .)
    KEYWORD_else    reduce using rule 69 (top_stmt -> top_stmt KEYWORD_while expr3 .)
    $end            reduce using rule 69 (top_stmt -> top_stmt KEYWORD_while expr3 .)
    LOGICALOR       shift and go to state 104


state 140

    (71) top_stmt -> top_stmt KEYWORD_until expr3 .
    (152) expr3 -> expr3 . LOGICALOR expr4

    KEYWORD_while   reduce using rule 71 (top_stmt -> top_stmt KEYWORD_until expr3 .)
    KEYWORD_until   reduce using rule 71 (top_stmt -> top_stmt KEYWORD_until expr3 .)
    DELIM           reduce using rule 71 (top_stmt -> top_stmt KEYWORD_until expr3 .)
    newline         reduce using rule 71 (top_stmt -> top_stmt KEYWORD_until expr3 .)
    KEYWORD_end     reduce using rule 71 (top_stmt -> top_stmt KEYWORD_until expr3 .)
    KEYWORD_elsif   reduce using rule 71 (top_stmt -> top_stmt KEYWORD_until expr3 .)
    KEYWORD_else    reduce using rule 71 (top_stmt -> top_stmt KEYWORD_until expr3 .)
    $end            reduce using rule 71 (top_stmt -> top_stmt KEYWORD_until expr3 .)
    LOGICALOR       shift and go to state 104


state 141

    (173) expr10 -> expr10 PLUS expr11 .
    (176) expr11 -> expr11 . MULTIPLY expr13
    (177) expr11 -> expr11 . DIV expr13
    (178) expr11 -> expr11 . MOD expr13

    PLUS            reduce using rule 173 (expr10 -> expr10 PLUS expr11 .)
    MINUS           reduce using rule 173 (expr10 -> expr10 PLUS expr11 .)
    SHIFTL          reduce using rule 173 (expr10 -> expr10 PLUS expr11 .)
    SHIFTR          reduce using rule 173 (expr10 -> expr10 PLUS expr11 .)
    BITAND          reduce using rule 173 (expr10 -> expr10 PLUS expr11 .)
    LESSEQUAL       reduce using rule 173 (expr10 -> expr10 PLUS expr11 .)
    LESS            reduce using rule 173 (expr10 -> expr10 PLUS expr11 .)
    GREATER         reduce using rule 173 (expr10 -> expr10 PLUS expr11 .)
    GREATEREQUAL    reduce using rule 173 (expr10 -> expr10 PLUS expr11 .)
    BITXOR          reduce using rule 173 (expr10 -> expr10 PLUS expr11 .)
    PIPE            reduce using rule 173 (expr10 -> expr10 PLUS expr11 .)
    DOUBLEEQUAL     reduce using rule 173 (expr10 -> expr10 PLUS expr11 .)
    NOTEQUAL        reduce using rule 173 (expr10 -> expr10 PLUS expr11 .)
    LOGICALAND      reduce using rule 173 (expr10 -> expr10 PLUS expr11 .)
    LOGICALOR       reduce using rule 173 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_while   reduce using rule 173 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_until   reduce using rule 173 (expr10 -> expr10 PLUS expr11 .)
    DELIM           reduce using rule 173 (expr10 -> expr10 PLUS expr11 .)
    newline         reduce using rule 173 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_end     reduce using rule 173 (expr10 -> expr10 PLUS expr11 .)
    $end            reduce using rule 173 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_elsif   reduce using rule 173 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_else    reduce using rule 173 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_do      reduce using rule 173 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_then    reduce using rule 173 (expr10 -> expr10 PLUS expr11 .)
    CLOSE_PAREN     reduce using rule 173 (expr10 -> expr10 PLUS expr11 .)
    COMMA           reduce using rule 173 (expr10 -> expr10 PLUS expr11 .)
    CLOSE_BRACKET   reduce using rule 173 (expr10 -> expr10 PLUS expr11 .)
    MULTIPLY        shift and go to state 70
    DIV             shift and go to state 71
    MOD             shift and go to state 72


state 142

    (174) expr10 -> expr10 MINUS expr11 .
    (176) expr11 -> expr11 . MULTIPLY expr13
    (177) expr11 -> expr11 . DIV expr13
    (178) expr11 -> expr11 . MOD expr13

    PLUS            reduce using rule 174 (expr10 -> expr10 MINUS expr11 .)
    MINUS           reduce using rule 174 (expr10 -> expr10 MINUS expr11 .)
    SHIFTL          reduce using rule 174 (expr10 -> expr10 MINUS expr11 .)
    SHIFTR          reduce using rule 174 (expr10 -> expr10 MINUS expr11 .)
    BITAND          reduce using rule 174 (expr10 -> expr10 MINUS expr11 .)
    LESSEQUAL       reduce using rule 174 (expr10 -> expr10 MINUS expr11 .)
    LESS            reduce using rule 174 (expr10 -> expr10 MINUS expr11 .)
    GREATER         reduce using rule 174 (expr10 -> expr10 MINUS expr11 .)
    GREATEREQUAL    reduce using rule 174 (expr10 -> expr10 MINUS expr11 .)
    BITXOR          reduce using rule 174 (expr10 -> expr10 MINUS expr11 .)
    PIPE            reduce using rule 174 (expr10 -> expr10 MINUS expr11 .)
    DOUBLEEQUAL     reduce using rule 174 (expr10 -> expr10 MINUS expr11 .)
    NOTEQUAL        reduce using rule 174 (expr10 -> expr10 MINUS expr11 .)
    LOGICALAND      reduce using rule 174 (expr10 -> expr10 MINUS expr11 .)
    LOGICALOR       reduce using rule 174 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_while   reduce using rule 174 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_until   reduce using rule 174 (expr10 -> expr10 MINUS expr11 .)
    DELIM           reduce using rule 174 (expr10 -> expr10 MINUS expr11 .)
    newline         reduce using rule 174 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_end     reduce using rule 174 (expr10 -> expr10 MINUS expr11 .)
    $end            reduce using rule 174 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_elsif   reduce using rule 174 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_else    reduce using rule 174 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_do      reduce using rule 174 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_then    reduce using rule 174 (expr10 -> expr10 MINUS expr11 .)
    CLOSE_PAREN     reduce using rule 174 (expr10 -> expr10 MINUS expr11 .)
    COMMA           reduce using rule 174 (expr10 -> expr10 MINUS expr11 .)
    CLOSE_BRACKET   reduce using rule 174 (expr10 -> expr10 MINUS expr11 .)
    MULTIPLY        shift and go to state 70
    DIV             shift and go to state 71
    MOD             shift and go to state 72


state 143

    (176) expr11 -> expr11 MULTIPLY expr13 .

    MULTIPLY        reduce using rule 176 (expr11 -> expr11 MULTIPLY expr13 .)
    DIV             reduce using rule 176 (expr11 -> expr11 MULTIPLY expr13 .)
    MOD             reduce using rule 176 (expr11 -> expr11 MULTIPLY expr13 .)
    PLUS            reduce using rule 176 (expr11 -> expr11 MULTIPLY expr13 .)
    MINUS           reduce using rule 176 (expr11 -> expr11 MULTIPLY expr13 .)
    SHIFTL          reduce using rule 176 (expr11 -> expr11 MULTIPLY expr13 .)
    SHIFTR          reduce using rule 176 (expr11 -> expr11 MULTIPLY expr13 .)
    BITAND          reduce using rule 176 (expr11 -> expr11 MULTIPLY expr13 .)
    LESSEQUAL       reduce using rule 176 (expr11 -> expr11 MULTIPLY expr13 .)
    LESS            reduce using rule 176 (expr11 -> expr11 MULTIPLY expr13 .)
    GREATER         reduce using rule 176 (expr11 -> expr11 MULTIPLY expr13 .)
    GREATEREQUAL    reduce using rule 176 (expr11 -> expr11 MULTIPLY expr13 .)
    BITXOR          reduce using rule 176 (expr11 -> expr11 MULTIPLY expr13 .)
    PIPE            reduce using rule 176 (expr11 -> expr11 MULTIPLY expr13 .)
    DOUBLEEQUAL     reduce using rule 176 (expr11 -> expr11 MULTIPLY expr13 .)
    NOTEQUAL        reduce using rule 176 (expr11 -> expr11 MULTIPLY expr13 .)
    LOGICALAND      reduce using rule 176 (expr11 -> expr11 MULTIPLY expr13 .)
    LOGICALOR       reduce using rule 176 (expr11 -> expr11 MULTIPLY expr13 .)
    KEYWORD_while   reduce using rule 176 (expr11 -> expr11 MULTIPLY expr13 .)
    KEYWORD_until   reduce using rule 176 (expr11 -> expr11 MULTIPLY expr13 .)
    DELIM           reduce using rule 176 (expr11 -> expr11 MULTIPLY expr13 .)
    newline         reduce using rule 176 (expr11 -> expr11 MULTIPLY expr13 .)
    KEYWORD_end     reduce using rule 176 (expr11 -> expr11 MULTIPLY expr13 .)
    $end            reduce using rule 176 (expr11 -> expr11 MULTIPLY expr13 .)
    KEYWORD_do      reduce using rule 176 (expr11 -> expr11 MULTIPLY expr13 .)
    KEYWORD_then    reduce using rule 176 (expr11 -> expr11 MULTIPLY expr13 .)
    CLOSE_PAREN     reduce using rule 176 (expr11 -> expr11 MULTIPLY expr13 .)
    KEYWORD_elsif   reduce using rule 176 (expr11 -> expr11 MULTIPLY expr13 .)
    KEYWORD_else    reduce using rule 176 (expr11 -> expr11 MULTIPLY expr13 .)
    COMMA           reduce using rule 176 (expr11 -> expr11 MULTIPLY expr13 .)
    CLOSE_BRACKET   reduce using rule 176 (expr11 -> expr11 MULTIPLY expr13 .)


state 144

    (177) expr11 -> expr11 DIV expr13 .

    MULTIPLY        reduce using rule 177 (expr11 -> expr11 DIV expr13 .)
    DIV             reduce using rule 177 (expr11 -> expr11 DIV expr13 .)
    MOD             reduce using rule 177 (expr11 -> expr11 DIV expr13 .)
    PLUS            reduce using rule 177 (expr11 -> expr11 DIV expr13 .)
    MINUS           reduce using rule 177 (expr11 -> expr11 DIV expr13 .)
    SHIFTL          reduce using rule 177 (expr11 -> expr11 DIV expr13 .)
    SHIFTR          reduce using rule 177 (expr11 -> expr11 DIV expr13 .)
    BITAND          reduce using rule 177 (expr11 -> expr11 DIV expr13 .)
    LESSEQUAL       reduce using rule 177 (expr11 -> expr11 DIV expr13 .)
    LESS            reduce using rule 177 (expr11 -> expr11 DIV expr13 .)
    GREATER         reduce using rule 177 (expr11 -> expr11 DIV expr13 .)
    GREATEREQUAL    reduce using rule 177 (expr11 -> expr11 DIV expr13 .)
    BITXOR          reduce using rule 177 (expr11 -> expr11 DIV expr13 .)
    PIPE            reduce using rule 177 (expr11 -> expr11 DIV expr13 .)
    DOUBLEEQUAL     reduce using rule 177 (expr11 -> expr11 DIV expr13 .)
    NOTEQUAL        reduce using rule 177 (expr11 -> expr11 DIV expr13 .)
    LOGICALAND      reduce using rule 177 (expr11 -> expr11 DIV expr13 .)
    LOGICALOR       reduce using rule 177 (expr11 -> expr11 DIV expr13 .)
    KEYWORD_while   reduce using rule 177 (expr11 -> expr11 DIV expr13 .)
    KEYWORD_until   reduce using rule 177 (expr11 -> expr11 DIV expr13 .)
    DELIM           reduce using rule 177 (expr11 -> expr11 DIV expr13 .)
    newline         reduce using rule 177 (expr11 -> expr11 DIV expr13 .)
    KEYWORD_end     reduce using rule 177 (expr11 -> expr11 DIV expr13 .)
    $end            reduce using rule 177 (expr11 -> expr11 DIV expr13 .)
    KEYWORD_do      reduce using rule 177 (expr11 -> expr11 DIV expr13 .)
    KEYWORD_then    reduce using rule 177 (expr11 -> expr11 DIV expr13 .)
    CLOSE_PAREN     reduce using rule 177 (expr11 -> expr11 DIV expr13 .)
    KEYWORD_elsif   reduce using rule 177 (expr11 -> expr11 DIV expr13 .)
    KEYWORD_else    reduce using rule 177 (expr11 -> expr11 DIV expr13 .)
    COMMA           reduce using rule 177 (expr11 -> expr11 DIV expr13 .)
    CLOSE_BRACKET   reduce using rule 177 (expr11 -> expr11 DIV expr13 .)


state 145

    (178) expr11 -> expr11 MOD expr13 .

    MULTIPLY        reduce using rule 178 (expr11 -> expr11 MOD expr13 .)
    DIV             reduce using rule 178 (expr11 -> expr11 MOD expr13 .)
    MOD             reduce using rule 178 (expr11 -> expr11 MOD expr13 .)
    PLUS            reduce using rule 178 (expr11 -> expr11 MOD expr13 .)
    MINUS           reduce using rule 178 (expr11 -> expr11 MOD expr13 .)
    SHIFTL          reduce using rule 178 (expr11 -> expr11 MOD expr13 .)
    SHIFTR          reduce using rule 178 (expr11 -> expr11 MOD expr13 .)
    BITAND          reduce using rule 178 (expr11 -> expr11 MOD expr13 .)
    LESSEQUAL       reduce using rule 178 (expr11 -> expr11 MOD expr13 .)
    LESS            reduce using rule 178 (expr11 -> expr11 MOD expr13 .)
    GREATER         reduce using rule 178 (expr11 -> expr11 MOD expr13 .)
    GREATEREQUAL    reduce using rule 178 (expr11 -> expr11 MOD expr13 .)
    BITXOR          reduce using rule 178 (expr11 -> expr11 MOD expr13 .)
    PIPE            reduce using rule 178 (expr11 -> expr11 MOD expr13 .)
    DOUBLEEQUAL     reduce using rule 178 (expr11 -> expr11 MOD expr13 .)
    NOTEQUAL        reduce using rule 178 (expr11 -> expr11 MOD expr13 .)
    LOGICALAND      reduce using rule 178 (expr11 -> expr11 MOD expr13 .)
    LOGICALOR       reduce using rule 178 (expr11 -> expr11 MOD expr13 .)
    KEYWORD_while   reduce using rule 178 (expr11 -> expr11 MOD expr13 .)
    KEYWORD_until   reduce using rule 178 (expr11 -> expr11 MOD expr13 .)
    DELIM           reduce using rule 178 (expr11 -> expr11 MOD expr13 .)
    newline         reduce using rule 178 (expr11 -> expr11 MOD expr13 .)
    KEYWORD_end     reduce using rule 178 (expr11 -> expr11 MOD expr13 .)
    $end            reduce using rule 178 (expr11 -> expr11 MOD expr13 .)
    KEYWORD_do      reduce using rule 178 (expr11 -> expr11 MOD expr13 .)
    KEYWORD_then    reduce using rule 178 (expr11 -> expr11 MOD expr13 .)
    CLOSE_PAREN     reduce using rule 178 (expr11 -> expr11 MOD expr13 .)
    KEYWORD_elsif   reduce using rule 178 (expr11 -> expr11 MOD expr13 .)
    KEYWORD_else    reduce using rule 178 (expr11 -> expr11 MOD expr13 .)
    COMMA           reduce using rule 178 (expr11 -> expr11 MOD expr13 .)
    CLOSE_BRACKET   reduce using rule 178 (expr11 -> expr11 MOD expr13 .)


state 146

    (59) arguments -> CONSTANTS .
    (63) func_arg_expr -> CONSTANTS . EQUAL primary

    COMMA           reduce using rule 59 (arguments -> CONSTANTS .)
    DELIM           reduce using rule 59 (arguments -> CONSTANTS .)
    newline         reduce using rule 59 (arguments -> CONSTANTS .)
    $end            reduce using rule 59 (arguments -> CONSTANTS .)
    CLOSE_PAREN     reduce using rule 59 (arguments -> CONSTANTS .)
    KEYWORD_return  reduce using rule 59 (arguments -> CONSTANTS .)
    SIGIL_AT        reduce using rule 59 (arguments -> CONSTANTS .)
    SIGIL_DOUBLE_AT reduce using rule 59 (arguments -> CONSTANTS .)
    KEYWORD_puts    reduce using rule 59 (arguments -> CONSTANTS .)
    KEYWORD_end     reduce using rule 59 (arguments -> CONSTANTS .)
    KEYWORD_if      reduce using rule 59 (arguments -> CONSTANTS .)
    KEYWORD_while   reduce using rule 59 (arguments -> CONSTANTS .)
    KEYWORD_begin   reduce using rule 59 (arguments -> CONSTANTS .)
    KEYWORD_until   reduce using rule 59 (arguments -> CONSTANTS .)
    KEYWORD_for     reduce using rule 59 (arguments -> CONSTANTS .)
    KEYWORD_break   reduce using rule 59 (arguments -> CONSTANTS .)
    KEYWORD_next    reduce using rule 59 (arguments -> CONSTANTS .)
    KEYWORD_redo    reduce using rule 59 (arguments -> CONSTANTS .)
    KEYWORD_exit    reduce using rule 59 (arguments -> CONSTANTS .)
    VARIABLES       reduce using rule 59 (arguments -> CONSTANTS .)
    CONSTANTS       reduce using rule 59 (arguments -> CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 59 (arguments -> CONSTANTS .)
    OPEN_PAREN      reduce using rule 59 (arguments -> CONSTANTS .)
    PLUS            reduce using rule 59 (arguments -> CONSTANTS .)
    MINUS           reduce using rule 59 (arguments -> CONSTANTS .)
    BITNOT          reduce using rule 59 (arguments -> CONSTANTS .)
    BITCOMP         reduce using rule 59 (arguments -> CONSTANTS .)
    INT_CONSTANTS   reduce using rule 59 (arguments -> CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 59 (arguments -> CONSTANTS .)
    EQUAL           shift and go to state 173


state 147

    (58) arguments -> VARIABLES .
    (62) func_arg_expr -> VARIABLES . EQUAL primary

    COMMA           reduce using rule 58 (arguments -> VARIABLES .)
    DELIM           reduce using rule 58 (arguments -> VARIABLES .)
    newline         reduce using rule 58 (arguments -> VARIABLES .)
    $end            reduce using rule 58 (arguments -> VARIABLES .)
    CLOSE_PAREN     reduce using rule 58 (arguments -> VARIABLES .)
    KEYWORD_return  reduce using rule 58 (arguments -> VARIABLES .)
    SIGIL_AT        reduce using rule 58 (arguments -> VARIABLES .)
    SIGIL_DOUBLE_AT reduce using rule 58 (arguments -> VARIABLES .)
    KEYWORD_puts    reduce using rule 58 (arguments -> VARIABLES .)
    KEYWORD_end     reduce using rule 58 (arguments -> VARIABLES .)
    KEYWORD_if      reduce using rule 58 (arguments -> VARIABLES .)
    KEYWORD_while   reduce using rule 58 (arguments -> VARIABLES .)
    KEYWORD_begin   reduce using rule 58 (arguments -> VARIABLES .)
    KEYWORD_until   reduce using rule 58 (arguments -> VARIABLES .)
    KEYWORD_for     reduce using rule 58 (arguments -> VARIABLES .)
    KEYWORD_break   reduce using rule 58 (arguments -> VARIABLES .)
    KEYWORD_next    reduce using rule 58 (arguments -> VARIABLES .)
    KEYWORD_redo    reduce using rule 58 (arguments -> VARIABLES .)
    KEYWORD_exit    reduce using rule 58 (arguments -> VARIABLES .)
    VARIABLES       reduce using rule 58 (arguments -> VARIABLES .)
    CONSTANTS       reduce using rule 58 (arguments -> VARIABLES .)
    BOOLEAN_CONSTANTS reduce using rule 58 (arguments -> VARIABLES .)
    OPEN_PAREN      reduce using rule 58 (arguments -> VARIABLES .)
    PLUS            reduce using rule 58 (arguments -> VARIABLES .)
    MINUS           reduce using rule 58 (arguments -> VARIABLES .)
    BITNOT          reduce using rule 58 (arguments -> VARIABLES .)
    BITCOMP         reduce using rule 58 (arguments -> VARIABLES .)
    INT_CONSTANTS   reduce using rule 58 (arguments -> VARIABLES .)
    FLOAT_CONSTANTS reduce using rule 58 (arguments -> VARIABLES .)
    EQUAL           shift and go to state 175


state 148

    (61) arguments -> newline .

    COMMA           reduce using rule 61 (arguments -> newline .)
    DELIM           reduce using rule 61 (arguments -> newline .)
    newline         reduce using rule 61 (arguments -> newline .)
    $end            reduce using rule 61 (arguments -> newline .)
    CLOSE_PAREN     reduce using rule 61 (arguments -> newline .)
    KEYWORD_return  reduce using rule 61 (arguments -> newline .)
    SIGIL_AT        reduce using rule 61 (arguments -> newline .)
    SIGIL_DOUBLE_AT reduce using rule 61 (arguments -> newline .)
    KEYWORD_puts    reduce using rule 61 (arguments -> newline .)
    KEYWORD_end     reduce using rule 61 (arguments -> newline .)
    KEYWORD_if      reduce using rule 61 (arguments -> newline .)
    KEYWORD_while   reduce using rule 61 (arguments -> newline .)
    KEYWORD_begin   reduce using rule 61 (arguments -> newline .)
    KEYWORD_until   reduce using rule 61 (arguments -> newline .)
    KEYWORD_for     reduce using rule 61 (arguments -> newline .)
    KEYWORD_break   reduce using rule 61 (arguments -> newline .)
    KEYWORD_next    reduce using rule 61 (arguments -> newline .)
    KEYWORD_redo    reduce using rule 61 (arguments -> newline .)
    KEYWORD_exit    reduce using rule 61 (arguments -> newline .)
    VARIABLES       reduce using rule 61 (arguments -> newline .)
    CONSTANTS       reduce using rule 61 (arguments -> newline .)
    BOOLEAN_CONSTANTS reduce using rule 61 (arguments -> newline .)
    OPEN_PAREN      reduce using rule 61 (arguments -> newline .)
    PLUS            reduce using rule 61 (arguments -> newline .)
    MINUS           reduce using rule 61 (arguments -> newline .)
    BITNOT          reduce using rule 61 (arguments -> newline .)
    BITCOMP         reduce using rule 61 (arguments -> newline .)
    INT_CONSTANTS   reduce using rule 61 (arguments -> newline .)
    FLOAT_CONSTANTS reduce using rule 61 (arguments -> newline .)


state 149

    (14) func_defn -> KEYWORD_def fname OPEN_PAREN . arguments CLOSE_PAREN func_stmts opt_terms KEYWORD_end
    (15) func_defn -> KEYWORD_def fname OPEN_PAREN . CLOSE_PAREN func_stmts opt_terms KEYWORD_end
    (55) arguments -> . arguments COMMA VARIABLES
    (56) arguments -> . arguments COMMA CONSTANTS
    (57) arguments -> . arguments COMMA func_arg_expr
    (58) arguments -> . VARIABLES
    (59) arguments -> . CONSTANTS
    (60) arguments -> . func_arg_expr
    (61) arguments -> . newline
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary

    CLOSE_PAREN     shift and go to state 193
    VARIABLES       shift and go to state 147
    CONSTANTS       shift and go to state 146
    newline         shift and go to state 148

    func_arg_expr                  shift and go to state 151
    arguments                      shift and go to state 192

state 150

    (16) func_defn -> KEYWORD_def fname arguments . func_stmts opt_terms KEYWORD_end
    (55) arguments -> arguments . COMMA VARIABLES
    (56) arguments -> arguments . COMMA CONSTANTS
    (57) arguments -> arguments . COMMA func_arg_expr
    (95) func_stmts -> . func_stmt
    (96) func_stmts -> . func_stmts terms func_stmt
    (97) func_stmts -> . none
    (98) func_stmt -> . top_stmt
    (99) func_stmt -> . KEYWORD_return func_ret_arg
    (198) none -> .
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . MLHS EQUAL MRHS
    (151) expr1 -> . expr3
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . MLHS EQUAL fname func_ret_arg
    (125) MLHS -> . mlhs
    (126) MLHS -> . MLHS COMMA mlhs
    (152) expr3 -> . expr3 LOGICALOR expr4
    (153) expr3 -> . expr4
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (129) mlhs -> . VARIABLES
    (130) mlhs -> . CONSTANTS
    (131) mlhs -> . array
    (154) expr4 -> . expr4 LOGICALAND expr5
    (155) expr4 -> . expr5
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (156) expr5 -> . expr6 DOUBLEEQUAL expr6
    (157) expr5 -> . expr6 NOTEQUAL expr6
    (158) expr5 -> . expr6
    (159) expr6 -> . expr7 LESSEQUAL expr7
    (160) expr6 -> . expr7 LESS expr7
    (161) expr6 -> . expr7 GREATER expr7
    (162) expr6 -> . expr7 GREATEREQUAL expr7
    (163) expr6 -> . expr7
    (164) expr6 -> . BOOLEAN_CONSTANTS
    (165) expr7 -> . expr7 BITXOR expr8
    (166) expr7 -> . expr7 PIPE expr8
    (167) expr7 -> . expr8
    (168) expr8 -> . expr8 BITAND expr9
    (169) expr8 -> . expr9
    (170) expr9 -> . expr9 SHIFTL expr10
    (171) expr9 -> . expr9 SHIFTR expr10
    (172) expr9 -> . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP

    COMMA           shift and go to state 197
    KEYWORD_return  shift and go to state 196
    DELIM           reduce using rule 198 (none -> .)
    newline         reduce using rule 198 (none -> .)
    KEYWORD_end     reduce using rule 198 (none -> .)
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)
    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 38
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 52
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 48
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    VARIABLES       shift and go to state 98
    CONSTANTS       shift and go to state 101
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29

    func_stmt                      shift and go to state 194
    mlhs                           shift and go to state 2
    func_stmts                     shift and go to state 195
    expr11                         shift and go to state 15
    expr13                         shift and go to state 16
    array                          shift and go to state 26
    expr3                          shift and go to state 41
    expr1                          shift and go to state 42
    expr6                          shift and go to state 43
    puts_stmt                      shift and go to state 18
    expr5                          shift and go to state 45
    func_call_stmt                 shift and go to state 32
    expr7                          shift and go to state 7
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    expr4                          shift and go to state 8
    fname                          shift and go to state 44
    exit_stmt                      shift and go to state 49
    MLHS                           shift and go to state 50
    stmt                           shift and go to state 20
    loop_stmt                      shift and go to state 9
    uexpr                          shift and go to state 10
    none                           shift and go to state 198
    expr                           shift and go to state 35
    expr10                         shift and go to state 14
    top_stmt                       shift and go to state 199

state 151

    (60) arguments -> func_arg_expr .

    COMMA           reduce using rule 60 (arguments -> func_arg_expr .)
    DELIM           reduce using rule 60 (arguments -> func_arg_expr .)
    newline         reduce using rule 60 (arguments -> func_arg_expr .)
    $end            reduce using rule 60 (arguments -> func_arg_expr .)
    CLOSE_PAREN     reduce using rule 60 (arguments -> func_arg_expr .)
    KEYWORD_return  reduce using rule 60 (arguments -> func_arg_expr .)
    SIGIL_AT        reduce using rule 60 (arguments -> func_arg_expr .)
    SIGIL_DOUBLE_AT reduce using rule 60 (arguments -> func_arg_expr .)
    KEYWORD_puts    reduce using rule 60 (arguments -> func_arg_expr .)
    KEYWORD_end     reduce using rule 60 (arguments -> func_arg_expr .)
    KEYWORD_if      reduce using rule 60 (arguments -> func_arg_expr .)
    KEYWORD_while   reduce using rule 60 (arguments -> func_arg_expr .)
    KEYWORD_begin   reduce using rule 60 (arguments -> func_arg_expr .)
    KEYWORD_until   reduce using rule 60 (arguments -> func_arg_expr .)
    KEYWORD_for     reduce using rule 60 (arguments -> func_arg_expr .)
    KEYWORD_break   reduce using rule 60 (arguments -> func_arg_expr .)
    KEYWORD_next    reduce using rule 60 (arguments -> func_arg_expr .)
    KEYWORD_redo    reduce using rule 60 (arguments -> func_arg_expr .)
    KEYWORD_exit    reduce using rule 60 (arguments -> func_arg_expr .)
    VARIABLES       reduce using rule 60 (arguments -> func_arg_expr .)
    CONSTANTS       reduce using rule 60 (arguments -> func_arg_expr .)
    BOOLEAN_CONSTANTS reduce using rule 60 (arguments -> func_arg_expr .)
    OPEN_PAREN      reduce using rule 60 (arguments -> func_arg_expr .)
    PLUS            reduce using rule 60 (arguments -> func_arg_expr .)
    MINUS           reduce using rule 60 (arguments -> func_arg_expr .)
    BITNOT          reduce using rule 60 (arguments -> func_arg_expr .)
    BITCOMP         reduce using rule 60 (arguments -> func_arg_expr .)
    INT_CONSTANTS   reduce using rule 60 (arguments -> func_arg_expr .)
    FLOAT_CONSTANTS reduce using rule 60 (arguments -> func_arg_expr .)


state 152

    (11) statement -> CONSTANTS DOT KEYWORD_new . OPEN_PAREN arguments CLOSE_PAREN
    (12) statement -> CONSTANTS DOT KEYWORD_new . OPEN_PAREN CLOSE_PAREN
    (13) statement -> CONSTANTS DOT KEYWORD_new . arguments
    (55) arguments -> . arguments COMMA VARIABLES
    (56) arguments -> . arguments COMMA CONSTANTS
    (57) arguments -> . arguments COMMA func_arg_expr
    (58) arguments -> . VARIABLES
    (59) arguments -> . CONSTANTS
    (60) arguments -> . func_arg_expr
    (61) arguments -> . newline
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary

    OPEN_PAREN      shift and go to state 200
    VARIABLES       shift and go to state 147
    CONSTANTS       shift and go to state 146
    newline         shift and go to state 148

    func_arg_expr                  shift and go to state 151
    arguments                      shift and go to state 201

state 153

    (195) terms -> terms term .

    DELIM           reduce using rule 195 (terms -> terms term .)
    newline         reduce using rule 195 (terms -> terms term .)
    SIGIL_DOUBLE_AT reduce using rule 195 (terms -> terms term .)
    KEYWORD_def     reduce using rule 195 (terms -> terms term .)
    KEYWORD_end     reduce using rule 195 (terms -> terms term .)
    KEYWORD_if      reduce using rule 195 (terms -> terms term .)
    KEYWORD_while   reduce using rule 195 (terms -> terms term .)
    KEYWORD_begin   reduce using rule 195 (terms -> terms term .)
    KEYWORD_until   reduce using rule 195 (terms -> terms term .)
    KEYWORD_for     reduce using rule 195 (terms -> terms term .)
    KEYWORD_puts    reduce using rule 195 (terms -> terms term .)
    KEYWORD_break   reduce using rule 195 (terms -> terms term .)
    KEYWORD_next    reduce using rule 195 (terms -> terms term .)
    KEYWORD_redo    reduce using rule 195 (terms -> terms term .)
    KEYWORD_exit    reduce using rule 195 (terms -> terms term .)
    VARIABLES       reduce using rule 195 (terms -> terms term .)
    CONSTANTS       reduce using rule 195 (terms -> terms term .)
    BOOLEAN_CONSTANTS reduce using rule 195 (terms -> terms term .)
    OPEN_PAREN      reduce using rule 195 (terms -> terms term .)
    PLUS            reduce using rule 195 (terms -> terms term .)
    MINUS           reduce using rule 195 (terms -> terms term .)
    BITNOT          reduce using rule 195 (terms -> terms term .)
    BITCOMP         reduce using rule 195 (terms -> terms term .)
    INT_CONSTANTS   reduce using rule 195 (terms -> terms term .)
    FLOAT_CONSTANTS reduce using rule 195 (terms -> terms term .)
    KEYWORD_return  reduce using rule 195 (terms -> terms term .)
    SIGIL_AT        reduce using rule 195 (terms -> terms term .)
    KEYWORD_elsif   reduce using rule 195 (terms -> terms term .)
    KEYWORD_else    reduce using rule 195 (terms -> terms term .)
    KEYWORD_class   reduce using rule 195 (terms -> terms term .)
    $end            reduce using rule 195 (terms -> terms term .)


state 154

    (4) statements -> statements terms statement .

    DELIM           reduce using rule 4 (statements -> statements terms statement .)
    newline         reduce using rule 4 (statements -> statements terms statement .)
    $end            reduce using rule 4 (statements -> statements terms statement .)


state 155

    (72) top_stmt -> KEYWORD_until expr3 opt_do . gen_stmts opt_terms KEYWORD_end
    (76) gen_stmts -> . top_stmt
    (77) gen_stmts -> . gen_stmts terms top_stmt
    (78) gen_stmts -> . none
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (198) none -> .
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . MLHS EQUAL MRHS
    (151) expr1 -> . expr3
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . MLHS EQUAL fname func_ret_arg
    (125) MLHS -> . mlhs
    (126) MLHS -> . MLHS COMMA mlhs
    (152) expr3 -> . expr3 LOGICALOR expr4
    (153) expr3 -> . expr4
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (129) mlhs -> . VARIABLES
    (130) mlhs -> . CONSTANTS
    (131) mlhs -> . array
    (154) expr4 -> . expr4 LOGICALAND expr5
    (155) expr4 -> . expr5
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (156) expr5 -> . expr6 DOUBLEEQUAL expr6
    (157) expr5 -> . expr6 NOTEQUAL expr6
    (158) expr5 -> . expr6
    (159) expr6 -> . expr7 LESSEQUAL expr7
    (160) expr6 -> . expr7 LESS expr7
    (161) expr6 -> . expr7 GREATER expr7
    (162) expr6 -> . expr7 GREATEREQUAL expr7
    (163) expr6 -> . expr7
    (164) expr6 -> . BOOLEAN_CONSTANTS
    (165) expr7 -> . expr7 BITXOR expr8
    (166) expr7 -> . expr7 PIPE expr8
    (167) expr7 -> . expr8
    (168) expr8 -> . expr8 BITAND expr9
    (169) expr8 -> . expr9
    (170) expr9 -> . expr9 SHIFTL expr10
    (171) expr9 -> . expr9 SHIFTR expr10
    (172) expr9 -> . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP

    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 38
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 52
    DELIM           reduce using rule 198 (none -> .)
    newline         reduce using rule 198 (none -> .)
    KEYWORD_end     reduce using rule 198 (none -> .)
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 48
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    VARIABLES       shift and go to state 98
    CONSTANTS       shift and go to state 101
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29

    mlhs                           shift and go to state 2
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr13                         shift and go to state 16
    array                          shift and go to state 26
    expr3                          shift and go to state 41
    expr1                          shift and go to state 42
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    puts_stmt                      shift and go to state 18
    expr5                          shift and go to state 45
    func_call_stmt                 shift and go to state 32
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    expr4                          shift and go to state 8
    fname                          shift and go to state 44
    exit_stmt                      shift and go to state 49
    MLHS                           shift and go to state 50
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 20
    uexpr                          shift and go to state 10
    none                           shift and go to state 99
    gen_stmts                      shift and go to state 202
    expr                           shift and go to state 35
    top_stmt                       shift and go to state 102

state 156

    (109) opt_then -> newline .

    KEYWORD_if      reduce using rule 109 (opt_then -> newline .)
    KEYWORD_while   reduce using rule 109 (opt_then -> newline .)
    KEYWORD_begin   reduce using rule 109 (opt_then -> newline .)
    KEYWORD_until   reduce using rule 109 (opt_then -> newline .)
    KEYWORD_for     reduce using rule 109 (opt_then -> newline .)
    KEYWORD_puts    reduce using rule 109 (opt_then -> newline .)
    KEYWORD_break   reduce using rule 109 (opt_then -> newline .)
    KEYWORD_next    reduce using rule 109 (opt_then -> newline .)
    KEYWORD_redo    reduce using rule 109 (opt_then -> newline .)
    KEYWORD_exit    reduce using rule 109 (opt_then -> newline .)
    VARIABLES       reduce using rule 109 (opt_then -> newline .)
    CONSTANTS       reduce using rule 109 (opt_then -> newline .)
    BOOLEAN_CONSTANTS reduce using rule 109 (opt_then -> newline .)
    OPEN_PAREN      reduce using rule 109 (opt_then -> newline .)
    PLUS            reduce using rule 109 (opt_then -> newline .)
    MINUS           reduce using rule 109 (opt_then -> newline .)
    BITNOT          reduce using rule 109 (opt_then -> newline .)
    BITCOMP         reduce using rule 109 (opt_then -> newline .)
    DELIM           reduce using rule 109 (opt_then -> newline .)
    newline         reduce using rule 109 (opt_then -> newline .)
    KEYWORD_elsif   reduce using rule 109 (opt_then -> newline .)
    KEYWORD_else    reduce using rule 109 (opt_then -> newline .)
    KEYWORD_end     reduce using rule 109 (opt_then -> newline .)
    INT_CONSTANTS   reduce using rule 109 (opt_then -> newline .)
    FLOAT_CONSTANTS reduce using rule 109 (opt_then -> newline .)


state 157

    (108) opt_then -> KEYWORD_then .

    KEYWORD_if      reduce using rule 108 (opt_then -> KEYWORD_then .)
    KEYWORD_while   reduce using rule 108 (opt_then -> KEYWORD_then .)
    KEYWORD_begin   reduce using rule 108 (opt_then -> KEYWORD_then .)
    KEYWORD_until   reduce using rule 108 (opt_then -> KEYWORD_then .)
    KEYWORD_for     reduce using rule 108 (opt_then -> KEYWORD_then .)
    KEYWORD_puts    reduce using rule 108 (opt_then -> KEYWORD_then .)
    KEYWORD_break   reduce using rule 108 (opt_then -> KEYWORD_then .)
    KEYWORD_next    reduce using rule 108 (opt_then -> KEYWORD_then .)
    KEYWORD_redo    reduce using rule 108 (opt_then -> KEYWORD_then .)
    KEYWORD_exit    reduce using rule 108 (opt_then -> KEYWORD_then .)
    VARIABLES       reduce using rule 108 (opt_then -> KEYWORD_then .)
    CONSTANTS       reduce using rule 108 (opt_then -> KEYWORD_then .)
    BOOLEAN_CONSTANTS reduce using rule 108 (opt_then -> KEYWORD_then .)
    OPEN_PAREN      reduce using rule 108 (opt_then -> KEYWORD_then .)
    PLUS            reduce using rule 108 (opt_then -> KEYWORD_then .)
    MINUS           reduce using rule 108 (opt_then -> KEYWORD_then .)
    BITNOT          reduce using rule 108 (opt_then -> KEYWORD_then .)
    BITCOMP         reduce using rule 108 (opt_then -> KEYWORD_then .)
    DELIM           reduce using rule 108 (opt_then -> KEYWORD_then .)
    newline         reduce using rule 108 (opt_then -> KEYWORD_then .)
    KEYWORD_elsif   reduce using rule 108 (opt_then -> KEYWORD_then .)
    KEYWORD_else    reduce using rule 108 (opt_then -> KEYWORD_then .)
    KEYWORD_end     reduce using rule 108 (opt_then -> KEYWORD_then .)
    INT_CONSTANTS   reduce using rule 108 (opt_then -> KEYWORD_then .)
    FLOAT_CONSTANTS reduce using rule 108 (opt_then -> KEYWORD_then .)


state 158

    (67) top_stmt -> KEYWORD_if expr3 opt_then . gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (76) gen_stmts -> . top_stmt
    (77) gen_stmts -> . gen_stmts terms top_stmt
    (78) gen_stmts -> . none
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (198) none -> .
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . MLHS EQUAL MRHS
    (151) expr1 -> . expr3
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . MLHS EQUAL fname func_ret_arg
    (125) MLHS -> . mlhs
    (126) MLHS -> . MLHS COMMA mlhs
    (152) expr3 -> . expr3 LOGICALOR expr4
    (153) expr3 -> . expr4
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (129) mlhs -> . VARIABLES
    (130) mlhs -> . CONSTANTS
    (131) mlhs -> . array
    (154) expr4 -> . expr4 LOGICALAND expr5
    (155) expr4 -> . expr5
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (156) expr5 -> . expr6 DOUBLEEQUAL expr6
    (157) expr5 -> . expr6 NOTEQUAL expr6
    (158) expr5 -> . expr6
    (159) expr6 -> . expr7 LESSEQUAL expr7
    (160) expr6 -> . expr7 LESS expr7
    (161) expr6 -> . expr7 GREATER expr7
    (162) expr6 -> . expr7 GREATEREQUAL expr7
    (163) expr6 -> . expr7
    (164) expr6 -> . BOOLEAN_CONSTANTS
    (165) expr7 -> . expr7 BITXOR expr8
    (166) expr7 -> . expr7 PIPE expr8
    (167) expr7 -> . expr8
    (168) expr8 -> . expr8 BITAND expr9
    (169) expr8 -> . expr9
    (170) expr9 -> . expr9 SHIFTL expr10
    (171) expr9 -> . expr9 SHIFTR expr10
    (172) expr9 -> . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP

    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 38
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 52
    DELIM           reduce using rule 198 (none -> .)
    newline         reduce using rule 198 (none -> .)
    KEYWORD_elsif   reduce using rule 198 (none -> .)
    KEYWORD_else    reduce using rule 198 (none -> .)
    KEYWORD_end     reduce using rule 198 (none -> .)
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 48
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    VARIABLES       shift and go to state 98
    CONSTANTS       shift and go to state 101
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29

    mlhs                           shift and go to state 2
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr13                         shift and go to state 16
    array                          shift and go to state 26
    expr3                          shift and go to state 41
    expr1                          shift and go to state 42
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    puts_stmt                      shift and go to state 18
    expr5                          shift and go to state 45
    func_call_stmt                 shift and go to state 32
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    expr4                          shift and go to state 8
    fname                          shift and go to state 44
    exit_stmt                      shift and go to state 49
    MLHS                           shift and go to state 50
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 20
    uexpr                          shift and go to state 10
    none                           shift and go to state 99
    gen_stmts                      shift and go to state 203
    expr                           shift and go to state 35
    top_stmt                       shift and go to state 102

state 159

    (186) array -> VARIABLES OPEN_BRACKET expr7 . CLOSE_BRACKET
    (165) expr7 -> expr7 . BITXOR expr8
    (166) expr7 -> expr7 . PIPE expr8

    CLOSE_BRACKET   shift and go to state 204
    BITXOR          shift and go to state 61
    PIPE            shift and go to state 60


state 160

    (8) statement -> VARIABLES DOT VARIABLES . OPEN_PAREN arguments CLOSE_PAREN
    (9) statement -> VARIABLES DOT VARIABLES . OPEN_PAREN CLOSE_PAREN
    (10) statement -> VARIABLES DOT VARIABLES . arguments
    (55) arguments -> . arguments COMMA VARIABLES
    (56) arguments -> . arguments COMMA CONSTANTS
    (57) arguments -> . arguments COMMA func_arg_expr
    (58) arguments -> . VARIABLES
    (59) arguments -> . CONSTANTS
    (60) arguments -> . func_arg_expr
    (61) arguments -> . newline
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary

    OPEN_PAREN      shift and go to state 205
    VARIABLES       shift and go to state 147
    CONSTANTS       shift and go to state 146
    newline         shift and go to state 148

    func_arg_expr                  shift and go to state 151
    arguments                      shift and go to state 206

state 161

    (180) expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .

    MULTIPLY        reduce using rule 180 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    DIV             reduce using rule 180 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    MOD             reduce using rule 180 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    PLUS            reduce using rule 180 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    MINUS           reduce using rule 180 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    SHIFTL          reduce using rule 180 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    SHIFTR          reduce using rule 180 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    BITAND          reduce using rule 180 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    LESSEQUAL       reduce using rule 180 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    LESS            reduce using rule 180 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    GREATER         reduce using rule 180 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    GREATEREQUAL    reduce using rule 180 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    BITXOR          reduce using rule 180 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    PIPE            reduce using rule 180 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    DOUBLEEQUAL     reduce using rule 180 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    NOTEQUAL        reduce using rule 180 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    LOGICALAND      reduce using rule 180 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    LOGICALOR       reduce using rule 180 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_while   reduce using rule 180 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_until   reduce using rule 180 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    DELIM           reduce using rule 180 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    newline         reduce using rule 180 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_elsif   reduce using rule 180 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_else    reduce using rule 180 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_end     reduce using rule 180 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    $end            reduce using rule 180 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_do      reduce using rule 180 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_then    reduce using rule 180 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 180 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    COMMA           reduce using rule 180 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 180 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)


state 162

    (136) mrhs -> VARIABLES DOT . VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (137) mrhs -> VARIABLES DOT . VARIABLES OPEN_PAREN CLOSE_PAREN
    (138) mrhs -> VARIABLES DOT . VARIABLES

    VARIABLES       shift and go to state 207


state 163

    (135) mrhs -> OPEN_BRACKET CLOSE_BRACKET .

    KEYWORD_while   reduce using rule 135 (mrhs -> OPEN_BRACKET CLOSE_BRACKET .)
    KEYWORD_until   reduce using rule 135 (mrhs -> OPEN_BRACKET CLOSE_BRACKET .)
    DELIM           reduce using rule 135 (mrhs -> OPEN_BRACKET CLOSE_BRACKET .)
    newline         reduce using rule 135 (mrhs -> OPEN_BRACKET CLOSE_BRACKET .)
    $end            reduce using rule 135 (mrhs -> OPEN_BRACKET CLOSE_BRACKET .)
    KEYWORD_end     reduce using rule 135 (mrhs -> OPEN_BRACKET CLOSE_BRACKET .)
    KEYWORD_elsif   reduce using rule 135 (mrhs -> OPEN_BRACKET CLOSE_BRACKET .)
    KEYWORD_else    reduce using rule 135 (mrhs -> OPEN_BRACKET CLOSE_BRACKET .)
    COMMA           reduce using rule 135 (mrhs -> OPEN_BRACKET CLOSE_BRACKET .)


state 164

    (124) expr -> MLHS EQUAL . MRHS
    (127) MRHS -> . mrhs
    (128) MRHS -> . MRHS COMMA mrhs
    (132) mrhs -> . expr1
    (133) mrhs -> . str_expr
    (134) mrhs -> . KEYWORD_gets
    (135) mrhs -> . OPEN_BRACKET CLOSE_BRACKET
    (136) mrhs -> . VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (137) mrhs -> . VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (138) mrhs -> . VARIABLES DOT VARIABLES
    (139) mrhs -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (140) mrhs -> . CONSTANTS DOT KEYWORD_new
    (141) mrhs -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (151) expr1 -> . expr3
    (142) str_expr -> . STRING_CONSTANTS
    (152) expr3 -> . expr3 LOGICALOR expr4
    (153) expr3 -> . expr4
    (154) expr4 -> . expr4 LOGICALAND expr5
    (155) expr4 -> . expr5
    (156) expr5 -> . expr6 DOUBLEEQUAL expr6
    (157) expr5 -> . expr6 NOTEQUAL expr6
    (158) expr5 -> . expr6
    (159) expr6 -> . expr7 LESSEQUAL expr7
    (160) expr6 -> . expr7 LESS expr7
    (161) expr6 -> . expr7 GREATER expr7
    (162) expr6 -> . expr7 GREATEREQUAL expr7
    (163) expr6 -> . expr7
    (164) expr6 -> . BOOLEAN_CONSTANTS
    (165) expr7 -> . expr7 BITXOR expr8
    (166) expr7 -> . expr7 PIPE expr8
    (167) expr7 -> . expr8
    (168) expr8 -> . expr8 BITAND expr9
    (169) expr8 -> . expr9
    (170) expr9 -> . expr9 SHIFTL expr10
    (171) expr9 -> . expr9 SHIFTR expr10
    (172) expr9 -> . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (198) none -> .

    KEYWORD_gets    shift and go to state 92
    OPEN_BRACKET    shift and go to state 90
    VARIABLES       shift and go to state 208
    CONSTANTS       shift and go to state 209
    STRING_CONSTANTS shift and go to state 96
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)

    expr11                         shift and go to state 15
    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    str_expr                       shift and go to state 88
    expr13                         shift and go to state 16
    mrhs                           shift and go to state 182
    expr3                          shift and go to state 41
    MRHS                           shift and go to state 179
    expr1                          shift and go to state 91
    expr6                          shift and go to state 43
    expr4                          shift and go to state 8
    expr5                          shift and go to state 45
    expr10                         shift and go to state 14
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    array                          shift and go to state 55
    expr7                          shift and go to state 7

state 165

    (139) mrhs -> CONSTANTS DOT . KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (140) mrhs -> CONSTANTS DOT . KEYWORD_new
    (141) mrhs -> CONSTANTS DOT . KEYWORD_new OPEN_PAREN CLOSE_PAREN

    KEYWORD_new     shift and go to state 210


state 166

    (77) gen_stmts -> gen_stmts terms . top_stmt
    (193) opt_terms -> terms .
    (195) terms -> terms . term
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (196) term -> . DELIM
    (197) term -> . newline
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . MLHS EQUAL MRHS
    (151) expr1 -> . expr3
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . MLHS EQUAL fname func_ret_arg
    (125) MLHS -> . mlhs
    (126) MLHS -> . MLHS COMMA mlhs
    (152) expr3 -> . expr3 LOGICALOR expr4
    (153) expr3 -> . expr4
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (129) mlhs -> . VARIABLES
    (130) mlhs -> . CONSTANTS
    (131) mlhs -> . array
    (154) expr4 -> . expr4 LOGICALAND expr5
    (155) expr4 -> . expr5
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (156) expr5 -> . expr6 DOUBLEEQUAL expr6
    (157) expr5 -> . expr6 NOTEQUAL expr6
    (158) expr5 -> . expr6
    (159) expr6 -> . expr7 LESSEQUAL expr7
    (160) expr6 -> . expr7 LESS expr7
    (161) expr6 -> . expr7 GREATER expr7
    (162) expr6 -> . expr7 GREATEREQUAL expr7
    (163) expr6 -> . expr7
    (164) expr6 -> . BOOLEAN_CONSTANTS
    (165) expr7 -> . expr7 BITXOR expr8
    (166) expr7 -> . expr7 PIPE expr8
    (167) expr7 -> . expr8
    (168) expr8 -> . expr8 BITAND expr9
    (169) expr8 -> . expr9
    (170) expr9 -> . expr9 SHIFTL expr10
    (171) expr9 -> . expr9 SHIFTR expr10
    (172) expr9 -> . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP
    (198) none -> .

    KEYWORD_end     reduce using rule 193 (opt_terms -> terms .)
    KEYWORD_elsif   reduce using rule 193 (opt_terms -> terms .)
    KEYWORD_else    reduce using rule 193 (opt_terms -> terms .)
    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 38
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 52
    DELIM           shift and go to state 80
    newline         shift and go to state 79
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 48
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    VARIABLES       shift and go to state 98
    CONSTANTS       shift and go to state 101
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)

    mlhs                           shift and go to state 2
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr13                         shift and go to state 16
    array                          shift and go to state 26
    expr3                          shift and go to state 41
    expr1                          shift and go to state 42
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    puts_stmt                      shift and go to state 18
    expr5                          shift and go to state 45
    func_call_stmt                 shift and go to state 32
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    expr4                          shift and go to state 8
    fname                          shift and go to state 44
    exit_stmt                      shift and go to state 49
    MLHS                           shift and go to state 50
    none                           shift and go to state 34
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 20
    uexpr                          shift and go to state 10
    term                           shift and go to state 153
    expr                           shift and go to state 35
    top_stmt                       shift and go to state 211

state 167

    (70) top_stmt -> KEYWORD_begin gen_stmts opt_terms . KEYWORD_end KEYWORD_while expr3
    (73) top_stmt -> KEYWORD_begin gen_stmts opt_terms . KEYWORD_end KEYWORD_until expr3

    KEYWORD_end     shift and go to state 212


state 168

    (17) class_defn -> KEYWORD_class CONSTANTS newline . class_stmts opt_terms KEYWORD_end
    (18) class_stmts -> . class_stmt
    (19) class_stmts -> . class_stmts terms class_stmt
    (20) class_stmts -> . none
    (21) class_stmt -> . class_mlhs EQUAL class_mrhs
    (22) class_stmt -> . class_func
    (198) none -> .
    (31) class_mlhs -> . class_mlhs terms SIGIL_DOUBLE_AT
    (32) class_mlhs -> . SIGIL_DOUBLE_AT
    (33) class_func -> . KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (34) class_func -> . KEYWORD_def fname arguments class_method_stmts opt_terms KEYWORD_end
    (35) class_func -> . KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end

    DELIM           reduce using rule 198 (none -> .)
    newline         reduce using rule 198 (none -> .)
    KEYWORD_end     reduce using rule 198 (none -> .)
    SIGIL_DOUBLE_AT shift and go to state 215
    KEYWORD_def     shift and go to state 218

    none                           shift and go to state 213
    class_mlhs                     shift and go to state 214
    class_func                     shift and go to state 216
    class_stmts                    shift and go to state 217
    class_stmt                     shift and go to state 219

state 169

    (152) expr3 -> expr3 LOGICALOR expr4 .
    (154) expr4 -> expr4 . LOGICALAND expr5

    LOGICALOR       reduce using rule 152 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_while   reduce using rule 152 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_until   reduce using rule 152 (expr3 -> expr3 LOGICALOR expr4 .)
    DELIM           reduce using rule 152 (expr3 -> expr3 LOGICALOR expr4 .)
    newline         reduce using rule 152 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_end     reduce using rule 152 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_then    reduce using rule 152 (expr3 -> expr3 LOGICALOR expr4 .)
    $end            reduce using rule 152 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_elsif   reduce using rule 152 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_else    reduce using rule 152 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_do      reduce using rule 152 (expr3 -> expr3 LOGICALOR expr4 .)
    COMMA           reduce using rule 152 (expr3 -> expr3 LOGICALOR expr4 .)
    CLOSE_PAREN     reduce using rule 152 (expr3 -> expr3 LOGICALOR expr4 .)
    LOGICALAND      shift and go to state 63


state 170

    (157) expr5 -> expr6 NOTEQUAL expr6 .

    LOGICALAND      reduce using rule 157 (expr5 -> expr6 NOTEQUAL expr6 .)
    LOGICALOR       reduce using rule 157 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_while   reduce using rule 157 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_until   reduce using rule 157 (expr5 -> expr6 NOTEQUAL expr6 .)
    DELIM           reduce using rule 157 (expr5 -> expr6 NOTEQUAL expr6 .)
    newline         reduce using rule 157 (expr5 -> expr6 NOTEQUAL expr6 .)
    $end            reduce using rule 157 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_do      reduce using rule 157 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_then    reduce using rule 157 (expr5 -> expr6 NOTEQUAL expr6 .)
    CLOSE_PAREN     reduce using rule 157 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_end     reduce using rule 157 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_elsif   reduce using rule 157 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_else    reduce using rule 157 (expr5 -> expr6 NOTEQUAL expr6 .)
    COMMA           reduce using rule 157 (expr5 -> expr6 NOTEQUAL expr6 .)


state 171

    (156) expr5 -> expr6 DOUBLEEQUAL expr6 .

    LOGICALAND      reduce using rule 156 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    LOGICALOR       reduce using rule 156 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_while   reduce using rule 156 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_until   reduce using rule 156 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    DELIM           reduce using rule 156 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    newline         reduce using rule 156 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    $end            reduce using rule 156 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_do      reduce using rule 156 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_then    reduce using rule 156 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    CLOSE_PAREN     reduce using rule 156 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_end     reduce using rule 156 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_elsif   reduce using rule 156 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_else    reduce using rule 156 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    COMMA           reduce using rule 156 (expr5 -> expr6 DOUBLEEQUAL expr6 .)


state 172

    (85) func_call_stmt -> fname OPEN_PAREN func_ret_arg . CLOSE_PAREN
    (102) func_ret_arg -> func_ret_arg . COMMA func_arg_expr
    (103) func_ret_arg -> func_ret_arg . COMMA primary

    CLOSE_PAREN     shift and go to state 220
    COMMA           shift and go to state 174


state 173

    (63) func_arg_expr -> CONSTANTS EQUAL . primary
    (143) primary -> . INT_CONSTANTS
    (144) primary -> . FLOAT_CONSTANTS
    (145) primary -> . STRING_CONSTANTS
    (146) primary -> . CHAR_CONSTANTS
    (147) primary -> . BOOLEAN_CONSTANTS
    (148) primary -> . CONSTANTS
    (149) primary -> . VARIABLES
    (150) primary -> . array
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET

    INT_CONSTANTS   shift and go to state 108
    FLOAT_CONSTANTS shift and go to state 109
    STRING_CONSTANTS shift and go to state 112
    CHAR_CONSTANTS  shift and go to state 117
    BOOLEAN_CONSTANTS shift and go to state 107
    CONSTANTS       shift and go to state 223
    VARIABLES       shift and go to state 221

    array                          shift and go to state 116
    primary                        shift and go to state 222

state 174

    (102) func_ret_arg -> func_ret_arg COMMA . func_arg_expr
    (103) func_ret_arg -> func_ret_arg COMMA . primary
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary
    (143) primary -> . INT_CONSTANTS
    (144) primary -> . FLOAT_CONSTANTS
    (145) primary -> . STRING_CONSTANTS
    (146) primary -> . CHAR_CONSTANTS
    (147) primary -> . BOOLEAN_CONSTANTS
    (148) primary -> . CONSTANTS
    (149) primary -> . VARIABLES
    (150) primary -> . array
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET

    VARIABLES       shift and go to state 118
    CONSTANTS       shift and go to state 114
    INT_CONSTANTS   shift and go to state 108
    FLOAT_CONSTANTS shift and go to state 109
    STRING_CONSTANTS shift and go to state 112
    CHAR_CONSTANTS  shift and go to state 117
    BOOLEAN_CONSTANTS shift and go to state 107

    func_arg_expr                  shift and go to state 224
    array                          shift and go to state 116
    primary                        shift and go to state 225

state 175

    (62) func_arg_expr -> VARIABLES EQUAL . primary
    (143) primary -> . INT_CONSTANTS
    (144) primary -> . FLOAT_CONSTANTS
    (145) primary -> . STRING_CONSTANTS
    (146) primary -> . CHAR_CONSTANTS
    (147) primary -> . BOOLEAN_CONSTANTS
    (148) primary -> . CONSTANTS
    (149) primary -> . VARIABLES
    (150) primary -> . array
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET

    INT_CONSTANTS   shift and go to state 108
    FLOAT_CONSTANTS shift and go to state 109
    STRING_CONSTANTS shift and go to state 112
    CHAR_CONSTANTS  shift and go to state 117
    BOOLEAN_CONSTANTS shift and go to state 107
    CONSTANTS       shift and go to state 223
    VARIABLES       shift and go to state 221

    array                          shift and go to state 116
    primary                        shift and go to state 226

state 176

    (168) expr8 -> expr8 BITAND expr9 .
    (170) expr9 -> expr9 . SHIFTL expr10
    (171) expr9 -> expr9 . SHIFTR expr10

    BITAND          reduce using rule 168 (expr8 -> expr8 BITAND expr9 .)
    LESSEQUAL       reduce using rule 168 (expr8 -> expr8 BITAND expr9 .)
    LESS            reduce using rule 168 (expr8 -> expr8 BITAND expr9 .)
    GREATER         reduce using rule 168 (expr8 -> expr8 BITAND expr9 .)
    GREATEREQUAL    reduce using rule 168 (expr8 -> expr8 BITAND expr9 .)
    BITXOR          reduce using rule 168 (expr8 -> expr8 BITAND expr9 .)
    PIPE            reduce using rule 168 (expr8 -> expr8 BITAND expr9 .)
    DOUBLEEQUAL     reduce using rule 168 (expr8 -> expr8 BITAND expr9 .)
    NOTEQUAL        reduce using rule 168 (expr8 -> expr8 BITAND expr9 .)
    LOGICALAND      reduce using rule 168 (expr8 -> expr8 BITAND expr9 .)
    LOGICALOR       reduce using rule 168 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_do      reduce using rule 168 (expr8 -> expr8 BITAND expr9 .)
    newline         reduce using rule 168 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_while   reduce using rule 168 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_until   reduce using rule 168 (expr8 -> expr8 BITAND expr9 .)
    DELIM           reduce using rule 168 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_end     reduce using rule 168 (expr8 -> expr8 BITAND expr9 .)
    $end            reduce using rule 168 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_then    reduce using rule 168 (expr8 -> expr8 BITAND expr9 .)
    CLOSE_PAREN     reduce using rule 168 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_elsif   reduce using rule 168 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_else    reduce using rule 168 (expr8 -> expr8 BITAND expr9 .)
    COMMA           reduce using rule 168 (expr8 -> expr8 BITAND expr9 .)
    CLOSE_BRACKET   reduce using rule 168 (expr8 -> expr8 BITAND expr9 .)
    SHIFTL          shift and go to state 121
    SHIFTR          shift and go to state 120


state 177

    (171) expr9 -> expr9 SHIFTR expr10 .
    (173) expr10 -> expr10 . PLUS expr11
    (174) expr10 -> expr10 . MINUS expr11

    SHIFTL          reduce using rule 171 (expr9 -> expr9 SHIFTR expr10 .)
    SHIFTR          reduce using rule 171 (expr9 -> expr9 SHIFTR expr10 .)
    BITAND          reduce using rule 171 (expr9 -> expr9 SHIFTR expr10 .)
    LESSEQUAL       reduce using rule 171 (expr9 -> expr9 SHIFTR expr10 .)
    LESS            reduce using rule 171 (expr9 -> expr9 SHIFTR expr10 .)
    GREATER         reduce using rule 171 (expr9 -> expr9 SHIFTR expr10 .)
    GREATEREQUAL    reduce using rule 171 (expr9 -> expr9 SHIFTR expr10 .)
    BITXOR          reduce using rule 171 (expr9 -> expr9 SHIFTR expr10 .)
    PIPE            reduce using rule 171 (expr9 -> expr9 SHIFTR expr10 .)
    DOUBLEEQUAL     reduce using rule 171 (expr9 -> expr9 SHIFTR expr10 .)
    NOTEQUAL        reduce using rule 171 (expr9 -> expr9 SHIFTR expr10 .)
    LOGICALAND      reduce using rule 171 (expr9 -> expr9 SHIFTR expr10 .)
    LOGICALOR       reduce using rule 171 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_then    reduce using rule 171 (expr9 -> expr9 SHIFTR expr10 .)
    newline         reduce using rule 171 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_while   reduce using rule 171 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_until   reduce using rule 171 (expr9 -> expr9 SHIFTR expr10 .)
    DELIM           reduce using rule 171 (expr9 -> expr9 SHIFTR expr10 .)
    $end            reduce using rule 171 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_end     reduce using rule 171 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_elsif   reduce using rule 171 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_else    reduce using rule 171 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_do      reduce using rule 171 (expr9 -> expr9 SHIFTR expr10 .)
    CLOSE_PAREN     reduce using rule 171 (expr9 -> expr9 SHIFTR expr10 .)
    COMMA           reduce using rule 171 (expr9 -> expr9 SHIFTR expr10 .)
    CLOSE_BRACKET   reduce using rule 171 (expr9 -> expr9 SHIFTR expr10 .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69


state 178

    (170) expr9 -> expr9 SHIFTL expr10 .
    (173) expr10 -> expr10 . PLUS expr11
    (174) expr10 -> expr10 . MINUS expr11

    SHIFTL          reduce using rule 170 (expr9 -> expr9 SHIFTL expr10 .)
    SHIFTR          reduce using rule 170 (expr9 -> expr9 SHIFTL expr10 .)
    BITAND          reduce using rule 170 (expr9 -> expr9 SHIFTL expr10 .)
    LESSEQUAL       reduce using rule 170 (expr9 -> expr9 SHIFTL expr10 .)
    LESS            reduce using rule 170 (expr9 -> expr9 SHIFTL expr10 .)
    GREATER         reduce using rule 170 (expr9 -> expr9 SHIFTL expr10 .)
    GREATEREQUAL    reduce using rule 170 (expr9 -> expr9 SHIFTL expr10 .)
    BITXOR          reduce using rule 170 (expr9 -> expr9 SHIFTL expr10 .)
    PIPE            reduce using rule 170 (expr9 -> expr9 SHIFTL expr10 .)
    DOUBLEEQUAL     reduce using rule 170 (expr9 -> expr9 SHIFTL expr10 .)
    NOTEQUAL        reduce using rule 170 (expr9 -> expr9 SHIFTL expr10 .)
    LOGICALAND      reduce using rule 170 (expr9 -> expr9 SHIFTL expr10 .)
    LOGICALOR       reduce using rule 170 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_then    reduce using rule 170 (expr9 -> expr9 SHIFTL expr10 .)
    newline         reduce using rule 170 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_while   reduce using rule 170 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_until   reduce using rule 170 (expr9 -> expr9 SHIFTL expr10 .)
    DELIM           reduce using rule 170 (expr9 -> expr9 SHIFTL expr10 .)
    $end            reduce using rule 170 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_end     reduce using rule 170 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_elsif   reduce using rule 170 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_else    reduce using rule 170 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_do      reduce using rule 170 (expr9 -> expr9 SHIFTL expr10 .)
    CLOSE_PAREN     reduce using rule 170 (expr9 -> expr9 SHIFTL expr10 .)
    COMMA           reduce using rule 170 (expr9 -> expr9 SHIFTL expr10 .)
    CLOSE_BRACKET   reduce using rule 170 (expr9 -> expr9 SHIFTL expr10 .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69


state 179

    (124) expr -> MLHS EQUAL MRHS .
    (128) MRHS -> MRHS . COMMA mrhs

    KEYWORD_while   reduce using rule 124 (expr -> MLHS EQUAL MRHS .)
    KEYWORD_until   reduce using rule 124 (expr -> MLHS EQUAL MRHS .)
    DELIM           reduce using rule 124 (expr -> MLHS EQUAL MRHS .)
    newline         reduce using rule 124 (expr -> MLHS EQUAL MRHS .)
    KEYWORD_elsif   reduce using rule 124 (expr -> MLHS EQUAL MRHS .)
    KEYWORD_else    reduce using rule 124 (expr -> MLHS EQUAL MRHS .)
    KEYWORD_end     reduce using rule 124 (expr -> MLHS EQUAL MRHS .)
    $end            reduce using rule 124 (expr -> MLHS EQUAL MRHS .)
    COMMA           shift and go to state 227


state 180

    (53) fname -> VARIABLES .
    (136) mrhs -> VARIABLES . DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (137) mrhs -> VARIABLES . DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (138) mrhs -> VARIABLES . DOT VARIABLES
    (184) expr13 -> VARIABLES .
    (186) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET

    OPEN_PAREN      reduce using rule 53 (fname -> VARIABLES .)
    VARIABLES       reduce using rule 53 (fname -> VARIABLES .)
    CONSTANTS       reduce using rule 53 (fname -> VARIABLES .)
    INT_CONSTANTS   reduce using rule 53 (fname -> VARIABLES .)
    FLOAT_CONSTANTS reduce using rule 53 (fname -> VARIABLES .)
    STRING_CONSTANTS reduce using rule 53 (fname -> VARIABLES .)
    CHAR_CONSTANTS  reduce using rule 53 (fname -> VARIABLES .)
    BOOLEAN_CONSTANTS reduce using rule 53 (fname -> VARIABLES .)
    DOT             shift and go to state 162
    MULTIPLY        reduce using rule 184 (expr13 -> VARIABLES .)
    DIV             reduce using rule 184 (expr13 -> VARIABLES .)
    MOD             reduce using rule 184 (expr13 -> VARIABLES .)
    PLUS            reduce using rule 184 (expr13 -> VARIABLES .)
    MINUS           reduce using rule 184 (expr13 -> VARIABLES .)
    SHIFTL          reduce using rule 184 (expr13 -> VARIABLES .)
    SHIFTR          reduce using rule 184 (expr13 -> VARIABLES .)
    BITAND          reduce using rule 184 (expr13 -> VARIABLES .)
    LESSEQUAL       reduce using rule 184 (expr13 -> VARIABLES .)
    LESS            reduce using rule 184 (expr13 -> VARIABLES .)
    GREATER         reduce using rule 184 (expr13 -> VARIABLES .)
    GREATEREQUAL    reduce using rule 184 (expr13 -> VARIABLES .)
    BITXOR          reduce using rule 184 (expr13 -> VARIABLES .)
    PIPE            reduce using rule 184 (expr13 -> VARIABLES .)
    DOUBLEEQUAL     reduce using rule 184 (expr13 -> VARIABLES .)
    NOTEQUAL        reduce using rule 184 (expr13 -> VARIABLES .)
    LOGICALAND      reduce using rule 184 (expr13 -> VARIABLES .)
    LOGICALOR       reduce using rule 184 (expr13 -> VARIABLES .)
    COMMA           reduce using rule 184 (expr13 -> VARIABLES .)
    KEYWORD_while   reduce using rule 184 (expr13 -> VARIABLES .)
    KEYWORD_until   reduce using rule 184 (expr13 -> VARIABLES .)
    DELIM           reduce using rule 184 (expr13 -> VARIABLES .)
    newline         reduce using rule 184 (expr13 -> VARIABLES .)
    $end            reduce using rule 184 (expr13 -> VARIABLES .)
    KEYWORD_end     reduce using rule 184 (expr13 -> VARIABLES .)
    KEYWORD_elsif   reduce using rule 184 (expr13 -> VARIABLES .)
    KEYWORD_else    reduce using rule 184 (expr13 -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 85


state 181

    (87) func_call_stmt -> MLHS EQUAL fname . OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> MLHS EQUAL fname . func_ret_arg
    (100) func_ret_arg -> . func_arg_expr
    (101) func_ret_arg -> . primary
    (102) func_ret_arg -> . func_ret_arg COMMA func_arg_expr
    (103) func_ret_arg -> . func_ret_arg COMMA primary
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary
    (143) primary -> . INT_CONSTANTS
    (144) primary -> . FLOAT_CONSTANTS
    (145) primary -> . STRING_CONSTANTS
    (146) primary -> . CHAR_CONSTANTS
    (147) primary -> . BOOLEAN_CONSTANTS
    (148) primary -> . CONSTANTS
    (149) primary -> . VARIABLES
    (150) primary -> . array
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET

    OPEN_PAREN      shift and go to state 228
    VARIABLES       shift and go to state 118
    CONSTANTS       shift and go to state 114
    INT_CONSTANTS   shift and go to state 108
    FLOAT_CONSTANTS shift and go to state 109
    STRING_CONSTANTS shift and go to state 112
    CHAR_CONSTANTS  shift and go to state 117
    BOOLEAN_CONSTANTS shift and go to state 107

    func_arg_expr                  shift and go to state 110
    primary                        shift and go to state 111
    func_ret_arg                   shift and go to state 229
    array                          shift and go to state 116

state 182

    (127) MRHS -> mrhs .

    COMMA           reduce using rule 127 (MRHS -> mrhs .)
    KEYWORD_while   reduce using rule 127 (MRHS -> mrhs .)
    KEYWORD_until   reduce using rule 127 (MRHS -> mrhs .)
    DELIM           reduce using rule 127 (MRHS -> mrhs .)
    newline         reduce using rule 127 (MRHS -> mrhs .)
    $end            reduce using rule 127 (MRHS -> mrhs .)
    KEYWORD_end     reduce using rule 127 (MRHS -> mrhs .)
    KEYWORD_elsif   reduce using rule 127 (MRHS -> mrhs .)
    KEYWORD_else    reduce using rule 127 (MRHS -> mrhs .)


state 183

    (54) fname -> CONSTANTS .
    (139) mrhs -> CONSTANTS . DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (140) mrhs -> CONSTANTS . DOT KEYWORD_new
    (141) mrhs -> CONSTANTS . DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (183) expr13 -> CONSTANTS .

    OPEN_PAREN      reduce using rule 54 (fname -> CONSTANTS .)
    VARIABLES       reduce using rule 54 (fname -> CONSTANTS .)
    CONSTANTS       reduce using rule 54 (fname -> CONSTANTS .)
    INT_CONSTANTS   reduce using rule 54 (fname -> CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 54 (fname -> CONSTANTS .)
    STRING_CONSTANTS reduce using rule 54 (fname -> CONSTANTS .)
    CHAR_CONSTANTS  reduce using rule 54 (fname -> CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 54 (fname -> CONSTANTS .)
    DOT             shift and go to state 165
    MULTIPLY        reduce using rule 183 (expr13 -> CONSTANTS .)
    DIV             reduce using rule 183 (expr13 -> CONSTANTS .)
    MOD             reduce using rule 183 (expr13 -> CONSTANTS .)
    PLUS            reduce using rule 183 (expr13 -> CONSTANTS .)
    MINUS           reduce using rule 183 (expr13 -> CONSTANTS .)
    SHIFTL          reduce using rule 183 (expr13 -> CONSTANTS .)
    SHIFTR          reduce using rule 183 (expr13 -> CONSTANTS .)
    BITAND          reduce using rule 183 (expr13 -> CONSTANTS .)
    LESSEQUAL       reduce using rule 183 (expr13 -> CONSTANTS .)
    LESS            reduce using rule 183 (expr13 -> CONSTANTS .)
    GREATER         reduce using rule 183 (expr13 -> CONSTANTS .)
    GREATEREQUAL    reduce using rule 183 (expr13 -> CONSTANTS .)
    BITXOR          reduce using rule 183 (expr13 -> CONSTANTS .)
    PIPE            reduce using rule 183 (expr13 -> CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 183 (expr13 -> CONSTANTS .)
    NOTEQUAL        reduce using rule 183 (expr13 -> CONSTANTS .)
    LOGICALAND      reduce using rule 183 (expr13 -> CONSTANTS .)
    LOGICALOR       reduce using rule 183 (expr13 -> CONSTANTS .)
    COMMA           reduce using rule 183 (expr13 -> CONSTANTS .)
    KEYWORD_while   reduce using rule 183 (expr13 -> CONSTANTS .)
    KEYWORD_until   reduce using rule 183 (expr13 -> CONSTANTS .)
    DELIM           reduce using rule 183 (expr13 -> CONSTANTS .)
    newline         reduce using rule 183 (expr13 -> CONSTANTS .)
    $end            reduce using rule 183 (expr13 -> CONSTANTS .)
    KEYWORD_end     reduce using rule 183 (expr13 -> CONSTANTS .)
    KEYWORD_elsif   reduce using rule 183 (expr13 -> CONSTANTS .)
    KEYWORD_else    reduce using rule 183 (expr13 -> CONSTANTS .)


state 184

    (126) MLHS -> MLHS COMMA mlhs .

    EQUAL           reduce using rule 126 (MLHS -> MLHS COMMA mlhs .)
    COMMA           reduce using rule 126 (MLHS -> MLHS COMMA mlhs .)


state 185

    (129) mlhs -> VARIABLES .
    (186) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET

    EQUAL           reduce using rule 129 (mlhs -> VARIABLES .)
    COMMA           reduce using rule 129 (mlhs -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 85


state 186

    (131) mlhs -> array .

    EQUAL           reduce using rule 131 (mlhs -> array .)
    COMMA           reduce using rule 131 (mlhs -> array .)


state 187

    (130) mlhs -> CONSTANTS .

    EQUAL           reduce using rule 130 (mlhs -> CONSTANTS .)
    COMMA           reduce using rule 130 (mlhs -> CONSTANTS .)


state 188

    (74) top_stmt -> KEYWORD_for OPEN_PAREN multi_var . CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (115) multi_var -> multi_var . COMMA VARIABLES
    (116) multi_var -> multi_var . COMMA CONSTANTS

    CLOSE_PAREN     shift and go to state 230
    COMMA           shift and go to state 190


state 189

    (75) top_stmt -> KEYWORD_for multi_var KEYWORD_in . for_range opt_do gen_stmts opt_terms KEYWORD_end
    (117) for_range -> . OPEN_PAREN INT_CONSTANTS DOUBLEDOT INT_CONSTANTS CLOSE_PAREN
    (118) for_range -> . INT_CONSTANTS DOUBLEDOT INT_CONSTANTS
    (119) for_range -> . OPEN_PAREN INT_CONSTANTS TRIPLEDOT INT_CONSTANTS CLOSE_PAREN
    (120) for_range -> . INT_CONSTANTS TRIPLEDOT INT_CONSTANTS
    (121) for_range -> . VARIABLES
    (122) for_range -> . array
    (123) for_range -> . CONSTANTS
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET

    OPEN_PAREN      shift and go to state 232
    INT_CONSTANTS   shift and go to state 231
    VARIABLES       shift and go to state 233
    CONSTANTS       shift and go to state 235

    for_range                      shift and go to state 234
    array                          shift and go to state 236

state 190

    (115) multi_var -> multi_var COMMA . VARIABLES
    (116) multi_var -> multi_var COMMA . CONSTANTS

    VARIABLES       shift and go to state 237
    CONSTANTS       shift and go to state 238


state 191

    (68) top_stmt -> KEYWORD_while expr3 opt_do gen_stmts . opt_terms KEYWORD_end
    (77) gen_stmts -> gen_stmts . terms top_stmt
    (192) opt_terms -> . none
    (193) opt_terms -> . terms
    (194) terms -> . term
    (195) terms -> . terms term
    (198) none -> .
    (196) term -> . DELIM
    (197) term -> . newline

    KEYWORD_end     reduce using rule 198 (none -> .)
    DELIM           shift and go to state 80
    newline         shift and go to state 79

    none                           shift and go to state 81
    terms                          shift and go to state 166
    term                           shift and go to state 77
    opt_terms                      shift and go to state 239

state 192

    (14) func_defn -> KEYWORD_def fname OPEN_PAREN arguments . CLOSE_PAREN func_stmts opt_terms KEYWORD_end
    (55) arguments -> arguments . COMMA VARIABLES
    (56) arguments -> arguments . COMMA CONSTANTS
    (57) arguments -> arguments . COMMA func_arg_expr

    CLOSE_PAREN     shift and go to state 240
    COMMA           shift and go to state 197


state 193

    (15) func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN . func_stmts opt_terms KEYWORD_end
    (95) func_stmts -> . func_stmt
    (96) func_stmts -> . func_stmts terms func_stmt
    (97) func_stmts -> . none
    (98) func_stmt -> . top_stmt
    (99) func_stmt -> . KEYWORD_return func_ret_arg
    (198) none -> .
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . MLHS EQUAL MRHS
    (151) expr1 -> . expr3
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . MLHS EQUAL fname func_ret_arg
    (125) MLHS -> . mlhs
    (126) MLHS -> . MLHS COMMA mlhs
    (152) expr3 -> . expr3 LOGICALOR expr4
    (153) expr3 -> . expr4
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (129) mlhs -> . VARIABLES
    (130) mlhs -> . CONSTANTS
    (131) mlhs -> . array
    (154) expr4 -> . expr4 LOGICALAND expr5
    (155) expr4 -> . expr5
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (156) expr5 -> . expr6 DOUBLEEQUAL expr6
    (157) expr5 -> . expr6 NOTEQUAL expr6
    (158) expr5 -> . expr6
    (159) expr6 -> . expr7 LESSEQUAL expr7
    (160) expr6 -> . expr7 LESS expr7
    (161) expr6 -> . expr7 GREATER expr7
    (162) expr6 -> . expr7 GREATEREQUAL expr7
    (163) expr6 -> . expr7
    (164) expr6 -> . BOOLEAN_CONSTANTS
    (165) expr7 -> . expr7 BITXOR expr8
    (166) expr7 -> . expr7 PIPE expr8
    (167) expr7 -> . expr8
    (168) expr8 -> . expr8 BITAND expr9
    (169) expr8 -> . expr9
    (170) expr9 -> . expr9 SHIFTL expr10
    (171) expr9 -> . expr9 SHIFTR expr10
    (172) expr9 -> . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP

    KEYWORD_return  shift and go to state 196
    DELIM           reduce using rule 198 (none -> .)
    newline         reduce using rule 198 (none -> .)
    KEYWORD_end     reduce using rule 198 (none -> .)
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)
    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 38
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 52
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 48
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    VARIABLES       shift and go to state 98
    CONSTANTS       shift and go to state 101
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29

    func_stmt                      shift and go to state 194
    mlhs                           shift and go to state 2
    func_stmts                     shift and go to state 241
    expr11                         shift and go to state 15
    expr13                         shift and go to state 16
    array                          shift and go to state 26
    expr3                          shift and go to state 41
    expr1                          shift and go to state 42
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    puts_stmt                      shift and go to state 18
    expr5                          shift and go to state 45
    func_call_stmt                 shift and go to state 32
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    expr4                          shift and go to state 8
    fname                          shift and go to state 44
    exit_stmt                      shift and go to state 49
    MLHS                           shift and go to state 50
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 20
    uexpr                          shift and go to state 10
    none                           shift and go to state 198
    expr                           shift and go to state 35
    expr10                         shift and go to state 14
    top_stmt                       shift and go to state 199

state 194

    (95) func_stmts -> func_stmt .

    DELIM           reduce using rule 95 (func_stmts -> func_stmt .)
    newline         reduce using rule 95 (func_stmts -> func_stmt .)
    KEYWORD_end     reduce using rule 95 (func_stmts -> func_stmt .)


state 195

    (16) func_defn -> KEYWORD_def fname arguments func_stmts . opt_terms KEYWORD_end
    (96) func_stmts -> func_stmts . terms func_stmt
    (192) opt_terms -> . none
    (193) opt_terms -> . terms
    (194) terms -> . term
    (195) terms -> . terms term
    (198) none -> .
    (196) term -> . DELIM
    (197) term -> . newline

    KEYWORD_end     reduce using rule 198 (none -> .)
    DELIM           shift and go to state 80
    newline         shift and go to state 79

    none                           shift and go to state 81
    terms                          shift and go to state 242
    term                           shift and go to state 77
    opt_terms                      shift and go to state 243

state 196

    (99) func_stmt -> KEYWORD_return . func_ret_arg
    (100) func_ret_arg -> . func_arg_expr
    (101) func_ret_arg -> . primary
    (102) func_ret_arg -> . func_ret_arg COMMA func_arg_expr
    (103) func_ret_arg -> . func_ret_arg COMMA primary
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary
    (143) primary -> . INT_CONSTANTS
    (144) primary -> . FLOAT_CONSTANTS
    (145) primary -> . STRING_CONSTANTS
    (146) primary -> . CHAR_CONSTANTS
    (147) primary -> . BOOLEAN_CONSTANTS
    (148) primary -> . CONSTANTS
    (149) primary -> . VARIABLES
    (150) primary -> . array
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET

    VARIABLES       shift and go to state 118
    CONSTANTS       shift and go to state 114
    INT_CONSTANTS   shift and go to state 108
    FLOAT_CONSTANTS shift and go to state 109
    STRING_CONSTANTS shift and go to state 112
    CHAR_CONSTANTS  shift and go to state 117
    BOOLEAN_CONSTANTS shift and go to state 107

    func_arg_expr                  shift and go to state 110
    func_ret_arg                   shift and go to state 244
    array                          shift and go to state 116
    primary                        shift and go to state 111

state 197

    (55) arguments -> arguments COMMA . VARIABLES
    (56) arguments -> arguments COMMA . CONSTANTS
    (57) arguments -> arguments COMMA . func_arg_expr
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary

    VARIABLES       shift and go to state 245
    CONSTANTS       shift and go to state 247

    func_arg_expr                  shift and go to state 246

state 198

    (97) func_stmts -> none .
    (187) uexpr -> none .

    DELIM           reduce using rule 97 (func_stmts -> none .)
    newline         reduce using rule 97 (func_stmts -> none .)
    KEYWORD_end     reduce using rule 97 (func_stmts -> none .)
    INT_CONSTANTS   reduce using rule 187 (uexpr -> none .)
    FLOAT_CONSTANTS reduce using rule 187 (uexpr -> none .)


state 199

    (98) func_stmt -> top_stmt .
    (69) top_stmt -> top_stmt . KEYWORD_while expr3
    (71) top_stmt -> top_stmt . KEYWORD_until expr3

    DELIM           reduce using rule 98 (func_stmt -> top_stmt .)
    newline         reduce using rule 98 (func_stmt -> top_stmt .)
    KEYWORD_end     reduce using rule 98 (func_stmt -> top_stmt .)
    KEYWORD_while   shift and go to state 66
    KEYWORD_until   shift and go to state 67


state 200

    (11) statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN . arguments CLOSE_PAREN
    (12) statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN . CLOSE_PAREN
    (55) arguments -> . arguments COMMA VARIABLES
    (56) arguments -> . arguments COMMA CONSTANTS
    (57) arguments -> . arguments COMMA func_arg_expr
    (58) arguments -> . VARIABLES
    (59) arguments -> . CONSTANTS
    (60) arguments -> . func_arg_expr
    (61) arguments -> . newline
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary

    CLOSE_PAREN     shift and go to state 249
    VARIABLES       shift and go to state 147
    CONSTANTS       shift and go to state 146
    newline         shift and go to state 148

    func_arg_expr                  shift and go to state 151
    arguments                      shift and go to state 248

state 201

    (13) statement -> CONSTANTS DOT KEYWORD_new arguments .
    (55) arguments -> arguments . COMMA VARIABLES
    (56) arguments -> arguments . COMMA CONSTANTS
    (57) arguments -> arguments . COMMA func_arg_expr

    DELIM           reduce using rule 13 (statement -> CONSTANTS DOT KEYWORD_new arguments .)
    newline         reduce using rule 13 (statement -> CONSTANTS DOT KEYWORD_new arguments .)
    $end            reduce using rule 13 (statement -> CONSTANTS DOT KEYWORD_new arguments .)
    COMMA           shift and go to state 197


state 202

    (72) top_stmt -> KEYWORD_until expr3 opt_do gen_stmts . opt_terms KEYWORD_end
    (77) gen_stmts -> gen_stmts . terms top_stmt
    (192) opt_terms -> . none
    (193) opt_terms -> . terms
    (194) terms -> . term
    (195) terms -> . terms term
    (198) none -> .
    (196) term -> . DELIM
    (197) term -> . newline

    KEYWORD_end     reduce using rule 198 (none -> .)
    DELIM           shift and go to state 80
    newline         shift and go to state 79

    none                           shift and go to state 81
    terms                          shift and go to state 166
    term                           shift and go to state 77
    opt_terms                      shift and go to state 250

state 203

    (67) top_stmt -> KEYWORD_if expr3 opt_then gen_stmts . opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (77) gen_stmts -> gen_stmts . terms top_stmt
    (192) opt_terms -> . none
    (193) opt_terms -> . terms
    (194) terms -> . term
    (195) terms -> . terms term
    (198) none -> .
    (196) term -> . DELIM
    (197) term -> . newline

    KEYWORD_elsif   reduce using rule 198 (none -> .)
    KEYWORD_else    reduce using rule 198 (none -> .)
    KEYWORD_end     reduce using rule 198 (none -> .)
    DELIM           shift and go to state 80
    newline         shift and go to state 79

    none                           shift and go to state 81
    terms                          shift and go to state 166
    term                           shift and go to state 77
    opt_terms                      shift and go to state 251

state 204

    (186) array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .

    KEYWORD_do      reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    newline         reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    MULTIPLY        reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    DIV             reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    MOD             reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    PLUS            reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    MINUS           reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    SHIFTL          reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    SHIFTR          reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    BITAND          reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    LESSEQUAL       reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    LESS            reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    GREATER         reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    GREATEREQUAL    reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    BITXOR          reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    PIPE            reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    DOUBLEEQUAL     reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    NOTEQUAL        reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    LOGICALAND      reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    LOGICALOR       reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_then    reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_while   reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_until   reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    DELIM           reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    $end            reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    CLOSE_PAREN     reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_end     reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_elsif   reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_else    reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    COMMA           reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    EQUAL           reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_return  reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_if      reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_begin   reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_for     reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_puts    reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_break   reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_next    reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_redo    reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_exit    reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    VARIABLES       reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    CONSTANTS       reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    BOOLEAN_CONSTANTS reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    OPEN_PAREN      reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    BITNOT          reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    BITCOMP         reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    INT_CONSTANTS   reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    FLOAT_CONSTANTS reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    SIGIL_AT        reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    SIGIL_DOUBLE_AT reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_in      reduce using rule 186 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)


state 205

    (8) statement -> VARIABLES DOT VARIABLES OPEN_PAREN . arguments CLOSE_PAREN
    (9) statement -> VARIABLES DOT VARIABLES OPEN_PAREN . CLOSE_PAREN
    (55) arguments -> . arguments COMMA VARIABLES
    (56) arguments -> . arguments COMMA CONSTANTS
    (57) arguments -> . arguments COMMA func_arg_expr
    (58) arguments -> . VARIABLES
    (59) arguments -> . CONSTANTS
    (60) arguments -> . func_arg_expr
    (61) arguments -> . newline
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary

    CLOSE_PAREN     shift and go to state 253
    VARIABLES       shift and go to state 147
    CONSTANTS       shift and go to state 146
    newline         shift and go to state 148

    func_arg_expr                  shift and go to state 151
    arguments                      shift and go to state 252

state 206

    (10) statement -> VARIABLES DOT VARIABLES arguments .
    (55) arguments -> arguments . COMMA VARIABLES
    (56) arguments -> arguments . COMMA CONSTANTS
    (57) arguments -> arguments . COMMA func_arg_expr

    DELIM           reduce using rule 10 (statement -> VARIABLES DOT VARIABLES arguments .)
    newline         reduce using rule 10 (statement -> VARIABLES DOT VARIABLES arguments .)
    $end            reduce using rule 10 (statement -> VARIABLES DOT VARIABLES arguments .)
    COMMA           shift and go to state 197


state 207

    (136) mrhs -> VARIABLES DOT VARIABLES . OPEN_PAREN arguments CLOSE_PAREN
    (137) mrhs -> VARIABLES DOT VARIABLES . OPEN_PAREN CLOSE_PAREN
    (138) mrhs -> VARIABLES DOT VARIABLES .

    OPEN_PAREN      shift and go to state 254
    KEYWORD_while   reduce using rule 138 (mrhs -> VARIABLES DOT VARIABLES .)
    KEYWORD_until   reduce using rule 138 (mrhs -> VARIABLES DOT VARIABLES .)
    DELIM           reduce using rule 138 (mrhs -> VARIABLES DOT VARIABLES .)
    newline         reduce using rule 138 (mrhs -> VARIABLES DOT VARIABLES .)
    $end            reduce using rule 138 (mrhs -> VARIABLES DOT VARIABLES .)
    KEYWORD_end     reduce using rule 138 (mrhs -> VARIABLES DOT VARIABLES .)
    KEYWORD_elsif   reduce using rule 138 (mrhs -> VARIABLES DOT VARIABLES .)
    KEYWORD_else    reduce using rule 138 (mrhs -> VARIABLES DOT VARIABLES .)
    COMMA           reduce using rule 138 (mrhs -> VARIABLES DOT VARIABLES .)


state 208

    (136) mrhs -> VARIABLES . DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (137) mrhs -> VARIABLES . DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (138) mrhs -> VARIABLES . DOT VARIABLES
    (184) expr13 -> VARIABLES .
    (186) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET

    DOT             shift and go to state 162
    MULTIPLY        reduce using rule 184 (expr13 -> VARIABLES .)
    DIV             reduce using rule 184 (expr13 -> VARIABLES .)
    MOD             reduce using rule 184 (expr13 -> VARIABLES .)
    PLUS            reduce using rule 184 (expr13 -> VARIABLES .)
    MINUS           reduce using rule 184 (expr13 -> VARIABLES .)
    SHIFTL          reduce using rule 184 (expr13 -> VARIABLES .)
    SHIFTR          reduce using rule 184 (expr13 -> VARIABLES .)
    BITAND          reduce using rule 184 (expr13 -> VARIABLES .)
    LESSEQUAL       reduce using rule 184 (expr13 -> VARIABLES .)
    LESS            reduce using rule 184 (expr13 -> VARIABLES .)
    GREATER         reduce using rule 184 (expr13 -> VARIABLES .)
    GREATEREQUAL    reduce using rule 184 (expr13 -> VARIABLES .)
    BITXOR          reduce using rule 184 (expr13 -> VARIABLES .)
    PIPE            reduce using rule 184 (expr13 -> VARIABLES .)
    DOUBLEEQUAL     reduce using rule 184 (expr13 -> VARIABLES .)
    NOTEQUAL        reduce using rule 184 (expr13 -> VARIABLES .)
    LOGICALAND      reduce using rule 184 (expr13 -> VARIABLES .)
    LOGICALOR       reduce using rule 184 (expr13 -> VARIABLES .)
    COMMA           reduce using rule 184 (expr13 -> VARIABLES .)
    KEYWORD_while   reduce using rule 184 (expr13 -> VARIABLES .)
    KEYWORD_until   reduce using rule 184 (expr13 -> VARIABLES .)
    DELIM           reduce using rule 184 (expr13 -> VARIABLES .)
    newline         reduce using rule 184 (expr13 -> VARIABLES .)
    $end            reduce using rule 184 (expr13 -> VARIABLES .)
    KEYWORD_end     reduce using rule 184 (expr13 -> VARIABLES .)
    KEYWORD_elsif   reduce using rule 184 (expr13 -> VARIABLES .)
    KEYWORD_else    reduce using rule 184 (expr13 -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 85


state 209

    (139) mrhs -> CONSTANTS . DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (140) mrhs -> CONSTANTS . DOT KEYWORD_new
    (141) mrhs -> CONSTANTS . DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (183) expr13 -> CONSTANTS .

    DOT             shift and go to state 165
    MULTIPLY        reduce using rule 183 (expr13 -> CONSTANTS .)
    DIV             reduce using rule 183 (expr13 -> CONSTANTS .)
    MOD             reduce using rule 183 (expr13 -> CONSTANTS .)
    PLUS            reduce using rule 183 (expr13 -> CONSTANTS .)
    MINUS           reduce using rule 183 (expr13 -> CONSTANTS .)
    SHIFTL          reduce using rule 183 (expr13 -> CONSTANTS .)
    SHIFTR          reduce using rule 183 (expr13 -> CONSTANTS .)
    BITAND          reduce using rule 183 (expr13 -> CONSTANTS .)
    LESSEQUAL       reduce using rule 183 (expr13 -> CONSTANTS .)
    LESS            reduce using rule 183 (expr13 -> CONSTANTS .)
    GREATER         reduce using rule 183 (expr13 -> CONSTANTS .)
    GREATEREQUAL    reduce using rule 183 (expr13 -> CONSTANTS .)
    BITXOR          reduce using rule 183 (expr13 -> CONSTANTS .)
    PIPE            reduce using rule 183 (expr13 -> CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 183 (expr13 -> CONSTANTS .)
    NOTEQUAL        reduce using rule 183 (expr13 -> CONSTANTS .)
    LOGICALAND      reduce using rule 183 (expr13 -> CONSTANTS .)
    LOGICALOR       reduce using rule 183 (expr13 -> CONSTANTS .)
    COMMA           reduce using rule 183 (expr13 -> CONSTANTS .)
    KEYWORD_while   reduce using rule 183 (expr13 -> CONSTANTS .)
    KEYWORD_until   reduce using rule 183 (expr13 -> CONSTANTS .)
    DELIM           reduce using rule 183 (expr13 -> CONSTANTS .)
    newline         reduce using rule 183 (expr13 -> CONSTANTS .)
    $end            reduce using rule 183 (expr13 -> CONSTANTS .)
    KEYWORD_end     reduce using rule 183 (expr13 -> CONSTANTS .)
    KEYWORD_elsif   reduce using rule 183 (expr13 -> CONSTANTS .)
    KEYWORD_else    reduce using rule 183 (expr13 -> CONSTANTS .)


state 210

    (139) mrhs -> CONSTANTS DOT KEYWORD_new . OPEN_PAREN arguments CLOSE_PAREN
    (140) mrhs -> CONSTANTS DOT KEYWORD_new .
    (141) mrhs -> CONSTANTS DOT KEYWORD_new . OPEN_PAREN CLOSE_PAREN

    OPEN_PAREN      shift and go to state 255
    KEYWORD_while   reduce using rule 140 (mrhs -> CONSTANTS DOT KEYWORD_new .)
    KEYWORD_until   reduce using rule 140 (mrhs -> CONSTANTS DOT KEYWORD_new .)
    DELIM           reduce using rule 140 (mrhs -> CONSTANTS DOT KEYWORD_new .)
    newline         reduce using rule 140 (mrhs -> CONSTANTS DOT KEYWORD_new .)
    $end            reduce using rule 140 (mrhs -> CONSTANTS DOT KEYWORD_new .)
    KEYWORD_end     reduce using rule 140 (mrhs -> CONSTANTS DOT KEYWORD_new .)
    KEYWORD_elsif   reduce using rule 140 (mrhs -> CONSTANTS DOT KEYWORD_new .)
    KEYWORD_else    reduce using rule 140 (mrhs -> CONSTANTS DOT KEYWORD_new .)
    COMMA           reduce using rule 140 (mrhs -> CONSTANTS DOT KEYWORD_new .)


state 211

    (77) gen_stmts -> gen_stmts terms top_stmt .
    (69) top_stmt -> top_stmt . KEYWORD_while expr3
    (71) top_stmt -> top_stmt . KEYWORD_until expr3

    DELIM           reduce using rule 77 (gen_stmts -> gen_stmts terms top_stmt .)
    newline         reduce using rule 77 (gen_stmts -> gen_stmts terms top_stmt .)
    KEYWORD_end     reduce using rule 77 (gen_stmts -> gen_stmts terms top_stmt .)
    KEYWORD_elsif   reduce using rule 77 (gen_stmts -> gen_stmts terms top_stmt .)
    KEYWORD_else    reduce using rule 77 (gen_stmts -> gen_stmts terms top_stmt .)
    KEYWORD_while   shift and go to state 66
    KEYWORD_until   shift and go to state 67


state 212

    (70) top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end . KEYWORD_while expr3
    (73) top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end . KEYWORD_until expr3

    KEYWORD_while   shift and go to state 257
    KEYWORD_until   shift and go to state 256


state 213

    (20) class_stmts -> none .

    DELIM           reduce using rule 20 (class_stmts -> none .)
    newline         reduce using rule 20 (class_stmts -> none .)
    KEYWORD_end     reduce using rule 20 (class_stmts -> none .)


state 214

    (21) class_stmt -> class_mlhs . EQUAL class_mrhs
    (31) class_mlhs -> class_mlhs . terms SIGIL_DOUBLE_AT
    (194) terms -> . term
    (195) terms -> . terms term
    (196) term -> . DELIM
    (197) term -> . newline

    EQUAL           shift and go to state 259
    DELIM           shift and go to state 80
    newline         shift and go to state 79

    term                           shift and go to state 77
    terms                          shift and go to state 258

state 215

    (32) class_mlhs -> SIGIL_DOUBLE_AT .

    EQUAL           reduce using rule 32 (class_mlhs -> SIGIL_DOUBLE_AT .)
    DELIM           reduce using rule 32 (class_mlhs -> SIGIL_DOUBLE_AT .)
    newline         reduce using rule 32 (class_mlhs -> SIGIL_DOUBLE_AT .)


state 216

    (22) class_stmt -> class_func .

    DELIM           reduce using rule 22 (class_stmt -> class_func .)
    newline         reduce using rule 22 (class_stmt -> class_func .)
    KEYWORD_end     reduce using rule 22 (class_stmt -> class_func .)


state 217

    (17) class_defn -> KEYWORD_class CONSTANTS newline class_stmts . opt_terms KEYWORD_end
    (19) class_stmts -> class_stmts . terms class_stmt
    (192) opt_terms -> . none
    (193) opt_terms -> . terms
    (194) terms -> . term
    (195) terms -> . terms term
    (198) none -> .
    (196) term -> . DELIM
    (197) term -> . newline

    KEYWORD_end     reduce using rule 198 (none -> .)
    DELIM           shift and go to state 80
    newline         shift and go to state 79

    term                           shift and go to state 77
    terms                          shift and go to state 260
    none                           shift and go to state 81
    opt_terms                      shift and go to state 261

state 218

    (33) class_func -> KEYWORD_def . fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (34) class_func -> KEYWORD_def . fname arguments class_method_stmts opt_terms KEYWORD_end
    (35) class_func -> KEYWORD_def . fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS

    VARIABLES       shift and go to state 74
    CONSTANTS       shift and go to state 73

    fname                          shift and go to state 262

state 219

    (18) class_stmts -> class_stmt .

    DELIM           reduce using rule 18 (class_stmts -> class_stmt .)
    newline         reduce using rule 18 (class_stmts -> class_stmt .)
    KEYWORD_end     reduce using rule 18 (class_stmts -> class_stmt .)


state 220

    (85) func_call_stmt -> fname OPEN_PAREN func_ret_arg CLOSE_PAREN .

    KEYWORD_while   reduce using rule 85 (func_call_stmt -> fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    KEYWORD_until   reduce using rule 85 (func_call_stmt -> fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    DELIM           reduce using rule 85 (func_call_stmt -> fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    newline         reduce using rule 85 (func_call_stmt -> fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    KEYWORD_elsif   reduce using rule 85 (func_call_stmt -> fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    KEYWORD_else    reduce using rule 85 (func_call_stmt -> fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    KEYWORD_end     reduce using rule 85 (func_call_stmt -> fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    $end            reduce using rule 85 (func_call_stmt -> fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)


state 221

    (149) primary -> VARIABLES .
    (186) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET

    COMMA           reduce using rule 149 (primary -> VARIABLES .)
    KEYWORD_while   reduce using rule 149 (primary -> VARIABLES .)
    KEYWORD_until   reduce using rule 149 (primary -> VARIABLES .)
    DELIM           reduce using rule 149 (primary -> VARIABLES .)
    newline         reduce using rule 149 (primary -> VARIABLES .)
    $end            reduce using rule 149 (primary -> VARIABLES .)
    KEYWORD_end     reduce using rule 149 (primary -> VARIABLES .)
    KEYWORD_elsif   reduce using rule 149 (primary -> VARIABLES .)
    KEYWORD_else    reduce using rule 149 (primary -> VARIABLES .)
    KEYWORD_return  reduce using rule 149 (primary -> VARIABLES .)
    KEYWORD_if      reduce using rule 149 (primary -> VARIABLES .)
    KEYWORD_begin   reduce using rule 149 (primary -> VARIABLES .)
    KEYWORD_for     reduce using rule 149 (primary -> VARIABLES .)
    KEYWORD_puts    reduce using rule 149 (primary -> VARIABLES .)
    KEYWORD_break   reduce using rule 149 (primary -> VARIABLES .)
    KEYWORD_next    reduce using rule 149 (primary -> VARIABLES .)
    KEYWORD_redo    reduce using rule 149 (primary -> VARIABLES .)
    KEYWORD_exit    reduce using rule 149 (primary -> VARIABLES .)
    VARIABLES       reduce using rule 149 (primary -> VARIABLES .)
    CONSTANTS       reduce using rule 149 (primary -> VARIABLES .)
    BOOLEAN_CONSTANTS reduce using rule 149 (primary -> VARIABLES .)
    OPEN_PAREN      reduce using rule 149 (primary -> VARIABLES .)
    PLUS            reduce using rule 149 (primary -> VARIABLES .)
    MINUS           reduce using rule 149 (primary -> VARIABLES .)
    BITNOT          reduce using rule 149 (primary -> VARIABLES .)
    BITCOMP         reduce using rule 149 (primary -> VARIABLES .)
    INT_CONSTANTS   reduce using rule 149 (primary -> VARIABLES .)
    FLOAT_CONSTANTS reduce using rule 149 (primary -> VARIABLES .)
    CLOSE_PAREN     reduce using rule 149 (primary -> VARIABLES .)
    SIGIL_AT        reduce using rule 149 (primary -> VARIABLES .)
    SIGIL_DOUBLE_AT reduce using rule 149 (primary -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 85


state 222

    (63) func_arg_expr -> CONSTANTS EQUAL primary .

    CLOSE_PAREN     reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    COMMA           reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    DELIM           reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    newline         reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_end     reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_return  reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_if      reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_while   reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_begin   reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_until   reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_for     reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_puts    reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_break   reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_next    reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_redo    reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_exit    reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    VARIABLES       reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    CONSTANTS       reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    BOOLEAN_CONSTANTS reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    OPEN_PAREN      reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    PLUS            reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    MINUS           reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    BITNOT          reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    BITCOMP         reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    INT_CONSTANTS   reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    FLOAT_CONSTANTS reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    $end            reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    SIGIL_AT        reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    SIGIL_DOUBLE_AT reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_elsif   reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)
    KEYWORD_else    reduce using rule 63 (func_arg_expr -> CONSTANTS EQUAL primary .)


state 223

    (148) primary -> CONSTANTS .

    COMMA           reduce using rule 148 (primary -> CONSTANTS .)
    KEYWORD_while   reduce using rule 148 (primary -> CONSTANTS .)
    KEYWORD_until   reduce using rule 148 (primary -> CONSTANTS .)
    DELIM           reduce using rule 148 (primary -> CONSTANTS .)
    newline         reduce using rule 148 (primary -> CONSTANTS .)
    $end            reduce using rule 148 (primary -> CONSTANTS .)
    KEYWORD_end     reduce using rule 148 (primary -> CONSTANTS .)
    KEYWORD_elsif   reduce using rule 148 (primary -> CONSTANTS .)
    KEYWORD_else    reduce using rule 148 (primary -> CONSTANTS .)
    KEYWORD_return  reduce using rule 148 (primary -> CONSTANTS .)
    KEYWORD_if      reduce using rule 148 (primary -> CONSTANTS .)
    KEYWORD_begin   reduce using rule 148 (primary -> CONSTANTS .)
    KEYWORD_for     reduce using rule 148 (primary -> CONSTANTS .)
    KEYWORD_puts    reduce using rule 148 (primary -> CONSTANTS .)
    KEYWORD_break   reduce using rule 148 (primary -> CONSTANTS .)
    KEYWORD_next    reduce using rule 148 (primary -> CONSTANTS .)
    KEYWORD_redo    reduce using rule 148 (primary -> CONSTANTS .)
    KEYWORD_exit    reduce using rule 148 (primary -> CONSTANTS .)
    VARIABLES       reduce using rule 148 (primary -> CONSTANTS .)
    CONSTANTS       reduce using rule 148 (primary -> CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 148 (primary -> CONSTANTS .)
    OPEN_PAREN      reduce using rule 148 (primary -> CONSTANTS .)
    PLUS            reduce using rule 148 (primary -> CONSTANTS .)
    MINUS           reduce using rule 148 (primary -> CONSTANTS .)
    BITNOT          reduce using rule 148 (primary -> CONSTANTS .)
    BITCOMP         reduce using rule 148 (primary -> CONSTANTS .)
    INT_CONSTANTS   reduce using rule 148 (primary -> CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 148 (primary -> CONSTANTS .)
    CLOSE_PAREN     reduce using rule 148 (primary -> CONSTANTS .)
    SIGIL_AT        reduce using rule 148 (primary -> CONSTANTS .)
    SIGIL_DOUBLE_AT reduce using rule 148 (primary -> CONSTANTS .)


state 224

    (102) func_ret_arg -> func_ret_arg COMMA func_arg_expr .

    CLOSE_PAREN     reduce using rule 102 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)
    COMMA           reduce using rule 102 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)
    DELIM           reduce using rule 102 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)
    newline         reduce using rule 102 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)
    KEYWORD_end     reduce using rule 102 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)
    KEYWORD_while   reduce using rule 102 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)
    KEYWORD_until   reduce using rule 102 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)
    $end            reduce using rule 102 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)
    KEYWORD_elsif   reduce using rule 102 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)
    KEYWORD_else    reduce using rule 102 (func_ret_arg -> func_ret_arg COMMA func_arg_expr .)


state 225

    (103) func_ret_arg -> func_ret_arg COMMA primary .

    CLOSE_PAREN     reduce using rule 103 (func_ret_arg -> func_ret_arg COMMA primary .)
    COMMA           reduce using rule 103 (func_ret_arg -> func_ret_arg COMMA primary .)
    DELIM           reduce using rule 103 (func_ret_arg -> func_ret_arg COMMA primary .)
    newline         reduce using rule 103 (func_ret_arg -> func_ret_arg COMMA primary .)
    KEYWORD_end     reduce using rule 103 (func_ret_arg -> func_ret_arg COMMA primary .)
    KEYWORD_while   reduce using rule 103 (func_ret_arg -> func_ret_arg COMMA primary .)
    KEYWORD_until   reduce using rule 103 (func_ret_arg -> func_ret_arg COMMA primary .)
    $end            reduce using rule 103 (func_ret_arg -> func_ret_arg COMMA primary .)
    KEYWORD_elsif   reduce using rule 103 (func_ret_arg -> func_ret_arg COMMA primary .)
    KEYWORD_else    reduce using rule 103 (func_ret_arg -> func_ret_arg COMMA primary .)


state 226

    (62) func_arg_expr -> VARIABLES EQUAL primary .

    CLOSE_PAREN     reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    COMMA           reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    DELIM           reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    newline         reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_end     reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_return  reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_if      reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_while   reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_begin   reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_until   reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_for     reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_puts    reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_break   reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_next    reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_redo    reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_exit    reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    VARIABLES       reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    CONSTANTS       reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    BOOLEAN_CONSTANTS reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    OPEN_PAREN      reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    PLUS            reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    MINUS           reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    BITNOT          reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    BITCOMP         reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    INT_CONSTANTS   reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    FLOAT_CONSTANTS reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    $end            reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    SIGIL_AT        reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    SIGIL_DOUBLE_AT reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_elsif   reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)
    KEYWORD_else    reduce using rule 62 (func_arg_expr -> VARIABLES EQUAL primary .)


state 227

    (128) MRHS -> MRHS COMMA . mrhs
    (132) mrhs -> . expr1
    (133) mrhs -> . str_expr
    (134) mrhs -> . KEYWORD_gets
    (135) mrhs -> . OPEN_BRACKET CLOSE_BRACKET
    (136) mrhs -> . VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (137) mrhs -> . VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (138) mrhs -> . VARIABLES DOT VARIABLES
    (139) mrhs -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (140) mrhs -> . CONSTANTS DOT KEYWORD_new
    (141) mrhs -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (151) expr1 -> . expr3
    (142) str_expr -> . STRING_CONSTANTS
    (152) expr3 -> . expr3 LOGICALOR expr4
    (153) expr3 -> . expr4
    (154) expr4 -> . expr4 LOGICALAND expr5
    (155) expr4 -> . expr5
    (156) expr5 -> . expr6 DOUBLEEQUAL expr6
    (157) expr5 -> . expr6 NOTEQUAL expr6
    (158) expr5 -> . expr6
    (159) expr6 -> . expr7 LESSEQUAL expr7
    (160) expr6 -> . expr7 LESS expr7
    (161) expr6 -> . expr7 GREATER expr7
    (162) expr6 -> . expr7 GREATEREQUAL expr7
    (163) expr6 -> . expr7
    (164) expr6 -> . BOOLEAN_CONSTANTS
    (165) expr7 -> . expr7 BITXOR expr8
    (166) expr7 -> . expr7 PIPE expr8
    (167) expr7 -> . expr8
    (168) expr8 -> . expr8 BITAND expr9
    (169) expr8 -> . expr9
    (170) expr9 -> . expr9 SHIFTL expr10
    (171) expr9 -> . expr9 SHIFTR expr10
    (172) expr9 -> . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (198) none -> .

    KEYWORD_gets    shift and go to state 92
    OPEN_BRACKET    shift and go to state 90
    VARIABLES       shift and go to state 208
    CONSTANTS       shift and go to state 209
    STRING_CONSTANTS shift and go to state 96
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)

    expr11                         shift and go to state 15
    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    str_expr                       shift and go to state 88
    expr13                         shift and go to state 16
    mrhs                           shift and go to state 263
    expr3                          shift and go to state 41
    expr1                          shift and go to state 91
    expr6                          shift and go to state 43
    expr4                          shift and go to state 8
    expr5                          shift and go to state 45
    expr10                         shift and go to state 14
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    array                          shift and go to state 55
    expr7                          shift and go to state 7

state 228

    (87) func_call_stmt -> MLHS EQUAL fname OPEN_PAREN . func_ret_arg CLOSE_PAREN
    (100) func_ret_arg -> . func_arg_expr
    (101) func_ret_arg -> . primary
    (102) func_ret_arg -> . func_ret_arg COMMA func_arg_expr
    (103) func_ret_arg -> . func_ret_arg COMMA primary
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary
    (143) primary -> . INT_CONSTANTS
    (144) primary -> . FLOAT_CONSTANTS
    (145) primary -> . STRING_CONSTANTS
    (146) primary -> . CHAR_CONSTANTS
    (147) primary -> . BOOLEAN_CONSTANTS
    (148) primary -> . CONSTANTS
    (149) primary -> . VARIABLES
    (150) primary -> . array
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET

    VARIABLES       shift and go to state 118
    CONSTANTS       shift and go to state 114
    INT_CONSTANTS   shift and go to state 108
    FLOAT_CONSTANTS shift and go to state 109
    STRING_CONSTANTS shift and go to state 112
    CHAR_CONSTANTS  shift and go to state 117
    BOOLEAN_CONSTANTS shift and go to state 107

    func_arg_expr                  shift and go to state 110
    primary                        shift and go to state 111
    func_ret_arg                   shift and go to state 264
    array                          shift and go to state 116

state 229

    (88) func_call_stmt -> MLHS EQUAL fname func_ret_arg .
    (102) func_ret_arg -> func_ret_arg . COMMA func_arg_expr
    (103) func_ret_arg -> func_ret_arg . COMMA primary

    KEYWORD_while   reduce using rule 88 (func_call_stmt -> MLHS EQUAL fname func_ret_arg .)
    KEYWORD_until   reduce using rule 88 (func_call_stmt -> MLHS EQUAL fname func_ret_arg .)
    DELIM           reduce using rule 88 (func_call_stmt -> MLHS EQUAL fname func_ret_arg .)
    newline         reduce using rule 88 (func_call_stmt -> MLHS EQUAL fname func_ret_arg .)
    KEYWORD_elsif   reduce using rule 88 (func_call_stmt -> MLHS EQUAL fname func_ret_arg .)
    KEYWORD_else    reduce using rule 88 (func_call_stmt -> MLHS EQUAL fname func_ret_arg .)
    KEYWORD_end     reduce using rule 88 (func_call_stmt -> MLHS EQUAL fname func_ret_arg .)
    $end            reduce using rule 88 (func_call_stmt -> MLHS EQUAL fname func_ret_arg .)
    COMMA           shift and go to state 174


state 230

    (74) top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN . KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end

    KEYWORD_in      shift and go to state 265


state 231

    (118) for_range -> INT_CONSTANTS . DOUBLEDOT INT_CONSTANTS
    (120) for_range -> INT_CONSTANTS . TRIPLEDOT INT_CONSTANTS

    DOUBLEDOT       shift and go to state 266
    TRIPLEDOT       shift and go to state 267


state 232

    (117) for_range -> OPEN_PAREN . INT_CONSTANTS DOUBLEDOT INT_CONSTANTS CLOSE_PAREN
    (119) for_range -> OPEN_PAREN . INT_CONSTANTS TRIPLEDOT INT_CONSTANTS CLOSE_PAREN

    INT_CONSTANTS   shift and go to state 268


state 233

    (121) for_range -> VARIABLES .
    (186) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET

    KEYWORD_do      reduce using rule 121 (for_range -> VARIABLES .)
    newline         reduce using rule 121 (for_range -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 85


state 234

    (75) top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range . opt_do gen_stmts opt_terms KEYWORD_end
    (110) opt_do -> . KEYWORD_do
    (111) opt_do -> . newline

    KEYWORD_do      shift and go to state 130
    newline         shift and go to state 129

    opt_do                         shift and go to state 269

state 235

    (123) for_range -> CONSTANTS .

    KEYWORD_do      reduce using rule 123 (for_range -> CONSTANTS .)
    newline         reduce using rule 123 (for_range -> CONSTANTS .)


state 236

    (122) for_range -> array .

    KEYWORD_do      reduce using rule 122 (for_range -> array .)
    newline         reduce using rule 122 (for_range -> array .)


state 237

    (115) multi_var -> multi_var COMMA VARIABLES .

    KEYWORD_in      reduce using rule 115 (multi_var -> multi_var COMMA VARIABLES .)
    COMMA           reduce using rule 115 (multi_var -> multi_var COMMA VARIABLES .)
    CLOSE_PAREN     reduce using rule 115 (multi_var -> multi_var COMMA VARIABLES .)


state 238

    (116) multi_var -> multi_var COMMA CONSTANTS .

    KEYWORD_in      reduce using rule 116 (multi_var -> multi_var COMMA CONSTANTS .)
    COMMA           reduce using rule 116 (multi_var -> multi_var COMMA CONSTANTS .)
    CLOSE_PAREN     reduce using rule 116 (multi_var -> multi_var COMMA CONSTANTS .)


state 239

    (68) top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 270


state 240

    (14) func_defn -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN . func_stmts opt_terms KEYWORD_end
    (95) func_stmts -> . func_stmt
    (96) func_stmts -> . func_stmts terms func_stmt
    (97) func_stmts -> . none
    (98) func_stmt -> . top_stmt
    (99) func_stmt -> . KEYWORD_return func_ret_arg
    (198) none -> .
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . MLHS EQUAL MRHS
    (151) expr1 -> . expr3
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . MLHS EQUAL fname func_ret_arg
    (125) MLHS -> . mlhs
    (126) MLHS -> . MLHS COMMA mlhs
    (152) expr3 -> . expr3 LOGICALOR expr4
    (153) expr3 -> . expr4
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (129) mlhs -> . VARIABLES
    (130) mlhs -> . CONSTANTS
    (131) mlhs -> . array
    (154) expr4 -> . expr4 LOGICALAND expr5
    (155) expr4 -> . expr5
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (156) expr5 -> . expr6 DOUBLEEQUAL expr6
    (157) expr5 -> . expr6 NOTEQUAL expr6
    (158) expr5 -> . expr6
    (159) expr6 -> . expr7 LESSEQUAL expr7
    (160) expr6 -> . expr7 LESS expr7
    (161) expr6 -> . expr7 GREATER expr7
    (162) expr6 -> . expr7 GREATEREQUAL expr7
    (163) expr6 -> . expr7
    (164) expr6 -> . BOOLEAN_CONSTANTS
    (165) expr7 -> . expr7 BITXOR expr8
    (166) expr7 -> . expr7 PIPE expr8
    (167) expr7 -> . expr8
    (168) expr8 -> . expr8 BITAND expr9
    (169) expr8 -> . expr9
    (170) expr9 -> . expr9 SHIFTL expr10
    (171) expr9 -> . expr9 SHIFTR expr10
    (172) expr9 -> . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP

    KEYWORD_return  shift and go to state 196
    DELIM           reduce using rule 198 (none -> .)
    newline         reduce using rule 198 (none -> .)
    KEYWORD_end     reduce using rule 198 (none -> .)
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)
    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 38
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 52
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 48
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    VARIABLES       shift and go to state 98
    CONSTANTS       shift and go to state 101
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29

    func_stmt                      shift and go to state 194
    mlhs                           shift and go to state 2
    func_stmts                     shift and go to state 271
    expr11                         shift and go to state 15
    expr13                         shift and go to state 16
    array                          shift and go to state 26
    expr3                          shift and go to state 41
    expr1                          shift and go to state 42
    expr6                          shift and go to state 43
    puts_stmt                      shift and go to state 18
    expr5                          shift and go to state 45
    func_call_stmt                 shift and go to state 32
    expr7                          shift and go to state 7
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    expr4                          shift and go to state 8
    fname                          shift and go to state 44
    exit_stmt                      shift and go to state 49
    MLHS                           shift and go to state 50
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 20
    uexpr                          shift and go to state 10
    none                           shift and go to state 198
    expr                           shift and go to state 35
    expr10                         shift and go to state 14
    top_stmt                       shift and go to state 199

state 241

    (15) func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN func_stmts . opt_terms KEYWORD_end
    (96) func_stmts -> func_stmts . terms func_stmt
    (192) opt_terms -> . none
    (193) opt_terms -> . terms
    (194) terms -> . term
    (195) terms -> . terms term
    (198) none -> .
    (196) term -> . DELIM
    (197) term -> . newline

    KEYWORD_end     reduce using rule 198 (none -> .)
    DELIM           shift and go to state 80
    newline         shift and go to state 79

    none                           shift and go to state 81
    terms                          shift and go to state 242
    term                           shift and go to state 77
    opt_terms                      shift and go to state 272

state 242

    (96) func_stmts -> func_stmts terms . func_stmt
    (193) opt_terms -> terms .
    (195) terms -> terms . term
    (98) func_stmt -> . top_stmt
    (99) func_stmt -> . KEYWORD_return func_ret_arg
    (196) term -> . DELIM
    (197) term -> . newline
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . MLHS EQUAL MRHS
    (151) expr1 -> . expr3
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . MLHS EQUAL fname func_ret_arg
    (125) MLHS -> . mlhs
    (126) MLHS -> . MLHS COMMA mlhs
    (152) expr3 -> . expr3 LOGICALOR expr4
    (153) expr3 -> . expr4
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (129) mlhs -> . VARIABLES
    (130) mlhs -> . CONSTANTS
    (131) mlhs -> . array
    (154) expr4 -> . expr4 LOGICALAND expr5
    (155) expr4 -> . expr5
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (156) expr5 -> . expr6 DOUBLEEQUAL expr6
    (157) expr5 -> . expr6 NOTEQUAL expr6
    (158) expr5 -> . expr6
    (159) expr6 -> . expr7 LESSEQUAL expr7
    (160) expr6 -> . expr7 LESS expr7
    (161) expr6 -> . expr7 GREATER expr7
    (162) expr6 -> . expr7 GREATEREQUAL expr7
    (163) expr6 -> . expr7
    (164) expr6 -> . BOOLEAN_CONSTANTS
    (165) expr7 -> . expr7 BITXOR expr8
    (166) expr7 -> . expr7 PIPE expr8
    (167) expr7 -> . expr8
    (168) expr8 -> . expr8 BITAND expr9
    (169) expr8 -> . expr9
    (170) expr9 -> . expr9 SHIFTL expr10
    (171) expr9 -> . expr9 SHIFTR expr10
    (172) expr9 -> . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP
    (198) none -> .

    KEYWORD_end     reduce using rule 193 (opt_terms -> terms .)
    KEYWORD_return  shift and go to state 196
    DELIM           shift and go to state 80
    newline         shift and go to state 79
    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 38
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 52
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 48
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    VARIABLES       shift and go to state 98
    CONSTANTS       shift and go to state 101
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)

    func_stmt                      shift and go to state 273
    mlhs                           shift and go to state 2
    expr11                         shift and go to state 15
    expr13                         shift and go to state 16
    array                          shift and go to state 26
    expr3                          shift and go to state 41
    expr1                          shift and go to state 42
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    puts_stmt                      shift and go to state 18
    expr5                          shift and go to state 45
    func_call_stmt                 shift and go to state 32
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    expr4                          shift and go to state 8
    fname                          shift and go to state 44
    exit_stmt                      shift and go to state 49
    MLHS                           shift and go to state 50
    none                           shift and go to state 34
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 20
    uexpr                          shift and go to state 10
    term                           shift and go to state 153
    expr                           shift and go to state 35
    expr10                         shift and go to state 14
    top_stmt                       shift and go to state 199

state 243

    (16) func_defn -> KEYWORD_def fname arguments func_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 274


state 244

    (99) func_stmt -> KEYWORD_return func_ret_arg .
    (102) func_ret_arg -> func_ret_arg . COMMA func_arg_expr
    (103) func_ret_arg -> func_ret_arg . COMMA primary

    DELIM           reduce using rule 99 (func_stmt -> KEYWORD_return func_ret_arg .)
    newline         reduce using rule 99 (func_stmt -> KEYWORD_return func_ret_arg .)
    KEYWORD_end     reduce using rule 99 (func_stmt -> KEYWORD_return func_ret_arg .)
    COMMA           shift and go to state 174


state 245

    (55) arguments -> arguments COMMA VARIABLES .
    (62) func_arg_expr -> VARIABLES . EQUAL primary

    COMMA           reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    DELIM           reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    newline         reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    $end            reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    CLOSE_PAREN     reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_return  reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    SIGIL_AT        reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    SIGIL_DOUBLE_AT reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_puts    reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_end     reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_if      reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_while   reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_begin   reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_until   reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_for     reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_break   reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_next    reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_redo    reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    KEYWORD_exit    reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    VARIABLES       reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    CONSTANTS       reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    BOOLEAN_CONSTANTS reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    OPEN_PAREN      reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    PLUS            reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    MINUS           reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    BITNOT          reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    BITCOMP         reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    INT_CONSTANTS   reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    FLOAT_CONSTANTS reduce using rule 55 (arguments -> arguments COMMA VARIABLES .)
    EQUAL           shift and go to state 175


state 246

    (57) arguments -> arguments COMMA func_arg_expr .

    COMMA           reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    DELIM           reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    newline         reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    $end            reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    CLOSE_PAREN     reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_return  reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    SIGIL_AT        reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    SIGIL_DOUBLE_AT reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_puts    reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_end     reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_if      reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_while   reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_begin   reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_until   reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_for     reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_break   reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_next    reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_redo    reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    KEYWORD_exit    reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    VARIABLES       reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    CONSTANTS       reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    BOOLEAN_CONSTANTS reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    OPEN_PAREN      reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    PLUS            reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    MINUS           reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    BITNOT          reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    BITCOMP         reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    INT_CONSTANTS   reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)
    FLOAT_CONSTANTS reduce using rule 57 (arguments -> arguments COMMA func_arg_expr .)


state 247

    (56) arguments -> arguments COMMA CONSTANTS .
    (63) func_arg_expr -> CONSTANTS . EQUAL primary

    COMMA           reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    DELIM           reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    newline         reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    $end            reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    CLOSE_PAREN     reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_return  reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    SIGIL_AT        reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    SIGIL_DOUBLE_AT reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_puts    reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_end     reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_if      reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_while   reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_begin   reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_until   reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_for     reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_break   reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_next    reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_redo    reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    KEYWORD_exit    reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    VARIABLES       reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    CONSTANTS       reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    BOOLEAN_CONSTANTS reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    OPEN_PAREN      reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    PLUS            reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    MINUS           reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    BITNOT          reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    BITCOMP         reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    INT_CONSTANTS   reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    FLOAT_CONSTANTS reduce using rule 56 (arguments -> arguments COMMA CONSTANTS .)
    EQUAL           shift and go to state 173


state 248

    (11) statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments . CLOSE_PAREN
    (55) arguments -> arguments . COMMA VARIABLES
    (56) arguments -> arguments . COMMA CONSTANTS
    (57) arguments -> arguments . COMMA func_arg_expr

    CLOSE_PAREN     shift and go to state 275
    COMMA           shift and go to state 197


state 249

    (12) statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .

    DELIM           reduce using rule 12 (statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    newline         reduce using rule 12 (statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    $end            reduce using rule 12 (statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)


state 250

    (72) top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 276


state 251

    (67) top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms . elsif_tail opt_else_stmt KEYWORD_end
    (106) elsif_tail -> . none
    (107) elsif_tail -> . KEYWORD_elsif expr3 opt_then gen_stmts opt_terms elsif_tail
    (198) none -> .

    KEYWORD_elsif   shift and go to state 278
    KEYWORD_else    reduce using rule 198 (none -> .)
    KEYWORD_end     reduce using rule 198 (none -> .)

    none                           shift and go to state 277
    elsif_tail                     shift and go to state 279

state 252

    (8) statement -> VARIABLES DOT VARIABLES OPEN_PAREN arguments . CLOSE_PAREN
    (55) arguments -> arguments . COMMA VARIABLES
    (56) arguments -> arguments . COMMA CONSTANTS
    (57) arguments -> arguments . COMMA func_arg_expr

    CLOSE_PAREN     shift and go to state 280
    COMMA           shift and go to state 197


state 253

    (9) statement -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .

    DELIM           reduce using rule 9 (statement -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    newline         reduce using rule 9 (statement -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    $end            reduce using rule 9 (statement -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)


state 254

    (136) mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN . arguments CLOSE_PAREN
    (137) mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN . CLOSE_PAREN
    (55) arguments -> . arguments COMMA VARIABLES
    (56) arguments -> . arguments COMMA CONSTANTS
    (57) arguments -> . arguments COMMA func_arg_expr
    (58) arguments -> . VARIABLES
    (59) arguments -> . CONSTANTS
    (60) arguments -> . func_arg_expr
    (61) arguments -> . newline
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary

    CLOSE_PAREN     shift and go to state 282
    VARIABLES       shift and go to state 147
    CONSTANTS       shift and go to state 146
    newline         shift and go to state 148

    func_arg_expr                  shift and go to state 151
    arguments                      shift and go to state 281

state 255

    (139) mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN . arguments CLOSE_PAREN
    (141) mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN . CLOSE_PAREN
    (55) arguments -> . arguments COMMA VARIABLES
    (56) arguments -> . arguments COMMA CONSTANTS
    (57) arguments -> . arguments COMMA func_arg_expr
    (58) arguments -> . VARIABLES
    (59) arguments -> . CONSTANTS
    (60) arguments -> . func_arg_expr
    (61) arguments -> . newline
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary

    CLOSE_PAREN     shift and go to state 284
    VARIABLES       shift and go to state 147
    CONSTANTS       shift and go to state 146
    newline         shift and go to state 148

    func_arg_expr                  shift and go to state 151
    arguments                      shift and go to state 283

state 256

    (73) top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until . expr3
    (152) expr3 -> . expr3 LOGICALOR expr4
    (153) expr3 -> . expr4
    (154) expr4 -> . expr4 LOGICALAND expr5
    (155) expr4 -> . expr5
    (156) expr5 -> . expr6 DOUBLEEQUAL expr6
    (157) expr5 -> . expr6 NOTEQUAL expr6
    (158) expr5 -> . expr6
    (159) expr6 -> . expr7 LESSEQUAL expr7
    (160) expr6 -> . expr7 LESS expr7
    (161) expr6 -> . expr7 GREATER expr7
    (162) expr6 -> . expr7 GREATEREQUAL expr7
    (163) expr6 -> . expr7
    (164) expr6 -> . BOOLEAN_CONSTANTS
    (165) expr7 -> . expr7 BITXOR expr8
    (166) expr7 -> . expr7 PIPE expr8
    (167) expr7 -> . expr8
    (168) expr8 -> . expr8 BITAND expr9
    (169) expr8 -> . expr9
    (170) expr9 -> . expr9 SHIFTL expr10
    (171) expr9 -> . expr9 SHIFTR expr10
    (172) expr9 -> . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (198) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr13                         shift and go to state 16
    expr3                          shift and go to state 285
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    expr4                          shift and go to state 8
    expr5                          shift and go to state 45
    expr10                         shift and go to state 14
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    array                          shift and go to state 55
    expr11                         shift and go to state 15

state 257

    (70) top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while . expr3
    (152) expr3 -> . expr3 LOGICALOR expr4
    (153) expr3 -> . expr4
    (154) expr4 -> . expr4 LOGICALAND expr5
    (155) expr4 -> . expr5
    (156) expr5 -> . expr6 DOUBLEEQUAL expr6
    (157) expr5 -> . expr6 NOTEQUAL expr6
    (158) expr5 -> . expr6
    (159) expr6 -> . expr7 LESSEQUAL expr7
    (160) expr6 -> . expr7 LESS expr7
    (161) expr6 -> . expr7 GREATER expr7
    (162) expr6 -> . expr7 GREATEREQUAL expr7
    (163) expr6 -> . expr7
    (164) expr6 -> . BOOLEAN_CONSTANTS
    (165) expr7 -> . expr7 BITXOR expr8
    (166) expr7 -> . expr7 PIPE expr8
    (167) expr7 -> . expr8
    (168) expr8 -> . expr8 BITAND expr9
    (169) expr8 -> . expr9
    (170) expr9 -> . expr9 SHIFTL expr10
    (171) expr9 -> . expr9 SHIFTR expr10
    (172) expr9 -> . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (198) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr13                         shift and go to state 16
    expr3                          shift and go to state 286
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    expr4                          shift and go to state 8
    expr5                          shift and go to state 45
    expr10                         shift and go to state 14
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    array                          shift and go to state 55
    expr11                         shift and go to state 15

state 258

    (31) class_mlhs -> class_mlhs terms . SIGIL_DOUBLE_AT
    (195) terms -> terms . term
    (196) term -> . DELIM
    (197) term -> . newline

    SIGIL_DOUBLE_AT shift and go to state 287
    DELIM           shift and go to state 80
    newline         shift and go to state 79

    term                           shift and go to state 153

state 259

    (21) class_stmt -> class_mlhs EQUAL . class_mrhs
    (23) class_mrhs -> . literal
    (24) literal -> . INT_CONSTANTS
    (25) literal -> . FLOAT_CONSTANTS
    (26) literal -> . STRING_CONSTANTS
    (27) literal -> . BOOLEAN_CONSTANTS
    (28) literal -> . CHAR_CONSTANTS
    (29) literal -> . SIGIL_AT
    (30) literal -> . SIGIL_DOUBLE_AT

    INT_CONSTANTS   shift and go to state 290
    FLOAT_CONSTANTS shift and go to state 291
    STRING_CONSTANTS shift and go to state 293
    BOOLEAN_CONSTANTS shift and go to state 289
    CHAR_CONSTANTS  shift and go to state 296
    SIGIL_AT        shift and go to state 288
    SIGIL_DOUBLE_AT shift and go to state 292

    literal                        shift and go to state 294
    class_mrhs                     shift and go to state 295

state 260

    (19) class_stmts -> class_stmts terms . class_stmt
    (193) opt_terms -> terms .
    (195) terms -> terms . term
    (21) class_stmt -> . class_mlhs EQUAL class_mrhs
    (22) class_stmt -> . class_func
    (196) term -> . DELIM
    (197) term -> . newline
    (31) class_mlhs -> . class_mlhs terms SIGIL_DOUBLE_AT
    (32) class_mlhs -> . SIGIL_DOUBLE_AT
    (33) class_func -> . KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (34) class_func -> . KEYWORD_def fname arguments class_method_stmts opt_terms KEYWORD_end
    (35) class_func -> . KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end

    KEYWORD_end     reduce using rule 193 (opt_terms -> terms .)
    DELIM           shift and go to state 80
    newline         shift and go to state 79
    SIGIL_DOUBLE_AT shift and go to state 215
    KEYWORD_def     shift and go to state 218

    term                           shift and go to state 153
    class_mlhs                     shift and go to state 214
    class_func                     shift and go to state 216
    class_stmt                     shift and go to state 297

state 261

    (17) class_defn -> KEYWORD_class CONSTANTS newline class_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 298


state 262

    (33) class_func -> KEYWORD_def fname . OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (34) class_func -> KEYWORD_def fname . arguments class_method_stmts opt_terms KEYWORD_end
    (35) class_func -> KEYWORD_def fname . OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (55) arguments -> . arguments COMMA VARIABLES
    (56) arguments -> . arguments COMMA CONSTANTS
    (57) arguments -> . arguments COMMA func_arg_expr
    (58) arguments -> . VARIABLES
    (59) arguments -> . CONSTANTS
    (60) arguments -> . func_arg_expr
    (61) arguments -> . newline
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary

    OPEN_PAREN      shift and go to state 299
    VARIABLES       shift and go to state 147
    CONSTANTS       shift and go to state 146
    newline         shift and go to state 148

    func_arg_expr                  shift and go to state 151
    arguments                      shift and go to state 300

state 263

    (128) MRHS -> MRHS COMMA mrhs .

    COMMA           reduce using rule 128 (MRHS -> MRHS COMMA mrhs .)
    KEYWORD_while   reduce using rule 128 (MRHS -> MRHS COMMA mrhs .)
    KEYWORD_until   reduce using rule 128 (MRHS -> MRHS COMMA mrhs .)
    DELIM           reduce using rule 128 (MRHS -> MRHS COMMA mrhs .)
    newline         reduce using rule 128 (MRHS -> MRHS COMMA mrhs .)
    $end            reduce using rule 128 (MRHS -> MRHS COMMA mrhs .)
    KEYWORD_end     reduce using rule 128 (MRHS -> MRHS COMMA mrhs .)
    KEYWORD_elsif   reduce using rule 128 (MRHS -> MRHS COMMA mrhs .)
    KEYWORD_else    reduce using rule 128 (MRHS -> MRHS COMMA mrhs .)


state 264

    (87) func_call_stmt -> MLHS EQUAL fname OPEN_PAREN func_ret_arg . CLOSE_PAREN
    (102) func_ret_arg -> func_ret_arg . COMMA func_arg_expr
    (103) func_ret_arg -> func_ret_arg . COMMA primary

    CLOSE_PAREN     shift and go to state 301
    COMMA           shift and go to state 174


state 265

    (74) top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in . for_range opt_do gen_stmts opt_terms KEYWORD_end
    (117) for_range -> . OPEN_PAREN INT_CONSTANTS DOUBLEDOT INT_CONSTANTS CLOSE_PAREN
    (118) for_range -> . INT_CONSTANTS DOUBLEDOT INT_CONSTANTS
    (119) for_range -> . OPEN_PAREN INT_CONSTANTS TRIPLEDOT INT_CONSTANTS CLOSE_PAREN
    (120) for_range -> . INT_CONSTANTS TRIPLEDOT INT_CONSTANTS
    (121) for_range -> . VARIABLES
    (122) for_range -> . array
    (123) for_range -> . CONSTANTS
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET

    OPEN_PAREN      shift and go to state 232
    INT_CONSTANTS   shift and go to state 231
    VARIABLES       shift and go to state 233
    CONSTANTS       shift and go to state 235

    for_range                      shift and go to state 302
    array                          shift and go to state 236

state 266

    (118) for_range -> INT_CONSTANTS DOUBLEDOT . INT_CONSTANTS

    INT_CONSTANTS   shift and go to state 303


state 267

    (120) for_range -> INT_CONSTANTS TRIPLEDOT . INT_CONSTANTS

    INT_CONSTANTS   shift and go to state 304


state 268

    (117) for_range -> OPEN_PAREN INT_CONSTANTS . DOUBLEDOT INT_CONSTANTS CLOSE_PAREN
    (119) for_range -> OPEN_PAREN INT_CONSTANTS . TRIPLEDOT INT_CONSTANTS CLOSE_PAREN

    DOUBLEDOT       shift and go to state 305
    TRIPLEDOT       shift and go to state 306


state 269

    (75) top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range opt_do . gen_stmts opt_terms KEYWORD_end
    (76) gen_stmts -> . top_stmt
    (77) gen_stmts -> . gen_stmts terms top_stmt
    (78) gen_stmts -> . none
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (198) none -> .
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . MLHS EQUAL MRHS
    (151) expr1 -> . expr3
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . MLHS EQUAL fname func_ret_arg
    (125) MLHS -> . mlhs
    (126) MLHS -> . MLHS COMMA mlhs
    (152) expr3 -> . expr3 LOGICALOR expr4
    (153) expr3 -> . expr4
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (129) mlhs -> . VARIABLES
    (130) mlhs -> . CONSTANTS
    (131) mlhs -> . array
    (154) expr4 -> . expr4 LOGICALAND expr5
    (155) expr4 -> . expr5
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (156) expr5 -> . expr6 DOUBLEEQUAL expr6
    (157) expr5 -> . expr6 NOTEQUAL expr6
    (158) expr5 -> . expr6
    (159) expr6 -> . expr7 LESSEQUAL expr7
    (160) expr6 -> . expr7 LESS expr7
    (161) expr6 -> . expr7 GREATER expr7
    (162) expr6 -> . expr7 GREATEREQUAL expr7
    (163) expr6 -> . expr7
    (164) expr6 -> . BOOLEAN_CONSTANTS
    (165) expr7 -> . expr7 BITXOR expr8
    (166) expr7 -> . expr7 PIPE expr8
    (167) expr7 -> . expr8
    (168) expr8 -> . expr8 BITAND expr9
    (169) expr8 -> . expr9
    (170) expr9 -> . expr9 SHIFTL expr10
    (171) expr9 -> . expr9 SHIFTR expr10
    (172) expr9 -> . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP

    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 38
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 52
    DELIM           reduce using rule 198 (none -> .)
    newline         reduce using rule 198 (none -> .)
    KEYWORD_end     reduce using rule 198 (none -> .)
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 48
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    VARIABLES       shift and go to state 98
    CONSTANTS       shift and go to state 101
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29

    mlhs                           shift and go to state 2
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr13                         shift and go to state 16
    array                          shift and go to state 26
    expr3                          shift and go to state 41
    expr1                          shift and go to state 42
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    puts_stmt                      shift and go to state 18
    expr5                          shift and go to state 45
    func_call_stmt                 shift and go to state 32
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    expr4                          shift and go to state 8
    fname                          shift and go to state 44
    exit_stmt                      shift and go to state 49
    MLHS                           shift and go to state 50
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 20
    uexpr                          shift and go to state 10
    none                           shift and go to state 99
    gen_stmts                      shift and go to state 307
    expr                           shift and go to state 35
    top_stmt                       shift and go to state 102

state 270

    (68) top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end .

    KEYWORD_while   reduce using rule 68 (top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_until   reduce using rule 68 (top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    DELIM           reduce using rule 68 (top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 68 (top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_end     reduce using rule 68 (top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_elsif   reduce using rule 68 (top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_else    reduce using rule 68 (top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    $end            reduce using rule 68 (top_stmt -> KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end .)


state 271

    (14) func_defn -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN func_stmts . opt_terms KEYWORD_end
    (96) func_stmts -> func_stmts . terms func_stmt
    (192) opt_terms -> . none
    (193) opt_terms -> . terms
    (194) terms -> . term
    (195) terms -> . terms term
    (198) none -> .
    (196) term -> . DELIM
    (197) term -> . newline

    KEYWORD_end     reduce using rule 198 (none -> .)
    DELIM           shift and go to state 80
    newline         shift and go to state 79

    none                           shift and go to state 81
    terms                          shift and go to state 242
    term                           shift and go to state 77
    opt_terms                      shift and go to state 308

state 272

    (15) func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN func_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 309


state 273

    (96) func_stmts -> func_stmts terms func_stmt .

    DELIM           reduce using rule 96 (func_stmts -> func_stmts terms func_stmt .)
    newline         reduce using rule 96 (func_stmts -> func_stmts terms func_stmt .)
    KEYWORD_end     reduce using rule 96 (func_stmts -> func_stmts terms func_stmt .)


state 274

    (16) func_defn -> KEYWORD_def fname arguments func_stmts opt_terms KEYWORD_end .

    DELIM           reduce using rule 16 (func_defn -> KEYWORD_def fname arguments func_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 16 (func_defn -> KEYWORD_def fname arguments func_stmts opt_terms KEYWORD_end .)
    $end            reduce using rule 16 (func_defn -> KEYWORD_def fname arguments func_stmts opt_terms KEYWORD_end .)


state 275

    (11) statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .

    DELIM           reduce using rule 11 (statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    newline         reduce using rule 11 (statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    $end            reduce using rule 11 (statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)


state 276

    (72) top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end .

    KEYWORD_while   reduce using rule 72 (top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_until   reduce using rule 72 (top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    DELIM           reduce using rule 72 (top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 72 (top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_end     reduce using rule 72 (top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_elsif   reduce using rule 72 (top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_else    reduce using rule 72 (top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end .)
    $end            reduce using rule 72 (top_stmt -> KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end .)


state 277

    (106) elsif_tail -> none .

    KEYWORD_else    reduce using rule 106 (elsif_tail -> none .)
    KEYWORD_end     reduce using rule 106 (elsif_tail -> none .)


state 278

    (107) elsif_tail -> KEYWORD_elsif . expr3 opt_then gen_stmts opt_terms elsif_tail
    (152) expr3 -> . expr3 LOGICALOR expr4
    (153) expr3 -> . expr4
    (154) expr4 -> . expr4 LOGICALAND expr5
    (155) expr4 -> . expr5
    (156) expr5 -> . expr6 DOUBLEEQUAL expr6
    (157) expr5 -> . expr6 NOTEQUAL expr6
    (158) expr5 -> . expr6
    (159) expr6 -> . expr7 LESSEQUAL expr7
    (160) expr6 -> . expr7 LESS expr7
    (161) expr6 -> . expr7 GREATER expr7
    (162) expr6 -> . expr7 GREATEREQUAL expr7
    (163) expr6 -> . expr7
    (164) expr6 -> . BOOLEAN_CONSTANTS
    (165) expr7 -> . expr7 BITXOR expr8
    (166) expr7 -> . expr7 PIPE expr8
    (167) expr7 -> . expr8
    (168) expr8 -> . expr8 BITAND expr9
    (169) expr8 -> . expr9
    (170) expr9 -> . expr9 SHIFTL expr10
    (171) expr9 -> . expr9 SHIFTR expr10
    (172) expr9 -> . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (198) none -> .

    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    CONSTANTS       shift and go to state 56
    VARIABLES       shift and go to state 53
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)

    uexpr                          shift and go to state 10
    none                           shift and go to state 34
    expr5                          shift and go to state 45
    expr3                          shift and go to state 310
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    expr4                          shift and go to state 8
    expr10                         shift and go to state 14
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    expr13                         shift and go to state 16
    array                          shift and go to state 55
    expr11                         shift and go to state 15

state 279

    (67) top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail . opt_else_stmt KEYWORD_end
    (104) opt_else_stmt -> . KEYWORD_else gen_stmts opt_terms
    (105) opt_else_stmt -> . none
    (198) none -> .

    KEYWORD_else    shift and go to state 312
    KEYWORD_end     reduce using rule 198 (none -> .)

    none                           shift and go to state 311
    opt_else_stmt                  shift and go to state 313

state 280

    (8) statement -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .

    DELIM           reduce using rule 8 (statement -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    newline         reduce using rule 8 (statement -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    $end            reduce using rule 8 (statement -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)


state 281

    (136) mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments . CLOSE_PAREN
    (55) arguments -> arguments . COMMA VARIABLES
    (56) arguments -> arguments . COMMA CONSTANTS
    (57) arguments -> arguments . COMMA func_arg_expr

    CLOSE_PAREN     shift and go to state 314
    COMMA           shift and go to state 197


state 282

    (137) mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .

    KEYWORD_while   reduce using rule 137 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    KEYWORD_until   reduce using rule 137 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    DELIM           reduce using rule 137 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    newline         reduce using rule 137 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    $end            reduce using rule 137 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    KEYWORD_end     reduce using rule 137 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    KEYWORD_elsif   reduce using rule 137 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    KEYWORD_else    reduce using rule 137 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    COMMA           reduce using rule 137 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)


state 283

    (139) mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments . CLOSE_PAREN
    (55) arguments -> arguments . COMMA VARIABLES
    (56) arguments -> arguments . COMMA CONSTANTS
    (57) arguments -> arguments . COMMA func_arg_expr

    CLOSE_PAREN     shift and go to state 315
    COMMA           shift and go to state 197


state 284

    (141) mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .

    KEYWORD_while   reduce using rule 141 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    KEYWORD_until   reduce using rule 141 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    DELIM           reduce using rule 141 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    newline         reduce using rule 141 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    $end            reduce using rule 141 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    KEYWORD_end     reduce using rule 141 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    KEYWORD_elsif   reduce using rule 141 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    KEYWORD_else    reduce using rule 141 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    COMMA           reduce using rule 141 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)


state 285

    (73) top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3 .
    (152) expr3 -> expr3 . LOGICALOR expr4

    KEYWORD_while   reduce using rule 73 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3 .)
    KEYWORD_until   reduce using rule 73 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3 .)
    DELIM           reduce using rule 73 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3 .)
    newline         reduce using rule 73 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3 .)
    KEYWORD_end     reduce using rule 73 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3 .)
    KEYWORD_elsif   reduce using rule 73 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3 .)
    KEYWORD_else    reduce using rule 73 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3 .)
    $end            reduce using rule 73 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3 .)
    LOGICALOR       shift and go to state 104


state 286

    (70) top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3 .
    (152) expr3 -> expr3 . LOGICALOR expr4

    KEYWORD_while   reduce using rule 70 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3 .)
    KEYWORD_until   reduce using rule 70 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3 .)
    DELIM           reduce using rule 70 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3 .)
    newline         reduce using rule 70 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3 .)
    KEYWORD_end     reduce using rule 70 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3 .)
    KEYWORD_elsif   reduce using rule 70 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3 .)
    KEYWORD_else    reduce using rule 70 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3 .)
    $end            reduce using rule 70 (top_stmt -> KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3 .)
    LOGICALOR       shift and go to state 104


state 287

    (31) class_mlhs -> class_mlhs terms SIGIL_DOUBLE_AT .

    EQUAL           reduce using rule 31 (class_mlhs -> class_mlhs terms SIGIL_DOUBLE_AT .)
    DELIM           reduce using rule 31 (class_mlhs -> class_mlhs terms SIGIL_DOUBLE_AT .)
    newline         reduce using rule 31 (class_mlhs -> class_mlhs terms SIGIL_DOUBLE_AT .)


state 288

    (29) literal -> SIGIL_AT .

    COMMA           reduce using rule 29 (literal -> SIGIL_AT .)
    DELIM           reduce using rule 29 (literal -> SIGIL_AT .)
    newline         reduce using rule 29 (literal -> SIGIL_AT .)
    KEYWORD_end     reduce using rule 29 (literal -> SIGIL_AT .)


state 289

    (27) literal -> BOOLEAN_CONSTANTS .

    COMMA           reduce using rule 27 (literal -> BOOLEAN_CONSTANTS .)
    DELIM           reduce using rule 27 (literal -> BOOLEAN_CONSTANTS .)
    newline         reduce using rule 27 (literal -> BOOLEAN_CONSTANTS .)
    KEYWORD_end     reduce using rule 27 (literal -> BOOLEAN_CONSTANTS .)


state 290

    (24) literal -> INT_CONSTANTS .

    COMMA           reduce using rule 24 (literal -> INT_CONSTANTS .)
    DELIM           reduce using rule 24 (literal -> INT_CONSTANTS .)
    newline         reduce using rule 24 (literal -> INT_CONSTANTS .)
    KEYWORD_end     reduce using rule 24 (literal -> INT_CONSTANTS .)


state 291

    (25) literal -> FLOAT_CONSTANTS .

    COMMA           reduce using rule 25 (literal -> FLOAT_CONSTANTS .)
    DELIM           reduce using rule 25 (literal -> FLOAT_CONSTANTS .)
    newline         reduce using rule 25 (literal -> FLOAT_CONSTANTS .)
    KEYWORD_end     reduce using rule 25 (literal -> FLOAT_CONSTANTS .)


state 292

    (30) literal -> SIGIL_DOUBLE_AT .

    COMMA           reduce using rule 30 (literal -> SIGIL_DOUBLE_AT .)
    DELIM           reduce using rule 30 (literal -> SIGIL_DOUBLE_AT .)
    newline         reduce using rule 30 (literal -> SIGIL_DOUBLE_AT .)
    KEYWORD_end     reduce using rule 30 (literal -> SIGIL_DOUBLE_AT .)


state 293

    (26) literal -> STRING_CONSTANTS .

    COMMA           reduce using rule 26 (literal -> STRING_CONSTANTS .)
    DELIM           reduce using rule 26 (literal -> STRING_CONSTANTS .)
    newline         reduce using rule 26 (literal -> STRING_CONSTANTS .)
    KEYWORD_end     reduce using rule 26 (literal -> STRING_CONSTANTS .)


state 294

    (23) class_mrhs -> literal .

    DELIM           reduce using rule 23 (class_mrhs -> literal .)
    newline         reduce using rule 23 (class_mrhs -> literal .)
    KEYWORD_end     reduce using rule 23 (class_mrhs -> literal .)


state 295

    (21) class_stmt -> class_mlhs EQUAL class_mrhs .

    DELIM           reduce using rule 21 (class_stmt -> class_mlhs EQUAL class_mrhs .)
    newline         reduce using rule 21 (class_stmt -> class_mlhs EQUAL class_mrhs .)
    KEYWORD_end     reduce using rule 21 (class_stmt -> class_mlhs EQUAL class_mrhs .)


state 296

    (28) literal -> CHAR_CONSTANTS .

    COMMA           reduce using rule 28 (literal -> CHAR_CONSTANTS .)
    DELIM           reduce using rule 28 (literal -> CHAR_CONSTANTS .)
    newline         reduce using rule 28 (literal -> CHAR_CONSTANTS .)
    KEYWORD_end     reduce using rule 28 (literal -> CHAR_CONSTANTS .)


state 297

    (19) class_stmts -> class_stmts terms class_stmt .

    DELIM           reduce using rule 19 (class_stmts -> class_stmts terms class_stmt .)
    newline         reduce using rule 19 (class_stmts -> class_stmts terms class_stmt .)
    KEYWORD_end     reduce using rule 19 (class_stmts -> class_stmts terms class_stmt .)


state 298

    (17) class_defn -> KEYWORD_class CONSTANTS newline class_stmts opt_terms KEYWORD_end .

    DELIM           reduce using rule 17 (class_defn -> KEYWORD_class CONSTANTS newline class_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 17 (class_defn -> KEYWORD_class CONSTANTS newline class_stmts opt_terms KEYWORD_end .)
    $end            reduce using rule 17 (class_defn -> KEYWORD_class CONSTANTS newline class_stmts opt_terms KEYWORD_end .)


state 299

    (33) class_func -> KEYWORD_def fname OPEN_PAREN . arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (35) class_func -> KEYWORD_def fname OPEN_PAREN . CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (55) arguments -> . arguments COMMA VARIABLES
    (56) arguments -> . arguments COMMA CONSTANTS
    (57) arguments -> . arguments COMMA func_arg_expr
    (58) arguments -> . VARIABLES
    (59) arguments -> . CONSTANTS
    (60) arguments -> . func_arg_expr
    (61) arguments -> . newline
    (62) func_arg_expr -> . VARIABLES EQUAL primary
    (63) func_arg_expr -> . CONSTANTS EQUAL primary

    CLOSE_PAREN     shift and go to state 317
    VARIABLES       shift and go to state 147
    CONSTANTS       shift and go to state 146
    newline         shift and go to state 148

    func_arg_expr                  shift and go to state 151
    arguments                      shift and go to state 316

state 300

    (34) class_func -> KEYWORD_def fname arguments . class_method_stmts opt_terms KEYWORD_end
    (55) arguments -> arguments . COMMA VARIABLES
    (56) arguments -> arguments . COMMA CONSTANTS
    (57) arguments -> arguments . COMMA func_arg_expr
    (36) class_method_stmts -> . class_method_stmt
    (37) class_method_stmts -> . class_method_stmts terms class_method_stmt
    (38) class_method_stmts -> . none
    (39) class_method_stmt -> . class_method_mlhs EQUAL class_method_mrhs
    (40) class_method_stmt -> . KEYWORD_return class_method_ret_arg
    (41) class_method_stmt -> . puts_stmt
    (198) none -> .
    (42) class_method_mlhs -> . class_method_mlhs terms SIGIL_AT
    (43) class_method_mlhs -> . SIGIL_AT
    (44) class_method_mlhs -> . SIGIL_DOUBLE_AT
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr

    COMMA           shift and go to state 197
    KEYWORD_return  shift and go to state 321
    DELIM           reduce using rule 198 (none -> .)
    newline         reduce using rule 198 (none -> .)
    KEYWORD_end     reduce using rule 198 (none -> .)
    SIGIL_AT        shift and go to state 319
    SIGIL_DOUBLE_AT shift and go to state 323
    KEYWORD_puts    shift and go to state 33

    class_method_stmt              shift and go to state 318
    none                           shift and go to state 325
    class_method_mlhs              shift and go to state 324
    puts_stmt                      shift and go to state 322
    class_method_stmts             shift and go to state 320

state 301

    (87) func_call_stmt -> MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN .

    KEYWORD_while   reduce using rule 87 (func_call_stmt -> MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    KEYWORD_until   reduce using rule 87 (func_call_stmt -> MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    DELIM           reduce using rule 87 (func_call_stmt -> MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    newline         reduce using rule 87 (func_call_stmt -> MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    KEYWORD_elsif   reduce using rule 87 (func_call_stmt -> MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    KEYWORD_else    reduce using rule 87 (func_call_stmt -> MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    KEYWORD_end     reduce using rule 87 (func_call_stmt -> MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)
    $end            reduce using rule 87 (func_call_stmt -> MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN .)


state 302

    (74) top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range . opt_do gen_stmts opt_terms KEYWORD_end
    (110) opt_do -> . KEYWORD_do
    (111) opt_do -> . newline

    KEYWORD_do      shift and go to state 130
    newline         shift and go to state 129

    opt_do                         shift and go to state 326

state 303

    (118) for_range -> INT_CONSTANTS DOUBLEDOT INT_CONSTANTS .

    KEYWORD_do      reduce using rule 118 (for_range -> INT_CONSTANTS DOUBLEDOT INT_CONSTANTS .)
    newline         reduce using rule 118 (for_range -> INT_CONSTANTS DOUBLEDOT INT_CONSTANTS .)


state 304

    (120) for_range -> INT_CONSTANTS TRIPLEDOT INT_CONSTANTS .

    KEYWORD_do      reduce using rule 120 (for_range -> INT_CONSTANTS TRIPLEDOT INT_CONSTANTS .)
    newline         reduce using rule 120 (for_range -> INT_CONSTANTS TRIPLEDOT INT_CONSTANTS .)


state 305

    (117) for_range -> OPEN_PAREN INT_CONSTANTS DOUBLEDOT . INT_CONSTANTS CLOSE_PAREN

    INT_CONSTANTS   shift and go to state 327


state 306

    (119) for_range -> OPEN_PAREN INT_CONSTANTS TRIPLEDOT . INT_CONSTANTS CLOSE_PAREN

    INT_CONSTANTS   shift and go to state 328


state 307

    (75) top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts . opt_terms KEYWORD_end
    (77) gen_stmts -> gen_stmts . terms top_stmt
    (192) opt_terms -> . none
    (193) opt_terms -> . terms
    (194) terms -> . term
    (195) terms -> . terms term
    (198) none -> .
    (196) term -> . DELIM
    (197) term -> . newline

    KEYWORD_end     reduce using rule 198 (none -> .)
    DELIM           shift and go to state 80
    newline         shift and go to state 79

    none                           shift and go to state 81
    terms                          shift and go to state 166
    term                           shift and go to state 77
    opt_terms                      shift and go to state 329

state 308

    (14) func_defn -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN func_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 330


state 309

    (15) func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN func_stmts opt_terms KEYWORD_end .

    DELIM           reduce using rule 15 (func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN func_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 15 (func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN func_stmts opt_terms KEYWORD_end .)
    $end            reduce using rule 15 (func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN func_stmts opt_terms KEYWORD_end .)


state 310

    (107) elsif_tail -> KEYWORD_elsif expr3 . opt_then gen_stmts opt_terms elsif_tail
    (152) expr3 -> expr3 . LOGICALOR expr4
    (108) opt_then -> . KEYWORD_then
    (109) opt_then -> . newline

    LOGICALOR       shift and go to state 104
    KEYWORD_then    shift and go to state 157
    newline         shift and go to state 156

    opt_then                       shift and go to state 331

state 311

    (105) opt_else_stmt -> none .

    KEYWORD_end     reduce using rule 105 (opt_else_stmt -> none .)


state 312

    (104) opt_else_stmt -> KEYWORD_else . gen_stmts opt_terms
    (76) gen_stmts -> . top_stmt
    (77) gen_stmts -> . gen_stmts terms top_stmt
    (78) gen_stmts -> . none
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (198) none -> .
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . MLHS EQUAL MRHS
    (151) expr1 -> . expr3
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . MLHS EQUAL fname func_ret_arg
    (125) MLHS -> . mlhs
    (126) MLHS -> . MLHS COMMA mlhs
    (152) expr3 -> . expr3 LOGICALOR expr4
    (153) expr3 -> . expr4
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (129) mlhs -> . VARIABLES
    (130) mlhs -> . CONSTANTS
    (131) mlhs -> . array
    (154) expr4 -> . expr4 LOGICALAND expr5
    (155) expr4 -> . expr5
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (156) expr5 -> . expr6 DOUBLEEQUAL expr6
    (157) expr5 -> . expr6 NOTEQUAL expr6
    (158) expr5 -> . expr6
    (159) expr6 -> . expr7 LESSEQUAL expr7
    (160) expr6 -> . expr7 LESS expr7
    (161) expr6 -> . expr7 GREATER expr7
    (162) expr6 -> . expr7 GREATEREQUAL expr7
    (163) expr6 -> . expr7
    (164) expr6 -> . BOOLEAN_CONSTANTS
    (165) expr7 -> . expr7 BITXOR expr8
    (166) expr7 -> . expr7 PIPE expr8
    (167) expr7 -> . expr8
    (168) expr8 -> . expr8 BITAND expr9
    (169) expr8 -> . expr9
    (170) expr9 -> . expr9 SHIFTL expr10
    (171) expr9 -> . expr9 SHIFTR expr10
    (172) expr9 -> . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP

    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 38
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 52
    DELIM           reduce using rule 198 (none -> .)
    newline         reduce using rule 198 (none -> .)
    KEYWORD_end     reduce using rule 198 (none -> .)
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 48
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    VARIABLES       shift and go to state 98
    CONSTANTS       shift and go to state 101
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29

    mlhs                           shift and go to state 2
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr13                         shift and go to state 16
    array                          shift and go to state 26
    expr3                          shift and go to state 41
    expr1                          shift and go to state 42
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    puts_stmt                      shift and go to state 18
    expr5                          shift and go to state 45
    func_call_stmt                 shift and go to state 32
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    expr4                          shift and go to state 8
    fname                          shift and go to state 44
    exit_stmt                      shift and go to state 49
    MLHS                           shift and go to state 50
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 20
    uexpr                          shift and go to state 10
    none                           shift and go to state 99
    gen_stmts                      shift and go to state 332
    expr                           shift and go to state 35
    top_stmt                       shift and go to state 102

state 313

    (67) top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt . KEYWORD_end

    KEYWORD_end     shift and go to state 333


state 314

    (136) mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .

    KEYWORD_while   reduce using rule 136 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    KEYWORD_until   reduce using rule 136 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    DELIM           reduce using rule 136 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    newline         reduce using rule 136 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    $end            reduce using rule 136 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    KEYWORD_end     reduce using rule 136 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    KEYWORD_elsif   reduce using rule 136 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    KEYWORD_else    reduce using rule 136 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    COMMA           reduce using rule 136 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)


state 315

    (139) mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .

    KEYWORD_while   reduce using rule 139 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    KEYWORD_until   reduce using rule 139 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    DELIM           reduce using rule 139 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    newline         reduce using rule 139 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    $end            reduce using rule 139 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    KEYWORD_end     reduce using rule 139 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    KEYWORD_elsif   reduce using rule 139 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    KEYWORD_else    reduce using rule 139 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    COMMA           reduce using rule 139 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)


state 316

    (33) class_func -> KEYWORD_def fname OPEN_PAREN arguments . CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (55) arguments -> arguments . COMMA VARIABLES
    (56) arguments -> arguments . COMMA CONSTANTS
    (57) arguments -> arguments . COMMA func_arg_expr

    CLOSE_PAREN     shift and go to state 334
    COMMA           shift and go to state 197


state 317

    (35) class_func -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN . class_method_stmts opt_terms KEYWORD_end
    (36) class_method_stmts -> . class_method_stmt
    (37) class_method_stmts -> . class_method_stmts terms class_method_stmt
    (38) class_method_stmts -> . none
    (39) class_method_stmt -> . class_method_mlhs EQUAL class_method_mrhs
    (40) class_method_stmt -> . KEYWORD_return class_method_ret_arg
    (41) class_method_stmt -> . puts_stmt
    (198) none -> .
    (42) class_method_mlhs -> . class_method_mlhs terms SIGIL_AT
    (43) class_method_mlhs -> . SIGIL_AT
    (44) class_method_mlhs -> . SIGIL_DOUBLE_AT
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr

    KEYWORD_return  shift and go to state 321
    DELIM           reduce using rule 198 (none -> .)
    newline         reduce using rule 198 (none -> .)
    KEYWORD_end     reduce using rule 198 (none -> .)
    SIGIL_AT        shift and go to state 319
    SIGIL_DOUBLE_AT shift and go to state 323
    KEYWORD_puts    shift and go to state 33

    class_method_stmt              shift and go to state 318
    none                           shift and go to state 325
    class_method_mlhs              shift and go to state 324
    puts_stmt                      shift and go to state 322
    class_method_stmts             shift and go to state 335

state 318

    (36) class_method_stmts -> class_method_stmt .

    DELIM           reduce using rule 36 (class_method_stmts -> class_method_stmt .)
    newline         reduce using rule 36 (class_method_stmts -> class_method_stmt .)
    KEYWORD_end     reduce using rule 36 (class_method_stmts -> class_method_stmt .)


state 319

    (43) class_method_mlhs -> SIGIL_AT .

    EQUAL           reduce using rule 43 (class_method_mlhs -> SIGIL_AT .)
    DELIM           reduce using rule 43 (class_method_mlhs -> SIGIL_AT .)
    newline         reduce using rule 43 (class_method_mlhs -> SIGIL_AT .)


state 320

    (34) class_func -> KEYWORD_def fname arguments class_method_stmts . opt_terms KEYWORD_end
    (37) class_method_stmts -> class_method_stmts . terms class_method_stmt
    (192) opt_terms -> . none
    (193) opt_terms -> . terms
    (194) terms -> . term
    (195) terms -> . terms term
    (198) none -> .
    (196) term -> . DELIM
    (197) term -> . newline

    KEYWORD_end     reduce using rule 198 (none -> .)
    DELIM           shift and go to state 80
    newline         shift and go to state 79

    none                           shift and go to state 81
    terms                          shift and go to state 336
    term                           shift and go to state 77
    opt_terms                      shift and go to state 337

state 321

    (40) class_method_stmt -> KEYWORD_return . class_method_ret_arg
    (47) class_method_ret_arg -> . class_method_arg_expr
    (48) class_method_ret_arg -> . literal
    (49) class_method_ret_arg -> . class_method_ret_arg COMMA class_method_arg_expr
    (50) class_method_ret_arg -> . class_method_ret_arg COMMA literal
    (51) class_method_arg_expr -> . SIGIL_AT EQUAL literal
    (52) class_method_arg_expr -> . SIGIL_DOUBLE_AT EQUAL literal
    (24) literal -> . INT_CONSTANTS
    (25) literal -> . FLOAT_CONSTANTS
    (26) literal -> . STRING_CONSTANTS
    (27) literal -> . BOOLEAN_CONSTANTS
    (28) literal -> . CHAR_CONSTANTS
    (29) literal -> . SIGIL_AT
    (30) literal -> . SIGIL_DOUBLE_AT

    SIGIL_AT        shift and go to state 338
    SIGIL_DOUBLE_AT shift and go to state 339
    INT_CONSTANTS   shift and go to state 290
    FLOAT_CONSTANTS shift and go to state 291
    STRING_CONSTANTS shift and go to state 293
    BOOLEAN_CONSTANTS shift and go to state 289
    CHAR_CONSTANTS  shift and go to state 296

    class_method_arg_expr          shift and go to state 342
    literal                        shift and go to state 340
    class_method_ret_arg           shift and go to state 341

state 322

    (41) class_method_stmt -> puts_stmt .

    DELIM           reduce using rule 41 (class_method_stmt -> puts_stmt .)
    newline         reduce using rule 41 (class_method_stmt -> puts_stmt .)
    KEYWORD_end     reduce using rule 41 (class_method_stmt -> puts_stmt .)


state 323

    (44) class_method_mlhs -> SIGIL_DOUBLE_AT .

    EQUAL           reduce using rule 44 (class_method_mlhs -> SIGIL_DOUBLE_AT .)
    DELIM           reduce using rule 44 (class_method_mlhs -> SIGIL_DOUBLE_AT .)
    newline         reduce using rule 44 (class_method_mlhs -> SIGIL_DOUBLE_AT .)


state 324

    (39) class_method_stmt -> class_method_mlhs . EQUAL class_method_mrhs
    (42) class_method_mlhs -> class_method_mlhs . terms SIGIL_AT
    (194) terms -> . term
    (195) terms -> . terms term
    (196) term -> . DELIM
    (197) term -> . newline

    EQUAL           shift and go to state 344
    DELIM           shift and go to state 80
    newline         shift and go to state 79

    term                           shift and go to state 77
    terms                          shift and go to state 343

state 325

    (38) class_method_stmts -> none .

    DELIM           reduce using rule 38 (class_method_stmts -> none .)
    newline         reduce using rule 38 (class_method_stmts -> none .)
    KEYWORD_end     reduce using rule 38 (class_method_stmts -> none .)


state 326

    (74) top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do . gen_stmts opt_terms KEYWORD_end
    (76) gen_stmts -> . top_stmt
    (77) gen_stmts -> . gen_stmts terms top_stmt
    (78) gen_stmts -> . none
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (198) none -> .
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . MLHS EQUAL MRHS
    (151) expr1 -> . expr3
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . MLHS EQUAL fname func_ret_arg
    (125) MLHS -> . mlhs
    (126) MLHS -> . MLHS COMMA mlhs
    (152) expr3 -> . expr3 LOGICALOR expr4
    (153) expr3 -> . expr4
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (129) mlhs -> . VARIABLES
    (130) mlhs -> . CONSTANTS
    (131) mlhs -> . array
    (154) expr4 -> . expr4 LOGICALAND expr5
    (155) expr4 -> . expr5
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (156) expr5 -> . expr6 DOUBLEEQUAL expr6
    (157) expr5 -> . expr6 NOTEQUAL expr6
    (158) expr5 -> . expr6
    (159) expr6 -> . expr7 LESSEQUAL expr7
    (160) expr6 -> . expr7 LESS expr7
    (161) expr6 -> . expr7 GREATER expr7
    (162) expr6 -> . expr7 GREATEREQUAL expr7
    (163) expr6 -> . expr7
    (164) expr6 -> . BOOLEAN_CONSTANTS
    (165) expr7 -> . expr7 BITXOR expr8
    (166) expr7 -> . expr7 PIPE expr8
    (167) expr7 -> . expr8
    (168) expr8 -> . expr8 BITAND expr9
    (169) expr8 -> . expr9
    (170) expr9 -> . expr9 SHIFTL expr10
    (171) expr9 -> . expr9 SHIFTR expr10
    (172) expr9 -> . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP

    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 38
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 52
    DELIM           reduce using rule 198 (none -> .)
    newline         reduce using rule 198 (none -> .)
    KEYWORD_end     reduce using rule 198 (none -> .)
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 48
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    VARIABLES       shift and go to state 98
    CONSTANTS       shift and go to state 101
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29

    mlhs                           shift and go to state 2
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr13                         shift and go to state 16
    array                          shift and go to state 26
    expr3                          shift and go to state 41
    expr1                          shift and go to state 42
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    puts_stmt                      shift and go to state 18
    expr5                          shift and go to state 45
    func_call_stmt                 shift and go to state 32
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    expr4                          shift and go to state 8
    fname                          shift and go to state 44
    exit_stmt                      shift and go to state 49
    MLHS                           shift and go to state 50
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 20
    uexpr                          shift and go to state 10
    none                           shift and go to state 99
    gen_stmts                      shift and go to state 345
    expr                           shift and go to state 35
    top_stmt                       shift and go to state 102

state 327

    (117) for_range -> OPEN_PAREN INT_CONSTANTS DOUBLEDOT INT_CONSTANTS . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 346


state 328

    (119) for_range -> OPEN_PAREN INT_CONSTANTS TRIPLEDOT INT_CONSTANTS . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 347


state 329

    (75) top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 348


state 330

    (14) func_defn -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN func_stmts opt_terms KEYWORD_end .

    DELIM           reduce using rule 14 (func_defn -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN func_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 14 (func_defn -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN func_stmts opt_terms KEYWORD_end .)
    $end            reduce using rule 14 (func_defn -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN func_stmts opt_terms KEYWORD_end .)


state 331

    (107) elsif_tail -> KEYWORD_elsif expr3 opt_then . gen_stmts opt_terms elsif_tail
    (76) gen_stmts -> . top_stmt
    (77) gen_stmts -> . gen_stmts terms top_stmt
    (78) gen_stmts -> . none
    (66) top_stmt -> . stmt
    (67) top_stmt -> . KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end
    (68) top_stmt -> . KEYWORD_while expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (69) top_stmt -> . top_stmt KEYWORD_while expr3
    (70) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_while expr3
    (71) top_stmt -> . top_stmt KEYWORD_until expr3
    (72) top_stmt -> . KEYWORD_until expr3 opt_do gen_stmts opt_terms KEYWORD_end
    (73) top_stmt -> . KEYWORD_begin gen_stmts opt_terms KEYWORD_end KEYWORD_until expr3
    (74) top_stmt -> . KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (75) top_stmt -> . KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end
    (198) none -> .
    (79) stmt -> . expr
    (80) stmt -> . expr1
    (81) stmt -> . puts_stmt
    (82) stmt -> . loop_stmt
    (83) stmt -> . exit_stmt
    (84) stmt -> . func_call_stmt
    (124) expr -> . MLHS EQUAL MRHS
    (151) expr1 -> . expr3
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr
    (89) loop_stmt -> . KEYWORD_break
    (90) loop_stmt -> . KEYWORD_next
    (91) loop_stmt -> . KEYWORD_redo
    (92) exit_stmt -> . KEYWORD_exit
    (85) func_call_stmt -> . fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (86) func_call_stmt -> . fname func_ret_arg
    (87) func_call_stmt -> . MLHS EQUAL fname OPEN_PAREN func_ret_arg CLOSE_PAREN
    (88) func_call_stmt -> . MLHS EQUAL fname func_ret_arg
    (125) MLHS -> . mlhs
    (126) MLHS -> . MLHS COMMA mlhs
    (152) expr3 -> . expr3 LOGICALOR expr4
    (153) expr3 -> . expr4
    (53) fname -> . VARIABLES
    (54) fname -> . CONSTANTS
    (129) mlhs -> . VARIABLES
    (130) mlhs -> . CONSTANTS
    (131) mlhs -> . array
    (154) expr4 -> . expr4 LOGICALAND expr5
    (155) expr4 -> . expr5
    (186) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (156) expr5 -> . expr6 DOUBLEEQUAL expr6
    (157) expr5 -> . expr6 NOTEQUAL expr6
    (158) expr5 -> . expr6
    (159) expr6 -> . expr7 LESSEQUAL expr7
    (160) expr6 -> . expr7 LESS expr7
    (161) expr6 -> . expr7 GREATER expr7
    (162) expr6 -> . expr7 GREATEREQUAL expr7
    (163) expr6 -> . expr7
    (164) expr6 -> . BOOLEAN_CONSTANTS
    (165) expr7 -> . expr7 BITXOR expr8
    (166) expr7 -> . expr7 PIPE expr8
    (167) expr7 -> . expr8
    (168) expr8 -> . expr8 BITAND expr9
    (169) expr8 -> . expr9
    (170) expr9 -> . expr9 SHIFTL expr10
    (171) expr9 -> . expr9 SHIFTR expr10
    (172) expr9 -> . expr10
    (173) expr10 -> . expr10 PLUS expr11
    (174) expr10 -> . expr10 MINUS expr11
    (175) expr10 -> . expr11
    (176) expr11 -> . expr11 MULTIPLY expr13
    (177) expr11 -> . expr11 DIV expr13
    (178) expr11 -> . expr11 MOD expr13
    (179) expr11 -> . expr13
    (180) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (181) expr13 -> . uexpr INT_CONSTANTS
    (182) expr13 -> . uexpr FLOAT_CONSTANTS
    (183) expr13 -> . CONSTANTS
    (184) expr13 -> . VARIABLES
    (185) expr13 -> . array
    (187) uexpr -> . none
    (188) uexpr -> . PLUS
    (189) uexpr -> . MINUS
    (190) uexpr -> . BITNOT
    (191) uexpr -> . BITCOMP

    KEYWORD_if      shift and go to state 27
    KEYWORD_while   shift and go to state 4
    KEYWORD_begin   shift and go to state 38
    KEYWORD_until   shift and go to state 25
    KEYWORD_for     shift and go to state 52
    DELIM           reduce using rule 198 (none -> .)
    newline         reduce using rule 198 (none -> .)
    KEYWORD_elsif   reduce using rule 198 (none -> .)
    KEYWORD_else    reduce using rule 198 (none -> .)
    KEYWORD_end     reduce using rule 198 (none -> .)
    INT_CONSTANTS   reduce using rule 198 (none -> .)
    FLOAT_CONSTANTS reduce using rule 198 (none -> .)
    KEYWORD_puts    shift and go to state 33
    KEYWORD_break   shift and go to state 48
    KEYWORD_next    shift and go to state 12
    KEYWORD_redo    shift and go to state 1
    KEYWORD_exit    shift and go to state 23
    VARIABLES       shift and go to state 98
    CONSTANTS       shift and go to state 101
    BOOLEAN_CONSTANTS shift and go to state 11
    OPEN_PAREN      shift and go to state 30
    PLUS            shift and go to state 6
    MINUS           shift and go to state 3
    BITNOT          shift and go to state 40
    BITCOMP         shift and go to state 29

    mlhs                           shift and go to state 2
    expr10                         shift and go to state 14
    expr11                         shift and go to state 15
    expr13                         shift and go to state 16
    array                          shift and go to state 26
    expr3                          shift and go to state 41
    expr1                          shift and go to state 42
    expr6                          shift and go to state 43
    expr7                          shift and go to state 7
    puts_stmt                      shift and go to state 18
    expr5                          shift and go to state 45
    func_call_stmt                 shift and go to state 32
    expr8                          shift and go to state 46
    expr9                          shift and go to state 47
    expr4                          shift and go to state 8
    fname                          shift and go to state 44
    exit_stmt                      shift and go to state 49
    MLHS                           shift and go to state 50
    loop_stmt                      shift and go to state 9
    stmt                           shift and go to state 20
    uexpr                          shift and go to state 10
    none                           shift and go to state 99
    gen_stmts                      shift and go to state 349
    expr                           shift and go to state 35
    top_stmt                       shift and go to state 102

state 332

    (104) opt_else_stmt -> KEYWORD_else gen_stmts . opt_terms
    (77) gen_stmts -> gen_stmts . terms top_stmt
    (192) opt_terms -> . none
    (193) opt_terms -> . terms
    (194) terms -> . term
    (195) terms -> . terms term
    (198) none -> .
    (196) term -> . DELIM
    (197) term -> . newline

    KEYWORD_end     reduce using rule 198 (none -> .)
    DELIM           shift and go to state 80
    newline         shift and go to state 79

    term                           shift and go to state 77
    terms                          shift and go to state 166
    none                           shift and go to state 81
    opt_terms                      shift and go to state 350

state 333

    (67) top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end .

    KEYWORD_while   reduce using rule 67 (top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end .)
    KEYWORD_until   reduce using rule 67 (top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end .)
    DELIM           reduce using rule 67 (top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end .)
    newline         reduce using rule 67 (top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end .)
    KEYWORD_end     reduce using rule 67 (top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end .)
    KEYWORD_elsif   reduce using rule 67 (top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end .)
    KEYWORD_else    reduce using rule 67 (top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end .)
    $end            reduce using rule 67 (top_stmt -> KEYWORD_if expr3 opt_then gen_stmts opt_terms elsif_tail opt_else_stmt KEYWORD_end .)


state 334

    (33) class_func -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN . class_method_stmts opt_terms KEYWORD_end
    (36) class_method_stmts -> . class_method_stmt
    (37) class_method_stmts -> . class_method_stmts terms class_method_stmt
    (38) class_method_stmts -> . none
    (39) class_method_stmt -> . class_method_mlhs EQUAL class_method_mrhs
    (40) class_method_stmt -> . KEYWORD_return class_method_ret_arg
    (41) class_method_stmt -> . puts_stmt
    (198) none -> .
    (42) class_method_mlhs -> . class_method_mlhs terms SIGIL_AT
    (43) class_method_mlhs -> . SIGIL_AT
    (44) class_method_mlhs -> . SIGIL_DOUBLE_AT
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr

    KEYWORD_return  shift and go to state 321
    DELIM           reduce using rule 198 (none -> .)
    newline         reduce using rule 198 (none -> .)
    KEYWORD_end     reduce using rule 198 (none -> .)
    SIGIL_AT        shift and go to state 319
    SIGIL_DOUBLE_AT shift and go to state 323
    KEYWORD_puts    shift and go to state 33

    class_method_stmt              shift and go to state 318
    none                           shift and go to state 325
    class_method_mlhs              shift and go to state 324
    puts_stmt                      shift and go to state 322
    class_method_stmts             shift and go to state 351

state 335

    (35) class_func -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts . opt_terms KEYWORD_end
    (37) class_method_stmts -> class_method_stmts . terms class_method_stmt
    (192) opt_terms -> . none
    (193) opt_terms -> . terms
    (194) terms -> . term
    (195) terms -> . terms term
    (198) none -> .
    (196) term -> . DELIM
    (197) term -> . newline

    KEYWORD_end     reduce using rule 198 (none -> .)
    DELIM           shift and go to state 80
    newline         shift and go to state 79

    none                           shift and go to state 81
    terms                          shift and go to state 336
    opt_terms                      shift and go to state 352
    term                           shift and go to state 77

state 336

    (37) class_method_stmts -> class_method_stmts terms . class_method_stmt
    (193) opt_terms -> terms .
    (195) terms -> terms . term
    (39) class_method_stmt -> . class_method_mlhs EQUAL class_method_mrhs
    (40) class_method_stmt -> . KEYWORD_return class_method_ret_arg
    (41) class_method_stmt -> . puts_stmt
    (196) term -> . DELIM
    (197) term -> . newline
    (42) class_method_mlhs -> . class_method_mlhs terms SIGIL_AT
    (43) class_method_mlhs -> . SIGIL_AT
    (44) class_method_mlhs -> . SIGIL_DOUBLE_AT
    (93) puts_stmt -> . KEYWORD_puts mrhs
    (94) puts_stmt -> . KEYWORD_puts expr

    KEYWORD_end     reduce using rule 193 (opt_terms -> terms .)
    KEYWORD_return  shift and go to state 321
    DELIM           shift and go to state 80
    newline         shift and go to state 79
    SIGIL_AT        shift and go to state 319
    SIGIL_DOUBLE_AT shift and go to state 323
    KEYWORD_puts    shift and go to state 33

    class_method_stmt              shift and go to state 353
    term                           shift and go to state 153
    puts_stmt                      shift and go to state 322
    class_method_mlhs              shift and go to state 324

state 337

    (34) class_func -> KEYWORD_def fname arguments class_method_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 354


state 338

    (51) class_method_arg_expr -> SIGIL_AT . EQUAL literal
    (29) literal -> SIGIL_AT .

    EQUAL           shift and go to state 355
    COMMA           reduce using rule 29 (literal -> SIGIL_AT .)
    DELIM           reduce using rule 29 (literal -> SIGIL_AT .)
    newline         reduce using rule 29 (literal -> SIGIL_AT .)
    KEYWORD_end     reduce using rule 29 (literal -> SIGIL_AT .)


state 339

    (52) class_method_arg_expr -> SIGIL_DOUBLE_AT . EQUAL literal
    (30) literal -> SIGIL_DOUBLE_AT .

    EQUAL           shift and go to state 356
    COMMA           reduce using rule 30 (literal -> SIGIL_DOUBLE_AT .)
    DELIM           reduce using rule 30 (literal -> SIGIL_DOUBLE_AT .)
    newline         reduce using rule 30 (literal -> SIGIL_DOUBLE_AT .)
    KEYWORD_end     reduce using rule 30 (literal -> SIGIL_DOUBLE_AT .)


state 340

    (48) class_method_ret_arg -> literal .

    COMMA           reduce using rule 48 (class_method_ret_arg -> literal .)
    DELIM           reduce using rule 48 (class_method_ret_arg -> literal .)
    newline         reduce using rule 48 (class_method_ret_arg -> literal .)
    KEYWORD_end     reduce using rule 48 (class_method_ret_arg -> literal .)


state 341

    (40) class_method_stmt -> KEYWORD_return class_method_ret_arg .
    (49) class_method_ret_arg -> class_method_ret_arg . COMMA class_method_arg_expr
    (50) class_method_ret_arg -> class_method_ret_arg . COMMA literal

    DELIM           reduce using rule 40 (class_method_stmt -> KEYWORD_return class_method_ret_arg .)
    newline         reduce using rule 40 (class_method_stmt -> KEYWORD_return class_method_ret_arg .)
    KEYWORD_end     reduce using rule 40 (class_method_stmt -> KEYWORD_return class_method_ret_arg .)
    COMMA           shift and go to state 357


state 342

    (47) class_method_ret_arg -> class_method_arg_expr .

    COMMA           reduce using rule 47 (class_method_ret_arg -> class_method_arg_expr .)
    DELIM           reduce using rule 47 (class_method_ret_arg -> class_method_arg_expr .)
    newline         reduce using rule 47 (class_method_ret_arg -> class_method_arg_expr .)
    KEYWORD_end     reduce using rule 47 (class_method_ret_arg -> class_method_arg_expr .)


state 343

    (42) class_method_mlhs -> class_method_mlhs terms . SIGIL_AT
    (195) terms -> terms . term
    (196) term -> . DELIM
    (197) term -> . newline

    SIGIL_AT        shift and go to state 358
    DELIM           shift and go to state 80
    newline         shift and go to state 79

    term                           shift and go to state 153

state 344

    (39) class_method_stmt -> class_method_mlhs EQUAL . class_method_mrhs
    (45) class_method_mrhs -> . literal
    (46) class_method_mrhs -> . VARIABLES
    (24) literal -> . INT_CONSTANTS
    (25) literal -> . FLOAT_CONSTANTS
    (26) literal -> . STRING_CONSTANTS
    (27) literal -> . BOOLEAN_CONSTANTS
    (28) literal -> . CHAR_CONSTANTS
    (29) literal -> . SIGIL_AT
    (30) literal -> . SIGIL_DOUBLE_AT

    VARIABLES       shift and go to state 360
    INT_CONSTANTS   shift and go to state 290
    FLOAT_CONSTANTS shift and go to state 291
    STRING_CONSTANTS shift and go to state 293
    BOOLEAN_CONSTANTS shift and go to state 289
    CHAR_CONSTANTS  shift and go to state 296
    SIGIL_AT        shift and go to state 288
    SIGIL_DOUBLE_AT shift and go to state 292

    class_method_mrhs              shift and go to state 359
    literal                        shift and go to state 361

state 345

    (74) top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts . opt_terms KEYWORD_end
    (77) gen_stmts -> gen_stmts . terms top_stmt
    (192) opt_terms -> . none
    (193) opt_terms -> . terms
    (194) terms -> . term
    (195) terms -> . terms term
    (198) none -> .
    (196) term -> . DELIM
    (197) term -> . newline

    KEYWORD_end     reduce using rule 198 (none -> .)
    DELIM           shift and go to state 80
    newline         shift and go to state 79

    none                           shift and go to state 81
    terms                          shift and go to state 166
    term                           shift and go to state 77
    opt_terms                      shift and go to state 362

state 346

    (117) for_range -> OPEN_PAREN INT_CONSTANTS DOUBLEDOT INT_CONSTANTS CLOSE_PAREN .

    KEYWORD_do      reduce using rule 117 (for_range -> OPEN_PAREN INT_CONSTANTS DOUBLEDOT INT_CONSTANTS CLOSE_PAREN .)
    newline         reduce using rule 117 (for_range -> OPEN_PAREN INT_CONSTANTS DOUBLEDOT INT_CONSTANTS CLOSE_PAREN .)


state 347

    (119) for_range -> OPEN_PAREN INT_CONSTANTS TRIPLEDOT INT_CONSTANTS CLOSE_PAREN .

    KEYWORD_do      reduce using rule 119 (for_range -> OPEN_PAREN INT_CONSTANTS TRIPLEDOT INT_CONSTANTS CLOSE_PAREN .)
    newline         reduce using rule 119 (for_range -> OPEN_PAREN INT_CONSTANTS TRIPLEDOT INT_CONSTANTS CLOSE_PAREN .)


state 348

    (75) top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .

    KEYWORD_while   reduce using rule 75 (top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_until   reduce using rule 75 (top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    DELIM           reduce using rule 75 (top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 75 (top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_end     reduce using rule 75 (top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_elsif   reduce using rule 75 (top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_else    reduce using rule 75 (top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    $end            reduce using rule 75 (top_stmt -> KEYWORD_for multi_var KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)


state 349

    (107) elsif_tail -> KEYWORD_elsif expr3 opt_then gen_stmts . opt_terms elsif_tail
    (77) gen_stmts -> gen_stmts . terms top_stmt
    (192) opt_terms -> . none
    (193) opt_terms -> . terms
    (194) terms -> . term
    (195) terms -> . terms term
    (198) none -> .
    (196) term -> . DELIM
    (197) term -> . newline

    KEYWORD_elsif   reduce using rule 198 (none -> .)
    KEYWORD_else    reduce using rule 198 (none -> .)
    KEYWORD_end     reduce using rule 198 (none -> .)
    DELIM           shift and go to state 80
    newline         shift and go to state 79

    none                           shift and go to state 81
    terms                          shift and go to state 166
    term                           shift and go to state 77
    opt_terms                      shift and go to state 363

state 350

    (104) opt_else_stmt -> KEYWORD_else gen_stmts opt_terms .

    KEYWORD_end     reduce using rule 104 (opt_else_stmt -> KEYWORD_else gen_stmts opt_terms .)


state 351

    (33) class_func -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts . opt_terms KEYWORD_end
    (37) class_method_stmts -> class_method_stmts . terms class_method_stmt
    (192) opt_terms -> . none
    (193) opt_terms -> . terms
    (194) terms -> . term
    (195) terms -> . terms term
    (198) none -> .
    (196) term -> . DELIM
    (197) term -> . newline

    KEYWORD_end     reduce using rule 198 (none -> .)
    DELIM           shift and go to state 80
    newline         shift and go to state 79

    none                           shift and go to state 81
    terms                          shift and go to state 336
    term                           shift and go to state 77
    opt_terms                      shift and go to state 364

state 352

    (35) class_func -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 365


state 353

    (37) class_method_stmts -> class_method_stmts terms class_method_stmt .

    DELIM           reduce using rule 37 (class_method_stmts -> class_method_stmts terms class_method_stmt .)
    newline         reduce using rule 37 (class_method_stmts -> class_method_stmts terms class_method_stmt .)
    KEYWORD_end     reduce using rule 37 (class_method_stmts -> class_method_stmts terms class_method_stmt .)


state 354

    (34) class_func -> KEYWORD_def fname arguments class_method_stmts opt_terms KEYWORD_end .

    DELIM           reduce using rule 34 (class_func -> KEYWORD_def fname arguments class_method_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 34 (class_func -> KEYWORD_def fname arguments class_method_stmts opt_terms KEYWORD_end .)
    KEYWORD_end     reduce using rule 34 (class_func -> KEYWORD_def fname arguments class_method_stmts opt_terms KEYWORD_end .)


state 355

    (51) class_method_arg_expr -> SIGIL_AT EQUAL . literal
    (24) literal -> . INT_CONSTANTS
    (25) literal -> . FLOAT_CONSTANTS
    (26) literal -> . STRING_CONSTANTS
    (27) literal -> . BOOLEAN_CONSTANTS
    (28) literal -> . CHAR_CONSTANTS
    (29) literal -> . SIGIL_AT
    (30) literal -> . SIGIL_DOUBLE_AT

    INT_CONSTANTS   shift and go to state 290
    FLOAT_CONSTANTS shift and go to state 291
    STRING_CONSTANTS shift and go to state 293
    BOOLEAN_CONSTANTS shift and go to state 289
    CHAR_CONSTANTS  shift and go to state 296
    SIGIL_AT        shift and go to state 288
    SIGIL_DOUBLE_AT shift and go to state 292

    literal                        shift and go to state 366

state 356

    (52) class_method_arg_expr -> SIGIL_DOUBLE_AT EQUAL . literal
    (24) literal -> . INT_CONSTANTS
    (25) literal -> . FLOAT_CONSTANTS
    (26) literal -> . STRING_CONSTANTS
    (27) literal -> . BOOLEAN_CONSTANTS
    (28) literal -> . CHAR_CONSTANTS
    (29) literal -> . SIGIL_AT
    (30) literal -> . SIGIL_DOUBLE_AT

    INT_CONSTANTS   shift and go to state 290
    FLOAT_CONSTANTS shift and go to state 291
    STRING_CONSTANTS shift and go to state 293
    BOOLEAN_CONSTANTS shift and go to state 289
    CHAR_CONSTANTS  shift and go to state 296
    SIGIL_AT        shift and go to state 288
    SIGIL_DOUBLE_AT shift and go to state 292

    literal                        shift and go to state 367

state 357

    (49) class_method_ret_arg -> class_method_ret_arg COMMA . class_method_arg_expr
    (50) class_method_ret_arg -> class_method_ret_arg COMMA . literal
    (51) class_method_arg_expr -> . SIGIL_AT EQUAL literal
    (52) class_method_arg_expr -> . SIGIL_DOUBLE_AT EQUAL literal
    (24) literal -> . INT_CONSTANTS
    (25) literal -> . FLOAT_CONSTANTS
    (26) literal -> . STRING_CONSTANTS
    (27) literal -> . BOOLEAN_CONSTANTS
    (28) literal -> . CHAR_CONSTANTS
    (29) literal -> . SIGIL_AT
    (30) literal -> . SIGIL_DOUBLE_AT

    SIGIL_AT        shift and go to state 338
    SIGIL_DOUBLE_AT shift and go to state 339
    INT_CONSTANTS   shift and go to state 290
    FLOAT_CONSTANTS shift and go to state 291
    STRING_CONSTANTS shift and go to state 293
    BOOLEAN_CONSTANTS shift and go to state 289
    CHAR_CONSTANTS  shift and go to state 296

    class_method_arg_expr          shift and go to state 369
    literal                        shift and go to state 368

state 358

    (42) class_method_mlhs -> class_method_mlhs terms SIGIL_AT .

    EQUAL           reduce using rule 42 (class_method_mlhs -> class_method_mlhs terms SIGIL_AT .)
    DELIM           reduce using rule 42 (class_method_mlhs -> class_method_mlhs terms SIGIL_AT .)
    newline         reduce using rule 42 (class_method_mlhs -> class_method_mlhs terms SIGIL_AT .)


state 359

    (39) class_method_stmt -> class_method_mlhs EQUAL class_method_mrhs .

    DELIM           reduce using rule 39 (class_method_stmt -> class_method_mlhs EQUAL class_method_mrhs .)
    newline         reduce using rule 39 (class_method_stmt -> class_method_mlhs EQUAL class_method_mrhs .)
    KEYWORD_end     reduce using rule 39 (class_method_stmt -> class_method_mlhs EQUAL class_method_mrhs .)


state 360

    (46) class_method_mrhs -> VARIABLES .

    DELIM           reduce using rule 46 (class_method_mrhs -> VARIABLES .)
    newline         reduce using rule 46 (class_method_mrhs -> VARIABLES .)
    KEYWORD_end     reduce using rule 46 (class_method_mrhs -> VARIABLES .)


state 361

    (45) class_method_mrhs -> literal .

    DELIM           reduce using rule 45 (class_method_mrhs -> literal .)
    newline         reduce using rule 45 (class_method_mrhs -> literal .)
    KEYWORD_end     reduce using rule 45 (class_method_mrhs -> literal .)


state 362

    (74) top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 370


state 363

    (107) elsif_tail -> KEYWORD_elsif expr3 opt_then gen_stmts opt_terms . elsif_tail
    (106) elsif_tail -> . none
    (107) elsif_tail -> . KEYWORD_elsif expr3 opt_then gen_stmts opt_terms elsif_tail
    (198) none -> .

    KEYWORD_elsif   shift and go to state 278
    KEYWORD_else    reduce using rule 198 (none -> .)
    KEYWORD_end     reduce using rule 198 (none -> .)

    none                           shift and go to state 277
    elsif_tail                     shift and go to state 371

state 364

    (33) class_func -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 372


state 365

    (35) class_func -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end .

    DELIM           reduce using rule 35 (class_func -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 35 (class_func -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end .)
    KEYWORD_end     reduce using rule 35 (class_func -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end .)


state 366

    (51) class_method_arg_expr -> SIGIL_AT EQUAL literal .

    COMMA           reduce using rule 51 (class_method_arg_expr -> SIGIL_AT EQUAL literal .)
    DELIM           reduce using rule 51 (class_method_arg_expr -> SIGIL_AT EQUAL literal .)
    newline         reduce using rule 51 (class_method_arg_expr -> SIGIL_AT EQUAL literal .)
    KEYWORD_end     reduce using rule 51 (class_method_arg_expr -> SIGIL_AT EQUAL literal .)


state 367

    (52) class_method_arg_expr -> SIGIL_DOUBLE_AT EQUAL literal .

    COMMA           reduce using rule 52 (class_method_arg_expr -> SIGIL_DOUBLE_AT EQUAL literal .)
    DELIM           reduce using rule 52 (class_method_arg_expr -> SIGIL_DOUBLE_AT EQUAL literal .)
    newline         reduce using rule 52 (class_method_arg_expr -> SIGIL_DOUBLE_AT EQUAL literal .)
    KEYWORD_end     reduce using rule 52 (class_method_arg_expr -> SIGIL_DOUBLE_AT EQUAL literal .)


state 368

    (50) class_method_ret_arg -> class_method_ret_arg COMMA literal .

    COMMA           reduce using rule 50 (class_method_ret_arg -> class_method_ret_arg COMMA literal .)
    DELIM           reduce using rule 50 (class_method_ret_arg -> class_method_ret_arg COMMA literal .)
    newline         reduce using rule 50 (class_method_ret_arg -> class_method_ret_arg COMMA literal .)
    KEYWORD_end     reduce using rule 50 (class_method_ret_arg -> class_method_ret_arg COMMA literal .)


state 369

    (49) class_method_ret_arg -> class_method_ret_arg COMMA class_method_arg_expr .

    COMMA           reduce using rule 49 (class_method_ret_arg -> class_method_ret_arg COMMA class_method_arg_expr .)
    DELIM           reduce using rule 49 (class_method_ret_arg -> class_method_ret_arg COMMA class_method_arg_expr .)
    newline         reduce using rule 49 (class_method_ret_arg -> class_method_ret_arg COMMA class_method_arg_expr .)
    KEYWORD_end     reduce using rule 49 (class_method_ret_arg -> class_method_ret_arg COMMA class_method_arg_expr .)


state 370

    (74) top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .

    KEYWORD_while   reduce using rule 74 (top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_until   reduce using rule 74 (top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    DELIM           reduce using rule 74 (top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 74 (top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_end     reduce using rule 74 (top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_elsif   reduce using rule 74 (top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    KEYWORD_else    reduce using rule 74 (top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)
    $end            reduce using rule 74 (top_stmt -> KEYWORD_for OPEN_PAREN multi_var CLOSE_PAREN KEYWORD_in for_range opt_do gen_stmts opt_terms KEYWORD_end .)


state 371

    (107) elsif_tail -> KEYWORD_elsif expr3 opt_then gen_stmts opt_terms elsif_tail .

    KEYWORD_else    reduce using rule 107 (elsif_tail -> KEYWORD_elsif expr3 opt_then gen_stmts opt_terms elsif_tail .)
    KEYWORD_end     reduce using rule 107 (elsif_tail -> KEYWORD_elsif expr3 opt_then gen_stmts opt_terms elsif_tail .)


state 372

    (33) class_func -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end .

    DELIM           reduce using rule 33 (class_func -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 33 (class_func -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end .)
    KEYWORD_end     reduce using rule 33 (class_func -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end .)

