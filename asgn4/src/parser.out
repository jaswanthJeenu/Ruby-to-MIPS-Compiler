Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    KEYWORD_redo
    KEYWORD_unless
    BLOCK_END
    KEYWORD___ENCODING__
    BITANDEQUAL
    KEYWORD_next
    SQUOTES
    KEYWORD_END
    KEYWORD_self
    KEYWORD_when
    MINUSEQUAL
    KEYWORD_nil
    OR
    DIVEQUAL
    KEYWORD_or
    IFF
    LOGICALANDEQUAL
    KEYWORD_retry
    DOUBLESTAR
    KEYWORD_undef
    COLON
    SIGIL_DOLLAR
    DOUBLE_COLON
    DOUBLESTAREQUAL
    KEYWORD_false
    KEYWORD_definedQ
    SHIFTLEQUAL
    AND
    NOT
    KEYWORD_not
    KEYWORD_yield
    KEYWORD_until
    KEYWORD_ensure
    TRIPLEDOT
    QUESTION_MARK
    MODEQUAL
    QUESTIONCOLON
    KEYWORD_true
    LOGICALOREQUAL
    KEYWORD___END__
    PLUSEQUAL
    KEYWORD_super
    KEYWORD_alias
    MULTIPLYEQUAL
    SHIFTREQUAL
    KEYWORD___LINE__
    KEYWORD_BEGIN
    BLOCK_BEGIN
    KEYWORD_begin
    DQUOTES
    TRIPLEEQUAL
    PIPEEQUAL
    KEYWORD_and
    KEYWORD___FILE__
    KEYWORD_rescue
    KEYWORD_module
    DOLLAR
    BACK_SLASH
    KEYWORD_case
    BITXOREQUAL

Grammar

Rule 0     S' -> program
Rule 1     program -> top_top_compstmt
Rule 2     top_top_compstmt -> statements opt_terms
Rule 3     statements -> statement
Rule 4     statements -> statements terms statement
Rule 5     statement -> top_stmt
Rule 6     statement -> func_defn
Rule 7     statement -> class_defn
Rule 8     statement -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
Rule 9     statement -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN
Rule 10    statement -> VARIABLES DOT VARIABLES arguments
Rule 11    statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
Rule 12    statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
Rule 13    statement -> CONSTANTS DOT KEYWORD_new arguments
Rule 14    class_defn -> KEYWORD_class CONSTANTS newline class_stmts opt_terms KEYWORD_end
Rule 15    class_stmts -> class_stmt
Rule 16    class_stmts -> class_stmts terms class_stmt
Rule 17    class_stmts -> none
Rule 18    class_stmt -> class_mlhs EQUAL class_mrhs
Rule 19    class_stmt -> class_func
Rule 20    class_mrhs -> literal
Rule 21    literal -> INT_CONSTANTS
Rule 22    literal -> FLOAT_CONSTANTS
Rule 23    literal -> STRING_CONSTANTS
Rule 24    literal -> BOOLEAN_CONSTANTS
Rule 25    literal -> CHAR_CONSTANTS
Rule 26    literal -> SIGIL_AT
Rule 27    literal -> SIGIL_DOUBLE_AT
Rule 28    class_mlhs -> class_mlhs terms SIGIL_DOUBLE_AT
Rule 29    class_mlhs -> SIGIL_DOUBLE_AT
Rule 30    class_func -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
Rule 31    class_func -> KEYWORD_def fname arguments class_method_stmts opt_terms KEYWORD_end
Rule 32    class_func -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
Rule 33    class_method_stmts -> class_method_stmt
Rule 34    class_method_stmts -> class_method_stmts terms class_method_stmt
Rule 35    class_method_stmts -> none
Rule 36    class_method_stmt -> class_method_mlhs EQUAL class_method_mrhs
Rule 37    class_method_stmt -> KEYWORD_return class_method_ret_arg
Rule 38    class_method_stmt -> puts_stmt
Rule 39    class_method_mlhs -> class_method_mlhs terms SIGIL_AT
Rule 40    class_method_mlhs -> SIGIL_AT
Rule 41    class_method_mlhs -> SIGIL_DOUBLE_AT
Rule 42    class_method_mrhs -> literal
Rule 43    class_method_mrhs -> VARIABLES
Rule 44    class_method_ret_arg -> class_method_arg_expr
Rule 45    class_method_ret_arg -> literal
Rule 46    class_method_ret_arg -> class_method_ret_arg COMMA class_method_arg_expr
Rule 47    class_method_ret_arg -> class_method_ret_arg COMMA literal
Rule 48    class_method_arg_expr -> SIGIL_AT EQUAL literal
Rule 49    class_method_arg_expr -> SIGIL_DOUBLE_AT EQUAL literal
Rule 50    func_defn -> KEYWORD_def fname OPEN_PAREN arguments M_13 CLOSE_PAREN func_stmts opt_terms KEYWORD_end M_14
Rule 51    func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN func_stmts opt_terms KEYWORD_end M_15
Rule 52    fname -> VARIABLES
Rule 53    fname -> CONSTANTS
Rule 54    arguments -> VARIABLES M_12 COMMA arguments
Rule 55    arguments -> CONSTANTS M_12 COMMA arguments
Rule 56    arguments -> VARIABLES M_12
Rule 57    arguments -> CONSTANTS M_12
Rule 58    M_12 -> <empty>
Rule 59    M_13 -> <empty>
Rule 60    M_14 -> <empty>
Rule 61    M_15 -> <empty>
Rule 62    func_call_stmt -> fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
Rule 63    func_call_stmt -> mlhs EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
Rule 64    M_17 -> <empty>
Rule 65    fname2 -> VARIABLES
Rule 66    fname2 -> CONSTANTS
Rule 67    call_arg -> primary M_16 COMMA call_arg
Rule 68    call_arg -> primary M_16
Rule 69    call_arg -> none
Rule 70    M_16 -> <empty>
Rule 71    loop_stmt -> KEYWORD_break
Rule 72    exit_stmt -> KEYWORD_exit
Rule 73    puts_stmt -> KEYWORD_puts mrhs
Rule 74    puts_stmt -> KEYWORD_puts expr
Rule 75    func_stmts -> func_stmt
Rule 76    func_stmts -> func_stmts terms func_stmt
Rule 77    func_stmts -> none
Rule 78    func_stmt -> top_stmt
Rule 79    func_stmt -> KEYWORD_return func_ret_arg
Rule 80    func_ret_arg -> primary
Rule 81    primary -> INT_CONSTANTS
Rule 82    primary -> BOOLEAN_CONSTANTS
Rule 83    primary -> CONSTANTS
Rule 84    primary -> VARIABLES
Rule 85    primary -> array
Rule 86    top_stmt -> stmt
Rule 87    top_stmt -> KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6
Rule 88    top_stmt -> M_7 KEYWORD_while expr3 opt_do M_8 gen_stmts opt_terms KEYWORD_end M_9
Rule 89    top_stmt -> KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts opt_terms KEYWORD_end M_11
Rule 90    M_1 -> <empty>
Rule 91    M_2 -> <empty>
Rule 92    M_6 -> <empty>
Rule 93    M_7 -> <empty>
Rule 94    M_8 -> <empty>
Rule 95    M_9 -> <empty>
Rule 96    M_10 -> <empty>
Rule 97    M_11 -> <empty>
Rule 98    gen_stmts -> top_stmt
Rule 99    gen_stmts -> gen_stmts terms top_stmt
Rule 100   gen_stmts -> none
Rule 101   stmt -> expr
Rule 102   stmt -> expr1
Rule 103   stmt -> puts_stmt
Rule 104   stmt -> loop_stmt
Rule 105   stmt -> exit_stmt
Rule 106   stmt -> func_call_stmt
Rule 107   opt_else_stmt -> KEYWORD_else gen_stmts opt_terms
Rule 108   opt_else_stmt -> none
Rule 109   elsif_tail -> none
Rule 110   elsif_tail -> KEYWORD_elsif expr3 opt_then M_3 gen_stmts opt_terms M_4 elsif_tail
Rule 111   M_3 -> <empty>
Rule 112   M_4 -> <empty>
Rule 113   opt_then -> KEYWORD_then
Rule 114   opt_then -> newline
Rule 115   opt_do -> KEYWORD_do
Rule 116   opt_do -> newline
Rule 117   for_range -> for_range_variables DOUBLEDOT for_range_variables
Rule 118   for_range_variables -> INT_CONSTANTS
Rule 119   for_range_variables -> VARIABLES
Rule 120   for_range_variables -> CONSTANTS
Rule 121   expr -> mlhs EQUAL mrhs
Rule 122   mlhs -> VARIABLES
Rule 123   mlhs -> CONSTANTS
Rule 124   mlhs -> array
Rule 125   mrhs -> expr1
Rule 126   mrhs -> str_expr
Rule 127   mrhs -> KEYWORD_gets
Rule 128   mrhs -> OPEN_BRACKET CLOSE_BRACKET
Rule 129   mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
Rule 130   mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN
Rule 131   mrhs -> VARIABLES DOT VARIABLES
Rule 132   mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
Rule 133   mrhs -> CONSTANTS DOT KEYWORD_new
Rule 134   mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
Rule 135   str_expr -> STRING_CONSTANTS
Rule 136   expr1 -> expr3
Rule 137   expr3 -> expr3 LOGICALOR expr4
Rule 138   expr3 -> expr4
Rule 139   expr4 -> expr4 LOGICALAND expr5
Rule 140   expr4 -> expr5
Rule 141   expr5 -> expr6 DOUBLEEQUAL expr6
Rule 142   expr5 -> expr6 NOTEQUAL expr6
Rule 143   expr5 -> expr6
Rule 144   expr6 -> expr7 LESSEQUAL expr7
Rule 145   expr6 -> expr7 LESS expr7
Rule 146   expr6 -> expr7 GREATER expr7
Rule 147   expr6 -> expr7 GREATEREQUAL expr7
Rule 148   expr6 -> expr7
Rule 149   expr6 -> BOOLEAN_CONSTANTS
Rule 150   expr7 -> expr7 BITXOR expr8
Rule 151   expr7 -> expr7 PIPE expr8
Rule 152   expr7 -> expr8
Rule 153   expr8 -> expr8 BITAND expr9
Rule 154   expr8 -> expr9
Rule 155   expr9 -> expr9 SHIFTL expr10
Rule 156   expr9 -> expr9 SHIFTR expr10
Rule 157   expr9 -> expr10
Rule 158   expr10 -> expr10 PLUS expr11
Rule 159   expr10 -> expr10 MINUS expr11
Rule 160   expr10 -> expr11
Rule 161   expr11 -> expr11 MULTIPLY expr13
Rule 162   expr11 -> expr11 DIV expr13
Rule 163   expr11 -> expr11 MOD expr13
Rule 164   expr11 -> expr13
Rule 165   expr13 -> OPEN_PAREN expr1 CLOSE_PAREN
Rule 166   expr13 -> uexpr INT_CONSTANTS
Rule 167   expr13 -> uexpr FLOAT_CONSTANTS
Rule 168   expr13 -> CONSTANTS
Rule 169   expr13 -> VARIABLES
Rule 170   expr13 -> array
Rule 171   array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
Rule 172   uexpr -> none
Rule 173   uexpr -> PLUS
Rule 174   uexpr -> MINUS
Rule 175   uexpr -> BITNOT
Rule 176   uexpr -> BITCOMP
Rule 177   opt_terms -> none
Rule 178   opt_terms -> terms
Rule 179   terms -> term
Rule 180   terms -> terms term
Rule 181   term -> DELIM
Rule 182   term -> newline
Rule 183   none -> <empty>

Terminals, with rules where they appear

AND                  : 
BACK_SLASH           : 
BITAND               : 153
BITANDEQUAL          : 
BITCOMP              : 176
BITNOT               : 175
BITXOR               : 150
BITXOREQUAL          : 
BLOCK_BEGIN          : 
BLOCK_END            : 
BOOLEAN_CONSTANTS    : 24 82 149
CHAR_CONSTANTS       : 25
CLOSE_BRACKET        : 128 171
CLOSE_PAREN          : 8 9 11 12 30 32 50 51 62 63 129 130 132 134 165
COLON                : 
COMMA                : 46 47 54 55 67
CONSTANTS            : 11 12 13 14 53 55 57 66 83 120 123 132 133 134 168
DELIM                : 181
DIV                  : 162
DIVEQUAL             : 
DOLLAR               : 
DOT                  : 8 9 10 11 12 13 129 130 131 132 133 134
DOUBLEDOT            : 117
DOUBLEEQUAL          : 141
DOUBLESTAR           : 
DOUBLESTAREQUAL      : 
DOUBLE_COLON         : 
DQUOTES              : 
EQUAL                : 18 36 48 49 63 121
FLOAT_CONSTANTS      : 22 167
GREATER              : 146
GREATEREQUAL         : 147
IFF                  : 
INT_CONSTANTS        : 21 81 118 166
KEYWORD_BEGIN        : 
KEYWORD_END          : 
KEYWORD___ENCODING__ : 
KEYWORD___END__      : 
KEYWORD___FILE__     : 
KEYWORD___LINE__     : 
KEYWORD_alias        : 
KEYWORD_and          : 
KEYWORD_begin        : 
KEYWORD_break        : 71
KEYWORD_case         : 
KEYWORD_class        : 14
KEYWORD_def          : 30 31 32 50 51
KEYWORD_definedQ     : 
KEYWORD_do           : 115
KEYWORD_else         : 107
KEYWORD_elsif        : 110
KEYWORD_end          : 14 30 31 32 50 51 87 88 89
KEYWORD_ensure       : 
KEYWORD_exit         : 72
KEYWORD_false        : 
KEYWORD_for          : 89
KEYWORD_gets         : 127
KEYWORD_if           : 87
KEYWORD_in           : 89
KEYWORD_module       : 
KEYWORD_new          : 11 12 13 132 133 134
KEYWORD_next         : 
KEYWORD_nil          : 
KEYWORD_not          : 
KEYWORD_or           : 
KEYWORD_puts         : 73 74
KEYWORD_redo         : 
KEYWORD_rescue       : 
KEYWORD_retry        : 
KEYWORD_return       : 37 79
KEYWORD_self         : 
KEYWORD_super        : 
KEYWORD_then         : 113
KEYWORD_true         : 
KEYWORD_undef        : 
KEYWORD_unless       : 
KEYWORD_until        : 
KEYWORD_when         : 
KEYWORD_while        : 88
KEYWORD_yield        : 
LESS                 : 145
LESSEQUAL            : 144
LOGICALAND           : 139
LOGICALANDEQUAL      : 
LOGICALOR            : 137
LOGICALOREQUAL       : 
MINUS                : 159 174
MINUSEQUAL           : 
MOD                  : 163
MODEQUAL             : 
MULTIPLY             : 161
MULTIPLYEQUAL        : 
NOT                  : 
NOTEQUAL             : 142
OPEN_BRACKET         : 128 171
OPEN_PAREN           : 8 9 11 12 30 32 50 51 62 63 129 130 132 134 165
OR                   : 
PIPE                 : 151
PIPEEQUAL            : 
PLUS                 : 158 173
PLUSEQUAL            : 
QUESTIONCOLON        : 
QUESTION_MARK        : 
SHIFTL               : 155
SHIFTLEQUAL          : 
SHIFTR               : 156
SHIFTREQUAL          : 
SIGIL_AT             : 26 39 40 48
SIGIL_DOLLAR         : 
SIGIL_DOUBLE_AT      : 27 28 29 41 49
SQUOTES              : 
STRING_CONSTANTS     : 23 135
TRIPLEDOT            : 
TRIPLEEQUAL          : 
VARIABLES            : 8 8 9 9 10 10 43 52 54 56 65 84 89 119 122 129 129 130 130 131 131 169 171
error                : 
newline              : 14 114 116 182

Nonterminals, with rules where they appear

M_1                  : 87
M_10                 : 89
M_11                 : 89
M_12                 : 54 55 56 57
M_13                 : 50
M_14                 : 50
M_15                 : 51
M_16                 : 67 68
M_17                 : 62 63
M_2                  : 87
M_3                  : 110
M_4                  : 110
M_6                  : 87
M_7                  : 88
M_8                  : 88
M_9                  : 88
arguments            : 8 10 11 13 30 31 50 54 55 129 132
array                : 85 124 170
call_arg             : 62 63 67
class_defn           : 7
class_func           : 19
class_method_arg_expr : 44 46
class_method_mlhs    : 36 39
class_method_mrhs    : 36
class_method_ret_arg : 37 46 47
class_method_stmt    : 33 34
class_method_stmts   : 30 31 32 34
class_mlhs           : 18 28
class_mrhs           : 18
class_stmt           : 15 16
class_stmts          : 14 16
elsif_tail           : 87 110
exit_stmt            : 105
expr                 : 74 101
expr1                : 102 125 165
expr10               : 155 156 157 158 159
expr11               : 158 159 160 161 162 163
expr13               : 161 162 163 164
expr3                : 87 88 110 136 137
expr4                : 137 138 139
expr5                : 139 140
expr6                : 141 141 142 142 143
expr7                : 144 144 145 145 146 146 147 147 148 150 151 171
expr8                : 150 151 152 153
expr9                : 153 154 155 156
fname                : 30 31 32 50 51
fname2               : 62 63
for_range            : 89
for_range_variables  : 117 117
func_call_stmt       : 106
func_defn            : 6
func_ret_arg         : 79
func_stmt            : 75 76
func_stmts           : 50 51 76
gen_stmts            : 87 88 89 99 107 110
literal              : 20 42 45 47 48 49
loop_stmt            : 104
mlhs                 : 63 121
mrhs                 : 73 121
none                 : 17 35 69 77 100 108 109 172 177
opt_do               : 88 89
opt_else_stmt        : 87
opt_terms            : 2 14 30 31 32 50 51 87 88 89 107 110
opt_then             : 87 110
primary              : 67 68 80
program              : 0
puts_stmt            : 38 103
statement            : 3 4
statements           : 2 4
stmt                 : 86
str_expr             : 126
term                 : 179 180
terms                : 4 16 28 34 39 76 99 178 180
top_stmt             : 5 78 98 99
top_top_compstmt     : 1
uexpr                : 166 167

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . top_top_compstmt
    (2) top_top_compstmt -> . statements opt_terms
    (3) statements -> . statement
    (4) statements -> . statements terms statement
    (5) statement -> . top_stmt
    (6) statement -> . func_defn
    (7) statement -> . class_defn
    (8) statement -> . VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (9) statement -> . VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (10) statement -> . VARIABLES DOT VARIABLES arguments
    (11) statement -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (12) statement -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (13) statement -> . CONSTANTS DOT KEYWORD_new arguments
    (86) top_stmt -> . stmt
    (87) top_stmt -> . KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6
    (88) top_stmt -> . M_7 KEYWORD_while expr3 opt_do M_8 gen_stmts opt_terms KEYWORD_end M_9
    (89) top_stmt -> . KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts opt_terms KEYWORD_end M_11
    (50) func_defn -> . KEYWORD_def fname OPEN_PAREN arguments M_13 CLOSE_PAREN func_stmts opt_terms KEYWORD_end M_14
    (51) func_defn -> . KEYWORD_def fname OPEN_PAREN CLOSE_PAREN func_stmts opt_terms KEYWORD_end M_15
    (14) class_defn -> . KEYWORD_class CONSTANTS newline class_stmts opt_terms KEYWORD_end
    (101) stmt -> . expr
    (102) stmt -> . expr1
    (103) stmt -> . puts_stmt
    (104) stmt -> . loop_stmt
    (105) stmt -> . exit_stmt
    (106) stmt -> . func_call_stmt
    (93) M_7 -> .
    (121) expr -> . mlhs EQUAL mrhs
    (136) expr1 -> . expr3
    (73) puts_stmt -> . KEYWORD_puts mrhs
    (74) puts_stmt -> . KEYWORD_puts expr
    (71) loop_stmt -> . KEYWORD_break
    (72) exit_stmt -> . KEYWORD_exit
    (62) func_call_stmt -> . fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (63) func_call_stmt -> . mlhs EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (122) mlhs -> . VARIABLES
    (123) mlhs -> . CONSTANTS
    (124) mlhs -> . array
    (137) expr3 -> . expr3 LOGICALOR expr4
    (138) expr3 -> . expr4
    (65) fname2 -> . VARIABLES
    (66) fname2 -> . CONSTANTS
    (171) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (139) expr4 -> . expr4 LOGICALAND expr5
    (140) expr4 -> . expr5
    (141) expr5 -> . expr6 DOUBLEEQUAL expr6
    (142) expr5 -> . expr6 NOTEQUAL expr6
    (143) expr5 -> . expr6
    (144) expr6 -> . expr7 LESSEQUAL expr7
    (145) expr6 -> . expr7 LESS expr7
    (146) expr6 -> . expr7 GREATER expr7
    (147) expr6 -> . expr7 GREATEREQUAL expr7
    (148) expr6 -> . expr7
    (149) expr6 -> . BOOLEAN_CONSTANTS
    (150) expr7 -> . expr7 BITXOR expr8
    (151) expr7 -> . expr7 PIPE expr8
    (152) expr7 -> . expr8
    (153) expr8 -> . expr8 BITAND expr9
    (154) expr8 -> . expr9
    (155) expr9 -> . expr9 SHIFTL expr10
    (156) expr9 -> . expr9 SHIFTR expr10
    (157) expr9 -> . expr10
    (158) expr10 -> . expr10 PLUS expr11
    (159) expr10 -> . expr10 MINUS expr11
    (160) expr10 -> . expr11
    (161) expr11 -> . expr11 MULTIPLY expr13
    (162) expr11 -> . expr11 DIV expr13
    (163) expr11 -> . expr11 MOD expr13
    (164) expr11 -> . expr13
    (165) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (166) expr13 -> . uexpr INT_CONSTANTS
    (167) expr13 -> . uexpr FLOAT_CONSTANTS
    (168) expr13 -> . CONSTANTS
    (169) expr13 -> . VARIABLES
    (170) expr13 -> . array
    (172) uexpr -> . none
    (173) uexpr -> . PLUS
    (174) uexpr -> . MINUS
    (175) uexpr -> . BITNOT
    (176) uexpr -> . BITCOMP
    (183) none -> .

    VARIABLES       shift and go to state 21
    CONSTANTS       shift and go to state 45
    KEYWORD_if      shift and go to state 20
    KEYWORD_for     shift and go to state 43
    KEYWORD_def     shift and go to state 16
    KEYWORD_class   shift and go to state 31
    KEYWORD_while   reduce using rule 93 (M_7 -> .)
    KEYWORD_puts    shift and go to state 26
    KEYWORD_break   shift and go to state 40
    KEYWORD_exit    shift and go to state 17
    BOOLEAN_CONSTANTS shift and go to state 8
    OPEN_PAREN      shift and go to state 23
    PLUS            shift and go to state 4
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 32
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 183 (none -> .)
    FLOAT_CONSTANTS reduce using rule 183 (none -> .)

    statements                     shift and go to state 18
    mlhs                           shift and go to state 1
    func_defn                      shift and go to state 30
    puts_stmt                      shift and go to state 13
    expr11                         shift and go to state 11
    expr13                         shift and go to state 12
    array                          shift and go to state 19
    expr3                          shift and go to state 33
    program                        shift and go to state 3
    expr6                          shift and go to state 35
    statement                      shift and go to state 24
    expr5                          shift and go to state 37
    func_call_stmt                 shift and go to state 25
    expr7                          shift and go to state 5
    expr8                          shift and go to state 38
    fname2                         shift and go to state 44
    expr4                          shift and go to state 36
    exit_stmt                      shift and go to state 41
    expr9                          shift and go to state 39
    stmt                           shift and go to state 14
    loop_stmt                      shift and go to state 6
    M_7                            shift and go to state 15
    uexpr                          shift and go to state 7
    none                           shift and go to state 27
    expr                           shift and go to state 28
    top_top_compstmt               shift and go to state 42
    class_defn                     shift and go to state 29
    expr10                         shift and go to state 10
    expr1                          shift and go to state 34
    top_stmt                       shift and go to state 9

state 1

    (121) expr -> mlhs . EQUAL mrhs
    (63) func_call_stmt -> mlhs . EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17

    EQUAL           shift and go to state 46


state 2

    (174) uexpr -> MINUS .

    INT_CONSTANTS   reduce using rule 174 (uexpr -> MINUS .)
    FLOAT_CONSTANTS reduce using rule 174 (uexpr -> MINUS .)


state 3

    (0) S' -> program .



state 4

    (173) uexpr -> PLUS .

    INT_CONSTANTS   reduce using rule 173 (uexpr -> PLUS .)
    FLOAT_CONSTANTS reduce using rule 173 (uexpr -> PLUS .)


state 5

    (144) expr6 -> expr7 . LESSEQUAL expr7
    (145) expr6 -> expr7 . LESS expr7
    (146) expr6 -> expr7 . GREATER expr7
    (147) expr6 -> expr7 . GREATEREQUAL expr7
    (148) expr6 -> expr7 .
    (150) expr7 -> expr7 . BITXOR expr8
    (151) expr7 -> expr7 . PIPE expr8

    LESSEQUAL       shift and go to state 52
    LESS            shift and go to state 49
    GREATER         shift and go to state 48
    GREATEREQUAL    shift and go to state 47
    DOUBLEEQUAL     reduce using rule 148 (expr6 -> expr7 .)
    NOTEQUAL        reduce using rule 148 (expr6 -> expr7 .)
    LOGICALAND      reduce using rule 148 (expr6 -> expr7 .)
    LOGICALOR       reduce using rule 148 (expr6 -> expr7 .)
    DELIM           reduce using rule 148 (expr6 -> expr7 .)
    newline         reduce using rule 148 (expr6 -> expr7 .)
    $end            reduce using rule 148 (expr6 -> expr7 .)
    KEYWORD_end     reduce using rule 148 (expr6 -> expr7 .)
    KEYWORD_elsif   reduce using rule 148 (expr6 -> expr7 .)
    KEYWORD_else    reduce using rule 148 (expr6 -> expr7 .)
    KEYWORD_do      reduce using rule 148 (expr6 -> expr7 .)
    KEYWORD_then    reduce using rule 148 (expr6 -> expr7 .)
    CLOSE_PAREN     reduce using rule 148 (expr6 -> expr7 .)
    BITXOR          shift and go to state 51
    PIPE            shift and go to state 50


state 6

    (104) stmt -> loop_stmt .

    DELIM           reduce using rule 104 (stmt -> loop_stmt .)
    newline         reduce using rule 104 (stmt -> loop_stmt .)
    KEYWORD_elsif   reduce using rule 104 (stmt -> loop_stmt .)
    KEYWORD_else    reduce using rule 104 (stmt -> loop_stmt .)
    KEYWORD_end     reduce using rule 104 (stmt -> loop_stmt .)
    $end            reduce using rule 104 (stmt -> loop_stmt .)


state 7

    (166) expr13 -> uexpr . INT_CONSTANTS
    (167) expr13 -> uexpr . FLOAT_CONSTANTS

    INT_CONSTANTS   shift and go to state 53
    FLOAT_CONSTANTS shift and go to state 54


state 8

    (149) expr6 -> BOOLEAN_CONSTANTS .

    DOUBLEEQUAL     reduce using rule 149 (expr6 -> BOOLEAN_CONSTANTS .)
    NOTEQUAL        reduce using rule 149 (expr6 -> BOOLEAN_CONSTANTS .)
    LOGICALAND      reduce using rule 149 (expr6 -> BOOLEAN_CONSTANTS .)
    LOGICALOR       reduce using rule 149 (expr6 -> BOOLEAN_CONSTANTS .)
    DELIM           reduce using rule 149 (expr6 -> BOOLEAN_CONSTANTS .)
    newline         reduce using rule 149 (expr6 -> BOOLEAN_CONSTANTS .)
    $end            reduce using rule 149 (expr6 -> BOOLEAN_CONSTANTS .)
    KEYWORD_end     reduce using rule 149 (expr6 -> BOOLEAN_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 149 (expr6 -> BOOLEAN_CONSTANTS .)
    KEYWORD_else    reduce using rule 149 (expr6 -> BOOLEAN_CONSTANTS .)
    KEYWORD_do      reduce using rule 149 (expr6 -> BOOLEAN_CONSTANTS .)
    KEYWORD_then    reduce using rule 149 (expr6 -> BOOLEAN_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 149 (expr6 -> BOOLEAN_CONSTANTS .)


state 9

    (5) statement -> top_stmt .

    DELIM           reduce using rule 5 (statement -> top_stmt .)
    newline         reduce using rule 5 (statement -> top_stmt .)
    $end            reduce using rule 5 (statement -> top_stmt .)


state 10

    (157) expr9 -> expr10 .
    (158) expr10 -> expr10 . PLUS expr11
    (159) expr10 -> expr10 . MINUS expr11

    SHIFTL          reduce using rule 157 (expr9 -> expr10 .)
    SHIFTR          reduce using rule 157 (expr9 -> expr10 .)
    BITAND          reduce using rule 157 (expr9 -> expr10 .)
    LESSEQUAL       reduce using rule 157 (expr9 -> expr10 .)
    LESS            reduce using rule 157 (expr9 -> expr10 .)
    GREATER         reduce using rule 157 (expr9 -> expr10 .)
    GREATEREQUAL    reduce using rule 157 (expr9 -> expr10 .)
    BITXOR          reduce using rule 157 (expr9 -> expr10 .)
    PIPE            reduce using rule 157 (expr9 -> expr10 .)
    DOUBLEEQUAL     reduce using rule 157 (expr9 -> expr10 .)
    NOTEQUAL        reduce using rule 157 (expr9 -> expr10 .)
    LOGICALAND      reduce using rule 157 (expr9 -> expr10 .)
    LOGICALOR       reduce using rule 157 (expr9 -> expr10 .)
    DELIM           reduce using rule 157 (expr9 -> expr10 .)
    newline         reduce using rule 157 (expr9 -> expr10 .)
    $end            reduce using rule 157 (expr9 -> expr10 .)
    KEYWORD_then    reduce using rule 157 (expr9 -> expr10 .)
    CLOSE_PAREN     reduce using rule 157 (expr9 -> expr10 .)
    KEYWORD_end     reduce using rule 157 (expr9 -> expr10 .)
    KEYWORD_elsif   reduce using rule 157 (expr9 -> expr10 .)
    KEYWORD_else    reduce using rule 157 (expr9 -> expr10 .)
    KEYWORD_do      reduce using rule 157 (expr9 -> expr10 .)
    CLOSE_BRACKET   reduce using rule 157 (expr9 -> expr10 .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56


state 11

    (160) expr10 -> expr11 .
    (161) expr11 -> expr11 . MULTIPLY expr13
    (162) expr11 -> expr11 . DIV expr13
    (163) expr11 -> expr11 . MOD expr13

    PLUS            reduce using rule 160 (expr10 -> expr11 .)
    MINUS           reduce using rule 160 (expr10 -> expr11 .)
    SHIFTL          reduce using rule 160 (expr10 -> expr11 .)
    SHIFTR          reduce using rule 160 (expr10 -> expr11 .)
    BITAND          reduce using rule 160 (expr10 -> expr11 .)
    LESSEQUAL       reduce using rule 160 (expr10 -> expr11 .)
    LESS            reduce using rule 160 (expr10 -> expr11 .)
    GREATER         reduce using rule 160 (expr10 -> expr11 .)
    GREATEREQUAL    reduce using rule 160 (expr10 -> expr11 .)
    BITXOR          reduce using rule 160 (expr10 -> expr11 .)
    PIPE            reduce using rule 160 (expr10 -> expr11 .)
    DOUBLEEQUAL     reduce using rule 160 (expr10 -> expr11 .)
    NOTEQUAL        reduce using rule 160 (expr10 -> expr11 .)
    LOGICALAND      reduce using rule 160 (expr10 -> expr11 .)
    LOGICALOR       reduce using rule 160 (expr10 -> expr11 .)
    DELIM           reduce using rule 160 (expr10 -> expr11 .)
    newline         reduce using rule 160 (expr10 -> expr11 .)
    KEYWORD_end     reduce using rule 160 (expr10 -> expr11 .)
    $end            reduce using rule 160 (expr10 -> expr11 .)
    KEYWORD_then    reduce using rule 160 (expr10 -> expr11 .)
    CLOSE_PAREN     reduce using rule 160 (expr10 -> expr11 .)
    KEYWORD_elsif   reduce using rule 160 (expr10 -> expr11 .)
    KEYWORD_else    reduce using rule 160 (expr10 -> expr11 .)
    KEYWORD_do      reduce using rule 160 (expr10 -> expr11 .)
    CLOSE_BRACKET   reduce using rule 160 (expr10 -> expr11 .)
    MULTIPLY        shift and go to state 57
    DIV             shift and go to state 58
    MOD             shift and go to state 59


state 12

    (164) expr11 -> expr13 .

    MULTIPLY        reduce using rule 164 (expr11 -> expr13 .)
    DIV             reduce using rule 164 (expr11 -> expr13 .)
    MOD             reduce using rule 164 (expr11 -> expr13 .)
    PLUS            reduce using rule 164 (expr11 -> expr13 .)
    MINUS           reduce using rule 164 (expr11 -> expr13 .)
    SHIFTL          reduce using rule 164 (expr11 -> expr13 .)
    SHIFTR          reduce using rule 164 (expr11 -> expr13 .)
    BITAND          reduce using rule 164 (expr11 -> expr13 .)
    CLOSE_BRACKET   reduce using rule 164 (expr11 -> expr13 .)
    BITXOR          reduce using rule 164 (expr11 -> expr13 .)
    PIPE            reduce using rule 164 (expr11 -> expr13 .)
    LESSEQUAL       reduce using rule 164 (expr11 -> expr13 .)
    LESS            reduce using rule 164 (expr11 -> expr13 .)
    GREATER         reduce using rule 164 (expr11 -> expr13 .)
    GREATEREQUAL    reduce using rule 164 (expr11 -> expr13 .)
    DOUBLEEQUAL     reduce using rule 164 (expr11 -> expr13 .)
    NOTEQUAL        reduce using rule 164 (expr11 -> expr13 .)
    LOGICALAND      reduce using rule 164 (expr11 -> expr13 .)
    LOGICALOR       reduce using rule 164 (expr11 -> expr13 .)
    DELIM           reduce using rule 164 (expr11 -> expr13 .)
    newline         reduce using rule 164 (expr11 -> expr13 .)
    $end            reduce using rule 164 (expr11 -> expr13 .)
    KEYWORD_then    reduce using rule 164 (expr11 -> expr13 .)
    CLOSE_PAREN     reduce using rule 164 (expr11 -> expr13 .)
    KEYWORD_end     reduce using rule 164 (expr11 -> expr13 .)
    KEYWORD_elsif   reduce using rule 164 (expr11 -> expr13 .)
    KEYWORD_else    reduce using rule 164 (expr11 -> expr13 .)
    KEYWORD_do      reduce using rule 164 (expr11 -> expr13 .)


state 13

    (103) stmt -> puts_stmt .

    DELIM           reduce using rule 103 (stmt -> puts_stmt .)
    newline         reduce using rule 103 (stmt -> puts_stmt .)
    KEYWORD_elsif   reduce using rule 103 (stmt -> puts_stmt .)
    KEYWORD_else    reduce using rule 103 (stmt -> puts_stmt .)
    KEYWORD_end     reduce using rule 103 (stmt -> puts_stmt .)
    $end            reduce using rule 103 (stmt -> puts_stmt .)


state 14

    (86) top_stmt -> stmt .

    DELIM           reduce using rule 86 (top_stmt -> stmt .)
    newline         reduce using rule 86 (top_stmt -> stmt .)
    KEYWORD_end     reduce using rule 86 (top_stmt -> stmt .)
    $end            reduce using rule 86 (top_stmt -> stmt .)
    KEYWORD_elsif   reduce using rule 86 (top_stmt -> stmt .)
    KEYWORD_else    reduce using rule 86 (top_stmt -> stmt .)


state 15

    (88) top_stmt -> M_7 . KEYWORD_while expr3 opt_do M_8 gen_stmts opt_terms KEYWORD_end M_9

    KEYWORD_while   shift and go to state 60


state 16

    (50) func_defn -> KEYWORD_def . fname OPEN_PAREN arguments M_13 CLOSE_PAREN func_stmts opt_terms KEYWORD_end M_14
    (51) func_defn -> KEYWORD_def . fname OPEN_PAREN CLOSE_PAREN func_stmts opt_terms KEYWORD_end M_15
    (52) fname -> . VARIABLES
    (53) fname -> . CONSTANTS

    VARIABLES       shift and go to state 62
    CONSTANTS       shift and go to state 61

    fname                          shift and go to state 63

state 17

    (72) exit_stmt -> KEYWORD_exit .

    DELIM           reduce using rule 72 (exit_stmt -> KEYWORD_exit .)
    newline         reduce using rule 72 (exit_stmt -> KEYWORD_exit .)
    KEYWORD_elsif   reduce using rule 72 (exit_stmt -> KEYWORD_exit .)
    KEYWORD_else    reduce using rule 72 (exit_stmt -> KEYWORD_exit .)
    KEYWORD_end     reduce using rule 72 (exit_stmt -> KEYWORD_exit .)
    $end            reduce using rule 72 (exit_stmt -> KEYWORD_exit .)


state 18

    (2) top_top_compstmt -> statements . opt_terms
    (4) statements -> statements . terms statement
    (177) opt_terms -> . none
    (178) opt_terms -> . terms
    (179) terms -> . term
    (180) terms -> . terms term
    (183) none -> .
    (181) term -> . DELIM
    (182) term -> . newline

    $end            reduce using rule 183 (none -> .)
    DELIM           shift and go to state 67
    newline         shift and go to state 66

    term                           shift and go to state 64
    terms                          shift and go to state 65
    none                           shift and go to state 68
    opt_terms                      shift and go to state 69

state 19

    (124) mlhs -> array .
    (170) expr13 -> array .

    EQUAL           reduce using rule 124 (mlhs -> array .)
    MULTIPLY        reduce using rule 170 (expr13 -> array .)
    DIV             reduce using rule 170 (expr13 -> array .)
    MOD             reduce using rule 170 (expr13 -> array .)
    PLUS            reduce using rule 170 (expr13 -> array .)
    MINUS           reduce using rule 170 (expr13 -> array .)
    SHIFTL          reduce using rule 170 (expr13 -> array .)
    SHIFTR          reduce using rule 170 (expr13 -> array .)
    BITAND          reduce using rule 170 (expr13 -> array .)
    LESSEQUAL       reduce using rule 170 (expr13 -> array .)
    LESS            reduce using rule 170 (expr13 -> array .)
    GREATER         reduce using rule 170 (expr13 -> array .)
    GREATEREQUAL    reduce using rule 170 (expr13 -> array .)
    BITXOR          reduce using rule 170 (expr13 -> array .)
    PIPE            reduce using rule 170 (expr13 -> array .)
    DOUBLEEQUAL     reduce using rule 170 (expr13 -> array .)
    NOTEQUAL        reduce using rule 170 (expr13 -> array .)
    LOGICALAND      reduce using rule 170 (expr13 -> array .)
    LOGICALOR       reduce using rule 170 (expr13 -> array .)
    DELIM           reduce using rule 170 (expr13 -> array .)
    newline         reduce using rule 170 (expr13 -> array .)
    KEYWORD_end     reduce using rule 170 (expr13 -> array .)
    $end            reduce using rule 170 (expr13 -> array .)
    KEYWORD_elsif   reduce using rule 170 (expr13 -> array .)
    KEYWORD_else    reduce using rule 170 (expr13 -> array .)


state 20

    (87) top_stmt -> KEYWORD_if . expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6
    (137) expr3 -> . expr3 LOGICALOR expr4
    (138) expr3 -> . expr4
    (139) expr4 -> . expr4 LOGICALAND expr5
    (140) expr4 -> . expr5
    (141) expr5 -> . expr6 DOUBLEEQUAL expr6
    (142) expr5 -> . expr6 NOTEQUAL expr6
    (143) expr5 -> . expr6
    (144) expr6 -> . expr7 LESSEQUAL expr7
    (145) expr6 -> . expr7 LESS expr7
    (146) expr6 -> . expr7 GREATER expr7
    (147) expr6 -> . expr7 GREATEREQUAL expr7
    (148) expr6 -> . expr7
    (149) expr6 -> . BOOLEAN_CONSTANTS
    (150) expr7 -> . expr7 BITXOR expr8
    (151) expr7 -> . expr7 PIPE expr8
    (152) expr7 -> . expr8
    (153) expr8 -> . expr8 BITAND expr9
    (154) expr8 -> . expr9
    (155) expr9 -> . expr9 SHIFTL expr10
    (156) expr9 -> . expr9 SHIFTR expr10
    (157) expr9 -> . expr10
    (158) expr10 -> . expr10 PLUS expr11
    (159) expr10 -> . expr10 MINUS expr11
    (160) expr10 -> . expr11
    (161) expr11 -> . expr11 MULTIPLY expr13
    (162) expr11 -> . expr11 DIV expr13
    (163) expr11 -> . expr11 MOD expr13
    (164) expr11 -> . expr13
    (165) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (166) expr13 -> . uexpr INT_CONSTANTS
    (167) expr13 -> . uexpr FLOAT_CONSTANTS
    (168) expr13 -> . CONSTANTS
    (169) expr13 -> . VARIABLES
    (170) expr13 -> . array
    (172) uexpr -> . none
    (173) uexpr -> . PLUS
    (174) uexpr -> . MINUS
    (175) uexpr -> . BITNOT
    (176) uexpr -> . BITCOMP
    (171) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (183) none -> .

    BOOLEAN_CONSTANTS shift and go to state 8
    OPEN_PAREN      shift and go to state 23
    CONSTANTS       shift and go to state 73
    VARIABLES       shift and go to state 70
    PLUS            shift and go to state 4
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 32
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 183 (none -> .)
    FLOAT_CONSTANTS reduce using rule 183 (none -> .)

    expr10                         shift and go to state 10
    expr11                         shift and go to state 11
    expr13                         shift and go to state 12
    array                          shift and go to state 72
    expr3                          shift and go to state 71
    expr6                          shift and go to state 35
    expr7                          shift and go to state 5
    expr4                          shift and go to state 36
    expr5                          shift and go to state 37
    expr8                          shift and go to state 38
    expr9                          shift and go to state 39
    uexpr                          shift and go to state 7
    none                           shift and go to state 27

state 21

    (8) statement -> VARIABLES . DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (9) statement -> VARIABLES . DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (10) statement -> VARIABLES . DOT VARIABLES arguments
    (122) mlhs -> VARIABLES .
    (65) fname2 -> VARIABLES .
    (171) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET
    (169) expr13 -> VARIABLES .

    DOT             shift and go to state 75
    EQUAL           reduce using rule 122 (mlhs -> VARIABLES .)
    OPEN_PAREN      reduce using rule 65 (fname2 -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 74
    MULTIPLY        reduce using rule 169 (expr13 -> VARIABLES .)
    DIV             reduce using rule 169 (expr13 -> VARIABLES .)
    MOD             reduce using rule 169 (expr13 -> VARIABLES .)
    PLUS            reduce using rule 169 (expr13 -> VARIABLES .)
    MINUS           reduce using rule 169 (expr13 -> VARIABLES .)
    SHIFTL          reduce using rule 169 (expr13 -> VARIABLES .)
    SHIFTR          reduce using rule 169 (expr13 -> VARIABLES .)
    BITAND          reduce using rule 169 (expr13 -> VARIABLES .)
    LESSEQUAL       reduce using rule 169 (expr13 -> VARIABLES .)
    LESS            reduce using rule 169 (expr13 -> VARIABLES .)
    GREATER         reduce using rule 169 (expr13 -> VARIABLES .)
    GREATEREQUAL    reduce using rule 169 (expr13 -> VARIABLES .)
    BITXOR          reduce using rule 169 (expr13 -> VARIABLES .)
    PIPE            reduce using rule 169 (expr13 -> VARIABLES .)
    DOUBLEEQUAL     reduce using rule 169 (expr13 -> VARIABLES .)
    NOTEQUAL        reduce using rule 169 (expr13 -> VARIABLES .)
    LOGICALAND      reduce using rule 169 (expr13 -> VARIABLES .)
    LOGICALOR       reduce using rule 169 (expr13 -> VARIABLES .)
    DELIM           reduce using rule 169 (expr13 -> VARIABLES .)
    newline         reduce using rule 169 (expr13 -> VARIABLES .)
    $end            reduce using rule 169 (expr13 -> VARIABLES .)


state 22

    (176) uexpr -> BITCOMP .

    INT_CONSTANTS   reduce using rule 176 (uexpr -> BITCOMP .)
    FLOAT_CONSTANTS reduce using rule 176 (uexpr -> BITCOMP .)


state 23

    (165) expr13 -> OPEN_PAREN . expr1 CLOSE_PAREN
    (136) expr1 -> . expr3
    (137) expr3 -> . expr3 LOGICALOR expr4
    (138) expr3 -> . expr4
    (139) expr4 -> . expr4 LOGICALAND expr5
    (140) expr4 -> . expr5
    (141) expr5 -> . expr6 DOUBLEEQUAL expr6
    (142) expr5 -> . expr6 NOTEQUAL expr6
    (143) expr5 -> . expr6
    (144) expr6 -> . expr7 LESSEQUAL expr7
    (145) expr6 -> . expr7 LESS expr7
    (146) expr6 -> . expr7 GREATER expr7
    (147) expr6 -> . expr7 GREATEREQUAL expr7
    (148) expr6 -> . expr7
    (149) expr6 -> . BOOLEAN_CONSTANTS
    (150) expr7 -> . expr7 BITXOR expr8
    (151) expr7 -> . expr7 PIPE expr8
    (152) expr7 -> . expr8
    (153) expr8 -> . expr8 BITAND expr9
    (154) expr8 -> . expr9
    (155) expr9 -> . expr9 SHIFTL expr10
    (156) expr9 -> . expr9 SHIFTR expr10
    (157) expr9 -> . expr10
    (158) expr10 -> . expr10 PLUS expr11
    (159) expr10 -> . expr10 MINUS expr11
    (160) expr10 -> . expr11
    (161) expr11 -> . expr11 MULTIPLY expr13
    (162) expr11 -> . expr11 DIV expr13
    (163) expr11 -> . expr11 MOD expr13
    (164) expr11 -> . expr13
    (165) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (166) expr13 -> . uexpr INT_CONSTANTS
    (167) expr13 -> . uexpr FLOAT_CONSTANTS
    (168) expr13 -> . CONSTANTS
    (169) expr13 -> . VARIABLES
    (170) expr13 -> . array
    (172) uexpr -> . none
    (173) uexpr -> . PLUS
    (174) uexpr -> . MINUS
    (175) uexpr -> . BITNOT
    (176) uexpr -> . BITCOMP
    (171) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (183) none -> .

    BOOLEAN_CONSTANTS shift and go to state 8
    OPEN_PAREN      shift and go to state 23
    CONSTANTS       shift and go to state 73
    VARIABLES       shift and go to state 70
    PLUS            shift and go to state 4
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 32
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 183 (none -> .)
    FLOAT_CONSTANTS reduce using rule 183 (none -> .)

    uexpr                          shift and go to state 7
    none                           shift and go to state 27
    expr13                         shift and go to state 12
    expr3                          shift and go to state 33
    expr1                          shift and go to state 76
    expr6                          shift and go to state 35
    expr7                          shift and go to state 5
    expr4                          shift and go to state 36
    expr5                          shift and go to state 37
    expr10                         shift and go to state 10
    expr8                          shift and go to state 38
    expr9                          shift and go to state 39
    array                          shift and go to state 72
    expr11                         shift and go to state 11

state 24

    (3) statements -> statement .

    DELIM           reduce using rule 3 (statements -> statement .)
    newline         reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)


state 25

    (106) stmt -> func_call_stmt .

    DELIM           reduce using rule 106 (stmt -> func_call_stmt .)
    newline         reduce using rule 106 (stmt -> func_call_stmt .)
    KEYWORD_elsif   reduce using rule 106 (stmt -> func_call_stmt .)
    KEYWORD_else    reduce using rule 106 (stmt -> func_call_stmt .)
    KEYWORD_end     reduce using rule 106 (stmt -> func_call_stmt .)
    $end            reduce using rule 106 (stmt -> func_call_stmt .)


state 26

    (73) puts_stmt -> KEYWORD_puts . mrhs
    (74) puts_stmt -> KEYWORD_puts . expr
    (125) mrhs -> . expr1
    (126) mrhs -> . str_expr
    (127) mrhs -> . KEYWORD_gets
    (128) mrhs -> . OPEN_BRACKET CLOSE_BRACKET
    (129) mrhs -> . VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (130) mrhs -> . VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (131) mrhs -> . VARIABLES DOT VARIABLES
    (132) mrhs -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (133) mrhs -> . CONSTANTS DOT KEYWORD_new
    (134) mrhs -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (121) expr -> . mlhs EQUAL mrhs
    (136) expr1 -> . expr3
    (135) str_expr -> . STRING_CONSTANTS
    (122) mlhs -> . VARIABLES
    (123) mlhs -> . CONSTANTS
    (124) mlhs -> . array
    (137) expr3 -> . expr3 LOGICALOR expr4
    (138) expr3 -> . expr4
    (171) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (139) expr4 -> . expr4 LOGICALAND expr5
    (140) expr4 -> . expr5
    (141) expr5 -> . expr6 DOUBLEEQUAL expr6
    (142) expr5 -> . expr6 NOTEQUAL expr6
    (143) expr5 -> . expr6
    (144) expr6 -> . expr7 LESSEQUAL expr7
    (145) expr6 -> . expr7 LESS expr7
    (146) expr6 -> . expr7 GREATER expr7
    (147) expr6 -> . expr7 GREATEREQUAL expr7
    (148) expr6 -> . expr7
    (149) expr6 -> . BOOLEAN_CONSTANTS
    (150) expr7 -> . expr7 BITXOR expr8
    (151) expr7 -> . expr7 PIPE expr8
    (152) expr7 -> . expr8
    (153) expr8 -> . expr8 BITAND expr9
    (154) expr8 -> . expr9
    (155) expr9 -> . expr9 SHIFTL expr10
    (156) expr9 -> . expr9 SHIFTR expr10
    (157) expr9 -> . expr10
    (158) expr10 -> . expr10 PLUS expr11
    (159) expr10 -> . expr10 MINUS expr11
    (160) expr10 -> . expr11
    (161) expr11 -> . expr11 MULTIPLY expr13
    (162) expr11 -> . expr11 DIV expr13
    (163) expr11 -> . expr11 MOD expr13
    (164) expr11 -> . expr13
    (165) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (166) expr13 -> . uexpr INT_CONSTANTS
    (167) expr13 -> . uexpr FLOAT_CONSTANTS
    (168) expr13 -> . CONSTANTS
    (169) expr13 -> . VARIABLES
    (170) expr13 -> . array
    (172) uexpr -> . none
    (173) uexpr -> . PLUS
    (174) uexpr -> . MINUS
    (175) uexpr -> . BITNOT
    (176) uexpr -> . BITCOMP
    (183) none -> .

    KEYWORD_gets    shift and go to state 82
    OPEN_BRACKET    shift and go to state 80
    VARIABLES       shift and go to state 79
    CONSTANTS       shift and go to state 86
    STRING_CONSTANTS shift and go to state 85
    BOOLEAN_CONSTANTS shift and go to state 8
    OPEN_PAREN      shift and go to state 23
    PLUS            shift and go to state 4
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 32
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 183 (none -> .)
    FLOAT_CONSTANTS reduce using rule 183 (none -> .)

    expr11                         shift and go to state 11
    uexpr                          shift and go to state 7
    none                           shift and go to state 27
    str_expr                       shift and go to state 78
    expr                           shift and go to state 84
    expr13                         shift and go to state 12
    mlhs                           shift and go to state 77
    expr3                          shift and go to state 33
    mrhs                           shift and go to state 83
    expr1                          shift and go to state 81
    expr6                          shift and go to state 35
    expr4                          shift and go to state 36
    expr5                          shift and go to state 37
    expr10                         shift and go to state 10
    array                          shift and go to state 19
    expr9                          shift and go to state 39
    expr8                          shift and go to state 38
    expr7                          shift and go to state 5

state 27

    (172) uexpr -> none .

    INT_CONSTANTS   reduce using rule 172 (uexpr -> none .)
    FLOAT_CONSTANTS reduce using rule 172 (uexpr -> none .)


state 28

    (101) stmt -> expr .

    DELIM           reduce using rule 101 (stmt -> expr .)
    newline         reduce using rule 101 (stmt -> expr .)
    KEYWORD_elsif   reduce using rule 101 (stmt -> expr .)
    KEYWORD_else    reduce using rule 101 (stmt -> expr .)
    KEYWORD_end     reduce using rule 101 (stmt -> expr .)
    $end            reduce using rule 101 (stmt -> expr .)


state 29

    (7) statement -> class_defn .

    DELIM           reduce using rule 7 (statement -> class_defn .)
    newline         reduce using rule 7 (statement -> class_defn .)
    $end            reduce using rule 7 (statement -> class_defn .)


state 30

    (6) statement -> func_defn .

    DELIM           reduce using rule 6 (statement -> func_defn .)
    newline         reduce using rule 6 (statement -> func_defn .)
    $end            reduce using rule 6 (statement -> func_defn .)


state 31

    (14) class_defn -> KEYWORD_class . CONSTANTS newline class_stmts opt_terms KEYWORD_end

    CONSTANTS       shift and go to state 87


state 32

    (175) uexpr -> BITNOT .

    INT_CONSTANTS   reduce using rule 175 (uexpr -> BITNOT .)
    FLOAT_CONSTANTS reduce using rule 175 (uexpr -> BITNOT .)


state 33

    (136) expr1 -> expr3 .
    (137) expr3 -> expr3 . LOGICALOR expr4

    DELIM           reduce using rule 136 (expr1 -> expr3 .)
    newline         reduce using rule 136 (expr1 -> expr3 .)
    KEYWORD_elsif   reduce using rule 136 (expr1 -> expr3 .)
    KEYWORD_else    reduce using rule 136 (expr1 -> expr3 .)
    KEYWORD_end     reduce using rule 136 (expr1 -> expr3 .)
    $end            reduce using rule 136 (expr1 -> expr3 .)
    CLOSE_PAREN     reduce using rule 136 (expr1 -> expr3 .)
    LOGICALOR       shift and go to state 88


state 34

    (102) stmt -> expr1 .

    DELIM           reduce using rule 102 (stmt -> expr1 .)
    newline         reduce using rule 102 (stmt -> expr1 .)
    KEYWORD_elsif   reduce using rule 102 (stmt -> expr1 .)
    KEYWORD_else    reduce using rule 102 (stmt -> expr1 .)
    KEYWORD_end     reduce using rule 102 (stmt -> expr1 .)
    $end            reduce using rule 102 (stmt -> expr1 .)


state 35

    (141) expr5 -> expr6 . DOUBLEEQUAL expr6
    (142) expr5 -> expr6 . NOTEQUAL expr6
    (143) expr5 -> expr6 .

    DOUBLEEQUAL     shift and go to state 90
    NOTEQUAL        shift and go to state 89
    LOGICALAND      reduce using rule 143 (expr5 -> expr6 .)
    LOGICALOR       reduce using rule 143 (expr5 -> expr6 .)
    KEYWORD_do      reduce using rule 143 (expr5 -> expr6 .)
    newline         reduce using rule 143 (expr5 -> expr6 .)
    DELIM           reduce using rule 143 (expr5 -> expr6 .)
    $end            reduce using rule 143 (expr5 -> expr6 .)
    KEYWORD_end     reduce using rule 143 (expr5 -> expr6 .)
    KEYWORD_elsif   reduce using rule 143 (expr5 -> expr6 .)
    KEYWORD_else    reduce using rule 143 (expr5 -> expr6 .)
    CLOSE_PAREN     reduce using rule 143 (expr5 -> expr6 .)
    KEYWORD_then    reduce using rule 143 (expr5 -> expr6 .)


state 36

    (138) expr3 -> expr4 .
    (139) expr4 -> expr4 . LOGICALAND expr5

    LOGICALOR       reduce using rule 138 (expr3 -> expr4 .)
    DELIM           reduce using rule 138 (expr3 -> expr4 .)
    newline         reduce using rule 138 (expr3 -> expr4 .)
    KEYWORD_end     reduce using rule 138 (expr3 -> expr4 .)
    KEYWORD_elsif   reduce using rule 138 (expr3 -> expr4 .)
    KEYWORD_else    reduce using rule 138 (expr3 -> expr4 .)
    $end            reduce using rule 138 (expr3 -> expr4 .)
    KEYWORD_do      reduce using rule 138 (expr3 -> expr4 .)
    KEYWORD_then    reduce using rule 138 (expr3 -> expr4 .)
    CLOSE_PAREN     reduce using rule 138 (expr3 -> expr4 .)
    LOGICALAND      shift and go to state 91


state 37

    (140) expr4 -> expr5 .

    LOGICALAND      reduce using rule 140 (expr4 -> expr5 .)
    LOGICALOR       reduce using rule 140 (expr4 -> expr5 .)
    DELIM           reduce using rule 140 (expr4 -> expr5 .)
    newline         reduce using rule 140 (expr4 -> expr5 .)
    KEYWORD_end     reduce using rule 140 (expr4 -> expr5 .)
    $end            reduce using rule 140 (expr4 -> expr5 .)
    KEYWORD_elsif   reduce using rule 140 (expr4 -> expr5 .)
    KEYWORD_else    reduce using rule 140 (expr4 -> expr5 .)
    KEYWORD_then    reduce using rule 140 (expr4 -> expr5 .)
    CLOSE_PAREN     reduce using rule 140 (expr4 -> expr5 .)
    KEYWORD_do      reduce using rule 140 (expr4 -> expr5 .)


state 38

    (152) expr7 -> expr8 .
    (153) expr8 -> expr8 . BITAND expr9

    LESSEQUAL       reduce using rule 152 (expr7 -> expr8 .)
    LESS            reduce using rule 152 (expr7 -> expr8 .)
    GREATER         reduce using rule 152 (expr7 -> expr8 .)
    GREATEREQUAL    reduce using rule 152 (expr7 -> expr8 .)
    BITXOR          reduce using rule 152 (expr7 -> expr8 .)
    PIPE            reduce using rule 152 (expr7 -> expr8 .)
    LOGICALAND      reduce using rule 152 (expr7 -> expr8 .)
    LOGICALOR       reduce using rule 152 (expr7 -> expr8 .)
    DELIM           reduce using rule 152 (expr7 -> expr8 .)
    newline         reduce using rule 152 (expr7 -> expr8 .)
    $end            reduce using rule 152 (expr7 -> expr8 .)
    KEYWORD_then    reduce using rule 152 (expr7 -> expr8 .)
    CLOSE_PAREN     reduce using rule 152 (expr7 -> expr8 .)
    KEYWORD_end     reduce using rule 152 (expr7 -> expr8 .)
    KEYWORD_elsif   reduce using rule 152 (expr7 -> expr8 .)
    KEYWORD_else    reduce using rule 152 (expr7 -> expr8 .)
    KEYWORD_do      reduce using rule 152 (expr7 -> expr8 .)
    CLOSE_BRACKET   reduce using rule 152 (expr7 -> expr8 .)
    DOUBLEEQUAL     reduce using rule 152 (expr7 -> expr8 .)
    NOTEQUAL        reduce using rule 152 (expr7 -> expr8 .)
    BITAND          shift and go to state 92


state 39

    (154) expr8 -> expr9 .
    (155) expr9 -> expr9 . SHIFTL expr10
    (156) expr9 -> expr9 . SHIFTR expr10

    BITAND          reduce using rule 154 (expr8 -> expr9 .)
    BITXOR          reduce using rule 154 (expr8 -> expr9 .)
    PIPE            reduce using rule 154 (expr8 -> expr9 .)
    DOUBLEEQUAL     reduce using rule 154 (expr8 -> expr9 .)
    NOTEQUAL        reduce using rule 154 (expr8 -> expr9 .)
    LOGICALAND      reduce using rule 154 (expr8 -> expr9 .)
    LOGICALOR       reduce using rule 154 (expr8 -> expr9 .)
    DELIM           reduce using rule 154 (expr8 -> expr9 .)
    newline         reduce using rule 154 (expr8 -> expr9 .)
    $end            reduce using rule 154 (expr8 -> expr9 .)
    KEYWORD_then    reduce using rule 154 (expr8 -> expr9 .)
    CLOSE_PAREN     reduce using rule 154 (expr8 -> expr9 .)
    KEYWORD_end     reduce using rule 154 (expr8 -> expr9 .)
    KEYWORD_elsif   reduce using rule 154 (expr8 -> expr9 .)
    KEYWORD_else    reduce using rule 154 (expr8 -> expr9 .)
    KEYWORD_do      reduce using rule 154 (expr8 -> expr9 .)
    LESSEQUAL       reduce using rule 154 (expr8 -> expr9 .)
    LESS            reduce using rule 154 (expr8 -> expr9 .)
    GREATER         reduce using rule 154 (expr8 -> expr9 .)
    GREATEREQUAL    reduce using rule 154 (expr8 -> expr9 .)
    CLOSE_BRACKET   reduce using rule 154 (expr8 -> expr9 .)
    SHIFTL          shift and go to state 94
    SHIFTR          shift and go to state 93


state 40

    (71) loop_stmt -> KEYWORD_break .

    DELIM           reduce using rule 71 (loop_stmt -> KEYWORD_break .)
    newline         reduce using rule 71 (loop_stmt -> KEYWORD_break .)
    $end            reduce using rule 71 (loop_stmt -> KEYWORD_break .)
    KEYWORD_elsif   reduce using rule 71 (loop_stmt -> KEYWORD_break .)
    KEYWORD_else    reduce using rule 71 (loop_stmt -> KEYWORD_break .)
    KEYWORD_end     reduce using rule 71 (loop_stmt -> KEYWORD_break .)


state 41

    (105) stmt -> exit_stmt .

    DELIM           reduce using rule 105 (stmt -> exit_stmt .)
    newline         reduce using rule 105 (stmt -> exit_stmt .)
    KEYWORD_elsif   reduce using rule 105 (stmt -> exit_stmt .)
    KEYWORD_else    reduce using rule 105 (stmt -> exit_stmt .)
    KEYWORD_end     reduce using rule 105 (stmt -> exit_stmt .)
    $end            reduce using rule 105 (stmt -> exit_stmt .)


state 42

    (1) program -> top_top_compstmt .

    $end            reduce using rule 1 (program -> top_top_compstmt .)


state 43

    (89) top_stmt -> KEYWORD_for . VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts opt_terms KEYWORD_end M_11

    VARIABLES       shift and go to state 95


state 44

    (62) func_call_stmt -> fname2 . OPEN_PAREN call_arg CLOSE_PAREN M_17

    OPEN_PAREN      shift and go to state 96


state 45

    (11) statement -> CONSTANTS . DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (12) statement -> CONSTANTS . DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (13) statement -> CONSTANTS . DOT KEYWORD_new arguments
    (123) mlhs -> CONSTANTS .
    (66) fname2 -> CONSTANTS .
    (168) expr13 -> CONSTANTS .

    DOT             shift and go to state 97
    EQUAL           reduce using rule 123 (mlhs -> CONSTANTS .)
    OPEN_PAREN      reduce using rule 66 (fname2 -> CONSTANTS .)
    MULTIPLY        reduce using rule 168 (expr13 -> CONSTANTS .)
    DIV             reduce using rule 168 (expr13 -> CONSTANTS .)
    MOD             reduce using rule 168 (expr13 -> CONSTANTS .)
    PLUS            reduce using rule 168 (expr13 -> CONSTANTS .)
    MINUS           reduce using rule 168 (expr13 -> CONSTANTS .)
    SHIFTL          reduce using rule 168 (expr13 -> CONSTANTS .)
    SHIFTR          reduce using rule 168 (expr13 -> CONSTANTS .)
    BITAND          reduce using rule 168 (expr13 -> CONSTANTS .)
    LESSEQUAL       reduce using rule 168 (expr13 -> CONSTANTS .)
    LESS            reduce using rule 168 (expr13 -> CONSTANTS .)
    GREATER         reduce using rule 168 (expr13 -> CONSTANTS .)
    GREATEREQUAL    reduce using rule 168 (expr13 -> CONSTANTS .)
    BITXOR          reduce using rule 168 (expr13 -> CONSTANTS .)
    PIPE            reduce using rule 168 (expr13 -> CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 168 (expr13 -> CONSTANTS .)
    NOTEQUAL        reduce using rule 168 (expr13 -> CONSTANTS .)
    LOGICALAND      reduce using rule 168 (expr13 -> CONSTANTS .)
    LOGICALOR       reduce using rule 168 (expr13 -> CONSTANTS .)
    DELIM           reduce using rule 168 (expr13 -> CONSTANTS .)
    newline         reduce using rule 168 (expr13 -> CONSTANTS .)
    $end            reduce using rule 168 (expr13 -> CONSTANTS .)


state 46

    (121) expr -> mlhs EQUAL . mrhs
    (63) func_call_stmt -> mlhs EQUAL . fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (125) mrhs -> . expr1
    (126) mrhs -> . str_expr
    (127) mrhs -> . KEYWORD_gets
    (128) mrhs -> . OPEN_BRACKET CLOSE_BRACKET
    (129) mrhs -> . VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (130) mrhs -> . VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (131) mrhs -> . VARIABLES DOT VARIABLES
    (132) mrhs -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (133) mrhs -> . CONSTANTS DOT KEYWORD_new
    (134) mrhs -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (65) fname2 -> . VARIABLES
    (66) fname2 -> . CONSTANTS
    (136) expr1 -> . expr3
    (135) str_expr -> . STRING_CONSTANTS
    (137) expr3 -> . expr3 LOGICALOR expr4
    (138) expr3 -> . expr4
    (139) expr4 -> . expr4 LOGICALAND expr5
    (140) expr4 -> . expr5
    (141) expr5 -> . expr6 DOUBLEEQUAL expr6
    (142) expr5 -> . expr6 NOTEQUAL expr6
    (143) expr5 -> . expr6
    (144) expr6 -> . expr7 LESSEQUAL expr7
    (145) expr6 -> . expr7 LESS expr7
    (146) expr6 -> . expr7 GREATER expr7
    (147) expr6 -> . expr7 GREATEREQUAL expr7
    (148) expr6 -> . expr7
    (149) expr6 -> . BOOLEAN_CONSTANTS
    (150) expr7 -> . expr7 BITXOR expr8
    (151) expr7 -> . expr7 PIPE expr8
    (152) expr7 -> . expr8
    (153) expr8 -> . expr8 BITAND expr9
    (154) expr8 -> . expr9
    (155) expr9 -> . expr9 SHIFTL expr10
    (156) expr9 -> . expr9 SHIFTR expr10
    (157) expr9 -> . expr10
    (158) expr10 -> . expr10 PLUS expr11
    (159) expr10 -> . expr10 MINUS expr11
    (160) expr10 -> . expr11
    (161) expr11 -> . expr11 MULTIPLY expr13
    (162) expr11 -> . expr11 DIV expr13
    (163) expr11 -> . expr11 MOD expr13
    (164) expr11 -> . expr13
    (165) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (166) expr13 -> . uexpr INT_CONSTANTS
    (167) expr13 -> . uexpr FLOAT_CONSTANTS
    (168) expr13 -> . CONSTANTS
    (169) expr13 -> . VARIABLES
    (170) expr13 -> . array
    (172) uexpr -> . none
    (173) uexpr -> . PLUS
    (174) uexpr -> . MINUS
    (175) uexpr -> . BITNOT
    (176) uexpr -> . BITCOMP
    (171) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (183) none -> .

    KEYWORD_gets    shift and go to state 82
    OPEN_BRACKET    shift and go to state 80
    VARIABLES       shift and go to state 98
    CONSTANTS       shift and go to state 101
    STRING_CONSTANTS shift and go to state 85
    BOOLEAN_CONSTANTS shift and go to state 8
    OPEN_PAREN      shift and go to state 23
    PLUS            shift and go to state 4
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 32
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 183 (none -> .)
    FLOAT_CONSTANTS reduce using rule 183 (none -> .)

    expr11                         shift and go to state 11
    uexpr                          shift and go to state 7
    none                           shift and go to state 27
    str_expr                       shift and go to state 78
    expr13                         shift and go to state 12
    fname2                         shift and go to state 100
    expr3                          shift and go to state 33
    mrhs                           shift and go to state 99
    expr1                          shift and go to state 81
    expr6                          shift and go to state 35
    expr4                          shift and go to state 36
    expr5                          shift and go to state 37
    expr10                         shift and go to state 10
    expr8                          shift and go to state 38
    expr9                          shift and go to state 39
    array                          shift and go to state 72
    expr7                          shift and go to state 5

state 47

    (147) expr6 -> expr7 GREATEREQUAL . expr7
    (150) expr7 -> . expr7 BITXOR expr8
    (151) expr7 -> . expr7 PIPE expr8
    (152) expr7 -> . expr8
    (153) expr8 -> . expr8 BITAND expr9
    (154) expr8 -> . expr9
    (155) expr9 -> . expr9 SHIFTL expr10
    (156) expr9 -> . expr9 SHIFTR expr10
    (157) expr9 -> . expr10
    (158) expr10 -> . expr10 PLUS expr11
    (159) expr10 -> . expr10 MINUS expr11
    (160) expr10 -> . expr11
    (161) expr11 -> . expr11 MULTIPLY expr13
    (162) expr11 -> . expr11 DIV expr13
    (163) expr11 -> . expr11 MOD expr13
    (164) expr11 -> . expr13
    (165) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (166) expr13 -> . uexpr INT_CONSTANTS
    (167) expr13 -> . uexpr FLOAT_CONSTANTS
    (168) expr13 -> . CONSTANTS
    (169) expr13 -> . VARIABLES
    (170) expr13 -> . array
    (172) uexpr -> . none
    (173) uexpr -> . PLUS
    (174) uexpr -> . MINUS
    (175) uexpr -> . BITNOT
    (176) uexpr -> . BITCOMP
    (171) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (183) none -> .

    OPEN_PAREN      shift and go to state 23
    CONSTANTS       shift and go to state 73
    VARIABLES       shift and go to state 70
    PLUS            shift and go to state 4
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 32
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 183 (none -> .)
    FLOAT_CONSTANTS reduce using rule 183 (none -> .)

    uexpr                          shift and go to state 7
    none                           shift and go to state 27
    expr10                         shift and go to state 10
    expr7                          shift and go to state 102
    expr13                         shift and go to state 12
    expr8                          shift and go to state 38
    expr9                          shift and go to state 39
    array                          shift and go to state 72
    expr11                         shift and go to state 11

state 48

    (146) expr6 -> expr7 GREATER . expr7
    (150) expr7 -> . expr7 BITXOR expr8
    (151) expr7 -> . expr7 PIPE expr8
    (152) expr7 -> . expr8
    (153) expr8 -> . expr8 BITAND expr9
    (154) expr8 -> . expr9
    (155) expr9 -> . expr9 SHIFTL expr10
    (156) expr9 -> . expr9 SHIFTR expr10
    (157) expr9 -> . expr10
    (158) expr10 -> . expr10 PLUS expr11
    (159) expr10 -> . expr10 MINUS expr11
    (160) expr10 -> . expr11
    (161) expr11 -> . expr11 MULTIPLY expr13
    (162) expr11 -> . expr11 DIV expr13
    (163) expr11 -> . expr11 MOD expr13
    (164) expr11 -> . expr13
    (165) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (166) expr13 -> . uexpr INT_CONSTANTS
    (167) expr13 -> . uexpr FLOAT_CONSTANTS
    (168) expr13 -> . CONSTANTS
    (169) expr13 -> . VARIABLES
    (170) expr13 -> . array
    (172) uexpr -> . none
    (173) uexpr -> . PLUS
    (174) uexpr -> . MINUS
    (175) uexpr -> . BITNOT
    (176) uexpr -> . BITCOMP
    (171) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (183) none -> .

    OPEN_PAREN      shift and go to state 23
    CONSTANTS       shift and go to state 73
    VARIABLES       shift and go to state 70
    PLUS            shift and go to state 4
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 32
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 183 (none -> .)
    FLOAT_CONSTANTS reduce using rule 183 (none -> .)

    uexpr                          shift and go to state 7
    none                           shift and go to state 27
    expr10                         shift and go to state 10
    expr7                          shift and go to state 103
    expr13                         shift and go to state 12
    expr8                          shift and go to state 38
    expr9                          shift and go to state 39
    array                          shift and go to state 72
    expr11                         shift and go to state 11

state 49

    (145) expr6 -> expr7 LESS . expr7
    (150) expr7 -> . expr7 BITXOR expr8
    (151) expr7 -> . expr7 PIPE expr8
    (152) expr7 -> . expr8
    (153) expr8 -> . expr8 BITAND expr9
    (154) expr8 -> . expr9
    (155) expr9 -> . expr9 SHIFTL expr10
    (156) expr9 -> . expr9 SHIFTR expr10
    (157) expr9 -> . expr10
    (158) expr10 -> . expr10 PLUS expr11
    (159) expr10 -> . expr10 MINUS expr11
    (160) expr10 -> . expr11
    (161) expr11 -> . expr11 MULTIPLY expr13
    (162) expr11 -> . expr11 DIV expr13
    (163) expr11 -> . expr11 MOD expr13
    (164) expr11 -> . expr13
    (165) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (166) expr13 -> . uexpr INT_CONSTANTS
    (167) expr13 -> . uexpr FLOAT_CONSTANTS
    (168) expr13 -> . CONSTANTS
    (169) expr13 -> . VARIABLES
    (170) expr13 -> . array
    (172) uexpr -> . none
    (173) uexpr -> . PLUS
    (174) uexpr -> . MINUS
    (175) uexpr -> . BITNOT
    (176) uexpr -> . BITCOMP
    (171) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (183) none -> .

    OPEN_PAREN      shift and go to state 23
    CONSTANTS       shift and go to state 73
    VARIABLES       shift and go to state 70
    PLUS            shift and go to state 4
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 32
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 183 (none -> .)
    FLOAT_CONSTANTS reduce using rule 183 (none -> .)

    uexpr                          shift and go to state 7
    none                           shift and go to state 27
    expr10                         shift and go to state 10
    expr7                          shift and go to state 104
    expr13                         shift and go to state 12
    expr8                          shift and go to state 38
    expr9                          shift and go to state 39
    array                          shift and go to state 72
    expr11                         shift and go to state 11

state 50

    (151) expr7 -> expr7 PIPE . expr8
    (153) expr8 -> . expr8 BITAND expr9
    (154) expr8 -> . expr9
    (155) expr9 -> . expr9 SHIFTL expr10
    (156) expr9 -> . expr9 SHIFTR expr10
    (157) expr9 -> . expr10
    (158) expr10 -> . expr10 PLUS expr11
    (159) expr10 -> . expr10 MINUS expr11
    (160) expr10 -> . expr11
    (161) expr11 -> . expr11 MULTIPLY expr13
    (162) expr11 -> . expr11 DIV expr13
    (163) expr11 -> . expr11 MOD expr13
    (164) expr11 -> . expr13
    (165) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (166) expr13 -> . uexpr INT_CONSTANTS
    (167) expr13 -> . uexpr FLOAT_CONSTANTS
    (168) expr13 -> . CONSTANTS
    (169) expr13 -> . VARIABLES
    (170) expr13 -> . array
    (172) uexpr -> . none
    (173) uexpr -> . PLUS
    (174) uexpr -> . MINUS
    (175) uexpr -> . BITNOT
    (176) uexpr -> . BITCOMP
    (171) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (183) none -> .

    OPEN_PAREN      shift and go to state 23
    CONSTANTS       shift and go to state 73
    VARIABLES       shift and go to state 70
    PLUS            shift and go to state 4
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 32
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 183 (none -> .)
    FLOAT_CONSTANTS reduce using rule 183 (none -> .)

    uexpr                          shift and go to state 7
    none                           shift and go to state 27
    expr10                         shift and go to state 10
    expr13                         shift and go to state 12
    expr8                          shift and go to state 105
    expr9                          shift and go to state 39
    array                          shift and go to state 72
    expr11                         shift and go to state 11

state 51

    (150) expr7 -> expr7 BITXOR . expr8
    (153) expr8 -> . expr8 BITAND expr9
    (154) expr8 -> . expr9
    (155) expr9 -> . expr9 SHIFTL expr10
    (156) expr9 -> . expr9 SHIFTR expr10
    (157) expr9 -> . expr10
    (158) expr10 -> . expr10 PLUS expr11
    (159) expr10 -> . expr10 MINUS expr11
    (160) expr10 -> . expr11
    (161) expr11 -> . expr11 MULTIPLY expr13
    (162) expr11 -> . expr11 DIV expr13
    (163) expr11 -> . expr11 MOD expr13
    (164) expr11 -> . expr13
    (165) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (166) expr13 -> . uexpr INT_CONSTANTS
    (167) expr13 -> . uexpr FLOAT_CONSTANTS
    (168) expr13 -> . CONSTANTS
    (169) expr13 -> . VARIABLES
    (170) expr13 -> . array
    (172) uexpr -> . none
    (173) uexpr -> . PLUS
    (174) uexpr -> . MINUS
    (175) uexpr -> . BITNOT
    (176) uexpr -> . BITCOMP
    (171) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (183) none -> .

    OPEN_PAREN      shift and go to state 23
    CONSTANTS       shift and go to state 73
    VARIABLES       shift and go to state 70
    PLUS            shift and go to state 4
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 32
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 183 (none -> .)
    FLOAT_CONSTANTS reduce using rule 183 (none -> .)

    uexpr                          shift and go to state 7
    none                           shift and go to state 27
    expr10                         shift and go to state 10
    expr13                         shift and go to state 12
    expr8                          shift and go to state 106
    expr9                          shift and go to state 39
    array                          shift and go to state 72
    expr11                         shift and go to state 11

state 52

    (144) expr6 -> expr7 LESSEQUAL . expr7
    (150) expr7 -> . expr7 BITXOR expr8
    (151) expr7 -> . expr7 PIPE expr8
    (152) expr7 -> . expr8
    (153) expr8 -> . expr8 BITAND expr9
    (154) expr8 -> . expr9
    (155) expr9 -> . expr9 SHIFTL expr10
    (156) expr9 -> . expr9 SHIFTR expr10
    (157) expr9 -> . expr10
    (158) expr10 -> . expr10 PLUS expr11
    (159) expr10 -> . expr10 MINUS expr11
    (160) expr10 -> . expr11
    (161) expr11 -> . expr11 MULTIPLY expr13
    (162) expr11 -> . expr11 DIV expr13
    (163) expr11 -> . expr11 MOD expr13
    (164) expr11 -> . expr13
    (165) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (166) expr13 -> . uexpr INT_CONSTANTS
    (167) expr13 -> . uexpr FLOAT_CONSTANTS
    (168) expr13 -> . CONSTANTS
    (169) expr13 -> . VARIABLES
    (170) expr13 -> . array
    (172) uexpr -> . none
    (173) uexpr -> . PLUS
    (174) uexpr -> . MINUS
    (175) uexpr -> . BITNOT
    (176) uexpr -> . BITCOMP
    (171) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (183) none -> .

    OPEN_PAREN      shift and go to state 23
    CONSTANTS       shift and go to state 73
    VARIABLES       shift and go to state 70
    PLUS            shift and go to state 4
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 32
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 183 (none -> .)
    FLOAT_CONSTANTS reduce using rule 183 (none -> .)

    uexpr                          shift and go to state 7
    none                           shift and go to state 27
    expr10                         shift and go to state 10
    expr7                          shift and go to state 107
    expr13                         shift and go to state 12
    expr8                          shift and go to state 38
    expr9                          shift and go to state 39
    array                          shift and go to state 72
    expr11                         shift and go to state 11

state 53

    (166) expr13 -> uexpr INT_CONSTANTS .

    MULTIPLY        reduce using rule 166 (expr13 -> uexpr INT_CONSTANTS .)
    DIV             reduce using rule 166 (expr13 -> uexpr INT_CONSTANTS .)
    MOD             reduce using rule 166 (expr13 -> uexpr INT_CONSTANTS .)
    PLUS            reduce using rule 166 (expr13 -> uexpr INT_CONSTANTS .)
    MINUS           reduce using rule 166 (expr13 -> uexpr INT_CONSTANTS .)
    SHIFTL          reduce using rule 166 (expr13 -> uexpr INT_CONSTANTS .)
    SHIFTR          reduce using rule 166 (expr13 -> uexpr INT_CONSTANTS .)
    BITAND          reduce using rule 166 (expr13 -> uexpr INT_CONSTANTS .)
    LESSEQUAL       reduce using rule 166 (expr13 -> uexpr INT_CONSTANTS .)
    LESS            reduce using rule 166 (expr13 -> uexpr INT_CONSTANTS .)
    GREATER         reduce using rule 166 (expr13 -> uexpr INT_CONSTANTS .)
    GREATEREQUAL    reduce using rule 166 (expr13 -> uexpr INT_CONSTANTS .)
    BITXOR          reduce using rule 166 (expr13 -> uexpr INT_CONSTANTS .)
    PIPE            reduce using rule 166 (expr13 -> uexpr INT_CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 166 (expr13 -> uexpr INT_CONSTANTS .)
    NOTEQUAL        reduce using rule 166 (expr13 -> uexpr INT_CONSTANTS .)
    LOGICALAND      reduce using rule 166 (expr13 -> uexpr INT_CONSTANTS .)
    LOGICALOR       reduce using rule 166 (expr13 -> uexpr INT_CONSTANTS .)
    DELIM           reduce using rule 166 (expr13 -> uexpr INT_CONSTANTS .)
    newline         reduce using rule 166 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_end     reduce using rule 166 (expr13 -> uexpr INT_CONSTANTS .)
    $end            reduce using rule 166 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_then    reduce using rule 166 (expr13 -> uexpr INT_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 166 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 166 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_else    reduce using rule 166 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_do      reduce using rule 166 (expr13 -> uexpr INT_CONSTANTS .)
    CLOSE_BRACKET   reduce using rule 166 (expr13 -> uexpr INT_CONSTANTS .)


state 54

    (167) expr13 -> uexpr FLOAT_CONSTANTS .

    MULTIPLY        reduce using rule 167 (expr13 -> uexpr FLOAT_CONSTANTS .)
    DIV             reduce using rule 167 (expr13 -> uexpr FLOAT_CONSTANTS .)
    MOD             reduce using rule 167 (expr13 -> uexpr FLOAT_CONSTANTS .)
    PLUS            reduce using rule 167 (expr13 -> uexpr FLOAT_CONSTANTS .)
    MINUS           reduce using rule 167 (expr13 -> uexpr FLOAT_CONSTANTS .)
    SHIFTL          reduce using rule 167 (expr13 -> uexpr FLOAT_CONSTANTS .)
    SHIFTR          reduce using rule 167 (expr13 -> uexpr FLOAT_CONSTANTS .)
    BITAND          reduce using rule 167 (expr13 -> uexpr FLOAT_CONSTANTS .)
    LESSEQUAL       reduce using rule 167 (expr13 -> uexpr FLOAT_CONSTANTS .)
    LESS            reduce using rule 167 (expr13 -> uexpr FLOAT_CONSTANTS .)
    GREATER         reduce using rule 167 (expr13 -> uexpr FLOAT_CONSTANTS .)
    GREATEREQUAL    reduce using rule 167 (expr13 -> uexpr FLOAT_CONSTANTS .)
    BITXOR          reduce using rule 167 (expr13 -> uexpr FLOAT_CONSTANTS .)
    PIPE            reduce using rule 167 (expr13 -> uexpr FLOAT_CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 167 (expr13 -> uexpr FLOAT_CONSTANTS .)
    NOTEQUAL        reduce using rule 167 (expr13 -> uexpr FLOAT_CONSTANTS .)
    LOGICALAND      reduce using rule 167 (expr13 -> uexpr FLOAT_CONSTANTS .)
    LOGICALOR       reduce using rule 167 (expr13 -> uexpr FLOAT_CONSTANTS .)
    DELIM           reduce using rule 167 (expr13 -> uexpr FLOAT_CONSTANTS .)
    newline         reduce using rule 167 (expr13 -> uexpr FLOAT_CONSTANTS .)
    KEYWORD_end     reduce using rule 167 (expr13 -> uexpr FLOAT_CONSTANTS .)
    $end            reduce using rule 167 (expr13 -> uexpr FLOAT_CONSTANTS .)
    KEYWORD_then    reduce using rule 167 (expr13 -> uexpr FLOAT_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 167 (expr13 -> uexpr FLOAT_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 167 (expr13 -> uexpr FLOAT_CONSTANTS .)
    KEYWORD_else    reduce using rule 167 (expr13 -> uexpr FLOAT_CONSTANTS .)
    KEYWORD_do      reduce using rule 167 (expr13 -> uexpr FLOAT_CONSTANTS .)
    CLOSE_BRACKET   reduce using rule 167 (expr13 -> uexpr FLOAT_CONSTANTS .)


state 55

    (158) expr10 -> expr10 PLUS . expr11
    (161) expr11 -> . expr11 MULTIPLY expr13
    (162) expr11 -> . expr11 DIV expr13
    (163) expr11 -> . expr11 MOD expr13
    (164) expr11 -> . expr13
    (165) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (166) expr13 -> . uexpr INT_CONSTANTS
    (167) expr13 -> . uexpr FLOAT_CONSTANTS
    (168) expr13 -> . CONSTANTS
    (169) expr13 -> . VARIABLES
    (170) expr13 -> . array
    (172) uexpr -> . none
    (173) uexpr -> . PLUS
    (174) uexpr -> . MINUS
    (175) uexpr -> . BITNOT
    (176) uexpr -> . BITCOMP
    (171) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (183) none -> .

    OPEN_PAREN      shift and go to state 23
    CONSTANTS       shift and go to state 73
    VARIABLES       shift and go to state 70
    PLUS            shift and go to state 4
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 32
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 183 (none -> .)
    FLOAT_CONSTANTS reduce using rule 183 (none -> .)

    uexpr                          shift and go to state 7
    none                           shift and go to state 27
    expr11                         shift and go to state 108
    expr13                         shift and go to state 12
    array                          shift and go to state 72

state 56

    (159) expr10 -> expr10 MINUS . expr11
    (161) expr11 -> . expr11 MULTIPLY expr13
    (162) expr11 -> . expr11 DIV expr13
    (163) expr11 -> . expr11 MOD expr13
    (164) expr11 -> . expr13
    (165) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (166) expr13 -> . uexpr INT_CONSTANTS
    (167) expr13 -> . uexpr FLOAT_CONSTANTS
    (168) expr13 -> . CONSTANTS
    (169) expr13 -> . VARIABLES
    (170) expr13 -> . array
    (172) uexpr -> . none
    (173) uexpr -> . PLUS
    (174) uexpr -> . MINUS
    (175) uexpr -> . BITNOT
    (176) uexpr -> . BITCOMP
    (171) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (183) none -> .

    OPEN_PAREN      shift and go to state 23
    CONSTANTS       shift and go to state 73
    VARIABLES       shift and go to state 70
    PLUS            shift and go to state 4
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 32
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 183 (none -> .)
    FLOAT_CONSTANTS reduce using rule 183 (none -> .)

    uexpr                          shift and go to state 7
    none                           shift and go to state 27
    expr11                         shift and go to state 109
    expr13                         shift and go to state 12
    array                          shift and go to state 72

state 57

    (161) expr11 -> expr11 MULTIPLY . expr13
    (165) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (166) expr13 -> . uexpr INT_CONSTANTS
    (167) expr13 -> . uexpr FLOAT_CONSTANTS
    (168) expr13 -> . CONSTANTS
    (169) expr13 -> . VARIABLES
    (170) expr13 -> . array
    (172) uexpr -> . none
    (173) uexpr -> . PLUS
    (174) uexpr -> . MINUS
    (175) uexpr -> . BITNOT
    (176) uexpr -> . BITCOMP
    (171) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (183) none -> .

    OPEN_PAREN      shift and go to state 23
    CONSTANTS       shift and go to state 73
    VARIABLES       shift and go to state 70
    PLUS            shift and go to state 4
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 32
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 183 (none -> .)
    FLOAT_CONSTANTS reduce using rule 183 (none -> .)

    uexpr                          shift and go to state 7
    none                           shift and go to state 27
    expr13                         shift and go to state 110
    array                          shift and go to state 72

state 58

    (162) expr11 -> expr11 DIV . expr13
    (165) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (166) expr13 -> . uexpr INT_CONSTANTS
    (167) expr13 -> . uexpr FLOAT_CONSTANTS
    (168) expr13 -> . CONSTANTS
    (169) expr13 -> . VARIABLES
    (170) expr13 -> . array
    (172) uexpr -> . none
    (173) uexpr -> . PLUS
    (174) uexpr -> . MINUS
    (175) uexpr -> . BITNOT
    (176) uexpr -> . BITCOMP
    (171) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (183) none -> .

    OPEN_PAREN      shift and go to state 23
    CONSTANTS       shift and go to state 73
    VARIABLES       shift and go to state 70
    PLUS            shift and go to state 4
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 32
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 183 (none -> .)
    FLOAT_CONSTANTS reduce using rule 183 (none -> .)

    uexpr                          shift and go to state 7
    none                           shift and go to state 27
    expr13                         shift and go to state 111
    array                          shift and go to state 72

state 59

    (163) expr11 -> expr11 MOD . expr13
    (165) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (166) expr13 -> . uexpr INT_CONSTANTS
    (167) expr13 -> . uexpr FLOAT_CONSTANTS
    (168) expr13 -> . CONSTANTS
    (169) expr13 -> . VARIABLES
    (170) expr13 -> . array
    (172) uexpr -> . none
    (173) uexpr -> . PLUS
    (174) uexpr -> . MINUS
    (175) uexpr -> . BITNOT
    (176) uexpr -> . BITCOMP
    (171) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (183) none -> .

    OPEN_PAREN      shift and go to state 23
    CONSTANTS       shift and go to state 73
    VARIABLES       shift and go to state 70
    PLUS            shift and go to state 4
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 32
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 183 (none -> .)
    FLOAT_CONSTANTS reduce using rule 183 (none -> .)

    uexpr                          shift and go to state 7
    none                           shift and go to state 27
    expr13                         shift and go to state 112
    array                          shift and go to state 72

state 60

    (88) top_stmt -> M_7 KEYWORD_while . expr3 opt_do M_8 gen_stmts opt_terms KEYWORD_end M_9
    (137) expr3 -> . expr3 LOGICALOR expr4
    (138) expr3 -> . expr4
    (139) expr4 -> . expr4 LOGICALAND expr5
    (140) expr4 -> . expr5
    (141) expr5 -> . expr6 DOUBLEEQUAL expr6
    (142) expr5 -> . expr6 NOTEQUAL expr6
    (143) expr5 -> . expr6
    (144) expr6 -> . expr7 LESSEQUAL expr7
    (145) expr6 -> . expr7 LESS expr7
    (146) expr6 -> . expr7 GREATER expr7
    (147) expr6 -> . expr7 GREATEREQUAL expr7
    (148) expr6 -> . expr7
    (149) expr6 -> . BOOLEAN_CONSTANTS
    (150) expr7 -> . expr7 BITXOR expr8
    (151) expr7 -> . expr7 PIPE expr8
    (152) expr7 -> . expr8
    (153) expr8 -> . expr8 BITAND expr9
    (154) expr8 -> . expr9
    (155) expr9 -> . expr9 SHIFTL expr10
    (156) expr9 -> . expr9 SHIFTR expr10
    (157) expr9 -> . expr10
    (158) expr10 -> . expr10 PLUS expr11
    (159) expr10 -> . expr10 MINUS expr11
    (160) expr10 -> . expr11
    (161) expr11 -> . expr11 MULTIPLY expr13
    (162) expr11 -> . expr11 DIV expr13
    (163) expr11 -> . expr11 MOD expr13
    (164) expr11 -> . expr13
    (165) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (166) expr13 -> . uexpr INT_CONSTANTS
    (167) expr13 -> . uexpr FLOAT_CONSTANTS
    (168) expr13 -> . CONSTANTS
    (169) expr13 -> . VARIABLES
    (170) expr13 -> . array
    (172) uexpr -> . none
    (173) uexpr -> . PLUS
    (174) uexpr -> . MINUS
    (175) uexpr -> . BITNOT
    (176) uexpr -> . BITCOMP
    (171) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (183) none -> .

    BOOLEAN_CONSTANTS shift and go to state 8
    OPEN_PAREN      shift and go to state 23
    CONSTANTS       shift and go to state 73
    VARIABLES       shift and go to state 70
    PLUS            shift and go to state 4
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 32
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 183 (none -> .)
    FLOAT_CONSTANTS reduce using rule 183 (none -> .)

    uexpr                          shift and go to state 7
    none                           shift and go to state 27
    expr9                          shift and go to state 39
    array                          shift and go to state 72
    expr13                         shift and go to state 12
    expr3                          shift and go to state 113
    expr6                          shift and go to state 35
    expr7                          shift and go to state 5
    expr4                          shift and go to state 36
    expr5                          shift and go to state 37
    expr10                         shift and go to state 10
    expr8                          shift and go to state 38
    expr11                         shift and go to state 11

state 61

    (53) fname -> CONSTANTS .

    OPEN_PAREN      reduce using rule 53 (fname -> CONSTANTS .)
    VARIABLES       reduce using rule 53 (fname -> CONSTANTS .)
    CONSTANTS       reduce using rule 53 (fname -> CONSTANTS .)


state 62

    (52) fname -> VARIABLES .

    OPEN_PAREN      reduce using rule 52 (fname -> VARIABLES .)
    VARIABLES       reduce using rule 52 (fname -> VARIABLES .)
    CONSTANTS       reduce using rule 52 (fname -> VARIABLES .)


state 63

    (50) func_defn -> KEYWORD_def fname . OPEN_PAREN arguments M_13 CLOSE_PAREN func_stmts opt_terms KEYWORD_end M_14
    (51) func_defn -> KEYWORD_def fname . OPEN_PAREN CLOSE_PAREN func_stmts opt_terms KEYWORD_end M_15

    OPEN_PAREN      shift and go to state 114


state 64

    (179) terms -> term .

    VARIABLES       reduce using rule 179 (terms -> term .)
    CONSTANTS       reduce using rule 179 (terms -> term .)
    DELIM           reduce using rule 179 (terms -> term .)
    newline         reduce using rule 179 (terms -> term .)
    KEYWORD_if      reduce using rule 179 (terms -> term .)
    KEYWORD_for     reduce using rule 179 (terms -> term .)
    KEYWORD_def     reduce using rule 179 (terms -> term .)
    KEYWORD_class   reduce using rule 179 (terms -> term .)
    KEYWORD_puts    reduce using rule 179 (terms -> term .)
    KEYWORD_break   reduce using rule 179 (terms -> term .)
    KEYWORD_exit    reduce using rule 179 (terms -> term .)
    BOOLEAN_CONSTANTS reduce using rule 179 (terms -> term .)
    OPEN_PAREN      reduce using rule 179 (terms -> term .)
    PLUS            reduce using rule 179 (terms -> term .)
    MINUS           reduce using rule 179 (terms -> term .)
    BITNOT          reduce using rule 179 (terms -> term .)
    BITCOMP         reduce using rule 179 (terms -> term .)
    KEYWORD_while   reduce using rule 179 (terms -> term .)
    INT_CONSTANTS   reduce using rule 179 (terms -> term .)
    FLOAT_CONSTANTS reduce using rule 179 (terms -> term .)
    $end            reduce using rule 179 (terms -> term .)
    SIGIL_DOUBLE_AT reduce using rule 179 (terms -> term .)
    KEYWORD_end     reduce using rule 179 (terms -> term .)
    KEYWORD_return  reduce using rule 179 (terms -> term .)
    SIGIL_AT        reduce using rule 179 (terms -> term .)
    KEYWORD_elsif   reduce using rule 179 (terms -> term .)
    KEYWORD_else    reduce using rule 179 (terms -> term .)


state 65

    (4) statements -> statements terms . statement
    (178) opt_terms -> terms .
    (180) terms -> terms . term
    (5) statement -> . top_stmt
    (6) statement -> . func_defn
    (7) statement -> . class_defn
    (8) statement -> . VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (9) statement -> . VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (10) statement -> . VARIABLES DOT VARIABLES arguments
    (11) statement -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (12) statement -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (13) statement -> . CONSTANTS DOT KEYWORD_new arguments
    (181) term -> . DELIM
    (182) term -> . newline
    (86) top_stmt -> . stmt
    (87) top_stmt -> . KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6
    (88) top_stmt -> . M_7 KEYWORD_while expr3 opt_do M_8 gen_stmts opt_terms KEYWORD_end M_9
    (89) top_stmt -> . KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts opt_terms KEYWORD_end M_11
    (50) func_defn -> . KEYWORD_def fname OPEN_PAREN arguments M_13 CLOSE_PAREN func_stmts opt_terms KEYWORD_end M_14
    (51) func_defn -> . KEYWORD_def fname OPEN_PAREN CLOSE_PAREN func_stmts opt_terms KEYWORD_end M_15
    (14) class_defn -> . KEYWORD_class CONSTANTS newline class_stmts opt_terms KEYWORD_end
    (101) stmt -> . expr
    (102) stmt -> . expr1
    (103) stmt -> . puts_stmt
    (104) stmt -> . loop_stmt
    (105) stmt -> . exit_stmt
    (106) stmt -> . func_call_stmt
    (93) M_7 -> .
    (121) expr -> . mlhs EQUAL mrhs
    (136) expr1 -> . expr3
    (73) puts_stmt -> . KEYWORD_puts mrhs
    (74) puts_stmt -> . KEYWORD_puts expr
    (71) loop_stmt -> . KEYWORD_break
    (72) exit_stmt -> . KEYWORD_exit
    (62) func_call_stmt -> . fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (63) func_call_stmt -> . mlhs EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (122) mlhs -> . VARIABLES
    (123) mlhs -> . CONSTANTS
    (124) mlhs -> . array
    (137) expr3 -> . expr3 LOGICALOR expr4
    (138) expr3 -> . expr4
    (65) fname2 -> . VARIABLES
    (66) fname2 -> . CONSTANTS
    (171) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (139) expr4 -> . expr4 LOGICALAND expr5
    (140) expr4 -> . expr5
    (141) expr5 -> . expr6 DOUBLEEQUAL expr6
    (142) expr5 -> . expr6 NOTEQUAL expr6
    (143) expr5 -> . expr6
    (144) expr6 -> . expr7 LESSEQUAL expr7
    (145) expr6 -> . expr7 LESS expr7
    (146) expr6 -> . expr7 GREATER expr7
    (147) expr6 -> . expr7 GREATEREQUAL expr7
    (148) expr6 -> . expr7
    (149) expr6 -> . BOOLEAN_CONSTANTS
    (150) expr7 -> . expr7 BITXOR expr8
    (151) expr7 -> . expr7 PIPE expr8
    (152) expr7 -> . expr8
    (153) expr8 -> . expr8 BITAND expr9
    (154) expr8 -> . expr9
    (155) expr9 -> . expr9 SHIFTL expr10
    (156) expr9 -> . expr9 SHIFTR expr10
    (157) expr9 -> . expr10
    (158) expr10 -> . expr10 PLUS expr11
    (159) expr10 -> . expr10 MINUS expr11
    (160) expr10 -> . expr11
    (161) expr11 -> . expr11 MULTIPLY expr13
    (162) expr11 -> . expr11 DIV expr13
    (163) expr11 -> . expr11 MOD expr13
    (164) expr11 -> . expr13
    (165) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (166) expr13 -> . uexpr INT_CONSTANTS
    (167) expr13 -> . uexpr FLOAT_CONSTANTS
    (168) expr13 -> . CONSTANTS
    (169) expr13 -> . VARIABLES
    (170) expr13 -> . array
    (172) uexpr -> . none
    (173) uexpr -> . PLUS
    (174) uexpr -> . MINUS
    (175) uexpr -> . BITNOT
    (176) uexpr -> . BITCOMP
    (183) none -> .

    $end            reduce using rule 178 (opt_terms -> terms .)
    VARIABLES       shift and go to state 21
    CONSTANTS       shift and go to state 45
    DELIM           shift and go to state 67
    newline         shift and go to state 66
    KEYWORD_if      shift and go to state 20
    KEYWORD_for     shift and go to state 43
    KEYWORD_def     shift and go to state 16
    KEYWORD_class   shift and go to state 31
    KEYWORD_while   reduce using rule 93 (M_7 -> .)
    KEYWORD_puts    shift and go to state 26
    KEYWORD_break   shift and go to state 40
    KEYWORD_exit    shift and go to state 17
    BOOLEAN_CONSTANTS shift and go to state 8
    OPEN_PAREN      shift and go to state 23
    PLUS            shift and go to state 4
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 32
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 183 (none -> .)
    FLOAT_CONSTANTS reduce using rule 183 (none -> .)

    mlhs                           shift and go to state 1
    func_defn                      shift and go to state 30
    puts_stmt                      shift and go to state 13
    expr11                         shift and go to state 11
    expr13                         shift and go to state 12
    array                          shift and go to state 19
    expr3                          shift and go to state 33
    expr1                          shift and go to state 34
    expr6                          shift and go to state 35
    statement                      shift and go to state 116
    expr5                          shift and go to state 37
    func_call_stmt                 shift and go to state 25
    expr7                          shift and go to state 5
    expr8                          shift and go to state 38
    fname2                         shift and go to state 44
    expr4                          shift and go to state 36
    exit_stmt                      shift and go to state 41
    expr9                          shift and go to state 39
    none                           shift and go to state 27
    stmt                           shift and go to state 14
    loop_stmt                      shift and go to state 6
    M_7                            shift and go to state 15
    uexpr                          shift and go to state 7
    term                           shift and go to state 115
    expr                           shift and go to state 28
    class_defn                     shift and go to state 29
    expr10                         shift and go to state 10
    top_stmt                       shift and go to state 9

state 66

    (182) term -> newline .

    SIGIL_DOUBLE_AT reduce using rule 182 (term -> newline .)
    DELIM           reduce using rule 182 (term -> newline .)
    newline         reduce using rule 182 (term -> newline .)
    SIGIL_AT        reduce using rule 182 (term -> newline .)
    KEYWORD_if      reduce using rule 182 (term -> newline .)
    KEYWORD_for     reduce using rule 182 (term -> newline .)
    KEYWORD_puts    reduce using rule 182 (term -> newline .)
    KEYWORD_break   reduce using rule 182 (term -> newline .)
    KEYWORD_exit    reduce using rule 182 (term -> newline .)
    VARIABLES       reduce using rule 182 (term -> newline .)
    CONSTANTS       reduce using rule 182 (term -> newline .)
    BOOLEAN_CONSTANTS reduce using rule 182 (term -> newline .)
    OPEN_PAREN      reduce using rule 182 (term -> newline .)
    PLUS            reduce using rule 182 (term -> newline .)
    MINUS           reduce using rule 182 (term -> newline .)
    BITNOT          reduce using rule 182 (term -> newline .)
    BITCOMP         reduce using rule 182 (term -> newline .)
    KEYWORD_while   reduce using rule 182 (term -> newline .)
    INT_CONSTANTS   reduce using rule 182 (term -> newline .)
    FLOAT_CONSTANTS reduce using rule 182 (term -> newline .)
    KEYWORD_end     reduce using rule 182 (term -> newline .)
    KEYWORD_return  reduce using rule 182 (term -> newline .)
    KEYWORD_elsif   reduce using rule 182 (term -> newline .)
    KEYWORD_else    reduce using rule 182 (term -> newline .)
    KEYWORD_def     reduce using rule 182 (term -> newline .)
    KEYWORD_class   reduce using rule 182 (term -> newline .)
    $end            reduce using rule 182 (term -> newline .)


state 67

    (181) term -> DELIM .

    SIGIL_DOUBLE_AT reduce using rule 181 (term -> DELIM .)
    DELIM           reduce using rule 181 (term -> DELIM .)
    newline         reduce using rule 181 (term -> DELIM .)
    SIGIL_AT        reduce using rule 181 (term -> DELIM .)
    KEYWORD_if      reduce using rule 181 (term -> DELIM .)
    KEYWORD_for     reduce using rule 181 (term -> DELIM .)
    KEYWORD_puts    reduce using rule 181 (term -> DELIM .)
    KEYWORD_break   reduce using rule 181 (term -> DELIM .)
    KEYWORD_exit    reduce using rule 181 (term -> DELIM .)
    VARIABLES       reduce using rule 181 (term -> DELIM .)
    CONSTANTS       reduce using rule 181 (term -> DELIM .)
    BOOLEAN_CONSTANTS reduce using rule 181 (term -> DELIM .)
    OPEN_PAREN      reduce using rule 181 (term -> DELIM .)
    PLUS            reduce using rule 181 (term -> DELIM .)
    MINUS           reduce using rule 181 (term -> DELIM .)
    BITNOT          reduce using rule 181 (term -> DELIM .)
    BITCOMP         reduce using rule 181 (term -> DELIM .)
    KEYWORD_while   reduce using rule 181 (term -> DELIM .)
    INT_CONSTANTS   reduce using rule 181 (term -> DELIM .)
    FLOAT_CONSTANTS reduce using rule 181 (term -> DELIM .)
    KEYWORD_end     reduce using rule 181 (term -> DELIM .)
    KEYWORD_return  reduce using rule 181 (term -> DELIM .)
    KEYWORD_elsif   reduce using rule 181 (term -> DELIM .)
    KEYWORD_else    reduce using rule 181 (term -> DELIM .)
    KEYWORD_def     reduce using rule 181 (term -> DELIM .)
    KEYWORD_class   reduce using rule 181 (term -> DELIM .)
    $end            reduce using rule 181 (term -> DELIM .)


state 68

    (177) opt_terms -> none .

    KEYWORD_end     reduce using rule 177 (opt_terms -> none .)
    KEYWORD_elsif   reduce using rule 177 (opt_terms -> none .)
    KEYWORD_else    reduce using rule 177 (opt_terms -> none .)
    $end            reduce using rule 177 (opt_terms -> none .)


state 69

    (2) top_top_compstmt -> statements opt_terms .

    $end            reduce using rule 2 (top_top_compstmt -> statements opt_terms .)


state 70

    (169) expr13 -> VARIABLES .
    (171) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET

    MULTIPLY        reduce using rule 169 (expr13 -> VARIABLES .)
    DIV             reduce using rule 169 (expr13 -> VARIABLES .)
    MOD             reduce using rule 169 (expr13 -> VARIABLES .)
    PLUS            reduce using rule 169 (expr13 -> VARIABLES .)
    MINUS           reduce using rule 169 (expr13 -> VARIABLES .)
    SHIFTL          reduce using rule 169 (expr13 -> VARIABLES .)
    SHIFTR          reduce using rule 169 (expr13 -> VARIABLES .)
    BITAND          reduce using rule 169 (expr13 -> VARIABLES .)
    LESSEQUAL       reduce using rule 169 (expr13 -> VARIABLES .)
    LESS            reduce using rule 169 (expr13 -> VARIABLES .)
    GREATER         reduce using rule 169 (expr13 -> VARIABLES .)
    GREATEREQUAL    reduce using rule 169 (expr13 -> VARIABLES .)
    BITXOR          reduce using rule 169 (expr13 -> VARIABLES .)
    PIPE            reduce using rule 169 (expr13 -> VARIABLES .)
    DOUBLEEQUAL     reduce using rule 169 (expr13 -> VARIABLES .)
    NOTEQUAL        reduce using rule 169 (expr13 -> VARIABLES .)
    LOGICALAND      reduce using rule 169 (expr13 -> VARIABLES .)
    LOGICALOR       reduce using rule 169 (expr13 -> VARIABLES .)
    DELIM           reduce using rule 169 (expr13 -> VARIABLES .)
    newline         reduce using rule 169 (expr13 -> VARIABLES .)
    $end            reduce using rule 169 (expr13 -> VARIABLES .)
    KEYWORD_then    reduce using rule 169 (expr13 -> VARIABLES .)
    CLOSE_PAREN     reduce using rule 169 (expr13 -> VARIABLES .)
    KEYWORD_end     reduce using rule 169 (expr13 -> VARIABLES .)
    KEYWORD_elsif   reduce using rule 169 (expr13 -> VARIABLES .)
    KEYWORD_else    reduce using rule 169 (expr13 -> VARIABLES .)
    KEYWORD_do      reduce using rule 169 (expr13 -> VARIABLES .)
    CLOSE_BRACKET   reduce using rule 169 (expr13 -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 74


state 71

    (87) top_stmt -> KEYWORD_if expr3 . opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6
    (137) expr3 -> expr3 . LOGICALOR expr4
    (113) opt_then -> . KEYWORD_then
    (114) opt_then -> . newline

    LOGICALOR       shift and go to state 88
    KEYWORD_then    shift and go to state 118
    newline         shift and go to state 117

    opt_then                       shift and go to state 119

state 72

    (170) expr13 -> array .

    MULTIPLY        reduce using rule 170 (expr13 -> array .)
    DIV             reduce using rule 170 (expr13 -> array .)
    MOD             reduce using rule 170 (expr13 -> array .)
    PLUS            reduce using rule 170 (expr13 -> array .)
    MINUS           reduce using rule 170 (expr13 -> array .)
    SHIFTL          reduce using rule 170 (expr13 -> array .)
    SHIFTR          reduce using rule 170 (expr13 -> array .)
    BITAND          reduce using rule 170 (expr13 -> array .)
    LESSEQUAL       reduce using rule 170 (expr13 -> array .)
    LESS            reduce using rule 170 (expr13 -> array .)
    GREATER         reduce using rule 170 (expr13 -> array .)
    GREATEREQUAL    reduce using rule 170 (expr13 -> array .)
    BITXOR          reduce using rule 170 (expr13 -> array .)
    PIPE            reduce using rule 170 (expr13 -> array .)
    DOUBLEEQUAL     reduce using rule 170 (expr13 -> array .)
    NOTEQUAL        reduce using rule 170 (expr13 -> array .)
    LOGICALAND      reduce using rule 170 (expr13 -> array .)
    LOGICALOR       reduce using rule 170 (expr13 -> array .)
    DELIM           reduce using rule 170 (expr13 -> array .)
    newline         reduce using rule 170 (expr13 -> array .)
    $end            reduce using rule 170 (expr13 -> array .)
    KEYWORD_then    reduce using rule 170 (expr13 -> array .)
    CLOSE_PAREN     reduce using rule 170 (expr13 -> array .)
    KEYWORD_end     reduce using rule 170 (expr13 -> array .)
    KEYWORD_elsif   reduce using rule 170 (expr13 -> array .)
    KEYWORD_else    reduce using rule 170 (expr13 -> array .)
    KEYWORD_do      reduce using rule 170 (expr13 -> array .)
    CLOSE_BRACKET   reduce using rule 170 (expr13 -> array .)


state 73

    (168) expr13 -> CONSTANTS .

    MULTIPLY        reduce using rule 168 (expr13 -> CONSTANTS .)
    DIV             reduce using rule 168 (expr13 -> CONSTANTS .)
    MOD             reduce using rule 168 (expr13 -> CONSTANTS .)
    PLUS            reduce using rule 168 (expr13 -> CONSTANTS .)
    MINUS           reduce using rule 168 (expr13 -> CONSTANTS .)
    SHIFTL          reduce using rule 168 (expr13 -> CONSTANTS .)
    SHIFTR          reduce using rule 168 (expr13 -> CONSTANTS .)
    BITAND          reduce using rule 168 (expr13 -> CONSTANTS .)
    LESSEQUAL       reduce using rule 168 (expr13 -> CONSTANTS .)
    LESS            reduce using rule 168 (expr13 -> CONSTANTS .)
    GREATER         reduce using rule 168 (expr13 -> CONSTANTS .)
    GREATEREQUAL    reduce using rule 168 (expr13 -> CONSTANTS .)
    BITXOR          reduce using rule 168 (expr13 -> CONSTANTS .)
    PIPE            reduce using rule 168 (expr13 -> CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 168 (expr13 -> CONSTANTS .)
    NOTEQUAL        reduce using rule 168 (expr13 -> CONSTANTS .)
    LOGICALAND      reduce using rule 168 (expr13 -> CONSTANTS .)
    LOGICALOR       reduce using rule 168 (expr13 -> CONSTANTS .)
    DELIM           reduce using rule 168 (expr13 -> CONSTANTS .)
    newline         reduce using rule 168 (expr13 -> CONSTANTS .)
    $end            reduce using rule 168 (expr13 -> CONSTANTS .)
    KEYWORD_then    reduce using rule 168 (expr13 -> CONSTANTS .)
    CLOSE_PAREN     reduce using rule 168 (expr13 -> CONSTANTS .)
    KEYWORD_end     reduce using rule 168 (expr13 -> CONSTANTS .)
    KEYWORD_elsif   reduce using rule 168 (expr13 -> CONSTANTS .)
    KEYWORD_else    reduce using rule 168 (expr13 -> CONSTANTS .)
    KEYWORD_do      reduce using rule 168 (expr13 -> CONSTANTS .)
    CLOSE_BRACKET   reduce using rule 168 (expr13 -> CONSTANTS .)


state 74

    (171) array -> VARIABLES OPEN_BRACKET . expr7 CLOSE_BRACKET
    (150) expr7 -> . expr7 BITXOR expr8
    (151) expr7 -> . expr7 PIPE expr8
    (152) expr7 -> . expr8
    (153) expr8 -> . expr8 BITAND expr9
    (154) expr8 -> . expr9
    (155) expr9 -> . expr9 SHIFTL expr10
    (156) expr9 -> . expr9 SHIFTR expr10
    (157) expr9 -> . expr10
    (158) expr10 -> . expr10 PLUS expr11
    (159) expr10 -> . expr10 MINUS expr11
    (160) expr10 -> . expr11
    (161) expr11 -> . expr11 MULTIPLY expr13
    (162) expr11 -> . expr11 DIV expr13
    (163) expr11 -> . expr11 MOD expr13
    (164) expr11 -> . expr13
    (165) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (166) expr13 -> . uexpr INT_CONSTANTS
    (167) expr13 -> . uexpr FLOAT_CONSTANTS
    (168) expr13 -> . CONSTANTS
    (169) expr13 -> . VARIABLES
    (170) expr13 -> . array
    (172) uexpr -> . none
    (173) uexpr -> . PLUS
    (174) uexpr -> . MINUS
    (175) uexpr -> . BITNOT
    (176) uexpr -> . BITCOMP
    (171) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (183) none -> .

    OPEN_PAREN      shift and go to state 23
    CONSTANTS       shift and go to state 73
    VARIABLES       shift and go to state 70
    PLUS            shift and go to state 4
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 32
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 183 (none -> .)
    FLOAT_CONSTANTS reduce using rule 183 (none -> .)

    uexpr                          shift and go to state 7
    none                           shift and go to state 27
    expr10                         shift and go to state 10
    expr7                          shift and go to state 120
    expr13                         shift and go to state 12
    expr8                          shift and go to state 38
    expr9                          shift and go to state 39
    array                          shift and go to state 72
    expr11                         shift and go to state 11

state 75

    (8) statement -> VARIABLES DOT . VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (9) statement -> VARIABLES DOT . VARIABLES OPEN_PAREN CLOSE_PAREN
    (10) statement -> VARIABLES DOT . VARIABLES arguments

    VARIABLES       shift and go to state 121


state 76

    (165) expr13 -> OPEN_PAREN expr1 . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 122


state 77

    (121) expr -> mlhs . EQUAL mrhs

    EQUAL           shift and go to state 123


state 78

    (126) mrhs -> str_expr .

    DELIM           reduce using rule 126 (mrhs -> str_expr .)
    newline         reduce using rule 126 (mrhs -> str_expr .)
    $end            reduce using rule 126 (mrhs -> str_expr .)
    KEYWORD_end     reduce using rule 126 (mrhs -> str_expr .)
    KEYWORD_elsif   reduce using rule 126 (mrhs -> str_expr .)
    KEYWORD_else    reduce using rule 126 (mrhs -> str_expr .)


state 79

    (129) mrhs -> VARIABLES . DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (130) mrhs -> VARIABLES . DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (131) mrhs -> VARIABLES . DOT VARIABLES
    (122) mlhs -> VARIABLES .
    (171) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET
    (169) expr13 -> VARIABLES .

    DOT             shift and go to state 124
    EQUAL           reduce using rule 122 (mlhs -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 74
    MULTIPLY        reduce using rule 169 (expr13 -> VARIABLES .)
    DIV             reduce using rule 169 (expr13 -> VARIABLES .)
    MOD             reduce using rule 169 (expr13 -> VARIABLES .)
    PLUS            reduce using rule 169 (expr13 -> VARIABLES .)
    MINUS           reduce using rule 169 (expr13 -> VARIABLES .)
    SHIFTL          reduce using rule 169 (expr13 -> VARIABLES .)
    SHIFTR          reduce using rule 169 (expr13 -> VARIABLES .)
    BITAND          reduce using rule 169 (expr13 -> VARIABLES .)
    LESSEQUAL       reduce using rule 169 (expr13 -> VARIABLES .)
    LESS            reduce using rule 169 (expr13 -> VARIABLES .)
    GREATER         reduce using rule 169 (expr13 -> VARIABLES .)
    GREATEREQUAL    reduce using rule 169 (expr13 -> VARIABLES .)
    BITXOR          reduce using rule 169 (expr13 -> VARIABLES .)
    PIPE            reduce using rule 169 (expr13 -> VARIABLES .)
    DOUBLEEQUAL     reduce using rule 169 (expr13 -> VARIABLES .)
    NOTEQUAL        reduce using rule 169 (expr13 -> VARIABLES .)
    LOGICALAND      reduce using rule 169 (expr13 -> VARIABLES .)
    LOGICALOR       reduce using rule 169 (expr13 -> VARIABLES .)
    DELIM           reduce using rule 169 (expr13 -> VARIABLES .)
    newline         reduce using rule 169 (expr13 -> VARIABLES .)
    $end            reduce using rule 169 (expr13 -> VARIABLES .)
    KEYWORD_end     reduce using rule 169 (expr13 -> VARIABLES .)
    KEYWORD_elsif   reduce using rule 169 (expr13 -> VARIABLES .)
    KEYWORD_else    reduce using rule 169 (expr13 -> VARIABLES .)


state 80

    (128) mrhs -> OPEN_BRACKET . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 125


state 81

    (125) mrhs -> expr1 .

    DELIM           reduce using rule 125 (mrhs -> expr1 .)
    newline         reduce using rule 125 (mrhs -> expr1 .)
    $end            reduce using rule 125 (mrhs -> expr1 .)
    KEYWORD_end     reduce using rule 125 (mrhs -> expr1 .)
    KEYWORD_elsif   reduce using rule 125 (mrhs -> expr1 .)
    KEYWORD_else    reduce using rule 125 (mrhs -> expr1 .)


state 82

    (127) mrhs -> KEYWORD_gets .

    DELIM           reduce using rule 127 (mrhs -> KEYWORD_gets .)
    newline         reduce using rule 127 (mrhs -> KEYWORD_gets .)
    $end            reduce using rule 127 (mrhs -> KEYWORD_gets .)
    KEYWORD_end     reduce using rule 127 (mrhs -> KEYWORD_gets .)
    KEYWORD_elsif   reduce using rule 127 (mrhs -> KEYWORD_gets .)
    KEYWORD_else    reduce using rule 127 (mrhs -> KEYWORD_gets .)


state 83

    (73) puts_stmt -> KEYWORD_puts mrhs .

    DELIM           reduce using rule 73 (puts_stmt -> KEYWORD_puts mrhs .)
    newline         reduce using rule 73 (puts_stmt -> KEYWORD_puts mrhs .)
    KEYWORD_end     reduce using rule 73 (puts_stmt -> KEYWORD_puts mrhs .)
    $end            reduce using rule 73 (puts_stmt -> KEYWORD_puts mrhs .)
    KEYWORD_elsif   reduce using rule 73 (puts_stmt -> KEYWORD_puts mrhs .)
    KEYWORD_else    reduce using rule 73 (puts_stmt -> KEYWORD_puts mrhs .)


state 84

    (74) puts_stmt -> KEYWORD_puts expr .

    DELIM           reduce using rule 74 (puts_stmt -> KEYWORD_puts expr .)
    newline         reduce using rule 74 (puts_stmt -> KEYWORD_puts expr .)
    KEYWORD_end     reduce using rule 74 (puts_stmt -> KEYWORD_puts expr .)
    $end            reduce using rule 74 (puts_stmt -> KEYWORD_puts expr .)
    KEYWORD_elsif   reduce using rule 74 (puts_stmt -> KEYWORD_puts expr .)
    KEYWORD_else    reduce using rule 74 (puts_stmt -> KEYWORD_puts expr .)


state 85

    (135) str_expr -> STRING_CONSTANTS .

    DELIM           reduce using rule 135 (str_expr -> STRING_CONSTANTS .)
    newline         reduce using rule 135 (str_expr -> STRING_CONSTANTS .)
    $end            reduce using rule 135 (str_expr -> STRING_CONSTANTS .)
    KEYWORD_end     reduce using rule 135 (str_expr -> STRING_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 135 (str_expr -> STRING_CONSTANTS .)
    KEYWORD_else    reduce using rule 135 (str_expr -> STRING_CONSTANTS .)


state 86

    (132) mrhs -> CONSTANTS . DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (133) mrhs -> CONSTANTS . DOT KEYWORD_new
    (134) mrhs -> CONSTANTS . DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (123) mlhs -> CONSTANTS .
    (168) expr13 -> CONSTANTS .

    DOT             shift and go to state 126
    EQUAL           reduce using rule 123 (mlhs -> CONSTANTS .)
    MULTIPLY        reduce using rule 168 (expr13 -> CONSTANTS .)
    DIV             reduce using rule 168 (expr13 -> CONSTANTS .)
    MOD             reduce using rule 168 (expr13 -> CONSTANTS .)
    PLUS            reduce using rule 168 (expr13 -> CONSTANTS .)
    MINUS           reduce using rule 168 (expr13 -> CONSTANTS .)
    SHIFTL          reduce using rule 168 (expr13 -> CONSTANTS .)
    SHIFTR          reduce using rule 168 (expr13 -> CONSTANTS .)
    BITAND          reduce using rule 168 (expr13 -> CONSTANTS .)
    LESSEQUAL       reduce using rule 168 (expr13 -> CONSTANTS .)
    LESS            reduce using rule 168 (expr13 -> CONSTANTS .)
    GREATER         reduce using rule 168 (expr13 -> CONSTANTS .)
    GREATEREQUAL    reduce using rule 168 (expr13 -> CONSTANTS .)
    BITXOR          reduce using rule 168 (expr13 -> CONSTANTS .)
    PIPE            reduce using rule 168 (expr13 -> CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 168 (expr13 -> CONSTANTS .)
    NOTEQUAL        reduce using rule 168 (expr13 -> CONSTANTS .)
    LOGICALAND      reduce using rule 168 (expr13 -> CONSTANTS .)
    LOGICALOR       reduce using rule 168 (expr13 -> CONSTANTS .)
    DELIM           reduce using rule 168 (expr13 -> CONSTANTS .)
    newline         reduce using rule 168 (expr13 -> CONSTANTS .)
    $end            reduce using rule 168 (expr13 -> CONSTANTS .)
    KEYWORD_end     reduce using rule 168 (expr13 -> CONSTANTS .)
    KEYWORD_elsif   reduce using rule 168 (expr13 -> CONSTANTS .)
    KEYWORD_else    reduce using rule 168 (expr13 -> CONSTANTS .)


state 87

    (14) class_defn -> KEYWORD_class CONSTANTS . newline class_stmts opt_terms KEYWORD_end

    newline         shift and go to state 127


state 88

    (137) expr3 -> expr3 LOGICALOR . expr4
    (139) expr4 -> . expr4 LOGICALAND expr5
    (140) expr4 -> . expr5
    (141) expr5 -> . expr6 DOUBLEEQUAL expr6
    (142) expr5 -> . expr6 NOTEQUAL expr6
    (143) expr5 -> . expr6
    (144) expr6 -> . expr7 LESSEQUAL expr7
    (145) expr6 -> . expr7 LESS expr7
    (146) expr6 -> . expr7 GREATER expr7
    (147) expr6 -> . expr7 GREATEREQUAL expr7
    (148) expr6 -> . expr7
    (149) expr6 -> . BOOLEAN_CONSTANTS
    (150) expr7 -> . expr7 BITXOR expr8
    (151) expr7 -> . expr7 PIPE expr8
    (152) expr7 -> . expr8
    (153) expr8 -> . expr8 BITAND expr9
    (154) expr8 -> . expr9
    (155) expr9 -> . expr9 SHIFTL expr10
    (156) expr9 -> . expr9 SHIFTR expr10
    (157) expr9 -> . expr10
    (158) expr10 -> . expr10 PLUS expr11
    (159) expr10 -> . expr10 MINUS expr11
    (160) expr10 -> . expr11
    (161) expr11 -> . expr11 MULTIPLY expr13
    (162) expr11 -> . expr11 DIV expr13
    (163) expr11 -> . expr11 MOD expr13
    (164) expr11 -> . expr13
    (165) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (166) expr13 -> . uexpr INT_CONSTANTS
    (167) expr13 -> . uexpr FLOAT_CONSTANTS
    (168) expr13 -> . CONSTANTS
    (169) expr13 -> . VARIABLES
    (170) expr13 -> . array
    (172) uexpr -> . none
    (173) uexpr -> . PLUS
    (174) uexpr -> . MINUS
    (175) uexpr -> . BITNOT
    (176) uexpr -> . BITCOMP
    (171) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (183) none -> .

    BOOLEAN_CONSTANTS shift and go to state 8
    OPEN_PAREN      shift and go to state 23
    CONSTANTS       shift and go to state 73
    VARIABLES       shift and go to state 70
    PLUS            shift and go to state 4
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 32
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 183 (none -> .)
    FLOAT_CONSTANTS reduce using rule 183 (none -> .)

    uexpr                          shift and go to state 7
    none                           shift and go to state 27
    expr13                         shift and go to state 12
    expr6                          shift and go to state 35
    expr7                          shift and go to state 5
    expr4                          shift and go to state 128
    expr5                          shift and go to state 37
    expr10                         shift and go to state 10
    expr8                          shift and go to state 38
    expr9                          shift and go to state 39
    array                          shift and go to state 72
    expr11                         shift and go to state 11

state 89

    (142) expr5 -> expr6 NOTEQUAL . expr6
    (144) expr6 -> . expr7 LESSEQUAL expr7
    (145) expr6 -> . expr7 LESS expr7
    (146) expr6 -> . expr7 GREATER expr7
    (147) expr6 -> . expr7 GREATEREQUAL expr7
    (148) expr6 -> . expr7
    (149) expr6 -> . BOOLEAN_CONSTANTS
    (150) expr7 -> . expr7 BITXOR expr8
    (151) expr7 -> . expr7 PIPE expr8
    (152) expr7 -> . expr8
    (153) expr8 -> . expr8 BITAND expr9
    (154) expr8 -> . expr9
    (155) expr9 -> . expr9 SHIFTL expr10
    (156) expr9 -> . expr9 SHIFTR expr10
    (157) expr9 -> . expr10
    (158) expr10 -> . expr10 PLUS expr11
    (159) expr10 -> . expr10 MINUS expr11
    (160) expr10 -> . expr11
    (161) expr11 -> . expr11 MULTIPLY expr13
    (162) expr11 -> . expr11 DIV expr13
    (163) expr11 -> . expr11 MOD expr13
    (164) expr11 -> . expr13
    (165) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (166) expr13 -> . uexpr INT_CONSTANTS
    (167) expr13 -> . uexpr FLOAT_CONSTANTS
    (168) expr13 -> . CONSTANTS
    (169) expr13 -> . VARIABLES
    (170) expr13 -> . array
    (172) uexpr -> . none
    (173) uexpr -> . PLUS
    (174) uexpr -> . MINUS
    (175) uexpr -> . BITNOT
    (176) uexpr -> . BITCOMP
    (171) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (183) none -> .

    BOOLEAN_CONSTANTS shift and go to state 8
    OPEN_PAREN      shift and go to state 23
    CONSTANTS       shift and go to state 73
    VARIABLES       shift and go to state 70
    PLUS            shift and go to state 4
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 32
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 183 (none -> .)
    FLOAT_CONSTANTS reduce using rule 183 (none -> .)

    uexpr                          shift and go to state 7
    none                           shift and go to state 27
    expr10                         shift and go to state 10
    expr7                          shift and go to state 5
    expr13                         shift and go to state 12
    expr6                          shift and go to state 129
    expr8                          shift and go to state 38
    expr9                          shift and go to state 39
    array                          shift and go to state 72
    expr11                         shift and go to state 11

state 90

    (141) expr5 -> expr6 DOUBLEEQUAL . expr6
    (144) expr6 -> . expr7 LESSEQUAL expr7
    (145) expr6 -> . expr7 LESS expr7
    (146) expr6 -> . expr7 GREATER expr7
    (147) expr6 -> . expr7 GREATEREQUAL expr7
    (148) expr6 -> . expr7
    (149) expr6 -> . BOOLEAN_CONSTANTS
    (150) expr7 -> . expr7 BITXOR expr8
    (151) expr7 -> . expr7 PIPE expr8
    (152) expr7 -> . expr8
    (153) expr8 -> . expr8 BITAND expr9
    (154) expr8 -> . expr9
    (155) expr9 -> . expr9 SHIFTL expr10
    (156) expr9 -> . expr9 SHIFTR expr10
    (157) expr9 -> . expr10
    (158) expr10 -> . expr10 PLUS expr11
    (159) expr10 -> . expr10 MINUS expr11
    (160) expr10 -> . expr11
    (161) expr11 -> . expr11 MULTIPLY expr13
    (162) expr11 -> . expr11 DIV expr13
    (163) expr11 -> . expr11 MOD expr13
    (164) expr11 -> . expr13
    (165) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (166) expr13 -> . uexpr INT_CONSTANTS
    (167) expr13 -> . uexpr FLOAT_CONSTANTS
    (168) expr13 -> . CONSTANTS
    (169) expr13 -> . VARIABLES
    (170) expr13 -> . array
    (172) uexpr -> . none
    (173) uexpr -> . PLUS
    (174) uexpr -> . MINUS
    (175) uexpr -> . BITNOT
    (176) uexpr -> . BITCOMP
    (171) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (183) none -> .

    BOOLEAN_CONSTANTS shift and go to state 8
    OPEN_PAREN      shift and go to state 23
    CONSTANTS       shift and go to state 73
    VARIABLES       shift and go to state 70
    PLUS            shift and go to state 4
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 32
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 183 (none -> .)
    FLOAT_CONSTANTS reduce using rule 183 (none -> .)

    uexpr                          shift and go to state 7
    none                           shift and go to state 27
    expr10                         shift and go to state 10
    expr7                          shift and go to state 5
    expr13                         shift and go to state 12
    expr6                          shift and go to state 130
    expr8                          shift and go to state 38
    expr9                          shift and go to state 39
    array                          shift and go to state 72
    expr11                         shift and go to state 11

state 91

    (139) expr4 -> expr4 LOGICALAND . expr5
    (141) expr5 -> . expr6 DOUBLEEQUAL expr6
    (142) expr5 -> . expr6 NOTEQUAL expr6
    (143) expr5 -> . expr6
    (144) expr6 -> . expr7 LESSEQUAL expr7
    (145) expr6 -> . expr7 LESS expr7
    (146) expr6 -> . expr7 GREATER expr7
    (147) expr6 -> . expr7 GREATEREQUAL expr7
    (148) expr6 -> . expr7
    (149) expr6 -> . BOOLEAN_CONSTANTS
    (150) expr7 -> . expr7 BITXOR expr8
    (151) expr7 -> . expr7 PIPE expr8
    (152) expr7 -> . expr8
    (153) expr8 -> . expr8 BITAND expr9
    (154) expr8 -> . expr9
    (155) expr9 -> . expr9 SHIFTL expr10
    (156) expr9 -> . expr9 SHIFTR expr10
    (157) expr9 -> . expr10
    (158) expr10 -> . expr10 PLUS expr11
    (159) expr10 -> . expr10 MINUS expr11
    (160) expr10 -> . expr11
    (161) expr11 -> . expr11 MULTIPLY expr13
    (162) expr11 -> . expr11 DIV expr13
    (163) expr11 -> . expr11 MOD expr13
    (164) expr11 -> . expr13
    (165) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (166) expr13 -> . uexpr INT_CONSTANTS
    (167) expr13 -> . uexpr FLOAT_CONSTANTS
    (168) expr13 -> . CONSTANTS
    (169) expr13 -> . VARIABLES
    (170) expr13 -> . array
    (172) uexpr -> . none
    (173) uexpr -> . PLUS
    (174) uexpr -> . MINUS
    (175) uexpr -> . BITNOT
    (176) uexpr -> . BITCOMP
    (171) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (183) none -> .

    BOOLEAN_CONSTANTS shift and go to state 8
    OPEN_PAREN      shift and go to state 23
    CONSTANTS       shift and go to state 73
    VARIABLES       shift and go to state 70
    PLUS            shift and go to state 4
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 32
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 183 (none -> .)
    FLOAT_CONSTANTS reduce using rule 183 (none -> .)

    uexpr                          shift and go to state 7
    none                           shift and go to state 27
    expr13                         shift and go to state 12
    expr6                          shift and go to state 35
    expr7                          shift and go to state 5
    expr5                          shift and go to state 131
    expr10                         shift and go to state 10
    expr8                          shift and go to state 38
    expr9                          shift and go to state 39
    array                          shift and go to state 72
    expr11                         shift and go to state 11

state 92

    (153) expr8 -> expr8 BITAND . expr9
    (155) expr9 -> . expr9 SHIFTL expr10
    (156) expr9 -> . expr9 SHIFTR expr10
    (157) expr9 -> . expr10
    (158) expr10 -> . expr10 PLUS expr11
    (159) expr10 -> . expr10 MINUS expr11
    (160) expr10 -> . expr11
    (161) expr11 -> . expr11 MULTIPLY expr13
    (162) expr11 -> . expr11 DIV expr13
    (163) expr11 -> . expr11 MOD expr13
    (164) expr11 -> . expr13
    (165) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (166) expr13 -> . uexpr INT_CONSTANTS
    (167) expr13 -> . uexpr FLOAT_CONSTANTS
    (168) expr13 -> . CONSTANTS
    (169) expr13 -> . VARIABLES
    (170) expr13 -> . array
    (172) uexpr -> . none
    (173) uexpr -> . PLUS
    (174) uexpr -> . MINUS
    (175) uexpr -> . BITNOT
    (176) uexpr -> . BITCOMP
    (171) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (183) none -> .

    OPEN_PAREN      shift and go to state 23
    CONSTANTS       shift and go to state 73
    VARIABLES       shift and go to state 70
    PLUS            shift and go to state 4
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 32
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 183 (none -> .)
    FLOAT_CONSTANTS reduce using rule 183 (none -> .)

    uexpr                          shift and go to state 7
    none                           shift and go to state 27
    expr10                         shift and go to state 10
    expr11                         shift and go to state 11
    expr13                         shift and go to state 12
    expr9                          shift and go to state 132
    array                          shift and go to state 72

state 93

    (156) expr9 -> expr9 SHIFTR . expr10
    (158) expr10 -> . expr10 PLUS expr11
    (159) expr10 -> . expr10 MINUS expr11
    (160) expr10 -> . expr11
    (161) expr11 -> . expr11 MULTIPLY expr13
    (162) expr11 -> . expr11 DIV expr13
    (163) expr11 -> . expr11 MOD expr13
    (164) expr11 -> . expr13
    (165) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (166) expr13 -> . uexpr INT_CONSTANTS
    (167) expr13 -> . uexpr FLOAT_CONSTANTS
    (168) expr13 -> . CONSTANTS
    (169) expr13 -> . VARIABLES
    (170) expr13 -> . array
    (172) uexpr -> . none
    (173) uexpr -> . PLUS
    (174) uexpr -> . MINUS
    (175) uexpr -> . BITNOT
    (176) uexpr -> . BITCOMP
    (171) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (183) none -> .

    OPEN_PAREN      shift and go to state 23
    CONSTANTS       shift and go to state 73
    VARIABLES       shift and go to state 70
    PLUS            shift and go to state 4
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 32
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 183 (none -> .)
    FLOAT_CONSTANTS reduce using rule 183 (none -> .)

    uexpr                          shift and go to state 7
    none                           shift and go to state 27
    expr10                         shift and go to state 133
    expr11                         shift and go to state 11
    expr13                         shift and go to state 12
    array                          shift and go to state 72

state 94

    (155) expr9 -> expr9 SHIFTL . expr10
    (158) expr10 -> . expr10 PLUS expr11
    (159) expr10 -> . expr10 MINUS expr11
    (160) expr10 -> . expr11
    (161) expr11 -> . expr11 MULTIPLY expr13
    (162) expr11 -> . expr11 DIV expr13
    (163) expr11 -> . expr11 MOD expr13
    (164) expr11 -> . expr13
    (165) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (166) expr13 -> . uexpr INT_CONSTANTS
    (167) expr13 -> . uexpr FLOAT_CONSTANTS
    (168) expr13 -> . CONSTANTS
    (169) expr13 -> . VARIABLES
    (170) expr13 -> . array
    (172) uexpr -> . none
    (173) uexpr -> . PLUS
    (174) uexpr -> . MINUS
    (175) uexpr -> . BITNOT
    (176) uexpr -> . BITCOMP
    (171) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (183) none -> .

    OPEN_PAREN      shift and go to state 23
    CONSTANTS       shift and go to state 73
    VARIABLES       shift and go to state 70
    PLUS            shift and go to state 4
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 32
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 183 (none -> .)
    FLOAT_CONSTANTS reduce using rule 183 (none -> .)

    uexpr                          shift and go to state 7
    none                           shift and go to state 27
    expr10                         shift and go to state 134
    expr11                         shift and go to state 11
    expr13                         shift and go to state 12
    array                          shift and go to state 72

state 95

    (89) top_stmt -> KEYWORD_for VARIABLES . KEYWORD_in for_range opt_do M_10 gen_stmts opt_terms KEYWORD_end M_11

    KEYWORD_in      shift and go to state 135


state 96

    (62) func_call_stmt -> fname2 OPEN_PAREN . call_arg CLOSE_PAREN M_17
    (67) call_arg -> . primary M_16 COMMA call_arg
    (68) call_arg -> . primary M_16
    (69) call_arg -> . none
    (81) primary -> . INT_CONSTANTS
    (82) primary -> . BOOLEAN_CONSTANTS
    (83) primary -> . CONSTANTS
    (84) primary -> . VARIABLES
    (85) primary -> . array
    (183) none -> .
    (171) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET

    INT_CONSTANTS   shift and go to state 139
    BOOLEAN_CONSTANTS shift and go to state 138
    CONSTANTS       shift and go to state 136
    VARIABLES       shift and go to state 140
    CLOSE_PAREN     reduce using rule 183 (none -> .)

    none                           shift and go to state 137
    primary                        shift and go to state 141
    call_arg                       shift and go to state 142
    array                          shift and go to state 143

state 97

    (11) statement -> CONSTANTS DOT . KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (12) statement -> CONSTANTS DOT . KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (13) statement -> CONSTANTS DOT . KEYWORD_new arguments

    KEYWORD_new     shift and go to state 144


state 98

    (129) mrhs -> VARIABLES . DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (130) mrhs -> VARIABLES . DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (131) mrhs -> VARIABLES . DOT VARIABLES
    (65) fname2 -> VARIABLES .
    (169) expr13 -> VARIABLES .
    (171) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET

    DOT             shift and go to state 124
    OPEN_PAREN      reduce using rule 65 (fname2 -> VARIABLES .)
    MULTIPLY        reduce using rule 169 (expr13 -> VARIABLES .)
    DIV             reduce using rule 169 (expr13 -> VARIABLES .)
    MOD             reduce using rule 169 (expr13 -> VARIABLES .)
    PLUS            reduce using rule 169 (expr13 -> VARIABLES .)
    MINUS           reduce using rule 169 (expr13 -> VARIABLES .)
    SHIFTL          reduce using rule 169 (expr13 -> VARIABLES .)
    SHIFTR          reduce using rule 169 (expr13 -> VARIABLES .)
    BITAND          reduce using rule 169 (expr13 -> VARIABLES .)
    LESSEQUAL       reduce using rule 169 (expr13 -> VARIABLES .)
    LESS            reduce using rule 169 (expr13 -> VARIABLES .)
    GREATER         reduce using rule 169 (expr13 -> VARIABLES .)
    GREATEREQUAL    reduce using rule 169 (expr13 -> VARIABLES .)
    BITXOR          reduce using rule 169 (expr13 -> VARIABLES .)
    PIPE            reduce using rule 169 (expr13 -> VARIABLES .)
    DOUBLEEQUAL     reduce using rule 169 (expr13 -> VARIABLES .)
    NOTEQUAL        reduce using rule 169 (expr13 -> VARIABLES .)
    LOGICALAND      reduce using rule 169 (expr13 -> VARIABLES .)
    LOGICALOR       reduce using rule 169 (expr13 -> VARIABLES .)
    DELIM           reduce using rule 169 (expr13 -> VARIABLES .)
    newline         reduce using rule 169 (expr13 -> VARIABLES .)
    $end            reduce using rule 169 (expr13 -> VARIABLES .)
    KEYWORD_end     reduce using rule 169 (expr13 -> VARIABLES .)
    KEYWORD_elsif   reduce using rule 169 (expr13 -> VARIABLES .)
    KEYWORD_else    reduce using rule 169 (expr13 -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 74


state 99

    (121) expr -> mlhs EQUAL mrhs .

    DELIM           reduce using rule 121 (expr -> mlhs EQUAL mrhs .)
    newline         reduce using rule 121 (expr -> mlhs EQUAL mrhs .)
    KEYWORD_elsif   reduce using rule 121 (expr -> mlhs EQUAL mrhs .)
    KEYWORD_else    reduce using rule 121 (expr -> mlhs EQUAL mrhs .)
    KEYWORD_end     reduce using rule 121 (expr -> mlhs EQUAL mrhs .)
    $end            reduce using rule 121 (expr -> mlhs EQUAL mrhs .)


state 100

    (63) func_call_stmt -> mlhs EQUAL fname2 . OPEN_PAREN call_arg CLOSE_PAREN M_17

    OPEN_PAREN      shift and go to state 145


state 101

    (132) mrhs -> CONSTANTS . DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (133) mrhs -> CONSTANTS . DOT KEYWORD_new
    (134) mrhs -> CONSTANTS . DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (66) fname2 -> CONSTANTS .
    (168) expr13 -> CONSTANTS .

    DOT             shift and go to state 126
    OPEN_PAREN      reduce using rule 66 (fname2 -> CONSTANTS .)
    MULTIPLY        reduce using rule 168 (expr13 -> CONSTANTS .)
    DIV             reduce using rule 168 (expr13 -> CONSTANTS .)
    MOD             reduce using rule 168 (expr13 -> CONSTANTS .)
    PLUS            reduce using rule 168 (expr13 -> CONSTANTS .)
    MINUS           reduce using rule 168 (expr13 -> CONSTANTS .)
    SHIFTL          reduce using rule 168 (expr13 -> CONSTANTS .)
    SHIFTR          reduce using rule 168 (expr13 -> CONSTANTS .)
    BITAND          reduce using rule 168 (expr13 -> CONSTANTS .)
    LESSEQUAL       reduce using rule 168 (expr13 -> CONSTANTS .)
    LESS            reduce using rule 168 (expr13 -> CONSTANTS .)
    GREATER         reduce using rule 168 (expr13 -> CONSTANTS .)
    GREATEREQUAL    reduce using rule 168 (expr13 -> CONSTANTS .)
    BITXOR          reduce using rule 168 (expr13 -> CONSTANTS .)
    PIPE            reduce using rule 168 (expr13 -> CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 168 (expr13 -> CONSTANTS .)
    NOTEQUAL        reduce using rule 168 (expr13 -> CONSTANTS .)
    LOGICALAND      reduce using rule 168 (expr13 -> CONSTANTS .)
    LOGICALOR       reduce using rule 168 (expr13 -> CONSTANTS .)
    DELIM           reduce using rule 168 (expr13 -> CONSTANTS .)
    newline         reduce using rule 168 (expr13 -> CONSTANTS .)
    $end            reduce using rule 168 (expr13 -> CONSTANTS .)
    KEYWORD_end     reduce using rule 168 (expr13 -> CONSTANTS .)
    KEYWORD_elsif   reduce using rule 168 (expr13 -> CONSTANTS .)
    KEYWORD_else    reduce using rule 168 (expr13 -> CONSTANTS .)


state 102

    (147) expr6 -> expr7 GREATEREQUAL expr7 .
    (150) expr7 -> expr7 . BITXOR expr8
    (151) expr7 -> expr7 . PIPE expr8

    DOUBLEEQUAL     reduce using rule 147 (expr6 -> expr7 GREATEREQUAL expr7 .)
    NOTEQUAL        reduce using rule 147 (expr6 -> expr7 GREATEREQUAL expr7 .)
    LOGICALAND      reduce using rule 147 (expr6 -> expr7 GREATEREQUAL expr7 .)
    LOGICALOR       reduce using rule 147 (expr6 -> expr7 GREATEREQUAL expr7 .)
    DELIM           reduce using rule 147 (expr6 -> expr7 GREATEREQUAL expr7 .)
    newline         reduce using rule 147 (expr6 -> expr7 GREATEREQUAL expr7 .)
    $end            reduce using rule 147 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_end     reduce using rule 147 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_elsif   reduce using rule 147 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_else    reduce using rule 147 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_do      reduce using rule 147 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_then    reduce using rule 147 (expr6 -> expr7 GREATEREQUAL expr7 .)
    CLOSE_PAREN     reduce using rule 147 (expr6 -> expr7 GREATEREQUAL expr7 .)
    BITXOR          shift and go to state 51
    PIPE            shift and go to state 50


state 103

    (146) expr6 -> expr7 GREATER expr7 .
    (150) expr7 -> expr7 . BITXOR expr8
    (151) expr7 -> expr7 . PIPE expr8

    DOUBLEEQUAL     reduce using rule 146 (expr6 -> expr7 GREATER expr7 .)
    NOTEQUAL        reduce using rule 146 (expr6 -> expr7 GREATER expr7 .)
    LOGICALAND      reduce using rule 146 (expr6 -> expr7 GREATER expr7 .)
    LOGICALOR       reduce using rule 146 (expr6 -> expr7 GREATER expr7 .)
    DELIM           reduce using rule 146 (expr6 -> expr7 GREATER expr7 .)
    newline         reduce using rule 146 (expr6 -> expr7 GREATER expr7 .)
    $end            reduce using rule 146 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_end     reduce using rule 146 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_elsif   reduce using rule 146 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_else    reduce using rule 146 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_do      reduce using rule 146 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_then    reduce using rule 146 (expr6 -> expr7 GREATER expr7 .)
    CLOSE_PAREN     reduce using rule 146 (expr6 -> expr7 GREATER expr7 .)
    BITXOR          shift and go to state 51
    PIPE            shift and go to state 50


state 104

    (145) expr6 -> expr7 LESS expr7 .
    (150) expr7 -> expr7 . BITXOR expr8
    (151) expr7 -> expr7 . PIPE expr8

    DOUBLEEQUAL     reduce using rule 145 (expr6 -> expr7 LESS expr7 .)
    NOTEQUAL        reduce using rule 145 (expr6 -> expr7 LESS expr7 .)
    LOGICALAND      reduce using rule 145 (expr6 -> expr7 LESS expr7 .)
    LOGICALOR       reduce using rule 145 (expr6 -> expr7 LESS expr7 .)
    DELIM           reduce using rule 145 (expr6 -> expr7 LESS expr7 .)
    newline         reduce using rule 145 (expr6 -> expr7 LESS expr7 .)
    $end            reduce using rule 145 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_end     reduce using rule 145 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_elsif   reduce using rule 145 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_else    reduce using rule 145 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_do      reduce using rule 145 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_then    reduce using rule 145 (expr6 -> expr7 LESS expr7 .)
    CLOSE_PAREN     reduce using rule 145 (expr6 -> expr7 LESS expr7 .)
    BITXOR          shift and go to state 51
    PIPE            shift and go to state 50


state 105

    (151) expr7 -> expr7 PIPE expr8 .
    (153) expr8 -> expr8 . BITAND expr9

    LESSEQUAL       reduce using rule 151 (expr7 -> expr7 PIPE expr8 .)
    LESS            reduce using rule 151 (expr7 -> expr7 PIPE expr8 .)
    GREATER         reduce using rule 151 (expr7 -> expr7 PIPE expr8 .)
    GREATEREQUAL    reduce using rule 151 (expr7 -> expr7 PIPE expr8 .)
    BITXOR          reduce using rule 151 (expr7 -> expr7 PIPE expr8 .)
    PIPE            reduce using rule 151 (expr7 -> expr7 PIPE expr8 .)
    LOGICALAND      reduce using rule 151 (expr7 -> expr7 PIPE expr8 .)
    LOGICALOR       reduce using rule 151 (expr7 -> expr7 PIPE expr8 .)
    DELIM           reduce using rule 151 (expr7 -> expr7 PIPE expr8 .)
    newline         reduce using rule 151 (expr7 -> expr7 PIPE expr8 .)
    $end            reduce using rule 151 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_then    reduce using rule 151 (expr7 -> expr7 PIPE expr8 .)
    CLOSE_PAREN     reduce using rule 151 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_end     reduce using rule 151 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_elsif   reduce using rule 151 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_else    reduce using rule 151 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_do      reduce using rule 151 (expr7 -> expr7 PIPE expr8 .)
    CLOSE_BRACKET   reduce using rule 151 (expr7 -> expr7 PIPE expr8 .)
    DOUBLEEQUAL     reduce using rule 151 (expr7 -> expr7 PIPE expr8 .)
    NOTEQUAL        reduce using rule 151 (expr7 -> expr7 PIPE expr8 .)
    BITAND          shift and go to state 92


state 106

    (150) expr7 -> expr7 BITXOR expr8 .
    (153) expr8 -> expr8 . BITAND expr9

    LESSEQUAL       reduce using rule 150 (expr7 -> expr7 BITXOR expr8 .)
    LESS            reduce using rule 150 (expr7 -> expr7 BITXOR expr8 .)
    GREATER         reduce using rule 150 (expr7 -> expr7 BITXOR expr8 .)
    GREATEREQUAL    reduce using rule 150 (expr7 -> expr7 BITXOR expr8 .)
    BITXOR          reduce using rule 150 (expr7 -> expr7 BITXOR expr8 .)
    PIPE            reduce using rule 150 (expr7 -> expr7 BITXOR expr8 .)
    LOGICALAND      reduce using rule 150 (expr7 -> expr7 BITXOR expr8 .)
    LOGICALOR       reduce using rule 150 (expr7 -> expr7 BITXOR expr8 .)
    DELIM           reduce using rule 150 (expr7 -> expr7 BITXOR expr8 .)
    newline         reduce using rule 150 (expr7 -> expr7 BITXOR expr8 .)
    $end            reduce using rule 150 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_then    reduce using rule 150 (expr7 -> expr7 BITXOR expr8 .)
    CLOSE_PAREN     reduce using rule 150 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_end     reduce using rule 150 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_elsif   reduce using rule 150 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_else    reduce using rule 150 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_do      reduce using rule 150 (expr7 -> expr7 BITXOR expr8 .)
    CLOSE_BRACKET   reduce using rule 150 (expr7 -> expr7 BITXOR expr8 .)
    DOUBLEEQUAL     reduce using rule 150 (expr7 -> expr7 BITXOR expr8 .)
    NOTEQUAL        reduce using rule 150 (expr7 -> expr7 BITXOR expr8 .)
    BITAND          shift and go to state 92


state 107

    (144) expr6 -> expr7 LESSEQUAL expr7 .
    (150) expr7 -> expr7 . BITXOR expr8
    (151) expr7 -> expr7 . PIPE expr8

    DOUBLEEQUAL     reduce using rule 144 (expr6 -> expr7 LESSEQUAL expr7 .)
    NOTEQUAL        reduce using rule 144 (expr6 -> expr7 LESSEQUAL expr7 .)
    LOGICALAND      reduce using rule 144 (expr6 -> expr7 LESSEQUAL expr7 .)
    LOGICALOR       reduce using rule 144 (expr6 -> expr7 LESSEQUAL expr7 .)
    DELIM           reduce using rule 144 (expr6 -> expr7 LESSEQUAL expr7 .)
    newline         reduce using rule 144 (expr6 -> expr7 LESSEQUAL expr7 .)
    $end            reduce using rule 144 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_end     reduce using rule 144 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_elsif   reduce using rule 144 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_else    reduce using rule 144 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_do      reduce using rule 144 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_then    reduce using rule 144 (expr6 -> expr7 LESSEQUAL expr7 .)
    CLOSE_PAREN     reduce using rule 144 (expr6 -> expr7 LESSEQUAL expr7 .)
    BITXOR          shift and go to state 51
    PIPE            shift and go to state 50


state 108

    (158) expr10 -> expr10 PLUS expr11 .
    (161) expr11 -> expr11 . MULTIPLY expr13
    (162) expr11 -> expr11 . DIV expr13
    (163) expr11 -> expr11 . MOD expr13

    PLUS            reduce using rule 158 (expr10 -> expr10 PLUS expr11 .)
    MINUS           reduce using rule 158 (expr10 -> expr10 PLUS expr11 .)
    SHIFTL          reduce using rule 158 (expr10 -> expr10 PLUS expr11 .)
    SHIFTR          reduce using rule 158 (expr10 -> expr10 PLUS expr11 .)
    BITAND          reduce using rule 158 (expr10 -> expr10 PLUS expr11 .)
    LESSEQUAL       reduce using rule 158 (expr10 -> expr10 PLUS expr11 .)
    LESS            reduce using rule 158 (expr10 -> expr10 PLUS expr11 .)
    GREATER         reduce using rule 158 (expr10 -> expr10 PLUS expr11 .)
    GREATEREQUAL    reduce using rule 158 (expr10 -> expr10 PLUS expr11 .)
    BITXOR          reduce using rule 158 (expr10 -> expr10 PLUS expr11 .)
    PIPE            reduce using rule 158 (expr10 -> expr10 PLUS expr11 .)
    DOUBLEEQUAL     reduce using rule 158 (expr10 -> expr10 PLUS expr11 .)
    NOTEQUAL        reduce using rule 158 (expr10 -> expr10 PLUS expr11 .)
    LOGICALAND      reduce using rule 158 (expr10 -> expr10 PLUS expr11 .)
    LOGICALOR       reduce using rule 158 (expr10 -> expr10 PLUS expr11 .)
    DELIM           reduce using rule 158 (expr10 -> expr10 PLUS expr11 .)
    newline         reduce using rule 158 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_end     reduce using rule 158 (expr10 -> expr10 PLUS expr11 .)
    $end            reduce using rule 158 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_then    reduce using rule 158 (expr10 -> expr10 PLUS expr11 .)
    CLOSE_PAREN     reduce using rule 158 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_elsif   reduce using rule 158 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_else    reduce using rule 158 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_do      reduce using rule 158 (expr10 -> expr10 PLUS expr11 .)
    CLOSE_BRACKET   reduce using rule 158 (expr10 -> expr10 PLUS expr11 .)
    MULTIPLY        shift and go to state 57
    DIV             shift and go to state 58
    MOD             shift and go to state 59


state 109

    (159) expr10 -> expr10 MINUS expr11 .
    (161) expr11 -> expr11 . MULTIPLY expr13
    (162) expr11 -> expr11 . DIV expr13
    (163) expr11 -> expr11 . MOD expr13

    PLUS            reduce using rule 159 (expr10 -> expr10 MINUS expr11 .)
    MINUS           reduce using rule 159 (expr10 -> expr10 MINUS expr11 .)
    SHIFTL          reduce using rule 159 (expr10 -> expr10 MINUS expr11 .)
    SHIFTR          reduce using rule 159 (expr10 -> expr10 MINUS expr11 .)
    BITAND          reduce using rule 159 (expr10 -> expr10 MINUS expr11 .)
    LESSEQUAL       reduce using rule 159 (expr10 -> expr10 MINUS expr11 .)
    LESS            reduce using rule 159 (expr10 -> expr10 MINUS expr11 .)
    GREATER         reduce using rule 159 (expr10 -> expr10 MINUS expr11 .)
    GREATEREQUAL    reduce using rule 159 (expr10 -> expr10 MINUS expr11 .)
    BITXOR          reduce using rule 159 (expr10 -> expr10 MINUS expr11 .)
    PIPE            reduce using rule 159 (expr10 -> expr10 MINUS expr11 .)
    DOUBLEEQUAL     reduce using rule 159 (expr10 -> expr10 MINUS expr11 .)
    NOTEQUAL        reduce using rule 159 (expr10 -> expr10 MINUS expr11 .)
    LOGICALAND      reduce using rule 159 (expr10 -> expr10 MINUS expr11 .)
    LOGICALOR       reduce using rule 159 (expr10 -> expr10 MINUS expr11 .)
    DELIM           reduce using rule 159 (expr10 -> expr10 MINUS expr11 .)
    newline         reduce using rule 159 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_end     reduce using rule 159 (expr10 -> expr10 MINUS expr11 .)
    $end            reduce using rule 159 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_then    reduce using rule 159 (expr10 -> expr10 MINUS expr11 .)
    CLOSE_PAREN     reduce using rule 159 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_elsif   reduce using rule 159 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_else    reduce using rule 159 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_do      reduce using rule 159 (expr10 -> expr10 MINUS expr11 .)
    CLOSE_BRACKET   reduce using rule 159 (expr10 -> expr10 MINUS expr11 .)
    MULTIPLY        shift and go to state 57
    DIV             shift and go to state 58
    MOD             shift and go to state 59


state 110

    (161) expr11 -> expr11 MULTIPLY expr13 .

    MULTIPLY        reduce using rule 161 (expr11 -> expr11 MULTIPLY expr13 .)
    DIV             reduce using rule 161 (expr11 -> expr11 MULTIPLY expr13 .)
    MOD             reduce using rule 161 (expr11 -> expr11 MULTIPLY expr13 .)
    PLUS            reduce using rule 161 (expr11 -> expr11 MULTIPLY expr13 .)
    MINUS           reduce using rule 161 (expr11 -> expr11 MULTIPLY expr13 .)
    SHIFTL          reduce using rule 161 (expr11 -> expr11 MULTIPLY expr13 .)
    SHIFTR          reduce using rule 161 (expr11 -> expr11 MULTIPLY expr13 .)
    BITAND          reduce using rule 161 (expr11 -> expr11 MULTIPLY expr13 .)
    CLOSE_BRACKET   reduce using rule 161 (expr11 -> expr11 MULTIPLY expr13 .)
    BITXOR          reduce using rule 161 (expr11 -> expr11 MULTIPLY expr13 .)
    PIPE            reduce using rule 161 (expr11 -> expr11 MULTIPLY expr13 .)
    LESSEQUAL       reduce using rule 161 (expr11 -> expr11 MULTIPLY expr13 .)
    LESS            reduce using rule 161 (expr11 -> expr11 MULTIPLY expr13 .)
    GREATER         reduce using rule 161 (expr11 -> expr11 MULTIPLY expr13 .)
    GREATEREQUAL    reduce using rule 161 (expr11 -> expr11 MULTIPLY expr13 .)
    DOUBLEEQUAL     reduce using rule 161 (expr11 -> expr11 MULTIPLY expr13 .)
    NOTEQUAL        reduce using rule 161 (expr11 -> expr11 MULTIPLY expr13 .)
    LOGICALAND      reduce using rule 161 (expr11 -> expr11 MULTIPLY expr13 .)
    LOGICALOR       reduce using rule 161 (expr11 -> expr11 MULTIPLY expr13 .)
    DELIM           reduce using rule 161 (expr11 -> expr11 MULTIPLY expr13 .)
    newline         reduce using rule 161 (expr11 -> expr11 MULTIPLY expr13 .)
    $end            reduce using rule 161 (expr11 -> expr11 MULTIPLY expr13 .)
    KEYWORD_then    reduce using rule 161 (expr11 -> expr11 MULTIPLY expr13 .)
    CLOSE_PAREN     reduce using rule 161 (expr11 -> expr11 MULTIPLY expr13 .)
    KEYWORD_end     reduce using rule 161 (expr11 -> expr11 MULTIPLY expr13 .)
    KEYWORD_elsif   reduce using rule 161 (expr11 -> expr11 MULTIPLY expr13 .)
    KEYWORD_else    reduce using rule 161 (expr11 -> expr11 MULTIPLY expr13 .)
    KEYWORD_do      reduce using rule 161 (expr11 -> expr11 MULTIPLY expr13 .)


state 111

    (162) expr11 -> expr11 DIV expr13 .

    MULTIPLY        reduce using rule 162 (expr11 -> expr11 DIV expr13 .)
    DIV             reduce using rule 162 (expr11 -> expr11 DIV expr13 .)
    MOD             reduce using rule 162 (expr11 -> expr11 DIV expr13 .)
    PLUS            reduce using rule 162 (expr11 -> expr11 DIV expr13 .)
    MINUS           reduce using rule 162 (expr11 -> expr11 DIV expr13 .)
    SHIFTL          reduce using rule 162 (expr11 -> expr11 DIV expr13 .)
    SHIFTR          reduce using rule 162 (expr11 -> expr11 DIV expr13 .)
    BITAND          reduce using rule 162 (expr11 -> expr11 DIV expr13 .)
    CLOSE_BRACKET   reduce using rule 162 (expr11 -> expr11 DIV expr13 .)
    BITXOR          reduce using rule 162 (expr11 -> expr11 DIV expr13 .)
    PIPE            reduce using rule 162 (expr11 -> expr11 DIV expr13 .)
    LESSEQUAL       reduce using rule 162 (expr11 -> expr11 DIV expr13 .)
    LESS            reduce using rule 162 (expr11 -> expr11 DIV expr13 .)
    GREATER         reduce using rule 162 (expr11 -> expr11 DIV expr13 .)
    GREATEREQUAL    reduce using rule 162 (expr11 -> expr11 DIV expr13 .)
    DOUBLEEQUAL     reduce using rule 162 (expr11 -> expr11 DIV expr13 .)
    NOTEQUAL        reduce using rule 162 (expr11 -> expr11 DIV expr13 .)
    LOGICALAND      reduce using rule 162 (expr11 -> expr11 DIV expr13 .)
    LOGICALOR       reduce using rule 162 (expr11 -> expr11 DIV expr13 .)
    DELIM           reduce using rule 162 (expr11 -> expr11 DIV expr13 .)
    newline         reduce using rule 162 (expr11 -> expr11 DIV expr13 .)
    $end            reduce using rule 162 (expr11 -> expr11 DIV expr13 .)
    KEYWORD_then    reduce using rule 162 (expr11 -> expr11 DIV expr13 .)
    CLOSE_PAREN     reduce using rule 162 (expr11 -> expr11 DIV expr13 .)
    KEYWORD_end     reduce using rule 162 (expr11 -> expr11 DIV expr13 .)
    KEYWORD_elsif   reduce using rule 162 (expr11 -> expr11 DIV expr13 .)
    KEYWORD_else    reduce using rule 162 (expr11 -> expr11 DIV expr13 .)
    KEYWORD_do      reduce using rule 162 (expr11 -> expr11 DIV expr13 .)


state 112

    (163) expr11 -> expr11 MOD expr13 .

    MULTIPLY        reduce using rule 163 (expr11 -> expr11 MOD expr13 .)
    DIV             reduce using rule 163 (expr11 -> expr11 MOD expr13 .)
    MOD             reduce using rule 163 (expr11 -> expr11 MOD expr13 .)
    PLUS            reduce using rule 163 (expr11 -> expr11 MOD expr13 .)
    MINUS           reduce using rule 163 (expr11 -> expr11 MOD expr13 .)
    SHIFTL          reduce using rule 163 (expr11 -> expr11 MOD expr13 .)
    SHIFTR          reduce using rule 163 (expr11 -> expr11 MOD expr13 .)
    BITAND          reduce using rule 163 (expr11 -> expr11 MOD expr13 .)
    CLOSE_BRACKET   reduce using rule 163 (expr11 -> expr11 MOD expr13 .)
    BITXOR          reduce using rule 163 (expr11 -> expr11 MOD expr13 .)
    PIPE            reduce using rule 163 (expr11 -> expr11 MOD expr13 .)
    LESSEQUAL       reduce using rule 163 (expr11 -> expr11 MOD expr13 .)
    LESS            reduce using rule 163 (expr11 -> expr11 MOD expr13 .)
    GREATER         reduce using rule 163 (expr11 -> expr11 MOD expr13 .)
    GREATEREQUAL    reduce using rule 163 (expr11 -> expr11 MOD expr13 .)
    DOUBLEEQUAL     reduce using rule 163 (expr11 -> expr11 MOD expr13 .)
    NOTEQUAL        reduce using rule 163 (expr11 -> expr11 MOD expr13 .)
    LOGICALAND      reduce using rule 163 (expr11 -> expr11 MOD expr13 .)
    LOGICALOR       reduce using rule 163 (expr11 -> expr11 MOD expr13 .)
    DELIM           reduce using rule 163 (expr11 -> expr11 MOD expr13 .)
    newline         reduce using rule 163 (expr11 -> expr11 MOD expr13 .)
    $end            reduce using rule 163 (expr11 -> expr11 MOD expr13 .)
    KEYWORD_then    reduce using rule 163 (expr11 -> expr11 MOD expr13 .)
    CLOSE_PAREN     reduce using rule 163 (expr11 -> expr11 MOD expr13 .)
    KEYWORD_end     reduce using rule 163 (expr11 -> expr11 MOD expr13 .)
    KEYWORD_elsif   reduce using rule 163 (expr11 -> expr11 MOD expr13 .)
    KEYWORD_else    reduce using rule 163 (expr11 -> expr11 MOD expr13 .)
    KEYWORD_do      reduce using rule 163 (expr11 -> expr11 MOD expr13 .)


state 113

    (88) top_stmt -> M_7 KEYWORD_while expr3 . opt_do M_8 gen_stmts opt_terms KEYWORD_end M_9
    (137) expr3 -> expr3 . LOGICALOR expr4
    (115) opt_do -> . KEYWORD_do
    (116) opt_do -> . newline

    LOGICALOR       shift and go to state 88
    KEYWORD_do      shift and go to state 147
    newline         shift and go to state 146

    opt_do                         shift and go to state 148

state 114

    (50) func_defn -> KEYWORD_def fname OPEN_PAREN . arguments M_13 CLOSE_PAREN func_stmts opt_terms KEYWORD_end M_14
    (51) func_defn -> KEYWORD_def fname OPEN_PAREN . CLOSE_PAREN func_stmts opt_terms KEYWORD_end M_15
    (54) arguments -> . VARIABLES M_12 COMMA arguments
    (55) arguments -> . CONSTANTS M_12 COMMA arguments
    (56) arguments -> . VARIABLES M_12
    (57) arguments -> . CONSTANTS M_12

    CLOSE_PAREN     shift and go to state 152
    VARIABLES       shift and go to state 150
    CONSTANTS       shift and go to state 149

    arguments                      shift and go to state 151

state 115

    (180) terms -> terms term .

    VARIABLES       reduce using rule 180 (terms -> terms term .)
    CONSTANTS       reduce using rule 180 (terms -> terms term .)
    DELIM           reduce using rule 180 (terms -> terms term .)
    newline         reduce using rule 180 (terms -> terms term .)
    KEYWORD_if      reduce using rule 180 (terms -> terms term .)
    KEYWORD_for     reduce using rule 180 (terms -> terms term .)
    KEYWORD_def     reduce using rule 180 (terms -> terms term .)
    KEYWORD_class   reduce using rule 180 (terms -> terms term .)
    KEYWORD_puts    reduce using rule 180 (terms -> terms term .)
    KEYWORD_break   reduce using rule 180 (terms -> terms term .)
    KEYWORD_exit    reduce using rule 180 (terms -> terms term .)
    BOOLEAN_CONSTANTS reduce using rule 180 (terms -> terms term .)
    OPEN_PAREN      reduce using rule 180 (terms -> terms term .)
    PLUS            reduce using rule 180 (terms -> terms term .)
    MINUS           reduce using rule 180 (terms -> terms term .)
    BITNOT          reduce using rule 180 (terms -> terms term .)
    BITCOMP         reduce using rule 180 (terms -> terms term .)
    KEYWORD_while   reduce using rule 180 (terms -> terms term .)
    INT_CONSTANTS   reduce using rule 180 (terms -> terms term .)
    FLOAT_CONSTANTS reduce using rule 180 (terms -> terms term .)
    $end            reduce using rule 180 (terms -> terms term .)
    SIGIL_DOUBLE_AT reduce using rule 180 (terms -> terms term .)
    KEYWORD_end     reduce using rule 180 (terms -> terms term .)
    KEYWORD_return  reduce using rule 180 (terms -> terms term .)
    SIGIL_AT        reduce using rule 180 (terms -> terms term .)
    KEYWORD_elsif   reduce using rule 180 (terms -> terms term .)
    KEYWORD_else    reduce using rule 180 (terms -> terms term .)


state 116

    (4) statements -> statements terms statement .

    DELIM           reduce using rule 4 (statements -> statements terms statement .)
    newline         reduce using rule 4 (statements -> statements terms statement .)
    $end            reduce using rule 4 (statements -> statements terms statement .)


state 117

    (114) opt_then -> newline .

    KEYWORD_if      reduce using rule 114 (opt_then -> newline .)
    KEYWORD_for     reduce using rule 114 (opt_then -> newline .)
    KEYWORD_puts    reduce using rule 114 (opt_then -> newline .)
    KEYWORD_break   reduce using rule 114 (opt_then -> newline .)
    KEYWORD_exit    reduce using rule 114 (opt_then -> newline .)
    VARIABLES       reduce using rule 114 (opt_then -> newline .)
    CONSTANTS       reduce using rule 114 (opt_then -> newline .)
    BOOLEAN_CONSTANTS reduce using rule 114 (opt_then -> newline .)
    OPEN_PAREN      reduce using rule 114 (opt_then -> newline .)
    PLUS            reduce using rule 114 (opt_then -> newline .)
    MINUS           reduce using rule 114 (opt_then -> newline .)
    BITNOT          reduce using rule 114 (opt_then -> newline .)
    BITCOMP         reduce using rule 114 (opt_then -> newline .)
    DELIM           reduce using rule 114 (opt_then -> newline .)
    newline         reduce using rule 114 (opt_then -> newline .)
    KEYWORD_elsif   reduce using rule 114 (opt_then -> newline .)
    KEYWORD_while   reduce using rule 114 (opt_then -> newline .)
    INT_CONSTANTS   reduce using rule 114 (opt_then -> newline .)
    FLOAT_CONSTANTS reduce using rule 114 (opt_then -> newline .)
    KEYWORD_else    reduce using rule 114 (opt_then -> newline .)
    KEYWORD_end     reduce using rule 114 (opt_then -> newline .)


state 118

    (113) opt_then -> KEYWORD_then .

    KEYWORD_if      reduce using rule 113 (opt_then -> KEYWORD_then .)
    KEYWORD_for     reduce using rule 113 (opt_then -> KEYWORD_then .)
    KEYWORD_puts    reduce using rule 113 (opt_then -> KEYWORD_then .)
    KEYWORD_break   reduce using rule 113 (opt_then -> KEYWORD_then .)
    KEYWORD_exit    reduce using rule 113 (opt_then -> KEYWORD_then .)
    VARIABLES       reduce using rule 113 (opt_then -> KEYWORD_then .)
    CONSTANTS       reduce using rule 113 (opt_then -> KEYWORD_then .)
    BOOLEAN_CONSTANTS reduce using rule 113 (opt_then -> KEYWORD_then .)
    OPEN_PAREN      reduce using rule 113 (opt_then -> KEYWORD_then .)
    PLUS            reduce using rule 113 (opt_then -> KEYWORD_then .)
    MINUS           reduce using rule 113 (opt_then -> KEYWORD_then .)
    BITNOT          reduce using rule 113 (opt_then -> KEYWORD_then .)
    BITCOMP         reduce using rule 113 (opt_then -> KEYWORD_then .)
    DELIM           reduce using rule 113 (opt_then -> KEYWORD_then .)
    newline         reduce using rule 113 (opt_then -> KEYWORD_then .)
    KEYWORD_elsif   reduce using rule 113 (opt_then -> KEYWORD_then .)
    KEYWORD_while   reduce using rule 113 (opt_then -> KEYWORD_then .)
    INT_CONSTANTS   reduce using rule 113 (opt_then -> KEYWORD_then .)
    FLOAT_CONSTANTS reduce using rule 113 (opt_then -> KEYWORD_then .)
    KEYWORD_else    reduce using rule 113 (opt_then -> KEYWORD_then .)
    KEYWORD_end     reduce using rule 113 (opt_then -> KEYWORD_then .)


state 119

    (87) top_stmt -> KEYWORD_if expr3 opt_then . M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6
    (90) M_1 -> .

    KEYWORD_if      reduce using rule 90 (M_1 -> .)
    KEYWORD_for     reduce using rule 90 (M_1 -> .)
    KEYWORD_puts    reduce using rule 90 (M_1 -> .)
    KEYWORD_break   reduce using rule 90 (M_1 -> .)
    KEYWORD_exit    reduce using rule 90 (M_1 -> .)
    VARIABLES       reduce using rule 90 (M_1 -> .)
    CONSTANTS       reduce using rule 90 (M_1 -> .)
    BOOLEAN_CONSTANTS reduce using rule 90 (M_1 -> .)
    OPEN_PAREN      reduce using rule 90 (M_1 -> .)
    PLUS            reduce using rule 90 (M_1 -> .)
    MINUS           reduce using rule 90 (M_1 -> .)
    BITNOT          reduce using rule 90 (M_1 -> .)
    BITCOMP         reduce using rule 90 (M_1 -> .)
    DELIM           reduce using rule 90 (M_1 -> .)
    newline         reduce using rule 90 (M_1 -> .)
    KEYWORD_elsif   reduce using rule 90 (M_1 -> .)
    KEYWORD_else    reduce using rule 90 (M_1 -> .)
    KEYWORD_end     reduce using rule 90 (M_1 -> .)
    KEYWORD_while   reduce using rule 90 (M_1 -> .)
    INT_CONSTANTS   reduce using rule 90 (M_1 -> .)
    FLOAT_CONSTANTS reduce using rule 90 (M_1 -> .)

    M_1                            shift and go to state 153

state 120

    (171) array -> VARIABLES OPEN_BRACKET expr7 . CLOSE_BRACKET
    (150) expr7 -> expr7 . BITXOR expr8
    (151) expr7 -> expr7 . PIPE expr8

    CLOSE_BRACKET   shift and go to state 154
    BITXOR          shift and go to state 51
    PIPE            shift and go to state 50


state 121

    (8) statement -> VARIABLES DOT VARIABLES . OPEN_PAREN arguments CLOSE_PAREN
    (9) statement -> VARIABLES DOT VARIABLES . OPEN_PAREN CLOSE_PAREN
    (10) statement -> VARIABLES DOT VARIABLES . arguments
    (54) arguments -> . VARIABLES M_12 COMMA arguments
    (55) arguments -> . CONSTANTS M_12 COMMA arguments
    (56) arguments -> . VARIABLES M_12
    (57) arguments -> . CONSTANTS M_12

    OPEN_PAREN      shift and go to state 155
    VARIABLES       shift and go to state 150
    CONSTANTS       shift and go to state 149

    arguments                      shift and go to state 156

state 122

    (165) expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .

    MULTIPLY        reduce using rule 165 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    DIV             reduce using rule 165 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    MOD             reduce using rule 165 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    PLUS            reduce using rule 165 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    MINUS           reduce using rule 165 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    SHIFTL          reduce using rule 165 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    SHIFTR          reduce using rule 165 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    BITAND          reduce using rule 165 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    LESSEQUAL       reduce using rule 165 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    LESS            reduce using rule 165 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    GREATER         reduce using rule 165 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    GREATEREQUAL    reduce using rule 165 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    BITXOR          reduce using rule 165 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    PIPE            reduce using rule 165 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    DOUBLEEQUAL     reduce using rule 165 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    NOTEQUAL        reduce using rule 165 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    LOGICALAND      reduce using rule 165 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    LOGICALOR       reduce using rule 165 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    DELIM           reduce using rule 165 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    newline         reduce using rule 165 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_end     reduce using rule 165 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    $end            reduce using rule 165 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_then    reduce using rule 165 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 165 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_elsif   reduce using rule 165 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_else    reduce using rule 165 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_do      reduce using rule 165 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 165 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)


state 123

    (121) expr -> mlhs EQUAL . mrhs
    (125) mrhs -> . expr1
    (126) mrhs -> . str_expr
    (127) mrhs -> . KEYWORD_gets
    (128) mrhs -> . OPEN_BRACKET CLOSE_BRACKET
    (129) mrhs -> . VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (130) mrhs -> . VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (131) mrhs -> . VARIABLES DOT VARIABLES
    (132) mrhs -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (133) mrhs -> . CONSTANTS DOT KEYWORD_new
    (134) mrhs -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (136) expr1 -> . expr3
    (135) str_expr -> . STRING_CONSTANTS
    (137) expr3 -> . expr3 LOGICALOR expr4
    (138) expr3 -> . expr4
    (139) expr4 -> . expr4 LOGICALAND expr5
    (140) expr4 -> . expr5
    (141) expr5 -> . expr6 DOUBLEEQUAL expr6
    (142) expr5 -> . expr6 NOTEQUAL expr6
    (143) expr5 -> . expr6
    (144) expr6 -> . expr7 LESSEQUAL expr7
    (145) expr6 -> . expr7 LESS expr7
    (146) expr6 -> . expr7 GREATER expr7
    (147) expr6 -> . expr7 GREATEREQUAL expr7
    (148) expr6 -> . expr7
    (149) expr6 -> . BOOLEAN_CONSTANTS
    (150) expr7 -> . expr7 BITXOR expr8
    (151) expr7 -> . expr7 PIPE expr8
    (152) expr7 -> . expr8
    (153) expr8 -> . expr8 BITAND expr9
    (154) expr8 -> . expr9
    (155) expr9 -> . expr9 SHIFTL expr10
    (156) expr9 -> . expr9 SHIFTR expr10
    (157) expr9 -> . expr10
    (158) expr10 -> . expr10 PLUS expr11
    (159) expr10 -> . expr10 MINUS expr11
    (160) expr10 -> . expr11
    (161) expr11 -> . expr11 MULTIPLY expr13
    (162) expr11 -> . expr11 DIV expr13
    (163) expr11 -> . expr11 MOD expr13
    (164) expr11 -> . expr13
    (165) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (166) expr13 -> . uexpr INT_CONSTANTS
    (167) expr13 -> . uexpr FLOAT_CONSTANTS
    (168) expr13 -> . CONSTANTS
    (169) expr13 -> . VARIABLES
    (170) expr13 -> . array
    (172) uexpr -> . none
    (173) uexpr -> . PLUS
    (174) uexpr -> . MINUS
    (175) uexpr -> . BITNOT
    (176) uexpr -> . BITCOMP
    (171) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (183) none -> .

    KEYWORD_gets    shift and go to state 82
    OPEN_BRACKET    shift and go to state 80
    VARIABLES       shift and go to state 157
    CONSTANTS       shift and go to state 158
    STRING_CONSTANTS shift and go to state 85
    BOOLEAN_CONSTANTS shift and go to state 8
    OPEN_PAREN      shift and go to state 23
    PLUS            shift and go to state 4
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 32
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 183 (none -> .)
    FLOAT_CONSTANTS reduce using rule 183 (none -> .)

    expr11                         shift and go to state 11
    uexpr                          shift and go to state 7
    none                           shift and go to state 27
    str_expr                       shift and go to state 78
    expr13                         shift and go to state 12
    expr3                          shift and go to state 33
    mrhs                           shift and go to state 99
    expr1                          shift and go to state 81
    expr6                          shift and go to state 35
    expr4                          shift and go to state 36
    expr5                          shift and go to state 37
    expr10                         shift and go to state 10
    expr8                          shift and go to state 38
    expr9                          shift and go to state 39
    array                          shift and go to state 72
    expr7                          shift and go to state 5

state 124

    (129) mrhs -> VARIABLES DOT . VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (130) mrhs -> VARIABLES DOT . VARIABLES OPEN_PAREN CLOSE_PAREN
    (131) mrhs -> VARIABLES DOT . VARIABLES

    VARIABLES       shift and go to state 159


state 125

    (128) mrhs -> OPEN_BRACKET CLOSE_BRACKET .

    DELIM           reduce using rule 128 (mrhs -> OPEN_BRACKET CLOSE_BRACKET .)
    newline         reduce using rule 128 (mrhs -> OPEN_BRACKET CLOSE_BRACKET .)
    $end            reduce using rule 128 (mrhs -> OPEN_BRACKET CLOSE_BRACKET .)
    KEYWORD_end     reduce using rule 128 (mrhs -> OPEN_BRACKET CLOSE_BRACKET .)
    KEYWORD_elsif   reduce using rule 128 (mrhs -> OPEN_BRACKET CLOSE_BRACKET .)
    KEYWORD_else    reduce using rule 128 (mrhs -> OPEN_BRACKET CLOSE_BRACKET .)


state 126

    (132) mrhs -> CONSTANTS DOT . KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (133) mrhs -> CONSTANTS DOT . KEYWORD_new
    (134) mrhs -> CONSTANTS DOT . KEYWORD_new OPEN_PAREN CLOSE_PAREN

    KEYWORD_new     shift and go to state 160


state 127

    (14) class_defn -> KEYWORD_class CONSTANTS newline . class_stmts opt_terms KEYWORD_end
    (15) class_stmts -> . class_stmt
    (16) class_stmts -> . class_stmts terms class_stmt
    (17) class_stmts -> . none
    (18) class_stmt -> . class_mlhs EQUAL class_mrhs
    (19) class_stmt -> . class_func
    (183) none -> .
    (28) class_mlhs -> . class_mlhs terms SIGIL_DOUBLE_AT
    (29) class_mlhs -> . SIGIL_DOUBLE_AT
    (30) class_func -> . KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (31) class_func -> . KEYWORD_def fname arguments class_method_stmts opt_terms KEYWORD_end
    (32) class_func -> . KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end

    DELIM           reduce using rule 183 (none -> .)
    newline         reduce using rule 183 (none -> .)
    KEYWORD_end     reduce using rule 183 (none -> .)
    SIGIL_DOUBLE_AT shift and go to state 163
    KEYWORD_def     shift and go to state 166

    none                           shift and go to state 161
    class_mlhs                     shift and go to state 162
    class_func                     shift and go to state 164
    class_stmts                    shift and go to state 165
    class_stmt                     shift and go to state 167

state 128

    (137) expr3 -> expr3 LOGICALOR expr4 .
    (139) expr4 -> expr4 . LOGICALAND expr5

    LOGICALOR       reduce using rule 137 (expr3 -> expr3 LOGICALOR expr4 .)
    DELIM           reduce using rule 137 (expr3 -> expr3 LOGICALOR expr4 .)
    newline         reduce using rule 137 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_end     reduce using rule 137 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_elsif   reduce using rule 137 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_else    reduce using rule 137 (expr3 -> expr3 LOGICALOR expr4 .)
    $end            reduce using rule 137 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_do      reduce using rule 137 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_then    reduce using rule 137 (expr3 -> expr3 LOGICALOR expr4 .)
    CLOSE_PAREN     reduce using rule 137 (expr3 -> expr3 LOGICALOR expr4 .)
    LOGICALAND      shift and go to state 91


state 129

    (142) expr5 -> expr6 NOTEQUAL expr6 .

    LOGICALAND      reduce using rule 142 (expr5 -> expr6 NOTEQUAL expr6 .)
    LOGICALOR       reduce using rule 142 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_do      reduce using rule 142 (expr5 -> expr6 NOTEQUAL expr6 .)
    newline         reduce using rule 142 (expr5 -> expr6 NOTEQUAL expr6 .)
    DELIM           reduce using rule 142 (expr5 -> expr6 NOTEQUAL expr6 .)
    $end            reduce using rule 142 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_end     reduce using rule 142 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_elsif   reduce using rule 142 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_else    reduce using rule 142 (expr5 -> expr6 NOTEQUAL expr6 .)
    CLOSE_PAREN     reduce using rule 142 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_then    reduce using rule 142 (expr5 -> expr6 NOTEQUAL expr6 .)


state 130

    (141) expr5 -> expr6 DOUBLEEQUAL expr6 .

    LOGICALAND      reduce using rule 141 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    LOGICALOR       reduce using rule 141 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_do      reduce using rule 141 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    newline         reduce using rule 141 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    DELIM           reduce using rule 141 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    $end            reduce using rule 141 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_end     reduce using rule 141 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_elsif   reduce using rule 141 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_else    reduce using rule 141 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    CLOSE_PAREN     reduce using rule 141 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_then    reduce using rule 141 (expr5 -> expr6 DOUBLEEQUAL expr6 .)


state 131

    (139) expr4 -> expr4 LOGICALAND expr5 .

    LOGICALAND      reduce using rule 139 (expr4 -> expr4 LOGICALAND expr5 .)
    LOGICALOR       reduce using rule 139 (expr4 -> expr4 LOGICALAND expr5 .)
    DELIM           reduce using rule 139 (expr4 -> expr4 LOGICALAND expr5 .)
    newline         reduce using rule 139 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_end     reduce using rule 139 (expr4 -> expr4 LOGICALAND expr5 .)
    $end            reduce using rule 139 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_elsif   reduce using rule 139 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_else    reduce using rule 139 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_then    reduce using rule 139 (expr4 -> expr4 LOGICALAND expr5 .)
    CLOSE_PAREN     reduce using rule 139 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_do      reduce using rule 139 (expr4 -> expr4 LOGICALAND expr5 .)


state 132

    (153) expr8 -> expr8 BITAND expr9 .
    (155) expr9 -> expr9 . SHIFTL expr10
    (156) expr9 -> expr9 . SHIFTR expr10

    BITAND          reduce using rule 153 (expr8 -> expr8 BITAND expr9 .)
    BITXOR          reduce using rule 153 (expr8 -> expr8 BITAND expr9 .)
    PIPE            reduce using rule 153 (expr8 -> expr8 BITAND expr9 .)
    DOUBLEEQUAL     reduce using rule 153 (expr8 -> expr8 BITAND expr9 .)
    NOTEQUAL        reduce using rule 153 (expr8 -> expr8 BITAND expr9 .)
    LOGICALAND      reduce using rule 153 (expr8 -> expr8 BITAND expr9 .)
    LOGICALOR       reduce using rule 153 (expr8 -> expr8 BITAND expr9 .)
    DELIM           reduce using rule 153 (expr8 -> expr8 BITAND expr9 .)
    newline         reduce using rule 153 (expr8 -> expr8 BITAND expr9 .)
    $end            reduce using rule 153 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_then    reduce using rule 153 (expr8 -> expr8 BITAND expr9 .)
    CLOSE_PAREN     reduce using rule 153 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_end     reduce using rule 153 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_elsif   reduce using rule 153 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_else    reduce using rule 153 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_do      reduce using rule 153 (expr8 -> expr8 BITAND expr9 .)
    LESSEQUAL       reduce using rule 153 (expr8 -> expr8 BITAND expr9 .)
    LESS            reduce using rule 153 (expr8 -> expr8 BITAND expr9 .)
    GREATER         reduce using rule 153 (expr8 -> expr8 BITAND expr9 .)
    GREATEREQUAL    reduce using rule 153 (expr8 -> expr8 BITAND expr9 .)
    CLOSE_BRACKET   reduce using rule 153 (expr8 -> expr8 BITAND expr9 .)
    SHIFTL          shift and go to state 94
    SHIFTR          shift and go to state 93


state 133

    (156) expr9 -> expr9 SHIFTR expr10 .
    (158) expr10 -> expr10 . PLUS expr11
    (159) expr10 -> expr10 . MINUS expr11

    SHIFTL          reduce using rule 156 (expr9 -> expr9 SHIFTR expr10 .)
    SHIFTR          reduce using rule 156 (expr9 -> expr9 SHIFTR expr10 .)
    BITAND          reduce using rule 156 (expr9 -> expr9 SHIFTR expr10 .)
    LESSEQUAL       reduce using rule 156 (expr9 -> expr9 SHIFTR expr10 .)
    LESS            reduce using rule 156 (expr9 -> expr9 SHIFTR expr10 .)
    GREATER         reduce using rule 156 (expr9 -> expr9 SHIFTR expr10 .)
    GREATEREQUAL    reduce using rule 156 (expr9 -> expr9 SHIFTR expr10 .)
    BITXOR          reduce using rule 156 (expr9 -> expr9 SHIFTR expr10 .)
    PIPE            reduce using rule 156 (expr9 -> expr9 SHIFTR expr10 .)
    DOUBLEEQUAL     reduce using rule 156 (expr9 -> expr9 SHIFTR expr10 .)
    NOTEQUAL        reduce using rule 156 (expr9 -> expr9 SHIFTR expr10 .)
    LOGICALAND      reduce using rule 156 (expr9 -> expr9 SHIFTR expr10 .)
    LOGICALOR       reduce using rule 156 (expr9 -> expr9 SHIFTR expr10 .)
    DELIM           reduce using rule 156 (expr9 -> expr9 SHIFTR expr10 .)
    newline         reduce using rule 156 (expr9 -> expr9 SHIFTR expr10 .)
    $end            reduce using rule 156 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_then    reduce using rule 156 (expr9 -> expr9 SHIFTR expr10 .)
    CLOSE_PAREN     reduce using rule 156 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_end     reduce using rule 156 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_elsif   reduce using rule 156 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_else    reduce using rule 156 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_do      reduce using rule 156 (expr9 -> expr9 SHIFTR expr10 .)
    CLOSE_BRACKET   reduce using rule 156 (expr9 -> expr9 SHIFTR expr10 .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56


state 134

    (155) expr9 -> expr9 SHIFTL expr10 .
    (158) expr10 -> expr10 . PLUS expr11
    (159) expr10 -> expr10 . MINUS expr11

    SHIFTL          reduce using rule 155 (expr9 -> expr9 SHIFTL expr10 .)
    SHIFTR          reduce using rule 155 (expr9 -> expr9 SHIFTL expr10 .)
    BITAND          reduce using rule 155 (expr9 -> expr9 SHIFTL expr10 .)
    LESSEQUAL       reduce using rule 155 (expr9 -> expr9 SHIFTL expr10 .)
    LESS            reduce using rule 155 (expr9 -> expr9 SHIFTL expr10 .)
    GREATER         reduce using rule 155 (expr9 -> expr9 SHIFTL expr10 .)
    GREATEREQUAL    reduce using rule 155 (expr9 -> expr9 SHIFTL expr10 .)
    BITXOR          reduce using rule 155 (expr9 -> expr9 SHIFTL expr10 .)
    PIPE            reduce using rule 155 (expr9 -> expr9 SHIFTL expr10 .)
    DOUBLEEQUAL     reduce using rule 155 (expr9 -> expr9 SHIFTL expr10 .)
    NOTEQUAL        reduce using rule 155 (expr9 -> expr9 SHIFTL expr10 .)
    LOGICALAND      reduce using rule 155 (expr9 -> expr9 SHIFTL expr10 .)
    LOGICALOR       reduce using rule 155 (expr9 -> expr9 SHIFTL expr10 .)
    DELIM           reduce using rule 155 (expr9 -> expr9 SHIFTL expr10 .)
    newline         reduce using rule 155 (expr9 -> expr9 SHIFTL expr10 .)
    $end            reduce using rule 155 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_then    reduce using rule 155 (expr9 -> expr9 SHIFTL expr10 .)
    CLOSE_PAREN     reduce using rule 155 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_end     reduce using rule 155 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_elsif   reduce using rule 155 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_else    reduce using rule 155 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_do      reduce using rule 155 (expr9 -> expr9 SHIFTL expr10 .)
    CLOSE_BRACKET   reduce using rule 155 (expr9 -> expr9 SHIFTL expr10 .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56


state 135

    (89) top_stmt -> KEYWORD_for VARIABLES KEYWORD_in . for_range opt_do M_10 gen_stmts opt_terms KEYWORD_end M_11
    (117) for_range -> . for_range_variables DOUBLEDOT for_range_variables
    (118) for_range_variables -> . INT_CONSTANTS
    (119) for_range_variables -> . VARIABLES
    (120) for_range_variables -> . CONSTANTS

    INT_CONSTANTS   shift and go to state 168
    VARIABLES       shift and go to state 169
    CONSTANTS       shift and go to state 171

    for_range                      shift and go to state 170
    for_range_variables            shift and go to state 172

state 136

    (83) primary -> CONSTANTS .

    COMMA           reduce using rule 83 (primary -> CONSTANTS .)
    CLOSE_PAREN     reduce using rule 83 (primary -> CONSTANTS .)
    DELIM           reduce using rule 83 (primary -> CONSTANTS .)
    newline         reduce using rule 83 (primary -> CONSTANTS .)
    KEYWORD_end     reduce using rule 83 (primary -> CONSTANTS .)


state 137

    (69) call_arg -> none .

    CLOSE_PAREN     reduce using rule 69 (call_arg -> none .)


state 138

    (82) primary -> BOOLEAN_CONSTANTS .

    COMMA           reduce using rule 82 (primary -> BOOLEAN_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 82 (primary -> BOOLEAN_CONSTANTS .)
    DELIM           reduce using rule 82 (primary -> BOOLEAN_CONSTANTS .)
    newline         reduce using rule 82 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_end     reduce using rule 82 (primary -> BOOLEAN_CONSTANTS .)


state 139

    (81) primary -> INT_CONSTANTS .

    COMMA           reduce using rule 81 (primary -> INT_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 81 (primary -> INT_CONSTANTS .)
    DELIM           reduce using rule 81 (primary -> INT_CONSTANTS .)
    newline         reduce using rule 81 (primary -> INT_CONSTANTS .)
    KEYWORD_end     reduce using rule 81 (primary -> INT_CONSTANTS .)


state 140

    (84) primary -> VARIABLES .
    (171) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET

    COMMA           reduce using rule 84 (primary -> VARIABLES .)
    CLOSE_PAREN     reduce using rule 84 (primary -> VARIABLES .)
    DELIM           reduce using rule 84 (primary -> VARIABLES .)
    newline         reduce using rule 84 (primary -> VARIABLES .)
    KEYWORD_end     reduce using rule 84 (primary -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 74


state 141

    (67) call_arg -> primary . M_16 COMMA call_arg
    (68) call_arg -> primary . M_16
    (70) M_16 -> .

    COMMA           reduce using rule 70 (M_16 -> .)
    CLOSE_PAREN     reduce using rule 70 (M_16 -> .)

    M_16                           shift and go to state 173

state 142

    (62) func_call_stmt -> fname2 OPEN_PAREN call_arg . CLOSE_PAREN M_17

    CLOSE_PAREN     shift and go to state 174


state 143

    (85) primary -> array .

    COMMA           reduce using rule 85 (primary -> array .)
    CLOSE_PAREN     reduce using rule 85 (primary -> array .)
    DELIM           reduce using rule 85 (primary -> array .)
    newline         reduce using rule 85 (primary -> array .)
    KEYWORD_end     reduce using rule 85 (primary -> array .)


state 144

    (11) statement -> CONSTANTS DOT KEYWORD_new . OPEN_PAREN arguments CLOSE_PAREN
    (12) statement -> CONSTANTS DOT KEYWORD_new . OPEN_PAREN CLOSE_PAREN
    (13) statement -> CONSTANTS DOT KEYWORD_new . arguments
    (54) arguments -> . VARIABLES M_12 COMMA arguments
    (55) arguments -> . CONSTANTS M_12 COMMA arguments
    (56) arguments -> . VARIABLES M_12
    (57) arguments -> . CONSTANTS M_12

    OPEN_PAREN      shift and go to state 175
    VARIABLES       shift and go to state 150
    CONSTANTS       shift and go to state 149

    arguments                      shift and go to state 176

state 145

    (63) func_call_stmt -> mlhs EQUAL fname2 OPEN_PAREN . call_arg CLOSE_PAREN M_17
    (67) call_arg -> . primary M_16 COMMA call_arg
    (68) call_arg -> . primary M_16
    (69) call_arg -> . none
    (81) primary -> . INT_CONSTANTS
    (82) primary -> . BOOLEAN_CONSTANTS
    (83) primary -> . CONSTANTS
    (84) primary -> . VARIABLES
    (85) primary -> . array
    (183) none -> .
    (171) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET

    INT_CONSTANTS   shift and go to state 139
    BOOLEAN_CONSTANTS shift and go to state 138
    CONSTANTS       shift and go to state 136
    VARIABLES       shift and go to state 140
    CLOSE_PAREN     reduce using rule 183 (none -> .)

    none                           shift and go to state 137
    primary                        shift and go to state 141
    call_arg                       shift and go to state 177
    array                          shift and go to state 143

state 146

    (116) opt_do -> newline .

    KEYWORD_if      reduce using rule 116 (opt_do -> newline .)
    KEYWORD_for     reduce using rule 116 (opt_do -> newline .)
    KEYWORD_puts    reduce using rule 116 (opt_do -> newline .)
    KEYWORD_break   reduce using rule 116 (opt_do -> newline .)
    KEYWORD_exit    reduce using rule 116 (opt_do -> newline .)
    VARIABLES       reduce using rule 116 (opt_do -> newline .)
    CONSTANTS       reduce using rule 116 (opt_do -> newline .)
    BOOLEAN_CONSTANTS reduce using rule 116 (opt_do -> newline .)
    OPEN_PAREN      reduce using rule 116 (opt_do -> newline .)
    PLUS            reduce using rule 116 (opt_do -> newline .)
    MINUS           reduce using rule 116 (opt_do -> newline .)
    BITNOT          reduce using rule 116 (opt_do -> newline .)
    BITCOMP         reduce using rule 116 (opt_do -> newline .)
    DELIM           reduce using rule 116 (opt_do -> newline .)
    newline         reduce using rule 116 (opt_do -> newline .)
    KEYWORD_end     reduce using rule 116 (opt_do -> newline .)
    KEYWORD_while   reduce using rule 116 (opt_do -> newline .)
    INT_CONSTANTS   reduce using rule 116 (opt_do -> newline .)
    FLOAT_CONSTANTS reduce using rule 116 (opt_do -> newline .)


state 147

    (115) opt_do -> KEYWORD_do .

    KEYWORD_if      reduce using rule 115 (opt_do -> KEYWORD_do .)
    KEYWORD_for     reduce using rule 115 (opt_do -> KEYWORD_do .)
    KEYWORD_puts    reduce using rule 115 (opt_do -> KEYWORD_do .)
    KEYWORD_break   reduce using rule 115 (opt_do -> KEYWORD_do .)
    KEYWORD_exit    reduce using rule 115 (opt_do -> KEYWORD_do .)
    VARIABLES       reduce using rule 115 (opt_do -> KEYWORD_do .)
    CONSTANTS       reduce using rule 115 (opt_do -> KEYWORD_do .)
    BOOLEAN_CONSTANTS reduce using rule 115 (opt_do -> KEYWORD_do .)
    OPEN_PAREN      reduce using rule 115 (opt_do -> KEYWORD_do .)
    PLUS            reduce using rule 115 (opt_do -> KEYWORD_do .)
    MINUS           reduce using rule 115 (opt_do -> KEYWORD_do .)
    BITNOT          reduce using rule 115 (opt_do -> KEYWORD_do .)
    BITCOMP         reduce using rule 115 (opt_do -> KEYWORD_do .)
    DELIM           reduce using rule 115 (opt_do -> KEYWORD_do .)
    newline         reduce using rule 115 (opt_do -> KEYWORD_do .)
    KEYWORD_end     reduce using rule 115 (opt_do -> KEYWORD_do .)
    KEYWORD_while   reduce using rule 115 (opt_do -> KEYWORD_do .)
    INT_CONSTANTS   reduce using rule 115 (opt_do -> KEYWORD_do .)
    FLOAT_CONSTANTS reduce using rule 115 (opt_do -> KEYWORD_do .)


state 148

    (88) top_stmt -> M_7 KEYWORD_while expr3 opt_do . M_8 gen_stmts opt_terms KEYWORD_end M_9
    (94) M_8 -> .

    KEYWORD_if      reduce using rule 94 (M_8 -> .)
    KEYWORD_for     reduce using rule 94 (M_8 -> .)
    KEYWORD_puts    reduce using rule 94 (M_8 -> .)
    KEYWORD_break   reduce using rule 94 (M_8 -> .)
    KEYWORD_exit    reduce using rule 94 (M_8 -> .)
    VARIABLES       reduce using rule 94 (M_8 -> .)
    CONSTANTS       reduce using rule 94 (M_8 -> .)
    BOOLEAN_CONSTANTS reduce using rule 94 (M_8 -> .)
    OPEN_PAREN      reduce using rule 94 (M_8 -> .)
    PLUS            reduce using rule 94 (M_8 -> .)
    MINUS           reduce using rule 94 (M_8 -> .)
    BITNOT          reduce using rule 94 (M_8 -> .)
    BITCOMP         reduce using rule 94 (M_8 -> .)
    DELIM           reduce using rule 94 (M_8 -> .)
    newline         reduce using rule 94 (M_8 -> .)
    KEYWORD_end     reduce using rule 94 (M_8 -> .)
    KEYWORD_while   reduce using rule 94 (M_8 -> .)
    INT_CONSTANTS   reduce using rule 94 (M_8 -> .)
    FLOAT_CONSTANTS reduce using rule 94 (M_8 -> .)

    M_8                            shift and go to state 178

state 149

    (55) arguments -> CONSTANTS . M_12 COMMA arguments
    (57) arguments -> CONSTANTS . M_12
    (58) M_12 -> .

    COMMA           reduce using rule 58 (M_12 -> .)
    CLOSE_PAREN     reduce using rule 58 (M_12 -> .)
    DELIM           reduce using rule 58 (M_12 -> .)
    newline         reduce using rule 58 (M_12 -> .)
    $end            reduce using rule 58 (M_12 -> .)
    KEYWORD_return  reduce using rule 58 (M_12 -> .)
    SIGIL_AT        reduce using rule 58 (M_12 -> .)
    SIGIL_DOUBLE_AT reduce using rule 58 (M_12 -> .)
    KEYWORD_puts    reduce using rule 58 (M_12 -> .)
    KEYWORD_end     reduce using rule 58 (M_12 -> .)

    M_12                           shift and go to state 179

state 150

    (54) arguments -> VARIABLES . M_12 COMMA arguments
    (56) arguments -> VARIABLES . M_12
    (58) M_12 -> .

    COMMA           reduce using rule 58 (M_12 -> .)
    CLOSE_PAREN     reduce using rule 58 (M_12 -> .)
    DELIM           reduce using rule 58 (M_12 -> .)
    newline         reduce using rule 58 (M_12 -> .)
    $end            reduce using rule 58 (M_12 -> .)
    KEYWORD_return  reduce using rule 58 (M_12 -> .)
    SIGIL_AT        reduce using rule 58 (M_12 -> .)
    SIGIL_DOUBLE_AT reduce using rule 58 (M_12 -> .)
    KEYWORD_puts    reduce using rule 58 (M_12 -> .)
    KEYWORD_end     reduce using rule 58 (M_12 -> .)

    M_12                           shift and go to state 180

state 151

    (50) func_defn -> KEYWORD_def fname OPEN_PAREN arguments . M_13 CLOSE_PAREN func_stmts opt_terms KEYWORD_end M_14
    (59) M_13 -> .

    CLOSE_PAREN     reduce using rule 59 (M_13 -> .)

    M_13                           shift and go to state 181

state 152

    (51) func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN . func_stmts opt_terms KEYWORD_end M_15
    (75) func_stmts -> . func_stmt
    (76) func_stmts -> . func_stmts terms func_stmt
    (77) func_stmts -> . none
    (78) func_stmt -> . top_stmt
    (79) func_stmt -> . KEYWORD_return func_ret_arg
    (183) none -> .
    (86) top_stmt -> . stmt
    (87) top_stmt -> . KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6
    (88) top_stmt -> . M_7 KEYWORD_while expr3 opt_do M_8 gen_stmts opt_terms KEYWORD_end M_9
    (89) top_stmt -> . KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts opt_terms KEYWORD_end M_11
    (101) stmt -> . expr
    (102) stmt -> . expr1
    (103) stmt -> . puts_stmt
    (104) stmt -> . loop_stmt
    (105) stmt -> . exit_stmt
    (106) stmt -> . func_call_stmt
    (93) M_7 -> .
    (121) expr -> . mlhs EQUAL mrhs
    (136) expr1 -> . expr3
    (73) puts_stmt -> . KEYWORD_puts mrhs
    (74) puts_stmt -> . KEYWORD_puts expr
    (71) loop_stmt -> . KEYWORD_break
    (72) exit_stmt -> . KEYWORD_exit
    (62) func_call_stmt -> . fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (63) func_call_stmt -> . mlhs EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (122) mlhs -> . VARIABLES
    (123) mlhs -> . CONSTANTS
    (124) mlhs -> . array
    (137) expr3 -> . expr3 LOGICALOR expr4
    (138) expr3 -> . expr4
    (65) fname2 -> . VARIABLES
    (66) fname2 -> . CONSTANTS
    (171) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (139) expr4 -> . expr4 LOGICALAND expr5
    (140) expr4 -> . expr5
    (141) expr5 -> . expr6 DOUBLEEQUAL expr6
    (142) expr5 -> . expr6 NOTEQUAL expr6
    (143) expr5 -> . expr6
    (144) expr6 -> . expr7 LESSEQUAL expr7
    (145) expr6 -> . expr7 LESS expr7
    (146) expr6 -> . expr7 GREATER expr7
    (147) expr6 -> . expr7 GREATEREQUAL expr7
    (148) expr6 -> . expr7
    (149) expr6 -> . BOOLEAN_CONSTANTS
    (150) expr7 -> . expr7 BITXOR expr8
    (151) expr7 -> . expr7 PIPE expr8
    (152) expr7 -> . expr8
    (153) expr8 -> . expr8 BITAND expr9
    (154) expr8 -> . expr9
    (155) expr9 -> . expr9 SHIFTL expr10
    (156) expr9 -> . expr9 SHIFTR expr10
    (157) expr9 -> . expr10
    (158) expr10 -> . expr10 PLUS expr11
    (159) expr10 -> . expr10 MINUS expr11
    (160) expr10 -> . expr11
    (161) expr11 -> . expr11 MULTIPLY expr13
    (162) expr11 -> . expr11 DIV expr13
    (163) expr11 -> . expr11 MOD expr13
    (164) expr11 -> . expr13
    (165) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (166) expr13 -> . uexpr INT_CONSTANTS
    (167) expr13 -> . uexpr FLOAT_CONSTANTS
    (168) expr13 -> . CONSTANTS
    (169) expr13 -> . VARIABLES
    (170) expr13 -> . array
    (172) uexpr -> . none
    (173) uexpr -> . PLUS
    (174) uexpr -> . MINUS
    (175) uexpr -> . BITNOT
    (176) uexpr -> . BITCOMP

    KEYWORD_return  shift and go to state 184
    DELIM           reduce using rule 183 (none -> .)
    newline         reduce using rule 183 (none -> .)
    KEYWORD_end     reduce using rule 183 (none -> .)
    INT_CONSTANTS   reduce using rule 183 (none -> .)
    FLOAT_CONSTANTS reduce using rule 183 (none -> .)
    KEYWORD_if      shift and go to state 20
    KEYWORD_for     shift and go to state 43
    KEYWORD_while   reduce using rule 93 (M_7 -> .)
    KEYWORD_puts    shift and go to state 26
    KEYWORD_break   shift and go to state 40
    KEYWORD_exit    shift and go to state 17
    VARIABLES       shift and go to state 186
    CONSTANTS       shift and go to state 185
    BOOLEAN_CONSTANTS shift and go to state 8
    OPEN_PAREN      shift and go to state 23
    PLUS            shift and go to state 4
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 32
    BITCOMP         shift and go to state 22

    func_stmt                      shift and go to state 188
    mlhs                           shift and go to state 1
    fname2                         shift and go to state 44
    func_stmts                     shift and go to state 182
    expr11                         shift and go to state 11
    expr13                         shift and go to state 12
    array                          shift and go to state 19
    expr3                          shift and go to state 33
    expr1                          shift and go to state 34
    expr6                          shift and go to state 35
    expr7                          shift and go to state 5
    expr5                          shift and go to state 37
    func_call_stmt                 shift and go to state 25
    expr8                          shift and go to state 38
    expr9                          shift and go to state 39
    expr4                          shift and go to state 36
    puts_stmt                      shift and go to state 13
    exit_stmt                      shift and go to state 41
    stmt                           shift and go to state 14
    loop_stmt                      shift and go to state 6
    M_7                            shift and go to state 15
    uexpr                          shift and go to state 7
    none                           shift and go to state 187
    expr                           shift and go to state 28
    expr10                         shift and go to state 10
    top_stmt                       shift and go to state 183

state 153

    (87) top_stmt -> KEYWORD_if expr3 opt_then M_1 . gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6
    (98) gen_stmts -> . top_stmt
    (99) gen_stmts -> . gen_stmts terms top_stmt
    (100) gen_stmts -> . none
    (86) top_stmt -> . stmt
    (87) top_stmt -> . KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6
    (88) top_stmt -> . M_7 KEYWORD_while expr3 opt_do M_8 gen_stmts opt_terms KEYWORD_end M_9
    (89) top_stmt -> . KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts opt_terms KEYWORD_end M_11
    (183) none -> .
    (101) stmt -> . expr
    (102) stmt -> . expr1
    (103) stmt -> . puts_stmt
    (104) stmt -> . loop_stmt
    (105) stmt -> . exit_stmt
    (106) stmt -> . func_call_stmt
    (93) M_7 -> .
    (121) expr -> . mlhs EQUAL mrhs
    (136) expr1 -> . expr3
    (73) puts_stmt -> . KEYWORD_puts mrhs
    (74) puts_stmt -> . KEYWORD_puts expr
    (71) loop_stmt -> . KEYWORD_break
    (72) exit_stmt -> . KEYWORD_exit
    (62) func_call_stmt -> . fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (63) func_call_stmt -> . mlhs EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (122) mlhs -> . VARIABLES
    (123) mlhs -> . CONSTANTS
    (124) mlhs -> . array
    (137) expr3 -> . expr3 LOGICALOR expr4
    (138) expr3 -> . expr4
    (65) fname2 -> . VARIABLES
    (66) fname2 -> . CONSTANTS
    (171) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (139) expr4 -> . expr4 LOGICALAND expr5
    (140) expr4 -> . expr5
    (141) expr5 -> . expr6 DOUBLEEQUAL expr6
    (142) expr5 -> . expr6 NOTEQUAL expr6
    (143) expr5 -> . expr6
    (144) expr6 -> . expr7 LESSEQUAL expr7
    (145) expr6 -> . expr7 LESS expr7
    (146) expr6 -> . expr7 GREATER expr7
    (147) expr6 -> . expr7 GREATEREQUAL expr7
    (148) expr6 -> . expr7
    (149) expr6 -> . BOOLEAN_CONSTANTS
    (150) expr7 -> . expr7 BITXOR expr8
    (151) expr7 -> . expr7 PIPE expr8
    (152) expr7 -> . expr8
    (153) expr8 -> . expr8 BITAND expr9
    (154) expr8 -> . expr9
    (155) expr9 -> . expr9 SHIFTL expr10
    (156) expr9 -> . expr9 SHIFTR expr10
    (157) expr9 -> . expr10
    (158) expr10 -> . expr10 PLUS expr11
    (159) expr10 -> . expr10 MINUS expr11
    (160) expr10 -> . expr11
    (161) expr11 -> . expr11 MULTIPLY expr13
    (162) expr11 -> . expr11 DIV expr13
    (163) expr11 -> . expr11 MOD expr13
    (164) expr11 -> . expr13
    (165) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (166) expr13 -> . uexpr INT_CONSTANTS
    (167) expr13 -> . uexpr FLOAT_CONSTANTS
    (168) expr13 -> . CONSTANTS
    (169) expr13 -> . VARIABLES
    (170) expr13 -> . array
    (172) uexpr -> . none
    (173) uexpr -> . PLUS
    (174) uexpr -> . MINUS
    (175) uexpr -> . BITNOT
    (176) uexpr -> . BITCOMP

    KEYWORD_if      shift and go to state 20
    KEYWORD_for     shift and go to state 43
    DELIM           reduce using rule 183 (none -> .)
    newline         reduce using rule 183 (none -> .)
    KEYWORD_elsif   reduce using rule 183 (none -> .)
    KEYWORD_else    reduce using rule 183 (none -> .)
    KEYWORD_end     reduce using rule 183 (none -> .)
    INT_CONSTANTS   reduce using rule 183 (none -> .)
    FLOAT_CONSTANTS reduce using rule 183 (none -> .)
    KEYWORD_while   reduce using rule 93 (M_7 -> .)
    KEYWORD_puts    shift and go to state 26
    KEYWORD_break   shift and go to state 40
    KEYWORD_exit    shift and go to state 17
    VARIABLES       shift and go to state 186
    CONSTANTS       shift and go to state 185
    BOOLEAN_CONSTANTS shift and go to state 8
    OPEN_PAREN      shift and go to state 23
    PLUS            shift and go to state 4
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 32
    BITCOMP         shift and go to state 22

    mlhs                           shift and go to state 1
    fname2                         shift and go to state 44
    expr10                         shift and go to state 10
    expr11                         shift and go to state 11
    expr13                         shift and go to state 12
    array                          shift and go to state 19
    expr3                          shift and go to state 33
    expr1                          shift and go to state 34
    expr6                          shift and go to state 35
    expr7                          shift and go to state 5
    puts_stmt                      shift and go to state 13
    expr5                          shift and go to state 37
    func_call_stmt                 shift and go to state 25
    expr8                          shift and go to state 38
    expr9                          shift and go to state 39
    expr4                          shift and go to state 36
    exit_stmt                      shift and go to state 41
    stmt                           shift and go to state 14
    loop_stmt                      shift and go to state 6
    M_7                            shift and go to state 15
    uexpr                          shift and go to state 7
    none                           shift and go to state 189
    gen_stmts                      shift and go to state 190
    expr                           shift and go to state 28
    top_stmt                       shift and go to state 191

state 154

    (171) array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .

    MULTIPLY        reduce using rule 171 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    DIV             reduce using rule 171 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    MOD             reduce using rule 171 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    PLUS            reduce using rule 171 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    MINUS           reduce using rule 171 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    SHIFTL          reduce using rule 171 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    SHIFTR          reduce using rule 171 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    BITAND          reduce using rule 171 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    LESSEQUAL       reduce using rule 171 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    LESS            reduce using rule 171 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    GREATER         reduce using rule 171 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    GREATEREQUAL    reduce using rule 171 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    BITXOR          reduce using rule 171 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    PIPE            reduce using rule 171 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    DOUBLEEQUAL     reduce using rule 171 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    NOTEQUAL        reduce using rule 171 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    LOGICALAND      reduce using rule 171 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    LOGICALOR       reduce using rule 171 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_do      reduce using rule 171 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    newline         reduce using rule 171 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    DELIM           reduce using rule 171 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    $end            reduce using rule 171 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_then    reduce using rule 171 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    CLOSE_PAREN     reduce using rule 171 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_end     reduce using rule 171 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_elsif   reduce using rule 171 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_else    reduce using rule 171 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 171 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    EQUAL           reduce using rule 171 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    COMMA           reduce using rule 171 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)


state 155

    (8) statement -> VARIABLES DOT VARIABLES OPEN_PAREN . arguments CLOSE_PAREN
    (9) statement -> VARIABLES DOT VARIABLES OPEN_PAREN . CLOSE_PAREN
    (54) arguments -> . VARIABLES M_12 COMMA arguments
    (55) arguments -> . CONSTANTS M_12 COMMA arguments
    (56) arguments -> . VARIABLES M_12
    (57) arguments -> . CONSTANTS M_12

    CLOSE_PAREN     shift and go to state 193
    VARIABLES       shift and go to state 150
    CONSTANTS       shift and go to state 149

    arguments                      shift and go to state 192

state 156

    (10) statement -> VARIABLES DOT VARIABLES arguments .

    DELIM           reduce using rule 10 (statement -> VARIABLES DOT VARIABLES arguments .)
    newline         reduce using rule 10 (statement -> VARIABLES DOT VARIABLES arguments .)
    $end            reduce using rule 10 (statement -> VARIABLES DOT VARIABLES arguments .)


state 157

    (129) mrhs -> VARIABLES . DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (130) mrhs -> VARIABLES . DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (131) mrhs -> VARIABLES . DOT VARIABLES
    (169) expr13 -> VARIABLES .
    (171) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET

    DOT             shift and go to state 124
    MULTIPLY        reduce using rule 169 (expr13 -> VARIABLES .)
    DIV             reduce using rule 169 (expr13 -> VARIABLES .)
    MOD             reduce using rule 169 (expr13 -> VARIABLES .)
    PLUS            reduce using rule 169 (expr13 -> VARIABLES .)
    MINUS           reduce using rule 169 (expr13 -> VARIABLES .)
    SHIFTL          reduce using rule 169 (expr13 -> VARIABLES .)
    SHIFTR          reduce using rule 169 (expr13 -> VARIABLES .)
    BITAND          reduce using rule 169 (expr13 -> VARIABLES .)
    LESSEQUAL       reduce using rule 169 (expr13 -> VARIABLES .)
    LESS            reduce using rule 169 (expr13 -> VARIABLES .)
    GREATER         reduce using rule 169 (expr13 -> VARIABLES .)
    GREATEREQUAL    reduce using rule 169 (expr13 -> VARIABLES .)
    BITXOR          reduce using rule 169 (expr13 -> VARIABLES .)
    PIPE            reduce using rule 169 (expr13 -> VARIABLES .)
    DOUBLEEQUAL     reduce using rule 169 (expr13 -> VARIABLES .)
    NOTEQUAL        reduce using rule 169 (expr13 -> VARIABLES .)
    LOGICALAND      reduce using rule 169 (expr13 -> VARIABLES .)
    LOGICALOR       reduce using rule 169 (expr13 -> VARIABLES .)
    DELIM           reduce using rule 169 (expr13 -> VARIABLES .)
    newline         reduce using rule 169 (expr13 -> VARIABLES .)
    $end            reduce using rule 169 (expr13 -> VARIABLES .)
    KEYWORD_end     reduce using rule 169 (expr13 -> VARIABLES .)
    KEYWORD_elsif   reduce using rule 169 (expr13 -> VARIABLES .)
    KEYWORD_else    reduce using rule 169 (expr13 -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 74


state 158

    (132) mrhs -> CONSTANTS . DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (133) mrhs -> CONSTANTS . DOT KEYWORD_new
    (134) mrhs -> CONSTANTS . DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (168) expr13 -> CONSTANTS .

    DOT             shift and go to state 126
    MULTIPLY        reduce using rule 168 (expr13 -> CONSTANTS .)
    DIV             reduce using rule 168 (expr13 -> CONSTANTS .)
    MOD             reduce using rule 168 (expr13 -> CONSTANTS .)
    PLUS            reduce using rule 168 (expr13 -> CONSTANTS .)
    MINUS           reduce using rule 168 (expr13 -> CONSTANTS .)
    SHIFTL          reduce using rule 168 (expr13 -> CONSTANTS .)
    SHIFTR          reduce using rule 168 (expr13 -> CONSTANTS .)
    BITAND          reduce using rule 168 (expr13 -> CONSTANTS .)
    LESSEQUAL       reduce using rule 168 (expr13 -> CONSTANTS .)
    LESS            reduce using rule 168 (expr13 -> CONSTANTS .)
    GREATER         reduce using rule 168 (expr13 -> CONSTANTS .)
    GREATEREQUAL    reduce using rule 168 (expr13 -> CONSTANTS .)
    BITXOR          reduce using rule 168 (expr13 -> CONSTANTS .)
    PIPE            reduce using rule 168 (expr13 -> CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 168 (expr13 -> CONSTANTS .)
    NOTEQUAL        reduce using rule 168 (expr13 -> CONSTANTS .)
    LOGICALAND      reduce using rule 168 (expr13 -> CONSTANTS .)
    LOGICALOR       reduce using rule 168 (expr13 -> CONSTANTS .)
    DELIM           reduce using rule 168 (expr13 -> CONSTANTS .)
    newline         reduce using rule 168 (expr13 -> CONSTANTS .)
    $end            reduce using rule 168 (expr13 -> CONSTANTS .)
    KEYWORD_end     reduce using rule 168 (expr13 -> CONSTANTS .)
    KEYWORD_elsif   reduce using rule 168 (expr13 -> CONSTANTS .)
    KEYWORD_else    reduce using rule 168 (expr13 -> CONSTANTS .)


state 159

    (129) mrhs -> VARIABLES DOT VARIABLES . OPEN_PAREN arguments CLOSE_PAREN
    (130) mrhs -> VARIABLES DOT VARIABLES . OPEN_PAREN CLOSE_PAREN
    (131) mrhs -> VARIABLES DOT VARIABLES .

    OPEN_PAREN      shift and go to state 194
    DELIM           reduce using rule 131 (mrhs -> VARIABLES DOT VARIABLES .)
    newline         reduce using rule 131 (mrhs -> VARIABLES DOT VARIABLES .)
    $end            reduce using rule 131 (mrhs -> VARIABLES DOT VARIABLES .)
    KEYWORD_end     reduce using rule 131 (mrhs -> VARIABLES DOT VARIABLES .)
    KEYWORD_elsif   reduce using rule 131 (mrhs -> VARIABLES DOT VARIABLES .)
    KEYWORD_else    reduce using rule 131 (mrhs -> VARIABLES DOT VARIABLES .)


state 160

    (132) mrhs -> CONSTANTS DOT KEYWORD_new . OPEN_PAREN arguments CLOSE_PAREN
    (133) mrhs -> CONSTANTS DOT KEYWORD_new .
    (134) mrhs -> CONSTANTS DOT KEYWORD_new . OPEN_PAREN CLOSE_PAREN

    OPEN_PAREN      shift and go to state 195
    DELIM           reduce using rule 133 (mrhs -> CONSTANTS DOT KEYWORD_new .)
    newline         reduce using rule 133 (mrhs -> CONSTANTS DOT KEYWORD_new .)
    $end            reduce using rule 133 (mrhs -> CONSTANTS DOT KEYWORD_new .)
    KEYWORD_end     reduce using rule 133 (mrhs -> CONSTANTS DOT KEYWORD_new .)
    KEYWORD_elsif   reduce using rule 133 (mrhs -> CONSTANTS DOT KEYWORD_new .)
    KEYWORD_else    reduce using rule 133 (mrhs -> CONSTANTS DOT KEYWORD_new .)


state 161

    (17) class_stmts -> none .

    DELIM           reduce using rule 17 (class_stmts -> none .)
    newline         reduce using rule 17 (class_stmts -> none .)
    KEYWORD_end     reduce using rule 17 (class_stmts -> none .)


state 162

    (18) class_stmt -> class_mlhs . EQUAL class_mrhs
    (28) class_mlhs -> class_mlhs . terms SIGIL_DOUBLE_AT
    (179) terms -> . term
    (180) terms -> . terms term
    (181) term -> . DELIM
    (182) term -> . newline

    EQUAL           shift and go to state 197
    DELIM           shift and go to state 67
    newline         shift and go to state 66

    term                           shift and go to state 64
    terms                          shift and go to state 196

state 163

    (29) class_mlhs -> SIGIL_DOUBLE_AT .

    EQUAL           reduce using rule 29 (class_mlhs -> SIGIL_DOUBLE_AT .)
    DELIM           reduce using rule 29 (class_mlhs -> SIGIL_DOUBLE_AT .)
    newline         reduce using rule 29 (class_mlhs -> SIGIL_DOUBLE_AT .)


state 164

    (19) class_stmt -> class_func .

    DELIM           reduce using rule 19 (class_stmt -> class_func .)
    newline         reduce using rule 19 (class_stmt -> class_func .)
    KEYWORD_end     reduce using rule 19 (class_stmt -> class_func .)


state 165

    (14) class_defn -> KEYWORD_class CONSTANTS newline class_stmts . opt_terms KEYWORD_end
    (16) class_stmts -> class_stmts . terms class_stmt
    (177) opt_terms -> . none
    (178) opt_terms -> . terms
    (179) terms -> . term
    (180) terms -> . terms term
    (183) none -> .
    (181) term -> . DELIM
    (182) term -> . newline

    KEYWORD_end     reduce using rule 183 (none -> .)
    DELIM           shift and go to state 67
    newline         shift and go to state 66

    term                           shift and go to state 64
    terms                          shift and go to state 198
    none                           shift and go to state 68
    opt_terms                      shift and go to state 199

state 166

    (30) class_func -> KEYWORD_def . fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (31) class_func -> KEYWORD_def . fname arguments class_method_stmts opt_terms KEYWORD_end
    (32) class_func -> KEYWORD_def . fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (52) fname -> . VARIABLES
    (53) fname -> . CONSTANTS

    VARIABLES       shift and go to state 62
    CONSTANTS       shift and go to state 61

    fname                          shift and go to state 200

state 167

    (15) class_stmts -> class_stmt .

    DELIM           reduce using rule 15 (class_stmts -> class_stmt .)
    newline         reduce using rule 15 (class_stmts -> class_stmt .)
    KEYWORD_end     reduce using rule 15 (class_stmts -> class_stmt .)


state 168

    (118) for_range_variables -> INT_CONSTANTS .

    DOUBLEDOT       reduce using rule 118 (for_range_variables -> INT_CONSTANTS .)
    KEYWORD_do      reduce using rule 118 (for_range_variables -> INT_CONSTANTS .)
    newline         reduce using rule 118 (for_range_variables -> INT_CONSTANTS .)


state 169

    (119) for_range_variables -> VARIABLES .

    DOUBLEDOT       reduce using rule 119 (for_range_variables -> VARIABLES .)
    KEYWORD_do      reduce using rule 119 (for_range_variables -> VARIABLES .)
    newline         reduce using rule 119 (for_range_variables -> VARIABLES .)


state 170

    (89) top_stmt -> KEYWORD_for VARIABLES KEYWORD_in for_range . opt_do M_10 gen_stmts opt_terms KEYWORD_end M_11
    (115) opt_do -> . KEYWORD_do
    (116) opt_do -> . newline

    KEYWORD_do      shift and go to state 147
    newline         shift and go to state 146

    opt_do                         shift and go to state 201

state 171

    (120) for_range_variables -> CONSTANTS .

    DOUBLEDOT       reduce using rule 120 (for_range_variables -> CONSTANTS .)
    KEYWORD_do      reduce using rule 120 (for_range_variables -> CONSTANTS .)
    newline         reduce using rule 120 (for_range_variables -> CONSTANTS .)


state 172

    (117) for_range -> for_range_variables . DOUBLEDOT for_range_variables

    DOUBLEDOT       shift and go to state 202


state 173

    (67) call_arg -> primary M_16 . COMMA call_arg
    (68) call_arg -> primary M_16 .

    COMMA           shift and go to state 203
    CLOSE_PAREN     reduce using rule 68 (call_arg -> primary M_16 .)


state 174

    (62) func_call_stmt -> fname2 OPEN_PAREN call_arg CLOSE_PAREN . M_17
    (64) M_17 -> .

    DELIM           reduce using rule 64 (M_17 -> .)
    newline         reduce using rule 64 (M_17 -> .)
    $end            reduce using rule 64 (M_17 -> .)
    KEYWORD_end     reduce using rule 64 (M_17 -> .)
    KEYWORD_elsif   reduce using rule 64 (M_17 -> .)
    KEYWORD_else    reduce using rule 64 (M_17 -> .)

    M_17                           shift and go to state 204

state 175

    (11) statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN . arguments CLOSE_PAREN
    (12) statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN . CLOSE_PAREN
    (54) arguments -> . VARIABLES M_12 COMMA arguments
    (55) arguments -> . CONSTANTS M_12 COMMA arguments
    (56) arguments -> . VARIABLES M_12
    (57) arguments -> . CONSTANTS M_12

    CLOSE_PAREN     shift and go to state 206
    VARIABLES       shift and go to state 150
    CONSTANTS       shift and go to state 149

    arguments                      shift and go to state 205

state 176

    (13) statement -> CONSTANTS DOT KEYWORD_new arguments .

    DELIM           reduce using rule 13 (statement -> CONSTANTS DOT KEYWORD_new arguments .)
    newline         reduce using rule 13 (statement -> CONSTANTS DOT KEYWORD_new arguments .)
    $end            reduce using rule 13 (statement -> CONSTANTS DOT KEYWORD_new arguments .)


state 177

    (63) func_call_stmt -> mlhs EQUAL fname2 OPEN_PAREN call_arg . CLOSE_PAREN M_17

    CLOSE_PAREN     shift and go to state 207


state 178

    (88) top_stmt -> M_7 KEYWORD_while expr3 opt_do M_8 . gen_stmts opt_terms KEYWORD_end M_9
    (98) gen_stmts -> . top_stmt
    (99) gen_stmts -> . gen_stmts terms top_stmt
    (100) gen_stmts -> . none
    (86) top_stmt -> . stmt
    (87) top_stmt -> . KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6
    (88) top_stmt -> . M_7 KEYWORD_while expr3 opt_do M_8 gen_stmts opt_terms KEYWORD_end M_9
    (89) top_stmt -> . KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts opt_terms KEYWORD_end M_11
    (183) none -> .
    (101) stmt -> . expr
    (102) stmt -> . expr1
    (103) stmt -> . puts_stmt
    (104) stmt -> . loop_stmt
    (105) stmt -> . exit_stmt
    (106) stmt -> . func_call_stmt
    (93) M_7 -> .
    (121) expr -> . mlhs EQUAL mrhs
    (136) expr1 -> . expr3
    (73) puts_stmt -> . KEYWORD_puts mrhs
    (74) puts_stmt -> . KEYWORD_puts expr
    (71) loop_stmt -> . KEYWORD_break
    (72) exit_stmt -> . KEYWORD_exit
    (62) func_call_stmt -> . fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (63) func_call_stmt -> . mlhs EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (122) mlhs -> . VARIABLES
    (123) mlhs -> . CONSTANTS
    (124) mlhs -> . array
    (137) expr3 -> . expr3 LOGICALOR expr4
    (138) expr3 -> . expr4
    (65) fname2 -> . VARIABLES
    (66) fname2 -> . CONSTANTS
    (171) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (139) expr4 -> . expr4 LOGICALAND expr5
    (140) expr4 -> . expr5
    (141) expr5 -> . expr6 DOUBLEEQUAL expr6
    (142) expr5 -> . expr6 NOTEQUAL expr6
    (143) expr5 -> . expr6
    (144) expr6 -> . expr7 LESSEQUAL expr7
    (145) expr6 -> . expr7 LESS expr7
    (146) expr6 -> . expr7 GREATER expr7
    (147) expr6 -> . expr7 GREATEREQUAL expr7
    (148) expr6 -> . expr7
    (149) expr6 -> . BOOLEAN_CONSTANTS
    (150) expr7 -> . expr7 BITXOR expr8
    (151) expr7 -> . expr7 PIPE expr8
    (152) expr7 -> . expr8
    (153) expr8 -> . expr8 BITAND expr9
    (154) expr8 -> . expr9
    (155) expr9 -> . expr9 SHIFTL expr10
    (156) expr9 -> . expr9 SHIFTR expr10
    (157) expr9 -> . expr10
    (158) expr10 -> . expr10 PLUS expr11
    (159) expr10 -> . expr10 MINUS expr11
    (160) expr10 -> . expr11
    (161) expr11 -> . expr11 MULTIPLY expr13
    (162) expr11 -> . expr11 DIV expr13
    (163) expr11 -> . expr11 MOD expr13
    (164) expr11 -> . expr13
    (165) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (166) expr13 -> . uexpr INT_CONSTANTS
    (167) expr13 -> . uexpr FLOAT_CONSTANTS
    (168) expr13 -> . CONSTANTS
    (169) expr13 -> . VARIABLES
    (170) expr13 -> . array
    (172) uexpr -> . none
    (173) uexpr -> . PLUS
    (174) uexpr -> . MINUS
    (175) uexpr -> . BITNOT
    (176) uexpr -> . BITCOMP

    KEYWORD_if      shift and go to state 20
    KEYWORD_for     shift and go to state 43
    DELIM           reduce using rule 183 (none -> .)
    newline         reduce using rule 183 (none -> .)
    KEYWORD_end     reduce using rule 183 (none -> .)
    INT_CONSTANTS   reduce using rule 183 (none -> .)
    FLOAT_CONSTANTS reduce using rule 183 (none -> .)
    KEYWORD_while   reduce using rule 93 (M_7 -> .)
    KEYWORD_puts    shift and go to state 26
    KEYWORD_break   shift and go to state 40
    KEYWORD_exit    shift and go to state 17
    VARIABLES       shift and go to state 186
    CONSTANTS       shift and go to state 185
    BOOLEAN_CONSTANTS shift and go to state 8
    OPEN_PAREN      shift and go to state 23
    PLUS            shift and go to state 4
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 32
    BITCOMP         shift and go to state 22

    mlhs                           shift and go to state 1
    fname2                         shift and go to state 44
    expr10                         shift and go to state 10
    expr11                         shift and go to state 11
    expr13                         shift and go to state 12
    array                          shift and go to state 19
    expr3                          shift and go to state 33
    expr1                          shift and go to state 34
    expr6                          shift and go to state 35
    expr7                          shift and go to state 5
    puts_stmt                      shift and go to state 13
    expr5                          shift and go to state 37
    func_call_stmt                 shift and go to state 25
    expr8                          shift and go to state 38
    expr9                          shift and go to state 39
    expr4                          shift and go to state 36
    exit_stmt                      shift and go to state 41
    stmt                           shift and go to state 14
    loop_stmt                      shift and go to state 6
    M_7                            shift and go to state 15
    uexpr                          shift and go to state 7
    none                           shift and go to state 189
    gen_stmts                      shift and go to state 208
    expr                           shift and go to state 28
    top_stmt                       shift and go to state 191

state 179

    (55) arguments -> CONSTANTS M_12 . COMMA arguments
    (57) arguments -> CONSTANTS M_12 .

    COMMA           shift and go to state 209
    CLOSE_PAREN     reduce using rule 57 (arguments -> CONSTANTS M_12 .)
    DELIM           reduce using rule 57 (arguments -> CONSTANTS M_12 .)
    newline         reduce using rule 57 (arguments -> CONSTANTS M_12 .)
    $end            reduce using rule 57 (arguments -> CONSTANTS M_12 .)
    KEYWORD_return  reduce using rule 57 (arguments -> CONSTANTS M_12 .)
    SIGIL_AT        reduce using rule 57 (arguments -> CONSTANTS M_12 .)
    SIGIL_DOUBLE_AT reduce using rule 57 (arguments -> CONSTANTS M_12 .)
    KEYWORD_puts    reduce using rule 57 (arguments -> CONSTANTS M_12 .)
    KEYWORD_end     reduce using rule 57 (arguments -> CONSTANTS M_12 .)


state 180

    (54) arguments -> VARIABLES M_12 . COMMA arguments
    (56) arguments -> VARIABLES M_12 .

    COMMA           shift and go to state 210
    CLOSE_PAREN     reduce using rule 56 (arguments -> VARIABLES M_12 .)
    DELIM           reduce using rule 56 (arguments -> VARIABLES M_12 .)
    newline         reduce using rule 56 (arguments -> VARIABLES M_12 .)
    $end            reduce using rule 56 (arguments -> VARIABLES M_12 .)
    KEYWORD_return  reduce using rule 56 (arguments -> VARIABLES M_12 .)
    SIGIL_AT        reduce using rule 56 (arguments -> VARIABLES M_12 .)
    SIGIL_DOUBLE_AT reduce using rule 56 (arguments -> VARIABLES M_12 .)
    KEYWORD_puts    reduce using rule 56 (arguments -> VARIABLES M_12 .)
    KEYWORD_end     reduce using rule 56 (arguments -> VARIABLES M_12 .)


state 181

    (50) func_defn -> KEYWORD_def fname OPEN_PAREN arguments M_13 . CLOSE_PAREN func_stmts opt_terms KEYWORD_end M_14

    CLOSE_PAREN     shift and go to state 211


state 182

    (51) func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN func_stmts . opt_terms KEYWORD_end M_15
    (76) func_stmts -> func_stmts . terms func_stmt
    (177) opt_terms -> . none
    (178) opt_terms -> . terms
    (179) terms -> . term
    (180) terms -> . terms term
    (183) none -> .
    (181) term -> . DELIM
    (182) term -> . newline

    KEYWORD_end     reduce using rule 183 (none -> .)
    DELIM           shift and go to state 67
    newline         shift and go to state 66

    none                           shift and go to state 68
    terms                          shift and go to state 212
    term                           shift and go to state 64
    opt_terms                      shift and go to state 213

state 183

    (78) func_stmt -> top_stmt .

    DELIM           reduce using rule 78 (func_stmt -> top_stmt .)
    newline         reduce using rule 78 (func_stmt -> top_stmt .)
    KEYWORD_end     reduce using rule 78 (func_stmt -> top_stmt .)


state 184

    (79) func_stmt -> KEYWORD_return . func_ret_arg
    (80) func_ret_arg -> . primary
    (81) primary -> . INT_CONSTANTS
    (82) primary -> . BOOLEAN_CONSTANTS
    (83) primary -> . CONSTANTS
    (84) primary -> . VARIABLES
    (85) primary -> . array
    (171) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET

    INT_CONSTANTS   shift and go to state 139
    BOOLEAN_CONSTANTS shift and go to state 138
    CONSTANTS       shift and go to state 136
    VARIABLES       shift and go to state 140

    array                          shift and go to state 143
    func_ret_arg                   shift and go to state 215
    primary                        shift and go to state 214

state 185

    (123) mlhs -> CONSTANTS .
    (66) fname2 -> CONSTANTS .
    (168) expr13 -> CONSTANTS .

    EQUAL           reduce using rule 123 (mlhs -> CONSTANTS .)
    OPEN_PAREN      reduce using rule 66 (fname2 -> CONSTANTS .)
    MULTIPLY        reduce using rule 168 (expr13 -> CONSTANTS .)
    DIV             reduce using rule 168 (expr13 -> CONSTANTS .)
    MOD             reduce using rule 168 (expr13 -> CONSTANTS .)
    PLUS            reduce using rule 168 (expr13 -> CONSTANTS .)
    MINUS           reduce using rule 168 (expr13 -> CONSTANTS .)
    SHIFTL          reduce using rule 168 (expr13 -> CONSTANTS .)
    SHIFTR          reduce using rule 168 (expr13 -> CONSTANTS .)
    BITAND          reduce using rule 168 (expr13 -> CONSTANTS .)
    LESSEQUAL       reduce using rule 168 (expr13 -> CONSTANTS .)
    LESS            reduce using rule 168 (expr13 -> CONSTANTS .)
    GREATER         reduce using rule 168 (expr13 -> CONSTANTS .)
    GREATEREQUAL    reduce using rule 168 (expr13 -> CONSTANTS .)
    BITXOR          reduce using rule 168 (expr13 -> CONSTANTS .)
    PIPE            reduce using rule 168 (expr13 -> CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 168 (expr13 -> CONSTANTS .)
    NOTEQUAL        reduce using rule 168 (expr13 -> CONSTANTS .)
    LOGICALAND      reduce using rule 168 (expr13 -> CONSTANTS .)
    LOGICALOR       reduce using rule 168 (expr13 -> CONSTANTS .)
    DELIM           reduce using rule 168 (expr13 -> CONSTANTS .)
    newline         reduce using rule 168 (expr13 -> CONSTANTS .)
    KEYWORD_end     reduce using rule 168 (expr13 -> CONSTANTS .)
    KEYWORD_elsif   reduce using rule 168 (expr13 -> CONSTANTS .)
    KEYWORD_else    reduce using rule 168 (expr13 -> CONSTANTS .)


state 186

    (122) mlhs -> VARIABLES .
    (65) fname2 -> VARIABLES .
    (171) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET
    (169) expr13 -> VARIABLES .

    EQUAL           reduce using rule 122 (mlhs -> VARIABLES .)
    OPEN_PAREN      reduce using rule 65 (fname2 -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 74
    MULTIPLY        reduce using rule 169 (expr13 -> VARIABLES .)
    DIV             reduce using rule 169 (expr13 -> VARIABLES .)
    MOD             reduce using rule 169 (expr13 -> VARIABLES .)
    PLUS            reduce using rule 169 (expr13 -> VARIABLES .)
    MINUS           reduce using rule 169 (expr13 -> VARIABLES .)
    SHIFTL          reduce using rule 169 (expr13 -> VARIABLES .)
    SHIFTR          reduce using rule 169 (expr13 -> VARIABLES .)
    BITAND          reduce using rule 169 (expr13 -> VARIABLES .)
    LESSEQUAL       reduce using rule 169 (expr13 -> VARIABLES .)
    LESS            reduce using rule 169 (expr13 -> VARIABLES .)
    GREATER         reduce using rule 169 (expr13 -> VARIABLES .)
    GREATEREQUAL    reduce using rule 169 (expr13 -> VARIABLES .)
    BITXOR          reduce using rule 169 (expr13 -> VARIABLES .)
    PIPE            reduce using rule 169 (expr13 -> VARIABLES .)
    DOUBLEEQUAL     reduce using rule 169 (expr13 -> VARIABLES .)
    NOTEQUAL        reduce using rule 169 (expr13 -> VARIABLES .)
    LOGICALAND      reduce using rule 169 (expr13 -> VARIABLES .)
    LOGICALOR       reduce using rule 169 (expr13 -> VARIABLES .)
    DELIM           reduce using rule 169 (expr13 -> VARIABLES .)
    newline         reduce using rule 169 (expr13 -> VARIABLES .)
    KEYWORD_end     reduce using rule 169 (expr13 -> VARIABLES .)
    KEYWORD_elsif   reduce using rule 169 (expr13 -> VARIABLES .)
    KEYWORD_else    reduce using rule 169 (expr13 -> VARIABLES .)


state 187

    (77) func_stmts -> none .
    (172) uexpr -> none .

    DELIM           reduce using rule 77 (func_stmts -> none .)
    newline         reduce using rule 77 (func_stmts -> none .)
    KEYWORD_end     reduce using rule 77 (func_stmts -> none .)
    INT_CONSTANTS   reduce using rule 172 (uexpr -> none .)
    FLOAT_CONSTANTS reduce using rule 172 (uexpr -> none .)


state 188

    (75) func_stmts -> func_stmt .

    DELIM           reduce using rule 75 (func_stmts -> func_stmt .)
    newline         reduce using rule 75 (func_stmts -> func_stmt .)
    KEYWORD_end     reduce using rule 75 (func_stmts -> func_stmt .)


state 189

    (100) gen_stmts -> none .
    (172) uexpr -> none .

    DELIM           reduce using rule 100 (gen_stmts -> none .)
    newline         reduce using rule 100 (gen_stmts -> none .)
    KEYWORD_end     reduce using rule 100 (gen_stmts -> none .)
    KEYWORD_elsif   reduce using rule 100 (gen_stmts -> none .)
    KEYWORD_else    reduce using rule 100 (gen_stmts -> none .)
    INT_CONSTANTS   reduce using rule 172 (uexpr -> none .)
    FLOAT_CONSTANTS reduce using rule 172 (uexpr -> none .)


state 190

    (87) top_stmt -> KEYWORD_if expr3 opt_then M_1 gen_stmts . opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6
    (99) gen_stmts -> gen_stmts . terms top_stmt
    (177) opt_terms -> . none
    (178) opt_terms -> . terms
    (179) terms -> . term
    (180) terms -> . terms term
    (183) none -> .
    (181) term -> . DELIM
    (182) term -> . newline

    KEYWORD_elsif   reduce using rule 183 (none -> .)
    KEYWORD_else    reduce using rule 183 (none -> .)
    KEYWORD_end     reduce using rule 183 (none -> .)
    DELIM           shift and go to state 67
    newline         shift and go to state 66

    none                           shift and go to state 68
    terms                          shift and go to state 216
    term                           shift and go to state 64
    opt_terms                      shift and go to state 217

state 191

    (98) gen_stmts -> top_stmt .

    DELIM           reduce using rule 98 (gen_stmts -> top_stmt .)
    newline         reduce using rule 98 (gen_stmts -> top_stmt .)
    KEYWORD_end     reduce using rule 98 (gen_stmts -> top_stmt .)
    KEYWORD_elsif   reduce using rule 98 (gen_stmts -> top_stmt .)
    KEYWORD_else    reduce using rule 98 (gen_stmts -> top_stmt .)


state 192

    (8) statement -> VARIABLES DOT VARIABLES OPEN_PAREN arguments . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 218


state 193

    (9) statement -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .

    DELIM           reduce using rule 9 (statement -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    newline         reduce using rule 9 (statement -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    $end            reduce using rule 9 (statement -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)


state 194

    (129) mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN . arguments CLOSE_PAREN
    (130) mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN . CLOSE_PAREN
    (54) arguments -> . VARIABLES M_12 COMMA arguments
    (55) arguments -> . CONSTANTS M_12 COMMA arguments
    (56) arguments -> . VARIABLES M_12
    (57) arguments -> . CONSTANTS M_12

    CLOSE_PAREN     shift and go to state 220
    VARIABLES       shift and go to state 150
    CONSTANTS       shift and go to state 149

    arguments                      shift and go to state 219

state 195

    (132) mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN . arguments CLOSE_PAREN
    (134) mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN . CLOSE_PAREN
    (54) arguments -> . VARIABLES M_12 COMMA arguments
    (55) arguments -> . CONSTANTS M_12 COMMA arguments
    (56) arguments -> . VARIABLES M_12
    (57) arguments -> . CONSTANTS M_12

    CLOSE_PAREN     shift and go to state 222
    VARIABLES       shift and go to state 150
    CONSTANTS       shift and go to state 149

    arguments                      shift and go to state 221

state 196

    (28) class_mlhs -> class_mlhs terms . SIGIL_DOUBLE_AT
    (180) terms -> terms . term
    (181) term -> . DELIM
    (182) term -> . newline

    SIGIL_DOUBLE_AT shift and go to state 223
    DELIM           shift and go to state 67
    newline         shift and go to state 66

    term                           shift and go to state 115

state 197

    (18) class_stmt -> class_mlhs EQUAL . class_mrhs
    (20) class_mrhs -> . literal
    (21) literal -> . INT_CONSTANTS
    (22) literal -> . FLOAT_CONSTANTS
    (23) literal -> . STRING_CONSTANTS
    (24) literal -> . BOOLEAN_CONSTANTS
    (25) literal -> . CHAR_CONSTANTS
    (26) literal -> . SIGIL_AT
    (27) literal -> . SIGIL_DOUBLE_AT

    INT_CONSTANTS   shift and go to state 226
    FLOAT_CONSTANTS shift and go to state 227
    STRING_CONSTANTS shift and go to state 229
    BOOLEAN_CONSTANTS shift and go to state 225
    CHAR_CONSTANTS  shift and go to state 232
    SIGIL_AT        shift and go to state 224
    SIGIL_DOUBLE_AT shift and go to state 228

    literal                        shift and go to state 230
    class_mrhs                     shift and go to state 231

state 198

    (16) class_stmts -> class_stmts terms . class_stmt
    (178) opt_terms -> terms .
    (180) terms -> terms . term
    (18) class_stmt -> . class_mlhs EQUAL class_mrhs
    (19) class_stmt -> . class_func
    (181) term -> . DELIM
    (182) term -> . newline
    (28) class_mlhs -> . class_mlhs terms SIGIL_DOUBLE_AT
    (29) class_mlhs -> . SIGIL_DOUBLE_AT
    (30) class_func -> . KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (31) class_func -> . KEYWORD_def fname arguments class_method_stmts opt_terms KEYWORD_end
    (32) class_func -> . KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end

    KEYWORD_end     reduce using rule 178 (opt_terms -> terms .)
    DELIM           shift and go to state 67
    newline         shift and go to state 66
    SIGIL_DOUBLE_AT shift and go to state 163
    KEYWORD_def     shift and go to state 166

    term                           shift and go to state 115
    class_mlhs                     shift and go to state 162
    class_func                     shift and go to state 164
    class_stmt                     shift and go to state 233

state 199

    (14) class_defn -> KEYWORD_class CONSTANTS newline class_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 234


state 200

    (30) class_func -> KEYWORD_def fname . OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (31) class_func -> KEYWORD_def fname . arguments class_method_stmts opt_terms KEYWORD_end
    (32) class_func -> KEYWORD_def fname . OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (54) arguments -> . VARIABLES M_12 COMMA arguments
    (55) arguments -> . CONSTANTS M_12 COMMA arguments
    (56) arguments -> . VARIABLES M_12
    (57) arguments -> . CONSTANTS M_12

    OPEN_PAREN      shift and go to state 235
    VARIABLES       shift and go to state 150
    CONSTANTS       shift and go to state 149

    arguments                      shift and go to state 236

state 201

    (89) top_stmt -> KEYWORD_for VARIABLES KEYWORD_in for_range opt_do . M_10 gen_stmts opt_terms KEYWORD_end M_11
    (96) M_10 -> .

    KEYWORD_if      reduce using rule 96 (M_10 -> .)
    KEYWORD_for     reduce using rule 96 (M_10 -> .)
    KEYWORD_puts    reduce using rule 96 (M_10 -> .)
    KEYWORD_break   reduce using rule 96 (M_10 -> .)
    KEYWORD_exit    reduce using rule 96 (M_10 -> .)
    VARIABLES       reduce using rule 96 (M_10 -> .)
    CONSTANTS       reduce using rule 96 (M_10 -> .)
    BOOLEAN_CONSTANTS reduce using rule 96 (M_10 -> .)
    OPEN_PAREN      reduce using rule 96 (M_10 -> .)
    PLUS            reduce using rule 96 (M_10 -> .)
    MINUS           reduce using rule 96 (M_10 -> .)
    BITNOT          reduce using rule 96 (M_10 -> .)
    BITCOMP         reduce using rule 96 (M_10 -> .)
    DELIM           reduce using rule 96 (M_10 -> .)
    newline         reduce using rule 96 (M_10 -> .)
    KEYWORD_end     reduce using rule 96 (M_10 -> .)
    KEYWORD_while   reduce using rule 96 (M_10 -> .)
    INT_CONSTANTS   reduce using rule 96 (M_10 -> .)
    FLOAT_CONSTANTS reduce using rule 96 (M_10 -> .)

    M_10                           shift and go to state 237

state 202

    (117) for_range -> for_range_variables DOUBLEDOT . for_range_variables
    (118) for_range_variables -> . INT_CONSTANTS
    (119) for_range_variables -> . VARIABLES
    (120) for_range_variables -> . CONSTANTS

    INT_CONSTANTS   shift and go to state 168
    VARIABLES       shift and go to state 169
    CONSTANTS       shift and go to state 171

    for_range_variables            shift and go to state 238

state 203

    (67) call_arg -> primary M_16 COMMA . call_arg
    (67) call_arg -> . primary M_16 COMMA call_arg
    (68) call_arg -> . primary M_16
    (69) call_arg -> . none
    (81) primary -> . INT_CONSTANTS
    (82) primary -> . BOOLEAN_CONSTANTS
    (83) primary -> . CONSTANTS
    (84) primary -> . VARIABLES
    (85) primary -> . array
    (183) none -> .
    (171) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET

    INT_CONSTANTS   shift and go to state 139
    BOOLEAN_CONSTANTS shift and go to state 138
    CONSTANTS       shift and go to state 136
    VARIABLES       shift and go to state 140
    CLOSE_PAREN     reduce using rule 183 (none -> .)

    none                           shift and go to state 137
    primary                        shift and go to state 141
    call_arg                       shift and go to state 239
    array                          shift and go to state 143

state 204

    (62) func_call_stmt -> fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17 .

    DELIM           reduce using rule 62 (func_call_stmt -> fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17 .)
    newline         reduce using rule 62 (func_call_stmt -> fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17 .)
    $end            reduce using rule 62 (func_call_stmt -> fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17 .)
    KEYWORD_end     reduce using rule 62 (func_call_stmt -> fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17 .)
    KEYWORD_elsif   reduce using rule 62 (func_call_stmt -> fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17 .)
    KEYWORD_else    reduce using rule 62 (func_call_stmt -> fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17 .)


state 205

    (11) statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 240


state 206

    (12) statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .

    DELIM           reduce using rule 12 (statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    newline         reduce using rule 12 (statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    $end            reduce using rule 12 (statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)


state 207

    (63) func_call_stmt -> mlhs EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN . M_17
    (64) M_17 -> .

    DELIM           reduce using rule 64 (M_17 -> .)
    newline         reduce using rule 64 (M_17 -> .)
    $end            reduce using rule 64 (M_17 -> .)
    KEYWORD_end     reduce using rule 64 (M_17 -> .)
    KEYWORD_elsif   reduce using rule 64 (M_17 -> .)
    KEYWORD_else    reduce using rule 64 (M_17 -> .)

    M_17                           shift and go to state 241

state 208

    (88) top_stmt -> M_7 KEYWORD_while expr3 opt_do M_8 gen_stmts . opt_terms KEYWORD_end M_9
    (99) gen_stmts -> gen_stmts . terms top_stmt
    (177) opt_terms -> . none
    (178) opt_terms -> . terms
    (179) terms -> . term
    (180) terms -> . terms term
    (183) none -> .
    (181) term -> . DELIM
    (182) term -> . newline

    KEYWORD_end     reduce using rule 183 (none -> .)
    DELIM           shift and go to state 67
    newline         shift and go to state 66

    none                           shift and go to state 68
    terms                          shift and go to state 216
    opt_terms                      shift and go to state 242
    term                           shift and go to state 64

state 209

    (55) arguments -> CONSTANTS M_12 COMMA . arguments
    (54) arguments -> . VARIABLES M_12 COMMA arguments
    (55) arguments -> . CONSTANTS M_12 COMMA arguments
    (56) arguments -> . VARIABLES M_12
    (57) arguments -> . CONSTANTS M_12

    VARIABLES       shift and go to state 150
    CONSTANTS       shift and go to state 149

    arguments                      shift and go to state 243

state 210

    (54) arguments -> VARIABLES M_12 COMMA . arguments
    (54) arguments -> . VARIABLES M_12 COMMA arguments
    (55) arguments -> . CONSTANTS M_12 COMMA arguments
    (56) arguments -> . VARIABLES M_12
    (57) arguments -> . CONSTANTS M_12

    VARIABLES       shift and go to state 150
    CONSTANTS       shift and go to state 149

    arguments                      shift and go to state 244

state 211

    (50) func_defn -> KEYWORD_def fname OPEN_PAREN arguments M_13 CLOSE_PAREN . func_stmts opt_terms KEYWORD_end M_14
    (75) func_stmts -> . func_stmt
    (76) func_stmts -> . func_stmts terms func_stmt
    (77) func_stmts -> . none
    (78) func_stmt -> . top_stmt
    (79) func_stmt -> . KEYWORD_return func_ret_arg
    (183) none -> .
    (86) top_stmt -> . stmt
    (87) top_stmt -> . KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6
    (88) top_stmt -> . M_7 KEYWORD_while expr3 opt_do M_8 gen_stmts opt_terms KEYWORD_end M_9
    (89) top_stmt -> . KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts opt_terms KEYWORD_end M_11
    (101) stmt -> . expr
    (102) stmt -> . expr1
    (103) stmt -> . puts_stmt
    (104) stmt -> . loop_stmt
    (105) stmt -> . exit_stmt
    (106) stmt -> . func_call_stmt
    (93) M_7 -> .
    (121) expr -> . mlhs EQUAL mrhs
    (136) expr1 -> . expr3
    (73) puts_stmt -> . KEYWORD_puts mrhs
    (74) puts_stmt -> . KEYWORD_puts expr
    (71) loop_stmt -> . KEYWORD_break
    (72) exit_stmt -> . KEYWORD_exit
    (62) func_call_stmt -> . fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (63) func_call_stmt -> . mlhs EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (122) mlhs -> . VARIABLES
    (123) mlhs -> . CONSTANTS
    (124) mlhs -> . array
    (137) expr3 -> . expr3 LOGICALOR expr4
    (138) expr3 -> . expr4
    (65) fname2 -> . VARIABLES
    (66) fname2 -> . CONSTANTS
    (171) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (139) expr4 -> . expr4 LOGICALAND expr5
    (140) expr4 -> . expr5
    (141) expr5 -> . expr6 DOUBLEEQUAL expr6
    (142) expr5 -> . expr6 NOTEQUAL expr6
    (143) expr5 -> . expr6
    (144) expr6 -> . expr7 LESSEQUAL expr7
    (145) expr6 -> . expr7 LESS expr7
    (146) expr6 -> . expr7 GREATER expr7
    (147) expr6 -> . expr7 GREATEREQUAL expr7
    (148) expr6 -> . expr7
    (149) expr6 -> . BOOLEAN_CONSTANTS
    (150) expr7 -> . expr7 BITXOR expr8
    (151) expr7 -> . expr7 PIPE expr8
    (152) expr7 -> . expr8
    (153) expr8 -> . expr8 BITAND expr9
    (154) expr8 -> . expr9
    (155) expr9 -> . expr9 SHIFTL expr10
    (156) expr9 -> . expr9 SHIFTR expr10
    (157) expr9 -> . expr10
    (158) expr10 -> . expr10 PLUS expr11
    (159) expr10 -> . expr10 MINUS expr11
    (160) expr10 -> . expr11
    (161) expr11 -> . expr11 MULTIPLY expr13
    (162) expr11 -> . expr11 DIV expr13
    (163) expr11 -> . expr11 MOD expr13
    (164) expr11 -> . expr13
    (165) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (166) expr13 -> . uexpr INT_CONSTANTS
    (167) expr13 -> . uexpr FLOAT_CONSTANTS
    (168) expr13 -> . CONSTANTS
    (169) expr13 -> . VARIABLES
    (170) expr13 -> . array
    (172) uexpr -> . none
    (173) uexpr -> . PLUS
    (174) uexpr -> . MINUS
    (175) uexpr -> . BITNOT
    (176) uexpr -> . BITCOMP

    KEYWORD_return  shift and go to state 184
    DELIM           reduce using rule 183 (none -> .)
    newline         reduce using rule 183 (none -> .)
    KEYWORD_end     reduce using rule 183 (none -> .)
    INT_CONSTANTS   reduce using rule 183 (none -> .)
    FLOAT_CONSTANTS reduce using rule 183 (none -> .)
    KEYWORD_if      shift and go to state 20
    KEYWORD_for     shift and go to state 43
    KEYWORD_while   reduce using rule 93 (M_7 -> .)
    KEYWORD_puts    shift and go to state 26
    KEYWORD_break   shift and go to state 40
    KEYWORD_exit    shift and go to state 17
    VARIABLES       shift and go to state 186
    CONSTANTS       shift and go to state 185
    BOOLEAN_CONSTANTS shift and go to state 8
    OPEN_PAREN      shift and go to state 23
    PLUS            shift and go to state 4
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 32
    BITCOMP         shift and go to state 22

    func_stmt                      shift and go to state 188
    mlhs                           shift and go to state 1
    fname2                         shift and go to state 44
    func_stmts                     shift and go to state 245
    expr11                         shift and go to state 11
    expr13                         shift and go to state 12
    array                          shift and go to state 19
    expr3                          shift and go to state 33
    expr1                          shift and go to state 34
    expr6                          shift and go to state 35
    expr5                          shift and go to state 37
    func_call_stmt                 shift and go to state 25
    expr7                          shift and go to state 5
    expr8                          shift and go to state 38
    expr9                          shift and go to state 39
    expr4                          shift and go to state 36
    puts_stmt                      shift and go to state 13
    exit_stmt                      shift and go to state 41
    stmt                           shift and go to state 14
    loop_stmt                      shift and go to state 6
    M_7                            shift and go to state 15
    uexpr                          shift and go to state 7
    none                           shift and go to state 187
    expr                           shift and go to state 28
    expr10                         shift and go to state 10
    top_stmt                       shift and go to state 183

state 212

    (76) func_stmts -> func_stmts terms . func_stmt
    (178) opt_terms -> terms .
    (180) terms -> terms . term
    (78) func_stmt -> . top_stmt
    (79) func_stmt -> . KEYWORD_return func_ret_arg
    (181) term -> . DELIM
    (182) term -> . newline
    (86) top_stmt -> . stmt
    (87) top_stmt -> . KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6
    (88) top_stmt -> . M_7 KEYWORD_while expr3 opt_do M_8 gen_stmts opt_terms KEYWORD_end M_9
    (89) top_stmt -> . KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts opt_terms KEYWORD_end M_11
    (101) stmt -> . expr
    (102) stmt -> . expr1
    (103) stmt -> . puts_stmt
    (104) stmt -> . loop_stmt
    (105) stmt -> . exit_stmt
    (106) stmt -> . func_call_stmt
    (93) M_7 -> .
    (121) expr -> . mlhs EQUAL mrhs
    (136) expr1 -> . expr3
    (73) puts_stmt -> . KEYWORD_puts mrhs
    (74) puts_stmt -> . KEYWORD_puts expr
    (71) loop_stmt -> . KEYWORD_break
    (72) exit_stmt -> . KEYWORD_exit
    (62) func_call_stmt -> . fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (63) func_call_stmt -> . mlhs EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (122) mlhs -> . VARIABLES
    (123) mlhs -> . CONSTANTS
    (124) mlhs -> . array
    (137) expr3 -> . expr3 LOGICALOR expr4
    (138) expr3 -> . expr4
    (65) fname2 -> . VARIABLES
    (66) fname2 -> . CONSTANTS
    (171) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (139) expr4 -> . expr4 LOGICALAND expr5
    (140) expr4 -> . expr5
    (141) expr5 -> . expr6 DOUBLEEQUAL expr6
    (142) expr5 -> . expr6 NOTEQUAL expr6
    (143) expr5 -> . expr6
    (144) expr6 -> . expr7 LESSEQUAL expr7
    (145) expr6 -> . expr7 LESS expr7
    (146) expr6 -> . expr7 GREATER expr7
    (147) expr6 -> . expr7 GREATEREQUAL expr7
    (148) expr6 -> . expr7
    (149) expr6 -> . BOOLEAN_CONSTANTS
    (150) expr7 -> . expr7 BITXOR expr8
    (151) expr7 -> . expr7 PIPE expr8
    (152) expr7 -> . expr8
    (153) expr8 -> . expr8 BITAND expr9
    (154) expr8 -> . expr9
    (155) expr9 -> . expr9 SHIFTL expr10
    (156) expr9 -> . expr9 SHIFTR expr10
    (157) expr9 -> . expr10
    (158) expr10 -> . expr10 PLUS expr11
    (159) expr10 -> . expr10 MINUS expr11
    (160) expr10 -> . expr11
    (161) expr11 -> . expr11 MULTIPLY expr13
    (162) expr11 -> . expr11 DIV expr13
    (163) expr11 -> . expr11 MOD expr13
    (164) expr11 -> . expr13
    (165) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (166) expr13 -> . uexpr INT_CONSTANTS
    (167) expr13 -> . uexpr FLOAT_CONSTANTS
    (168) expr13 -> . CONSTANTS
    (169) expr13 -> . VARIABLES
    (170) expr13 -> . array
    (172) uexpr -> . none
    (173) uexpr -> . PLUS
    (174) uexpr -> . MINUS
    (175) uexpr -> . BITNOT
    (176) uexpr -> . BITCOMP
    (183) none -> .

    KEYWORD_end     reduce using rule 178 (opt_terms -> terms .)
    KEYWORD_return  shift and go to state 184
    DELIM           shift and go to state 67
    newline         shift and go to state 66
    KEYWORD_if      shift and go to state 20
    KEYWORD_for     shift and go to state 43
    KEYWORD_while   reduce using rule 93 (M_7 -> .)
    KEYWORD_puts    shift and go to state 26
    KEYWORD_break   shift and go to state 40
    KEYWORD_exit    shift and go to state 17
    VARIABLES       shift and go to state 186
    CONSTANTS       shift and go to state 185
    BOOLEAN_CONSTANTS shift and go to state 8
    OPEN_PAREN      shift and go to state 23
    PLUS            shift and go to state 4
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 32
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 183 (none -> .)
    FLOAT_CONSTANTS reduce using rule 183 (none -> .)

    func_stmt                      shift and go to state 246
    mlhs                           shift and go to state 1
    fname2                         shift and go to state 44
    expr11                         shift and go to state 11
    expr13                         shift and go to state 12
    array                          shift and go to state 19
    expr3                          shift and go to state 33
    expr1                          shift and go to state 34
    expr6                          shift and go to state 35
    expr7                          shift and go to state 5
    puts_stmt                      shift and go to state 13
    expr5                          shift and go to state 37
    func_call_stmt                 shift and go to state 25
    expr8                          shift and go to state 38
    expr9                          shift and go to state 39
    expr4                          shift and go to state 36
    exit_stmt                      shift and go to state 41
    none                           shift and go to state 27
    stmt                           shift and go to state 14
    loop_stmt                      shift and go to state 6
    M_7                            shift and go to state 15
    uexpr                          shift and go to state 7
    term                           shift and go to state 115
    expr                           shift and go to state 28
    expr10                         shift and go to state 10
    top_stmt                       shift and go to state 183

state 213

    (51) func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN func_stmts opt_terms . KEYWORD_end M_15

    KEYWORD_end     shift and go to state 247


state 214

    (80) func_ret_arg -> primary .

    DELIM           reduce using rule 80 (func_ret_arg -> primary .)
    newline         reduce using rule 80 (func_ret_arg -> primary .)
    KEYWORD_end     reduce using rule 80 (func_ret_arg -> primary .)


state 215

    (79) func_stmt -> KEYWORD_return func_ret_arg .

    DELIM           reduce using rule 79 (func_stmt -> KEYWORD_return func_ret_arg .)
    newline         reduce using rule 79 (func_stmt -> KEYWORD_return func_ret_arg .)
    KEYWORD_end     reduce using rule 79 (func_stmt -> KEYWORD_return func_ret_arg .)


state 216

    (99) gen_stmts -> gen_stmts terms . top_stmt
    (178) opt_terms -> terms .
    (180) terms -> terms . term
    (86) top_stmt -> . stmt
    (87) top_stmt -> . KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6
    (88) top_stmt -> . M_7 KEYWORD_while expr3 opt_do M_8 gen_stmts opt_terms KEYWORD_end M_9
    (89) top_stmt -> . KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts opt_terms KEYWORD_end M_11
    (181) term -> . DELIM
    (182) term -> . newline
    (101) stmt -> . expr
    (102) stmt -> . expr1
    (103) stmt -> . puts_stmt
    (104) stmt -> . loop_stmt
    (105) stmt -> . exit_stmt
    (106) stmt -> . func_call_stmt
    (93) M_7 -> .
    (121) expr -> . mlhs EQUAL mrhs
    (136) expr1 -> . expr3
    (73) puts_stmt -> . KEYWORD_puts mrhs
    (74) puts_stmt -> . KEYWORD_puts expr
    (71) loop_stmt -> . KEYWORD_break
    (72) exit_stmt -> . KEYWORD_exit
    (62) func_call_stmt -> . fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (63) func_call_stmt -> . mlhs EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (122) mlhs -> . VARIABLES
    (123) mlhs -> . CONSTANTS
    (124) mlhs -> . array
    (137) expr3 -> . expr3 LOGICALOR expr4
    (138) expr3 -> . expr4
    (65) fname2 -> . VARIABLES
    (66) fname2 -> . CONSTANTS
    (171) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (139) expr4 -> . expr4 LOGICALAND expr5
    (140) expr4 -> . expr5
    (141) expr5 -> . expr6 DOUBLEEQUAL expr6
    (142) expr5 -> . expr6 NOTEQUAL expr6
    (143) expr5 -> . expr6
    (144) expr6 -> . expr7 LESSEQUAL expr7
    (145) expr6 -> . expr7 LESS expr7
    (146) expr6 -> . expr7 GREATER expr7
    (147) expr6 -> . expr7 GREATEREQUAL expr7
    (148) expr6 -> . expr7
    (149) expr6 -> . BOOLEAN_CONSTANTS
    (150) expr7 -> . expr7 BITXOR expr8
    (151) expr7 -> . expr7 PIPE expr8
    (152) expr7 -> . expr8
    (153) expr8 -> . expr8 BITAND expr9
    (154) expr8 -> . expr9
    (155) expr9 -> . expr9 SHIFTL expr10
    (156) expr9 -> . expr9 SHIFTR expr10
    (157) expr9 -> . expr10
    (158) expr10 -> . expr10 PLUS expr11
    (159) expr10 -> . expr10 MINUS expr11
    (160) expr10 -> . expr11
    (161) expr11 -> . expr11 MULTIPLY expr13
    (162) expr11 -> . expr11 DIV expr13
    (163) expr11 -> . expr11 MOD expr13
    (164) expr11 -> . expr13
    (165) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (166) expr13 -> . uexpr INT_CONSTANTS
    (167) expr13 -> . uexpr FLOAT_CONSTANTS
    (168) expr13 -> . CONSTANTS
    (169) expr13 -> . VARIABLES
    (170) expr13 -> . array
    (172) uexpr -> . none
    (173) uexpr -> . PLUS
    (174) uexpr -> . MINUS
    (175) uexpr -> . BITNOT
    (176) uexpr -> . BITCOMP
    (183) none -> .

    KEYWORD_end     reduce using rule 178 (opt_terms -> terms .)
    KEYWORD_elsif   reduce using rule 178 (opt_terms -> terms .)
    KEYWORD_else    reduce using rule 178 (opt_terms -> terms .)
    KEYWORD_if      shift and go to state 20
    KEYWORD_for     shift and go to state 43
    DELIM           shift and go to state 67
    newline         shift and go to state 66
    KEYWORD_while   reduce using rule 93 (M_7 -> .)
    KEYWORD_puts    shift and go to state 26
    KEYWORD_break   shift and go to state 40
    KEYWORD_exit    shift and go to state 17
    VARIABLES       shift and go to state 186
    CONSTANTS       shift and go to state 185
    BOOLEAN_CONSTANTS shift and go to state 8
    OPEN_PAREN      shift and go to state 23
    PLUS            shift and go to state 4
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 32
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 183 (none -> .)
    FLOAT_CONSTANTS reduce using rule 183 (none -> .)

    mlhs                           shift and go to state 1
    fname2                         shift and go to state 44
    expr10                         shift and go to state 10
    expr11                         shift and go to state 11
    expr13                         shift and go to state 12
    array                          shift and go to state 19
    expr3                          shift and go to state 33
    expr1                          shift and go to state 34
    expr6                          shift and go to state 35
    expr7                          shift and go to state 5
    puts_stmt                      shift and go to state 13
    expr5                          shift and go to state 37
    func_call_stmt                 shift and go to state 25
    expr8                          shift and go to state 38
    expr9                          shift and go to state 39
    expr4                          shift and go to state 36
    exit_stmt                      shift and go to state 41
    none                           shift and go to state 27
    stmt                           shift and go to state 14
    loop_stmt                      shift and go to state 6
    M_7                            shift and go to state 15
    uexpr                          shift and go to state 7
    term                           shift and go to state 115
    expr                           shift and go to state 28
    top_stmt                       shift and go to state 248

state 217

    (87) top_stmt -> KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms . M_2 elsif_tail opt_else_stmt KEYWORD_end M_6
    (91) M_2 -> .

    KEYWORD_elsif   reduce using rule 91 (M_2 -> .)
    KEYWORD_else    reduce using rule 91 (M_2 -> .)
    KEYWORD_end     reduce using rule 91 (M_2 -> .)

    M_2                            shift and go to state 249

state 218

    (8) statement -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .

    DELIM           reduce using rule 8 (statement -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    newline         reduce using rule 8 (statement -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    $end            reduce using rule 8 (statement -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)


state 219

    (129) mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 250


state 220

    (130) mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .

    DELIM           reduce using rule 130 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    newline         reduce using rule 130 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    $end            reduce using rule 130 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    KEYWORD_end     reduce using rule 130 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    KEYWORD_elsif   reduce using rule 130 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    KEYWORD_else    reduce using rule 130 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)


state 221

    (132) mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 251


state 222

    (134) mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .

    DELIM           reduce using rule 134 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    newline         reduce using rule 134 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    $end            reduce using rule 134 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    KEYWORD_end     reduce using rule 134 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    KEYWORD_elsif   reduce using rule 134 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    KEYWORD_else    reduce using rule 134 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)


state 223

    (28) class_mlhs -> class_mlhs terms SIGIL_DOUBLE_AT .

    EQUAL           reduce using rule 28 (class_mlhs -> class_mlhs terms SIGIL_DOUBLE_AT .)
    DELIM           reduce using rule 28 (class_mlhs -> class_mlhs terms SIGIL_DOUBLE_AT .)
    newline         reduce using rule 28 (class_mlhs -> class_mlhs terms SIGIL_DOUBLE_AT .)


state 224

    (26) literal -> SIGIL_AT .

    COMMA           reduce using rule 26 (literal -> SIGIL_AT .)
    DELIM           reduce using rule 26 (literal -> SIGIL_AT .)
    newline         reduce using rule 26 (literal -> SIGIL_AT .)
    KEYWORD_end     reduce using rule 26 (literal -> SIGIL_AT .)


state 225

    (24) literal -> BOOLEAN_CONSTANTS .

    COMMA           reduce using rule 24 (literal -> BOOLEAN_CONSTANTS .)
    DELIM           reduce using rule 24 (literal -> BOOLEAN_CONSTANTS .)
    newline         reduce using rule 24 (literal -> BOOLEAN_CONSTANTS .)
    KEYWORD_end     reduce using rule 24 (literal -> BOOLEAN_CONSTANTS .)


state 226

    (21) literal -> INT_CONSTANTS .

    COMMA           reduce using rule 21 (literal -> INT_CONSTANTS .)
    DELIM           reduce using rule 21 (literal -> INT_CONSTANTS .)
    newline         reduce using rule 21 (literal -> INT_CONSTANTS .)
    KEYWORD_end     reduce using rule 21 (literal -> INT_CONSTANTS .)


state 227

    (22) literal -> FLOAT_CONSTANTS .

    COMMA           reduce using rule 22 (literal -> FLOAT_CONSTANTS .)
    DELIM           reduce using rule 22 (literal -> FLOAT_CONSTANTS .)
    newline         reduce using rule 22 (literal -> FLOAT_CONSTANTS .)
    KEYWORD_end     reduce using rule 22 (literal -> FLOAT_CONSTANTS .)


state 228

    (27) literal -> SIGIL_DOUBLE_AT .

    COMMA           reduce using rule 27 (literal -> SIGIL_DOUBLE_AT .)
    DELIM           reduce using rule 27 (literal -> SIGIL_DOUBLE_AT .)
    newline         reduce using rule 27 (literal -> SIGIL_DOUBLE_AT .)
    KEYWORD_end     reduce using rule 27 (literal -> SIGIL_DOUBLE_AT .)


state 229

    (23) literal -> STRING_CONSTANTS .

    COMMA           reduce using rule 23 (literal -> STRING_CONSTANTS .)
    DELIM           reduce using rule 23 (literal -> STRING_CONSTANTS .)
    newline         reduce using rule 23 (literal -> STRING_CONSTANTS .)
    KEYWORD_end     reduce using rule 23 (literal -> STRING_CONSTANTS .)


state 230

    (20) class_mrhs -> literal .

    DELIM           reduce using rule 20 (class_mrhs -> literal .)
    newline         reduce using rule 20 (class_mrhs -> literal .)
    KEYWORD_end     reduce using rule 20 (class_mrhs -> literal .)


state 231

    (18) class_stmt -> class_mlhs EQUAL class_mrhs .

    DELIM           reduce using rule 18 (class_stmt -> class_mlhs EQUAL class_mrhs .)
    newline         reduce using rule 18 (class_stmt -> class_mlhs EQUAL class_mrhs .)
    KEYWORD_end     reduce using rule 18 (class_stmt -> class_mlhs EQUAL class_mrhs .)


state 232

    (25) literal -> CHAR_CONSTANTS .

    COMMA           reduce using rule 25 (literal -> CHAR_CONSTANTS .)
    DELIM           reduce using rule 25 (literal -> CHAR_CONSTANTS .)
    newline         reduce using rule 25 (literal -> CHAR_CONSTANTS .)
    KEYWORD_end     reduce using rule 25 (literal -> CHAR_CONSTANTS .)


state 233

    (16) class_stmts -> class_stmts terms class_stmt .

    DELIM           reduce using rule 16 (class_stmts -> class_stmts terms class_stmt .)
    newline         reduce using rule 16 (class_stmts -> class_stmts terms class_stmt .)
    KEYWORD_end     reduce using rule 16 (class_stmts -> class_stmts terms class_stmt .)


state 234

    (14) class_defn -> KEYWORD_class CONSTANTS newline class_stmts opt_terms KEYWORD_end .

    DELIM           reduce using rule 14 (class_defn -> KEYWORD_class CONSTANTS newline class_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 14 (class_defn -> KEYWORD_class CONSTANTS newline class_stmts opt_terms KEYWORD_end .)
    $end            reduce using rule 14 (class_defn -> KEYWORD_class CONSTANTS newline class_stmts opt_terms KEYWORD_end .)


state 235

    (30) class_func -> KEYWORD_def fname OPEN_PAREN . arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (32) class_func -> KEYWORD_def fname OPEN_PAREN . CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (54) arguments -> . VARIABLES M_12 COMMA arguments
    (55) arguments -> . CONSTANTS M_12 COMMA arguments
    (56) arguments -> . VARIABLES M_12
    (57) arguments -> . CONSTANTS M_12

    CLOSE_PAREN     shift and go to state 253
    VARIABLES       shift and go to state 150
    CONSTANTS       shift and go to state 149

    arguments                      shift and go to state 252

state 236

    (31) class_func -> KEYWORD_def fname arguments . class_method_stmts opt_terms KEYWORD_end
    (33) class_method_stmts -> . class_method_stmt
    (34) class_method_stmts -> . class_method_stmts terms class_method_stmt
    (35) class_method_stmts -> . none
    (36) class_method_stmt -> . class_method_mlhs EQUAL class_method_mrhs
    (37) class_method_stmt -> . KEYWORD_return class_method_ret_arg
    (38) class_method_stmt -> . puts_stmt
    (183) none -> .
    (39) class_method_mlhs -> . class_method_mlhs terms SIGIL_AT
    (40) class_method_mlhs -> . SIGIL_AT
    (41) class_method_mlhs -> . SIGIL_DOUBLE_AT
    (73) puts_stmt -> . KEYWORD_puts mrhs
    (74) puts_stmt -> . KEYWORD_puts expr

    KEYWORD_return  shift and go to state 255
    DELIM           reduce using rule 183 (none -> .)
    newline         reduce using rule 183 (none -> .)
    KEYWORD_end     reduce using rule 183 (none -> .)
    SIGIL_AT        shift and go to state 260
    SIGIL_DOUBLE_AT shift and go to state 258
    KEYWORD_puts    shift and go to state 26

    class_method_stmt              shift and go to state 254
    none                           shift and go to state 256
    class_method_mlhs              shift and go to state 257
    puts_stmt                      shift and go to state 261
    class_method_stmts             shift and go to state 259

state 237

    (89) top_stmt -> KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 . gen_stmts opt_terms KEYWORD_end M_11
    (98) gen_stmts -> . top_stmt
    (99) gen_stmts -> . gen_stmts terms top_stmt
    (100) gen_stmts -> . none
    (86) top_stmt -> . stmt
    (87) top_stmt -> . KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6
    (88) top_stmt -> . M_7 KEYWORD_while expr3 opt_do M_8 gen_stmts opt_terms KEYWORD_end M_9
    (89) top_stmt -> . KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts opt_terms KEYWORD_end M_11
    (183) none -> .
    (101) stmt -> . expr
    (102) stmt -> . expr1
    (103) stmt -> . puts_stmt
    (104) stmt -> . loop_stmt
    (105) stmt -> . exit_stmt
    (106) stmt -> . func_call_stmt
    (93) M_7 -> .
    (121) expr -> . mlhs EQUAL mrhs
    (136) expr1 -> . expr3
    (73) puts_stmt -> . KEYWORD_puts mrhs
    (74) puts_stmt -> . KEYWORD_puts expr
    (71) loop_stmt -> . KEYWORD_break
    (72) exit_stmt -> . KEYWORD_exit
    (62) func_call_stmt -> . fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (63) func_call_stmt -> . mlhs EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (122) mlhs -> . VARIABLES
    (123) mlhs -> . CONSTANTS
    (124) mlhs -> . array
    (137) expr3 -> . expr3 LOGICALOR expr4
    (138) expr3 -> . expr4
    (65) fname2 -> . VARIABLES
    (66) fname2 -> . CONSTANTS
    (171) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (139) expr4 -> . expr4 LOGICALAND expr5
    (140) expr4 -> . expr5
    (141) expr5 -> . expr6 DOUBLEEQUAL expr6
    (142) expr5 -> . expr6 NOTEQUAL expr6
    (143) expr5 -> . expr6
    (144) expr6 -> . expr7 LESSEQUAL expr7
    (145) expr6 -> . expr7 LESS expr7
    (146) expr6 -> . expr7 GREATER expr7
    (147) expr6 -> . expr7 GREATEREQUAL expr7
    (148) expr6 -> . expr7
    (149) expr6 -> . BOOLEAN_CONSTANTS
    (150) expr7 -> . expr7 BITXOR expr8
    (151) expr7 -> . expr7 PIPE expr8
    (152) expr7 -> . expr8
    (153) expr8 -> . expr8 BITAND expr9
    (154) expr8 -> . expr9
    (155) expr9 -> . expr9 SHIFTL expr10
    (156) expr9 -> . expr9 SHIFTR expr10
    (157) expr9 -> . expr10
    (158) expr10 -> . expr10 PLUS expr11
    (159) expr10 -> . expr10 MINUS expr11
    (160) expr10 -> . expr11
    (161) expr11 -> . expr11 MULTIPLY expr13
    (162) expr11 -> . expr11 DIV expr13
    (163) expr11 -> . expr11 MOD expr13
    (164) expr11 -> . expr13
    (165) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (166) expr13 -> . uexpr INT_CONSTANTS
    (167) expr13 -> . uexpr FLOAT_CONSTANTS
    (168) expr13 -> . CONSTANTS
    (169) expr13 -> . VARIABLES
    (170) expr13 -> . array
    (172) uexpr -> . none
    (173) uexpr -> . PLUS
    (174) uexpr -> . MINUS
    (175) uexpr -> . BITNOT
    (176) uexpr -> . BITCOMP

    KEYWORD_if      shift and go to state 20
    KEYWORD_for     shift and go to state 43
    DELIM           reduce using rule 183 (none -> .)
    newline         reduce using rule 183 (none -> .)
    KEYWORD_end     reduce using rule 183 (none -> .)
    INT_CONSTANTS   reduce using rule 183 (none -> .)
    FLOAT_CONSTANTS reduce using rule 183 (none -> .)
    KEYWORD_while   reduce using rule 93 (M_7 -> .)
    KEYWORD_puts    shift and go to state 26
    KEYWORD_break   shift and go to state 40
    KEYWORD_exit    shift and go to state 17
    VARIABLES       shift and go to state 186
    CONSTANTS       shift and go to state 185
    BOOLEAN_CONSTANTS shift and go to state 8
    OPEN_PAREN      shift and go to state 23
    PLUS            shift and go to state 4
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 32
    BITCOMP         shift and go to state 22

    mlhs                           shift and go to state 1
    fname2                         shift and go to state 44
    expr10                         shift and go to state 10
    expr11                         shift and go to state 11
    expr13                         shift and go to state 12
    array                          shift and go to state 19
    expr3                          shift and go to state 33
    expr1                          shift and go to state 34
    expr6                          shift and go to state 35
    expr7                          shift and go to state 5
    puts_stmt                      shift and go to state 13
    expr5                          shift and go to state 37
    func_call_stmt                 shift and go to state 25
    expr8                          shift and go to state 38
    expr9                          shift and go to state 39
    expr4                          shift and go to state 36
    exit_stmt                      shift and go to state 41
    stmt                           shift and go to state 14
    loop_stmt                      shift and go to state 6
    M_7                            shift and go to state 15
    uexpr                          shift and go to state 7
    none                           shift and go to state 189
    gen_stmts                      shift and go to state 262
    expr                           shift and go to state 28
    top_stmt                       shift and go to state 191

state 238

    (117) for_range -> for_range_variables DOUBLEDOT for_range_variables .

    KEYWORD_do      reduce using rule 117 (for_range -> for_range_variables DOUBLEDOT for_range_variables .)
    newline         reduce using rule 117 (for_range -> for_range_variables DOUBLEDOT for_range_variables .)


state 239

    (67) call_arg -> primary M_16 COMMA call_arg .

    CLOSE_PAREN     reduce using rule 67 (call_arg -> primary M_16 COMMA call_arg .)


state 240

    (11) statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .

    DELIM           reduce using rule 11 (statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    newline         reduce using rule 11 (statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    $end            reduce using rule 11 (statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)


state 241

    (63) func_call_stmt -> mlhs EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17 .

    DELIM           reduce using rule 63 (func_call_stmt -> mlhs EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17 .)
    newline         reduce using rule 63 (func_call_stmt -> mlhs EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17 .)
    $end            reduce using rule 63 (func_call_stmt -> mlhs EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17 .)
    KEYWORD_end     reduce using rule 63 (func_call_stmt -> mlhs EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17 .)
    KEYWORD_elsif   reduce using rule 63 (func_call_stmt -> mlhs EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17 .)
    KEYWORD_else    reduce using rule 63 (func_call_stmt -> mlhs EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17 .)


state 242

    (88) top_stmt -> M_7 KEYWORD_while expr3 opt_do M_8 gen_stmts opt_terms . KEYWORD_end M_9

    KEYWORD_end     shift and go to state 263


state 243

    (55) arguments -> CONSTANTS M_12 COMMA arguments .

    CLOSE_PAREN     reduce using rule 55 (arguments -> CONSTANTS M_12 COMMA arguments .)
    DELIM           reduce using rule 55 (arguments -> CONSTANTS M_12 COMMA arguments .)
    newline         reduce using rule 55 (arguments -> CONSTANTS M_12 COMMA arguments .)
    $end            reduce using rule 55 (arguments -> CONSTANTS M_12 COMMA arguments .)
    KEYWORD_return  reduce using rule 55 (arguments -> CONSTANTS M_12 COMMA arguments .)
    SIGIL_AT        reduce using rule 55 (arguments -> CONSTANTS M_12 COMMA arguments .)
    SIGIL_DOUBLE_AT reduce using rule 55 (arguments -> CONSTANTS M_12 COMMA arguments .)
    KEYWORD_puts    reduce using rule 55 (arguments -> CONSTANTS M_12 COMMA arguments .)
    KEYWORD_end     reduce using rule 55 (arguments -> CONSTANTS M_12 COMMA arguments .)


state 244

    (54) arguments -> VARIABLES M_12 COMMA arguments .

    CLOSE_PAREN     reduce using rule 54 (arguments -> VARIABLES M_12 COMMA arguments .)
    DELIM           reduce using rule 54 (arguments -> VARIABLES M_12 COMMA arguments .)
    newline         reduce using rule 54 (arguments -> VARIABLES M_12 COMMA arguments .)
    $end            reduce using rule 54 (arguments -> VARIABLES M_12 COMMA arguments .)
    KEYWORD_return  reduce using rule 54 (arguments -> VARIABLES M_12 COMMA arguments .)
    SIGIL_AT        reduce using rule 54 (arguments -> VARIABLES M_12 COMMA arguments .)
    SIGIL_DOUBLE_AT reduce using rule 54 (arguments -> VARIABLES M_12 COMMA arguments .)
    KEYWORD_puts    reduce using rule 54 (arguments -> VARIABLES M_12 COMMA arguments .)
    KEYWORD_end     reduce using rule 54 (arguments -> VARIABLES M_12 COMMA arguments .)


state 245

    (50) func_defn -> KEYWORD_def fname OPEN_PAREN arguments M_13 CLOSE_PAREN func_stmts . opt_terms KEYWORD_end M_14
    (76) func_stmts -> func_stmts . terms func_stmt
    (177) opt_terms -> . none
    (178) opt_terms -> . terms
    (179) terms -> . term
    (180) terms -> . terms term
    (183) none -> .
    (181) term -> . DELIM
    (182) term -> . newline

    KEYWORD_end     reduce using rule 183 (none -> .)
    DELIM           shift and go to state 67
    newline         shift and go to state 66

    none                           shift and go to state 68
    terms                          shift and go to state 212
    term                           shift and go to state 64
    opt_terms                      shift and go to state 264

state 246

    (76) func_stmts -> func_stmts terms func_stmt .

    DELIM           reduce using rule 76 (func_stmts -> func_stmts terms func_stmt .)
    newline         reduce using rule 76 (func_stmts -> func_stmts terms func_stmt .)
    KEYWORD_end     reduce using rule 76 (func_stmts -> func_stmts terms func_stmt .)


state 247

    (51) func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN func_stmts opt_terms KEYWORD_end . M_15
    (61) M_15 -> .

    DELIM           reduce using rule 61 (M_15 -> .)
    newline         reduce using rule 61 (M_15 -> .)
    $end            reduce using rule 61 (M_15 -> .)

    M_15                           shift and go to state 265

state 248

    (99) gen_stmts -> gen_stmts terms top_stmt .

    DELIM           reduce using rule 99 (gen_stmts -> gen_stmts terms top_stmt .)
    newline         reduce using rule 99 (gen_stmts -> gen_stmts terms top_stmt .)
    KEYWORD_end     reduce using rule 99 (gen_stmts -> gen_stmts terms top_stmt .)
    KEYWORD_elsif   reduce using rule 99 (gen_stmts -> gen_stmts terms top_stmt .)
    KEYWORD_else    reduce using rule 99 (gen_stmts -> gen_stmts terms top_stmt .)


state 249

    (87) top_stmt -> KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 . elsif_tail opt_else_stmt KEYWORD_end M_6
    (109) elsif_tail -> . none
    (110) elsif_tail -> . KEYWORD_elsif expr3 opt_then M_3 gen_stmts opt_terms M_4 elsif_tail
    (183) none -> .

    KEYWORD_elsif   shift and go to state 267
    KEYWORD_else    reduce using rule 183 (none -> .)
    KEYWORD_end     reduce using rule 183 (none -> .)

    none                           shift and go to state 266
    elsif_tail                     shift and go to state 268

state 250

    (129) mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .

    DELIM           reduce using rule 129 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    newline         reduce using rule 129 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    $end            reduce using rule 129 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    KEYWORD_end     reduce using rule 129 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    KEYWORD_elsif   reduce using rule 129 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    KEYWORD_else    reduce using rule 129 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)


state 251

    (132) mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .

    DELIM           reduce using rule 132 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    newline         reduce using rule 132 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    $end            reduce using rule 132 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    KEYWORD_end     reduce using rule 132 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    KEYWORD_elsif   reduce using rule 132 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    KEYWORD_else    reduce using rule 132 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)


state 252

    (30) class_func -> KEYWORD_def fname OPEN_PAREN arguments . CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end

    CLOSE_PAREN     shift and go to state 269


state 253

    (32) class_func -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN . class_method_stmts opt_terms KEYWORD_end
    (33) class_method_stmts -> . class_method_stmt
    (34) class_method_stmts -> . class_method_stmts terms class_method_stmt
    (35) class_method_stmts -> . none
    (36) class_method_stmt -> . class_method_mlhs EQUAL class_method_mrhs
    (37) class_method_stmt -> . KEYWORD_return class_method_ret_arg
    (38) class_method_stmt -> . puts_stmt
    (183) none -> .
    (39) class_method_mlhs -> . class_method_mlhs terms SIGIL_AT
    (40) class_method_mlhs -> . SIGIL_AT
    (41) class_method_mlhs -> . SIGIL_DOUBLE_AT
    (73) puts_stmt -> . KEYWORD_puts mrhs
    (74) puts_stmt -> . KEYWORD_puts expr

    KEYWORD_return  shift and go to state 255
    DELIM           reduce using rule 183 (none -> .)
    newline         reduce using rule 183 (none -> .)
    KEYWORD_end     reduce using rule 183 (none -> .)
    SIGIL_AT        shift and go to state 260
    SIGIL_DOUBLE_AT shift and go to state 258
    KEYWORD_puts    shift and go to state 26

    class_method_stmt              shift and go to state 254
    none                           shift and go to state 256
    class_method_mlhs              shift and go to state 257
    puts_stmt                      shift and go to state 261
    class_method_stmts             shift and go to state 270

state 254

    (33) class_method_stmts -> class_method_stmt .

    DELIM           reduce using rule 33 (class_method_stmts -> class_method_stmt .)
    newline         reduce using rule 33 (class_method_stmts -> class_method_stmt .)
    KEYWORD_end     reduce using rule 33 (class_method_stmts -> class_method_stmt .)


state 255

    (37) class_method_stmt -> KEYWORD_return . class_method_ret_arg
    (44) class_method_ret_arg -> . class_method_arg_expr
    (45) class_method_ret_arg -> . literal
    (46) class_method_ret_arg -> . class_method_ret_arg COMMA class_method_arg_expr
    (47) class_method_ret_arg -> . class_method_ret_arg COMMA literal
    (48) class_method_arg_expr -> . SIGIL_AT EQUAL literal
    (49) class_method_arg_expr -> . SIGIL_DOUBLE_AT EQUAL literal
    (21) literal -> . INT_CONSTANTS
    (22) literal -> . FLOAT_CONSTANTS
    (23) literal -> . STRING_CONSTANTS
    (24) literal -> . BOOLEAN_CONSTANTS
    (25) literal -> . CHAR_CONSTANTS
    (26) literal -> . SIGIL_AT
    (27) literal -> . SIGIL_DOUBLE_AT

    SIGIL_AT        shift and go to state 271
    SIGIL_DOUBLE_AT shift and go to state 272
    INT_CONSTANTS   shift and go to state 226
    FLOAT_CONSTANTS shift and go to state 227
    STRING_CONSTANTS shift and go to state 229
    BOOLEAN_CONSTANTS shift and go to state 225
    CHAR_CONSTANTS  shift and go to state 232

    class_method_arg_expr          shift and go to state 275
    literal                        shift and go to state 273
    class_method_ret_arg           shift and go to state 274

state 256

    (35) class_method_stmts -> none .

    DELIM           reduce using rule 35 (class_method_stmts -> none .)
    newline         reduce using rule 35 (class_method_stmts -> none .)
    KEYWORD_end     reduce using rule 35 (class_method_stmts -> none .)


state 257

    (36) class_method_stmt -> class_method_mlhs . EQUAL class_method_mrhs
    (39) class_method_mlhs -> class_method_mlhs . terms SIGIL_AT
    (179) terms -> . term
    (180) terms -> . terms term
    (181) term -> . DELIM
    (182) term -> . newline

    EQUAL           shift and go to state 277
    DELIM           shift and go to state 67
    newline         shift and go to state 66

    term                           shift and go to state 64
    terms                          shift and go to state 276

state 258

    (41) class_method_mlhs -> SIGIL_DOUBLE_AT .

    EQUAL           reduce using rule 41 (class_method_mlhs -> SIGIL_DOUBLE_AT .)
    DELIM           reduce using rule 41 (class_method_mlhs -> SIGIL_DOUBLE_AT .)
    newline         reduce using rule 41 (class_method_mlhs -> SIGIL_DOUBLE_AT .)


state 259

    (31) class_func -> KEYWORD_def fname arguments class_method_stmts . opt_terms KEYWORD_end
    (34) class_method_stmts -> class_method_stmts . terms class_method_stmt
    (177) opt_terms -> . none
    (178) opt_terms -> . terms
    (179) terms -> . term
    (180) terms -> . terms term
    (183) none -> .
    (181) term -> . DELIM
    (182) term -> . newline

    KEYWORD_end     reduce using rule 183 (none -> .)
    DELIM           shift and go to state 67
    newline         shift and go to state 66

    none                           shift and go to state 68
    terms                          shift and go to state 278
    term                           shift and go to state 64
    opt_terms                      shift and go to state 279

state 260

    (40) class_method_mlhs -> SIGIL_AT .

    EQUAL           reduce using rule 40 (class_method_mlhs -> SIGIL_AT .)
    DELIM           reduce using rule 40 (class_method_mlhs -> SIGIL_AT .)
    newline         reduce using rule 40 (class_method_mlhs -> SIGIL_AT .)


state 261

    (38) class_method_stmt -> puts_stmt .

    DELIM           reduce using rule 38 (class_method_stmt -> puts_stmt .)
    newline         reduce using rule 38 (class_method_stmt -> puts_stmt .)
    KEYWORD_end     reduce using rule 38 (class_method_stmt -> puts_stmt .)


state 262

    (89) top_stmt -> KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts . opt_terms KEYWORD_end M_11
    (99) gen_stmts -> gen_stmts . terms top_stmt
    (177) opt_terms -> . none
    (178) opt_terms -> . terms
    (179) terms -> . term
    (180) terms -> . terms term
    (183) none -> .
    (181) term -> . DELIM
    (182) term -> . newline

    KEYWORD_end     reduce using rule 183 (none -> .)
    DELIM           shift and go to state 67
    newline         shift and go to state 66

    none                           shift and go to state 68
    terms                          shift and go to state 216
    term                           shift and go to state 64
    opt_terms                      shift and go to state 280

state 263

    (88) top_stmt -> M_7 KEYWORD_while expr3 opt_do M_8 gen_stmts opt_terms KEYWORD_end . M_9
    (95) M_9 -> .

    DELIM           reduce using rule 95 (M_9 -> .)
    newline         reduce using rule 95 (M_9 -> .)
    $end            reduce using rule 95 (M_9 -> .)
    KEYWORD_end     reduce using rule 95 (M_9 -> .)
    KEYWORD_elsif   reduce using rule 95 (M_9 -> .)
    KEYWORD_else    reduce using rule 95 (M_9 -> .)

    M_9                            shift and go to state 281

state 264

    (50) func_defn -> KEYWORD_def fname OPEN_PAREN arguments M_13 CLOSE_PAREN func_stmts opt_terms . KEYWORD_end M_14

    KEYWORD_end     shift and go to state 282


state 265

    (51) func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN func_stmts opt_terms KEYWORD_end M_15 .

    DELIM           reduce using rule 51 (func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN func_stmts opt_terms KEYWORD_end M_15 .)
    newline         reduce using rule 51 (func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN func_stmts opt_terms KEYWORD_end M_15 .)
    $end            reduce using rule 51 (func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN func_stmts opt_terms KEYWORD_end M_15 .)


state 266

    (109) elsif_tail -> none .

    KEYWORD_else    reduce using rule 109 (elsif_tail -> none .)
    KEYWORD_end     reduce using rule 109 (elsif_tail -> none .)


state 267

    (110) elsif_tail -> KEYWORD_elsif . expr3 opt_then M_3 gen_stmts opt_terms M_4 elsif_tail
    (137) expr3 -> . expr3 LOGICALOR expr4
    (138) expr3 -> . expr4
    (139) expr4 -> . expr4 LOGICALAND expr5
    (140) expr4 -> . expr5
    (141) expr5 -> . expr6 DOUBLEEQUAL expr6
    (142) expr5 -> . expr6 NOTEQUAL expr6
    (143) expr5 -> . expr6
    (144) expr6 -> . expr7 LESSEQUAL expr7
    (145) expr6 -> . expr7 LESS expr7
    (146) expr6 -> . expr7 GREATER expr7
    (147) expr6 -> . expr7 GREATEREQUAL expr7
    (148) expr6 -> . expr7
    (149) expr6 -> . BOOLEAN_CONSTANTS
    (150) expr7 -> . expr7 BITXOR expr8
    (151) expr7 -> . expr7 PIPE expr8
    (152) expr7 -> . expr8
    (153) expr8 -> . expr8 BITAND expr9
    (154) expr8 -> . expr9
    (155) expr9 -> . expr9 SHIFTL expr10
    (156) expr9 -> . expr9 SHIFTR expr10
    (157) expr9 -> . expr10
    (158) expr10 -> . expr10 PLUS expr11
    (159) expr10 -> . expr10 MINUS expr11
    (160) expr10 -> . expr11
    (161) expr11 -> . expr11 MULTIPLY expr13
    (162) expr11 -> . expr11 DIV expr13
    (163) expr11 -> . expr11 MOD expr13
    (164) expr11 -> . expr13
    (165) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (166) expr13 -> . uexpr INT_CONSTANTS
    (167) expr13 -> . uexpr FLOAT_CONSTANTS
    (168) expr13 -> . CONSTANTS
    (169) expr13 -> . VARIABLES
    (170) expr13 -> . array
    (172) uexpr -> . none
    (173) uexpr -> . PLUS
    (174) uexpr -> . MINUS
    (175) uexpr -> . BITNOT
    (176) uexpr -> . BITCOMP
    (171) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (183) none -> .

    BOOLEAN_CONSTANTS shift and go to state 8
    OPEN_PAREN      shift and go to state 23
    CONSTANTS       shift and go to state 73
    VARIABLES       shift and go to state 70
    PLUS            shift and go to state 4
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 32
    BITCOMP         shift and go to state 22
    INT_CONSTANTS   reduce using rule 183 (none -> .)
    FLOAT_CONSTANTS reduce using rule 183 (none -> .)

    expr11                         shift and go to state 11
    uexpr                          shift and go to state 7
    none                           shift and go to state 27
    expr4                          shift and go to state 36
    expr5                          shift and go to state 37
    expr3                          shift and go to state 283
    expr6                          shift and go to state 35
    expr7                          shift and go to state 5
    expr10                         shift and go to state 10
    expr8                          shift and go to state 38
    expr9                          shift and go to state 39
    expr13                         shift and go to state 12
    array                          shift and go to state 72

state 268

    (87) top_stmt -> KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail . opt_else_stmt KEYWORD_end M_6
    (107) opt_else_stmt -> . KEYWORD_else gen_stmts opt_terms
    (108) opt_else_stmt -> . none
    (183) none -> .

    KEYWORD_else    shift and go to state 285
    KEYWORD_end     reduce using rule 183 (none -> .)

    none                           shift and go to state 284
    opt_else_stmt                  shift and go to state 286

state 269

    (30) class_func -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN . class_method_stmts opt_terms KEYWORD_end
    (33) class_method_stmts -> . class_method_stmt
    (34) class_method_stmts -> . class_method_stmts terms class_method_stmt
    (35) class_method_stmts -> . none
    (36) class_method_stmt -> . class_method_mlhs EQUAL class_method_mrhs
    (37) class_method_stmt -> . KEYWORD_return class_method_ret_arg
    (38) class_method_stmt -> . puts_stmt
    (183) none -> .
    (39) class_method_mlhs -> . class_method_mlhs terms SIGIL_AT
    (40) class_method_mlhs -> . SIGIL_AT
    (41) class_method_mlhs -> . SIGIL_DOUBLE_AT
    (73) puts_stmt -> . KEYWORD_puts mrhs
    (74) puts_stmt -> . KEYWORD_puts expr

    KEYWORD_return  shift and go to state 255
    DELIM           reduce using rule 183 (none -> .)
    newline         reduce using rule 183 (none -> .)
    KEYWORD_end     reduce using rule 183 (none -> .)
    SIGIL_AT        shift and go to state 260
    SIGIL_DOUBLE_AT shift and go to state 258
    KEYWORD_puts    shift and go to state 26

    class_method_stmt              shift and go to state 254
    none                           shift and go to state 256
    class_method_mlhs              shift and go to state 257
    puts_stmt                      shift and go to state 261
    class_method_stmts             shift and go to state 287

state 270

    (32) class_func -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts . opt_terms KEYWORD_end
    (34) class_method_stmts -> class_method_stmts . terms class_method_stmt
    (177) opt_terms -> . none
    (178) opt_terms -> . terms
    (179) terms -> . term
    (180) terms -> . terms term
    (183) none -> .
    (181) term -> . DELIM
    (182) term -> . newline

    KEYWORD_end     reduce using rule 183 (none -> .)
    DELIM           shift and go to state 67
    newline         shift and go to state 66

    none                           shift and go to state 68
    terms                          shift and go to state 278
    opt_terms                      shift and go to state 288
    term                           shift and go to state 64

state 271

    (48) class_method_arg_expr -> SIGIL_AT . EQUAL literal
    (26) literal -> SIGIL_AT .

    EQUAL           shift and go to state 289
    COMMA           reduce using rule 26 (literal -> SIGIL_AT .)
    DELIM           reduce using rule 26 (literal -> SIGIL_AT .)
    newline         reduce using rule 26 (literal -> SIGIL_AT .)
    KEYWORD_end     reduce using rule 26 (literal -> SIGIL_AT .)


state 272

    (49) class_method_arg_expr -> SIGIL_DOUBLE_AT . EQUAL literal
    (27) literal -> SIGIL_DOUBLE_AT .

    EQUAL           shift and go to state 290
    COMMA           reduce using rule 27 (literal -> SIGIL_DOUBLE_AT .)
    DELIM           reduce using rule 27 (literal -> SIGIL_DOUBLE_AT .)
    newline         reduce using rule 27 (literal -> SIGIL_DOUBLE_AT .)
    KEYWORD_end     reduce using rule 27 (literal -> SIGIL_DOUBLE_AT .)


state 273

    (45) class_method_ret_arg -> literal .

    COMMA           reduce using rule 45 (class_method_ret_arg -> literal .)
    DELIM           reduce using rule 45 (class_method_ret_arg -> literal .)
    newline         reduce using rule 45 (class_method_ret_arg -> literal .)
    KEYWORD_end     reduce using rule 45 (class_method_ret_arg -> literal .)


state 274

    (37) class_method_stmt -> KEYWORD_return class_method_ret_arg .
    (46) class_method_ret_arg -> class_method_ret_arg . COMMA class_method_arg_expr
    (47) class_method_ret_arg -> class_method_ret_arg . COMMA literal

    DELIM           reduce using rule 37 (class_method_stmt -> KEYWORD_return class_method_ret_arg .)
    newline         reduce using rule 37 (class_method_stmt -> KEYWORD_return class_method_ret_arg .)
    KEYWORD_end     reduce using rule 37 (class_method_stmt -> KEYWORD_return class_method_ret_arg .)
    COMMA           shift and go to state 291


state 275

    (44) class_method_ret_arg -> class_method_arg_expr .

    COMMA           reduce using rule 44 (class_method_ret_arg -> class_method_arg_expr .)
    DELIM           reduce using rule 44 (class_method_ret_arg -> class_method_arg_expr .)
    newline         reduce using rule 44 (class_method_ret_arg -> class_method_arg_expr .)
    KEYWORD_end     reduce using rule 44 (class_method_ret_arg -> class_method_arg_expr .)


state 276

    (39) class_method_mlhs -> class_method_mlhs terms . SIGIL_AT
    (180) terms -> terms . term
    (181) term -> . DELIM
    (182) term -> . newline

    SIGIL_AT        shift and go to state 292
    DELIM           shift and go to state 67
    newline         shift and go to state 66

    term                           shift and go to state 115

state 277

    (36) class_method_stmt -> class_method_mlhs EQUAL . class_method_mrhs
    (42) class_method_mrhs -> . literal
    (43) class_method_mrhs -> . VARIABLES
    (21) literal -> . INT_CONSTANTS
    (22) literal -> . FLOAT_CONSTANTS
    (23) literal -> . STRING_CONSTANTS
    (24) literal -> . BOOLEAN_CONSTANTS
    (25) literal -> . CHAR_CONSTANTS
    (26) literal -> . SIGIL_AT
    (27) literal -> . SIGIL_DOUBLE_AT

    VARIABLES       shift and go to state 294
    INT_CONSTANTS   shift and go to state 226
    FLOAT_CONSTANTS shift and go to state 227
    STRING_CONSTANTS shift and go to state 229
    BOOLEAN_CONSTANTS shift and go to state 225
    CHAR_CONSTANTS  shift and go to state 232
    SIGIL_AT        shift and go to state 224
    SIGIL_DOUBLE_AT shift and go to state 228

    class_method_mrhs              shift and go to state 293
    literal                        shift and go to state 295

state 278

    (34) class_method_stmts -> class_method_stmts terms . class_method_stmt
    (178) opt_terms -> terms .
    (180) terms -> terms . term
    (36) class_method_stmt -> . class_method_mlhs EQUAL class_method_mrhs
    (37) class_method_stmt -> . KEYWORD_return class_method_ret_arg
    (38) class_method_stmt -> . puts_stmt
    (181) term -> . DELIM
    (182) term -> . newline
    (39) class_method_mlhs -> . class_method_mlhs terms SIGIL_AT
    (40) class_method_mlhs -> . SIGIL_AT
    (41) class_method_mlhs -> . SIGIL_DOUBLE_AT
    (73) puts_stmt -> . KEYWORD_puts mrhs
    (74) puts_stmt -> . KEYWORD_puts expr

    KEYWORD_end     reduce using rule 178 (opt_terms -> terms .)
    KEYWORD_return  shift and go to state 255
    DELIM           shift and go to state 67
    newline         shift and go to state 66
    SIGIL_AT        shift and go to state 260
    SIGIL_DOUBLE_AT shift and go to state 258
    KEYWORD_puts    shift and go to state 26

    class_method_stmt              shift and go to state 296
    term                           shift and go to state 115
    puts_stmt                      shift and go to state 261
    class_method_mlhs              shift and go to state 257

state 279

    (31) class_func -> KEYWORD_def fname arguments class_method_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 297


state 280

    (89) top_stmt -> KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts opt_terms . KEYWORD_end M_11

    KEYWORD_end     shift and go to state 298


state 281

    (88) top_stmt -> M_7 KEYWORD_while expr3 opt_do M_8 gen_stmts opt_terms KEYWORD_end M_9 .

    DELIM           reduce using rule 88 (top_stmt -> M_7 KEYWORD_while expr3 opt_do M_8 gen_stmts opt_terms KEYWORD_end M_9 .)
    newline         reduce using rule 88 (top_stmt -> M_7 KEYWORD_while expr3 opt_do M_8 gen_stmts opt_terms KEYWORD_end M_9 .)
    KEYWORD_end     reduce using rule 88 (top_stmt -> M_7 KEYWORD_while expr3 opt_do M_8 gen_stmts opt_terms KEYWORD_end M_9 .)
    $end            reduce using rule 88 (top_stmt -> M_7 KEYWORD_while expr3 opt_do M_8 gen_stmts opt_terms KEYWORD_end M_9 .)
    KEYWORD_elsif   reduce using rule 88 (top_stmt -> M_7 KEYWORD_while expr3 opt_do M_8 gen_stmts opt_terms KEYWORD_end M_9 .)
    KEYWORD_else    reduce using rule 88 (top_stmt -> M_7 KEYWORD_while expr3 opt_do M_8 gen_stmts opt_terms KEYWORD_end M_9 .)


state 282

    (50) func_defn -> KEYWORD_def fname OPEN_PAREN arguments M_13 CLOSE_PAREN func_stmts opt_terms KEYWORD_end . M_14
    (60) M_14 -> .

    DELIM           reduce using rule 60 (M_14 -> .)
    newline         reduce using rule 60 (M_14 -> .)
    $end            reduce using rule 60 (M_14 -> .)

    M_14                           shift and go to state 299

state 283

    (110) elsif_tail -> KEYWORD_elsif expr3 . opt_then M_3 gen_stmts opt_terms M_4 elsif_tail
    (137) expr3 -> expr3 . LOGICALOR expr4
    (113) opt_then -> . KEYWORD_then
    (114) opt_then -> . newline

    LOGICALOR       shift and go to state 88
    KEYWORD_then    shift and go to state 118
    newline         shift and go to state 117

    opt_then                       shift and go to state 300

state 284

    (108) opt_else_stmt -> none .

    KEYWORD_end     reduce using rule 108 (opt_else_stmt -> none .)


state 285

    (107) opt_else_stmt -> KEYWORD_else . gen_stmts opt_terms
    (98) gen_stmts -> . top_stmt
    (99) gen_stmts -> . gen_stmts terms top_stmt
    (100) gen_stmts -> . none
    (86) top_stmt -> . stmt
    (87) top_stmt -> . KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6
    (88) top_stmt -> . M_7 KEYWORD_while expr3 opt_do M_8 gen_stmts opt_terms KEYWORD_end M_9
    (89) top_stmt -> . KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts opt_terms KEYWORD_end M_11
    (183) none -> .
    (101) stmt -> . expr
    (102) stmt -> . expr1
    (103) stmt -> . puts_stmt
    (104) stmt -> . loop_stmt
    (105) stmt -> . exit_stmt
    (106) stmt -> . func_call_stmt
    (93) M_7 -> .
    (121) expr -> . mlhs EQUAL mrhs
    (136) expr1 -> . expr3
    (73) puts_stmt -> . KEYWORD_puts mrhs
    (74) puts_stmt -> . KEYWORD_puts expr
    (71) loop_stmt -> . KEYWORD_break
    (72) exit_stmt -> . KEYWORD_exit
    (62) func_call_stmt -> . fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (63) func_call_stmt -> . mlhs EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (122) mlhs -> . VARIABLES
    (123) mlhs -> . CONSTANTS
    (124) mlhs -> . array
    (137) expr3 -> . expr3 LOGICALOR expr4
    (138) expr3 -> . expr4
    (65) fname2 -> . VARIABLES
    (66) fname2 -> . CONSTANTS
    (171) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (139) expr4 -> . expr4 LOGICALAND expr5
    (140) expr4 -> . expr5
    (141) expr5 -> . expr6 DOUBLEEQUAL expr6
    (142) expr5 -> . expr6 NOTEQUAL expr6
    (143) expr5 -> . expr6
    (144) expr6 -> . expr7 LESSEQUAL expr7
    (145) expr6 -> . expr7 LESS expr7
    (146) expr6 -> . expr7 GREATER expr7
    (147) expr6 -> . expr7 GREATEREQUAL expr7
    (148) expr6 -> . expr7
    (149) expr6 -> . BOOLEAN_CONSTANTS
    (150) expr7 -> . expr7 BITXOR expr8
    (151) expr7 -> . expr7 PIPE expr8
    (152) expr7 -> . expr8
    (153) expr8 -> . expr8 BITAND expr9
    (154) expr8 -> . expr9
    (155) expr9 -> . expr9 SHIFTL expr10
    (156) expr9 -> . expr9 SHIFTR expr10
    (157) expr9 -> . expr10
    (158) expr10 -> . expr10 PLUS expr11
    (159) expr10 -> . expr10 MINUS expr11
    (160) expr10 -> . expr11
    (161) expr11 -> . expr11 MULTIPLY expr13
    (162) expr11 -> . expr11 DIV expr13
    (163) expr11 -> . expr11 MOD expr13
    (164) expr11 -> . expr13
    (165) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (166) expr13 -> . uexpr INT_CONSTANTS
    (167) expr13 -> . uexpr FLOAT_CONSTANTS
    (168) expr13 -> . CONSTANTS
    (169) expr13 -> . VARIABLES
    (170) expr13 -> . array
    (172) uexpr -> . none
    (173) uexpr -> . PLUS
    (174) uexpr -> . MINUS
    (175) uexpr -> . BITNOT
    (176) uexpr -> . BITCOMP

    KEYWORD_if      shift and go to state 20
    KEYWORD_for     shift and go to state 43
    DELIM           reduce using rule 183 (none -> .)
    newline         reduce using rule 183 (none -> .)
    KEYWORD_end     reduce using rule 183 (none -> .)
    INT_CONSTANTS   reduce using rule 183 (none -> .)
    FLOAT_CONSTANTS reduce using rule 183 (none -> .)
    KEYWORD_while   reduce using rule 93 (M_7 -> .)
    KEYWORD_puts    shift and go to state 26
    KEYWORD_break   shift and go to state 40
    KEYWORD_exit    shift and go to state 17
    VARIABLES       shift and go to state 186
    CONSTANTS       shift and go to state 185
    BOOLEAN_CONSTANTS shift and go to state 8
    OPEN_PAREN      shift and go to state 23
    PLUS            shift and go to state 4
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 32
    BITCOMP         shift and go to state 22

    mlhs                           shift and go to state 1
    fname2                         shift and go to state 44
    expr10                         shift and go to state 10
    expr11                         shift and go to state 11
    expr13                         shift and go to state 12
    array                          shift and go to state 19
    expr3                          shift and go to state 33
    expr1                          shift and go to state 34
    expr6                          shift and go to state 35
    expr7                          shift and go to state 5
    puts_stmt                      shift and go to state 13
    expr5                          shift and go to state 37
    func_call_stmt                 shift and go to state 25
    expr8                          shift and go to state 38
    expr9                          shift and go to state 39
    expr4                          shift and go to state 36
    exit_stmt                      shift and go to state 41
    stmt                           shift and go to state 14
    loop_stmt                      shift and go to state 6
    M_7                            shift and go to state 15
    uexpr                          shift and go to state 7
    none                           shift and go to state 189
    gen_stmts                      shift and go to state 301
    expr                           shift and go to state 28
    top_stmt                       shift and go to state 191

state 286

    (87) top_stmt -> KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt . KEYWORD_end M_6

    KEYWORD_end     shift and go to state 302


state 287

    (30) class_func -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts . opt_terms KEYWORD_end
    (34) class_method_stmts -> class_method_stmts . terms class_method_stmt
    (177) opt_terms -> . none
    (178) opt_terms -> . terms
    (179) terms -> . term
    (180) terms -> . terms term
    (183) none -> .
    (181) term -> . DELIM
    (182) term -> . newline

    KEYWORD_end     reduce using rule 183 (none -> .)
    DELIM           shift and go to state 67
    newline         shift and go to state 66

    none                           shift and go to state 68
    terms                          shift and go to state 278
    term                           shift and go to state 64
    opt_terms                      shift and go to state 303

state 288

    (32) class_func -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 304


state 289

    (48) class_method_arg_expr -> SIGIL_AT EQUAL . literal
    (21) literal -> . INT_CONSTANTS
    (22) literal -> . FLOAT_CONSTANTS
    (23) literal -> . STRING_CONSTANTS
    (24) literal -> . BOOLEAN_CONSTANTS
    (25) literal -> . CHAR_CONSTANTS
    (26) literal -> . SIGIL_AT
    (27) literal -> . SIGIL_DOUBLE_AT

    INT_CONSTANTS   shift and go to state 226
    FLOAT_CONSTANTS shift and go to state 227
    STRING_CONSTANTS shift and go to state 229
    BOOLEAN_CONSTANTS shift and go to state 225
    CHAR_CONSTANTS  shift and go to state 232
    SIGIL_AT        shift and go to state 224
    SIGIL_DOUBLE_AT shift and go to state 228

    literal                        shift and go to state 305

state 290

    (49) class_method_arg_expr -> SIGIL_DOUBLE_AT EQUAL . literal
    (21) literal -> . INT_CONSTANTS
    (22) literal -> . FLOAT_CONSTANTS
    (23) literal -> . STRING_CONSTANTS
    (24) literal -> . BOOLEAN_CONSTANTS
    (25) literal -> . CHAR_CONSTANTS
    (26) literal -> . SIGIL_AT
    (27) literal -> . SIGIL_DOUBLE_AT

    INT_CONSTANTS   shift and go to state 226
    FLOAT_CONSTANTS shift and go to state 227
    STRING_CONSTANTS shift and go to state 229
    BOOLEAN_CONSTANTS shift and go to state 225
    CHAR_CONSTANTS  shift and go to state 232
    SIGIL_AT        shift and go to state 224
    SIGIL_DOUBLE_AT shift and go to state 228

    literal                        shift and go to state 306

state 291

    (46) class_method_ret_arg -> class_method_ret_arg COMMA . class_method_arg_expr
    (47) class_method_ret_arg -> class_method_ret_arg COMMA . literal
    (48) class_method_arg_expr -> . SIGIL_AT EQUAL literal
    (49) class_method_arg_expr -> . SIGIL_DOUBLE_AT EQUAL literal
    (21) literal -> . INT_CONSTANTS
    (22) literal -> . FLOAT_CONSTANTS
    (23) literal -> . STRING_CONSTANTS
    (24) literal -> . BOOLEAN_CONSTANTS
    (25) literal -> . CHAR_CONSTANTS
    (26) literal -> . SIGIL_AT
    (27) literal -> . SIGIL_DOUBLE_AT

    SIGIL_AT        shift and go to state 271
    SIGIL_DOUBLE_AT shift and go to state 272
    INT_CONSTANTS   shift and go to state 226
    FLOAT_CONSTANTS shift and go to state 227
    STRING_CONSTANTS shift and go to state 229
    BOOLEAN_CONSTANTS shift and go to state 225
    CHAR_CONSTANTS  shift and go to state 232

    class_method_arg_expr          shift and go to state 308
    literal                        shift and go to state 307

state 292

    (39) class_method_mlhs -> class_method_mlhs terms SIGIL_AT .

    EQUAL           reduce using rule 39 (class_method_mlhs -> class_method_mlhs terms SIGIL_AT .)
    DELIM           reduce using rule 39 (class_method_mlhs -> class_method_mlhs terms SIGIL_AT .)
    newline         reduce using rule 39 (class_method_mlhs -> class_method_mlhs terms SIGIL_AT .)


state 293

    (36) class_method_stmt -> class_method_mlhs EQUAL class_method_mrhs .

    DELIM           reduce using rule 36 (class_method_stmt -> class_method_mlhs EQUAL class_method_mrhs .)
    newline         reduce using rule 36 (class_method_stmt -> class_method_mlhs EQUAL class_method_mrhs .)
    KEYWORD_end     reduce using rule 36 (class_method_stmt -> class_method_mlhs EQUAL class_method_mrhs .)


state 294

    (43) class_method_mrhs -> VARIABLES .

    DELIM           reduce using rule 43 (class_method_mrhs -> VARIABLES .)
    newline         reduce using rule 43 (class_method_mrhs -> VARIABLES .)
    KEYWORD_end     reduce using rule 43 (class_method_mrhs -> VARIABLES .)


state 295

    (42) class_method_mrhs -> literal .

    DELIM           reduce using rule 42 (class_method_mrhs -> literal .)
    newline         reduce using rule 42 (class_method_mrhs -> literal .)
    KEYWORD_end     reduce using rule 42 (class_method_mrhs -> literal .)


state 296

    (34) class_method_stmts -> class_method_stmts terms class_method_stmt .

    DELIM           reduce using rule 34 (class_method_stmts -> class_method_stmts terms class_method_stmt .)
    newline         reduce using rule 34 (class_method_stmts -> class_method_stmts terms class_method_stmt .)
    KEYWORD_end     reduce using rule 34 (class_method_stmts -> class_method_stmts terms class_method_stmt .)


state 297

    (31) class_func -> KEYWORD_def fname arguments class_method_stmts opt_terms KEYWORD_end .

    DELIM           reduce using rule 31 (class_func -> KEYWORD_def fname arguments class_method_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 31 (class_func -> KEYWORD_def fname arguments class_method_stmts opt_terms KEYWORD_end .)
    KEYWORD_end     reduce using rule 31 (class_func -> KEYWORD_def fname arguments class_method_stmts opt_terms KEYWORD_end .)


state 298

    (89) top_stmt -> KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts opt_terms KEYWORD_end . M_11
    (97) M_11 -> .

    DELIM           reduce using rule 97 (M_11 -> .)
    newline         reduce using rule 97 (M_11 -> .)
    $end            reduce using rule 97 (M_11 -> .)
    KEYWORD_end     reduce using rule 97 (M_11 -> .)
    KEYWORD_elsif   reduce using rule 97 (M_11 -> .)
    KEYWORD_else    reduce using rule 97 (M_11 -> .)

    M_11                           shift and go to state 309

state 299

    (50) func_defn -> KEYWORD_def fname OPEN_PAREN arguments M_13 CLOSE_PAREN func_stmts opt_terms KEYWORD_end M_14 .

    DELIM           reduce using rule 50 (func_defn -> KEYWORD_def fname OPEN_PAREN arguments M_13 CLOSE_PAREN func_stmts opt_terms KEYWORD_end M_14 .)
    newline         reduce using rule 50 (func_defn -> KEYWORD_def fname OPEN_PAREN arguments M_13 CLOSE_PAREN func_stmts opt_terms KEYWORD_end M_14 .)
    $end            reduce using rule 50 (func_defn -> KEYWORD_def fname OPEN_PAREN arguments M_13 CLOSE_PAREN func_stmts opt_terms KEYWORD_end M_14 .)


state 300

    (110) elsif_tail -> KEYWORD_elsif expr3 opt_then . M_3 gen_stmts opt_terms M_4 elsif_tail
    (111) M_3 -> .

    KEYWORD_if      reduce using rule 111 (M_3 -> .)
    KEYWORD_for     reduce using rule 111 (M_3 -> .)
    KEYWORD_puts    reduce using rule 111 (M_3 -> .)
    KEYWORD_break   reduce using rule 111 (M_3 -> .)
    KEYWORD_exit    reduce using rule 111 (M_3 -> .)
    VARIABLES       reduce using rule 111 (M_3 -> .)
    CONSTANTS       reduce using rule 111 (M_3 -> .)
    BOOLEAN_CONSTANTS reduce using rule 111 (M_3 -> .)
    OPEN_PAREN      reduce using rule 111 (M_3 -> .)
    PLUS            reduce using rule 111 (M_3 -> .)
    MINUS           reduce using rule 111 (M_3 -> .)
    BITNOT          reduce using rule 111 (M_3 -> .)
    BITCOMP         reduce using rule 111 (M_3 -> .)
    DELIM           reduce using rule 111 (M_3 -> .)
    newline         reduce using rule 111 (M_3 -> .)
    KEYWORD_elsif   reduce using rule 111 (M_3 -> .)
    KEYWORD_while   reduce using rule 111 (M_3 -> .)
    INT_CONSTANTS   reduce using rule 111 (M_3 -> .)
    FLOAT_CONSTANTS reduce using rule 111 (M_3 -> .)
    KEYWORD_else    reduce using rule 111 (M_3 -> .)
    KEYWORD_end     reduce using rule 111 (M_3 -> .)

    M_3                            shift and go to state 310

state 301

    (107) opt_else_stmt -> KEYWORD_else gen_stmts . opt_terms
    (99) gen_stmts -> gen_stmts . terms top_stmt
    (177) opt_terms -> . none
    (178) opt_terms -> . terms
    (179) terms -> . term
    (180) terms -> . terms term
    (183) none -> .
    (181) term -> . DELIM
    (182) term -> . newline

    KEYWORD_end     reduce using rule 183 (none -> .)
    DELIM           shift and go to state 67
    newline         shift and go to state 66

    term                           shift and go to state 64
    terms                          shift and go to state 216
    none                           shift and go to state 68
    opt_terms                      shift and go to state 311

state 302

    (87) top_stmt -> KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end . M_6
    (92) M_6 -> .

    DELIM           reduce using rule 92 (M_6 -> .)
    newline         reduce using rule 92 (M_6 -> .)
    $end            reduce using rule 92 (M_6 -> .)
    KEYWORD_end     reduce using rule 92 (M_6 -> .)
    KEYWORD_elsif   reduce using rule 92 (M_6 -> .)
    KEYWORD_else    reduce using rule 92 (M_6 -> .)

    M_6                            shift and go to state 312

state 303

    (30) class_func -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 313


state 304

    (32) class_func -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end .

    DELIM           reduce using rule 32 (class_func -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 32 (class_func -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end .)
    KEYWORD_end     reduce using rule 32 (class_func -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end .)


state 305

    (48) class_method_arg_expr -> SIGIL_AT EQUAL literal .

    COMMA           reduce using rule 48 (class_method_arg_expr -> SIGIL_AT EQUAL literal .)
    DELIM           reduce using rule 48 (class_method_arg_expr -> SIGIL_AT EQUAL literal .)
    newline         reduce using rule 48 (class_method_arg_expr -> SIGIL_AT EQUAL literal .)
    KEYWORD_end     reduce using rule 48 (class_method_arg_expr -> SIGIL_AT EQUAL literal .)


state 306

    (49) class_method_arg_expr -> SIGIL_DOUBLE_AT EQUAL literal .

    COMMA           reduce using rule 49 (class_method_arg_expr -> SIGIL_DOUBLE_AT EQUAL literal .)
    DELIM           reduce using rule 49 (class_method_arg_expr -> SIGIL_DOUBLE_AT EQUAL literal .)
    newline         reduce using rule 49 (class_method_arg_expr -> SIGIL_DOUBLE_AT EQUAL literal .)
    KEYWORD_end     reduce using rule 49 (class_method_arg_expr -> SIGIL_DOUBLE_AT EQUAL literal .)


state 307

    (47) class_method_ret_arg -> class_method_ret_arg COMMA literal .

    COMMA           reduce using rule 47 (class_method_ret_arg -> class_method_ret_arg COMMA literal .)
    DELIM           reduce using rule 47 (class_method_ret_arg -> class_method_ret_arg COMMA literal .)
    newline         reduce using rule 47 (class_method_ret_arg -> class_method_ret_arg COMMA literal .)
    KEYWORD_end     reduce using rule 47 (class_method_ret_arg -> class_method_ret_arg COMMA literal .)


state 308

    (46) class_method_ret_arg -> class_method_ret_arg COMMA class_method_arg_expr .

    COMMA           reduce using rule 46 (class_method_ret_arg -> class_method_ret_arg COMMA class_method_arg_expr .)
    DELIM           reduce using rule 46 (class_method_ret_arg -> class_method_ret_arg COMMA class_method_arg_expr .)
    newline         reduce using rule 46 (class_method_ret_arg -> class_method_ret_arg COMMA class_method_arg_expr .)
    KEYWORD_end     reduce using rule 46 (class_method_ret_arg -> class_method_ret_arg COMMA class_method_arg_expr .)


state 309

    (89) top_stmt -> KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts opt_terms KEYWORD_end M_11 .

    DELIM           reduce using rule 89 (top_stmt -> KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts opt_terms KEYWORD_end M_11 .)
    newline         reduce using rule 89 (top_stmt -> KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts opt_terms KEYWORD_end M_11 .)
    KEYWORD_end     reduce using rule 89 (top_stmt -> KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts opt_terms KEYWORD_end M_11 .)
    $end            reduce using rule 89 (top_stmt -> KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts opt_terms KEYWORD_end M_11 .)
    KEYWORD_elsif   reduce using rule 89 (top_stmt -> KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts opt_terms KEYWORD_end M_11 .)
    KEYWORD_else    reduce using rule 89 (top_stmt -> KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts opt_terms KEYWORD_end M_11 .)


state 310

    (110) elsif_tail -> KEYWORD_elsif expr3 opt_then M_3 . gen_stmts opt_terms M_4 elsif_tail
    (98) gen_stmts -> . top_stmt
    (99) gen_stmts -> . gen_stmts terms top_stmt
    (100) gen_stmts -> . none
    (86) top_stmt -> . stmt
    (87) top_stmt -> . KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6
    (88) top_stmt -> . M_7 KEYWORD_while expr3 opt_do M_8 gen_stmts opt_terms KEYWORD_end M_9
    (89) top_stmt -> . KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts opt_terms KEYWORD_end M_11
    (183) none -> .
    (101) stmt -> . expr
    (102) stmt -> . expr1
    (103) stmt -> . puts_stmt
    (104) stmt -> . loop_stmt
    (105) stmt -> . exit_stmt
    (106) stmt -> . func_call_stmt
    (93) M_7 -> .
    (121) expr -> . mlhs EQUAL mrhs
    (136) expr1 -> . expr3
    (73) puts_stmt -> . KEYWORD_puts mrhs
    (74) puts_stmt -> . KEYWORD_puts expr
    (71) loop_stmt -> . KEYWORD_break
    (72) exit_stmt -> . KEYWORD_exit
    (62) func_call_stmt -> . fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (63) func_call_stmt -> . mlhs EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (122) mlhs -> . VARIABLES
    (123) mlhs -> . CONSTANTS
    (124) mlhs -> . array
    (137) expr3 -> . expr3 LOGICALOR expr4
    (138) expr3 -> . expr4
    (65) fname2 -> . VARIABLES
    (66) fname2 -> . CONSTANTS
    (171) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (139) expr4 -> . expr4 LOGICALAND expr5
    (140) expr4 -> . expr5
    (141) expr5 -> . expr6 DOUBLEEQUAL expr6
    (142) expr5 -> . expr6 NOTEQUAL expr6
    (143) expr5 -> . expr6
    (144) expr6 -> . expr7 LESSEQUAL expr7
    (145) expr6 -> . expr7 LESS expr7
    (146) expr6 -> . expr7 GREATER expr7
    (147) expr6 -> . expr7 GREATEREQUAL expr7
    (148) expr6 -> . expr7
    (149) expr6 -> . BOOLEAN_CONSTANTS
    (150) expr7 -> . expr7 BITXOR expr8
    (151) expr7 -> . expr7 PIPE expr8
    (152) expr7 -> . expr8
    (153) expr8 -> . expr8 BITAND expr9
    (154) expr8 -> . expr9
    (155) expr9 -> . expr9 SHIFTL expr10
    (156) expr9 -> . expr9 SHIFTR expr10
    (157) expr9 -> . expr10
    (158) expr10 -> . expr10 PLUS expr11
    (159) expr10 -> . expr10 MINUS expr11
    (160) expr10 -> . expr11
    (161) expr11 -> . expr11 MULTIPLY expr13
    (162) expr11 -> . expr11 DIV expr13
    (163) expr11 -> . expr11 MOD expr13
    (164) expr11 -> . expr13
    (165) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (166) expr13 -> . uexpr INT_CONSTANTS
    (167) expr13 -> . uexpr FLOAT_CONSTANTS
    (168) expr13 -> . CONSTANTS
    (169) expr13 -> . VARIABLES
    (170) expr13 -> . array
    (172) uexpr -> . none
    (173) uexpr -> . PLUS
    (174) uexpr -> . MINUS
    (175) uexpr -> . BITNOT
    (176) uexpr -> . BITCOMP

    KEYWORD_if      shift and go to state 20
    KEYWORD_for     shift and go to state 43
    DELIM           reduce using rule 183 (none -> .)
    newline         reduce using rule 183 (none -> .)
    KEYWORD_elsif   reduce using rule 183 (none -> .)
    KEYWORD_else    reduce using rule 183 (none -> .)
    KEYWORD_end     reduce using rule 183 (none -> .)
    INT_CONSTANTS   reduce using rule 183 (none -> .)
    FLOAT_CONSTANTS reduce using rule 183 (none -> .)
    KEYWORD_while   reduce using rule 93 (M_7 -> .)
    KEYWORD_puts    shift and go to state 26
    KEYWORD_break   shift and go to state 40
    KEYWORD_exit    shift and go to state 17
    VARIABLES       shift and go to state 186
    CONSTANTS       shift and go to state 185
    BOOLEAN_CONSTANTS shift and go to state 8
    OPEN_PAREN      shift and go to state 23
    PLUS            shift and go to state 4
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 32
    BITCOMP         shift and go to state 22

    mlhs                           shift and go to state 1
    fname2                         shift and go to state 44
    expr10                         shift and go to state 10
    expr11                         shift and go to state 11
    expr13                         shift and go to state 12
    array                          shift and go to state 19
    expr3                          shift and go to state 33
    expr1                          shift and go to state 34
    expr6                          shift and go to state 35
    expr7                          shift and go to state 5
    puts_stmt                      shift and go to state 13
    expr5                          shift and go to state 37
    func_call_stmt                 shift and go to state 25
    expr8                          shift and go to state 38
    expr9                          shift and go to state 39
    expr4                          shift and go to state 36
    exit_stmt                      shift and go to state 41
    stmt                           shift and go to state 14
    loop_stmt                      shift and go to state 6
    M_7                            shift and go to state 15
    uexpr                          shift and go to state 7
    none                           shift and go to state 189
    gen_stmts                      shift and go to state 314
    expr                           shift and go to state 28
    top_stmt                       shift and go to state 191

state 311

    (107) opt_else_stmt -> KEYWORD_else gen_stmts opt_terms .

    KEYWORD_end     reduce using rule 107 (opt_else_stmt -> KEYWORD_else gen_stmts opt_terms .)


state 312

    (87) top_stmt -> KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6 .

    DELIM           reduce using rule 87 (top_stmt -> KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6 .)
    newline         reduce using rule 87 (top_stmt -> KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6 .)
    KEYWORD_end     reduce using rule 87 (top_stmt -> KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6 .)
    $end            reduce using rule 87 (top_stmt -> KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6 .)
    KEYWORD_elsif   reduce using rule 87 (top_stmt -> KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6 .)
    KEYWORD_else    reduce using rule 87 (top_stmt -> KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6 .)


state 313

    (30) class_func -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end .

    DELIM           reduce using rule 30 (class_func -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 30 (class_func -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end .)
    KEYWORD_end     reduce using rule 30 (class_func -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end .)


state 314

    (110) elsif_tail -> KEYWORD_elsif expr3 opt_then M_3 gen_stmts . opt_terms M_4 elsif_tail
    (99) gen_stmts -> gen_stmts . terms top_stmt
    (177) opt_terms -> . none
    (178) opt_terms -> . terms
    (179) terms -> . term
    (180) terms -> . terms term
    (183) none -> .
    (181) term -> . DELIM
    (182) term -> . newline

    KEYWORD_elsif   reduce using rule 183 (none -> .)
    KEYWORD_else    reduce using rule 183 (none -> .)
    KEYWORD_end     reduce using rule 183 (none -> .)
    DELIM           shift and go to state 67
    newline         shift and go to state 66

    none                           shift and go to state 68
    terms                          shift and go to state 216
    term                           shift and go to state 64
    opt_terms                      shift and go to state 315

state 315

    (110) elsif_tail -> KEYWORD_elsif expr3 opt_then M_3 gen_stmts opt_terms . M_4 elsif_tail
    (112) M_4 -> .

    KEYWORD_elsif   reduce using rule 112 (M_4 -> .)
    KEYWORD_else    reduce using rule 112 (M_4 -> .)
    KEYWORD_end     reduce using rule 112 (M_4 -> .)

    M_4                            shift and go to state 316

state 316

    (110) elsif_tail -> KEYWORD_elsif expr3 opt_then M_3 gen_stmts opt_terms M_4 . elsif_tail
    (109) elsif_tail -> . none
    (110) elsif_tail -> . KEYWORD_elsif expr3 opt_then M_3 gen_stmts opt_terms M_4 elsif_tail
    (183) none -> .

    KEYWORD_elsif   shift and go to state 267
    KEYWORD_else    reduce using rule 183 (none -> .)
    KEYWORD_end     reduce using rule 183 (none -> .)

    none                           shift and go to state 266
    elsif_tail                     shift and go to state 317

state 317

    (110) elsif_tail -> KEYWORD_elsif expr3 opt_then M_3 gen_stmts opt_terms M_4 elsif_tail .

    KEYWORD_else    reduce using rule 110 (elsif_tail -> KEYWORD_elsif expr3 opt_then M_3 gen_stmts opt_terms M_4 elsif_tail .)
    KEYWORD_end     reduce using rule 110 (elsif_tail -> KEYWORD_elsif expr3 opt_then M_3 gen_stmts opt_terms M_4 elsif_tail .)

