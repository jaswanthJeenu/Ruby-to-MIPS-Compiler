Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    KEYWORD_redo
    KEYWORD_unless
    BLOCK_END
    KEYWORD___ENCODING__
    BITANDEQUAL
    KEYWORD_next
    SQUOTES
    KEYWORD_END
    KEYWORD_self
    KEYWORD_when
    MINUSEQUAL
    KEYWORD_nil
    OR
    DIVEQUAL
    KEYWORD_or
    IFF
    LOGICALANDEQUAL
    KEYWORD_retry
    DOUBLESTAR
    KEYWORD_undef
    COLON
    SIGIL_DOLLAR
    DOUBLE_COLON
    DOUBLESTAREQUAL
    KEYWORD_false
    KEYWORD_definedQ
    SHIFTLEQUAL
    AND
    NOT
    KEYWORD_not
    KEYWORD_yield
    KEYWORD_until
    KEYWORD_ensure
    TRIPLEDOT
    QUESTION_MARK
    MODEQUAL
    QUESTIONCOLON
    KEYWORD_true
    LOGICALOREQUAL
    KEYWORD___END__
    PLUSEQUAL
    KEYWORD_super
    KEYWORD_alias
    MULTIPLYEQUAL
    SHIFTREQUAL
    KEYWORD___LINE__
    KEYWORD_BEGIN
    BLOCK_BEGIN
    KEYWORD_begin
    DQUOTES
    TRIPLEEQUAL
    PIPEEQUAL
    KEYWORD_and
    KEYWORD___FILE__
    KEYWORD_rescue
    KEYWORD_module
    DOLLAR
    BACK_SLASH
    KEYWORD_case
    BITXOREQUAL

Grammar

Rule 0     S' -> program
Rule 1     program -> top_top_compstmt
Rule 2     top_top_compstmt -> statements opt_terms
Rule 3     statements -> statement
Rule 4     statements -> statements terms statement
Rule 5     statement -> top_stmt
Rule 6     statement -> func_defn
Rule 7     statement -> class_defn
Rule 8     statement -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
Rule 9     statement -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN
Rule 10    statement -> VARIABLES DOT VARIABLES arguments
Rule 11    statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
Rule 12    statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
Rule 13    statement -> CONSTANTS DOT KEYWORD_new arguments
Rule 14    class_defn -> KEYWORD_class CONSTANTS newline class_stmts opt_terms KEYWORD_end
Rule 15    class_stmts -> class_stmt
Rule 16    class_stmts -> class_stmts terms class_stmt
Rule 17    class_stmts -> none
Rule 18    class_stmt -> class_mlhs EQUAL class_mrhs
Rule 19    class_stmt -> class_func
Rule 20    class_mrhs -> literal
Rule 21    literal -> INT_CONSTANTS
Rule 22    literal -> FLOAT_CONSTANTS
Rule 23    literal -> STRING_CONSTANTS
Rule 24    literal -> BOOLEAN_CONSTANTS
Rule 25    literal -> CHAR_CONSTANTS
Rule 26    literal -> SIGIL_AT
Rule 27    literal -> SIGIL_DOUBLE_AT
Rule 28    class_mlhs -> class_mlhs terms SIGIL_DOUBLE_AT
Rule 29    class_mlhs -> SIGIL_DOUBLE_AT
Rule 30    class_func -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
Rule 31    class_func -> KEYWORD_def fname arguments class_method_stmts opt_terms KEYWORD_end
Rule 32    class_func -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
Rule 33    class_method_stmts -> class_method_stmt
Rule 34    class_method_stmts -> class_method_stmts terms class_method_stmt
Rule 35    class_method_stmts -> none
Rule 36    class_method_stmt -> class_method_mlhs EQUAL class_method_mrhs
Rule 37    class_method_stmt -> KEYWORD_return class_method_ret_arg
Rule 38    class_method_stmt -> puts_stmt
Rule 39    class_method_mlhs -> class_method_mlhs terms SIGIL_AT
Rule 40    class_method_mlhs -> SIGIL_AT
Rule 41    class_method_mlhs -> SIGIL_DOUBLE_AT
Rule 42    class_method_mrhs -> literal
Rule 43    class_method_mrhs -> VARIABLES
Rule 44    class_method_ret_arg -> class_method_arg_expr
Rule 45    class_method_ret_arg -> literal
Rule 46    class_method_ret_arg -> class_method_ret_arg COMMA class_method_arg_expr
Rule 47    class_method_ret_arg -> class_method_ret_arg COMMA literal
Rule 48    class_method_arg_expr -> SIGIL_AT EQUAL literal
Rule 49    class_method_arg_expr -> SIGIL_DOUBLE_AT EQUAL literal
Rule 50    func_defn -> KEYWORD_def fname OPEN_PAREN arguments M_13 CLOSE_PAREN func_stmts opt_terms KEYWORD_end M_14
Rule 51    func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN M_18 func_stmts opt_terms KEYWORD_end M_15
Rule 52    fname -> VARIABLES
Rule 53    fname -> CONSTANTS
Rule 54    arguments -> VARIABLES M_12 COMMA arguments
Rule 55    arguments -> CONSTANTS M_12 COMMA arguments
Rule 56    arguments -> VARIABLES M_12
Rule 57    arguments -> CONSTANTS M_12
Rule 58    M_12 -> <empty>
Rule 59    M_13 -> <empty>
Rule 60    M_18 -> <empty>
Rule 61    M_14 -> <empty>
Rule 62    M_15 -> <empty>
Rule 63    func_call_stmt -> fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
Rule 64    func_call_stmt -> mlhs EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
Rule 65    M_17 -> <empty>
Rule 66    fname2 -> VARIABLES
Rule 67    fname2 -> CONSTANTS
Rule 68    call_arg -> primary M_16 COMMA call_arg
Rule 69    call_arg -> primary M_16
Rule 70    call_arg -> none
Rule 71    M_16 -> <empty>
Rule 72    loop_stmt -> KEYWORD_break
Rule 73    exit_stmt -> KEYWORD_exit
Rule 74    puts_stmt -> KEYWORD_puts mrhs
Rule 75    puts_stmt -> KEYWORD_puts expr
Rule 76    func_stmts -> func_stmt
Rule 77    func_stmts -> func_stmts terms func_stmt
Rule 78    func_stmts -> none
Rule 79    func_stmt -> top_stmt
Rule 80    func_ret_arg -> primary
Rule 81    primary -> INT_CONSTANTS
Rule 82    primary -> BOOLEAN_CONSTANTS
Rule 83    primary -> CONSTANTS
Rule 84    primary -> VARIABLES
Rule 85    primary -> array
Rule 86    top_stmt -> stmt
Rule 87    top_stmt -> KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6
Rule 88    top_stmt -> KEYWORD_while M_7 expr3 opt_do M_8 gen_stmts2 opt_terms KEYWORD_end M_9
Rule 89    top_stmt -> KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts2 opt_terms KEYWORD_end M_11
Rule 90    M_1 -> <empty>
Rule 91    M_2 -> <empty>
Rule 92    M_6 -> <empty>
Rule 93    M_7 -> <empty>
Rule 94    M_8 -> <empty>
Rule 95    M_9 -> <empty>
Rule 96    M_10 -> <empty>
Rule 97    M_11 -> <empty>
Rule 98    gen_stmts -> top_stmt
Rule 99    gen_stmts -> gen_stmts terms top_stmt
Rule 100   gen_stmts -> none
Rule 101   gen_stmts2 -> top_stmt
Rule 102   gen_stmts2 -> gen_stmts2 terms top_stmt
Rule 103   gen_stmts2 -> none
Rule 104   stmt -> expr
Rule 105   stmt -> expr1
Rule 106   stmt -> puts_stmt
Rule 107   stmt -> loop_stmt
Rule 108   stmt -> exit_stmt
Rule 109   stmt -> func_call_stmt
Rule 110   stmt -> KEYWORD_return func_ret_arg
Rule 111   opt_else_stmt -> KEYWORD_else gen_stmts opt_terms
Rule 112   opt_else_stmt -> none
Rule 113   elsif_tail -> none
Rule 114   elsif_tail -> KEYWORD_elsif expr3 opt_then M_3 gen_stmts opt_terms M_4 elsif_tail
Rule 115   M_3 -> <empty>
Rule 116   M_4 -> <empty>
Rule 117   opt_then -> KEYWORD_then
Rule 118   opt_then -> newline
Rule 119   opt_do -> KEYWORD_do
Rule 120   opt_do -> newline
Rule 121   for_range -> for_range_variables DOUBLEDOT for_range_variables
Rule 122   for_range_variables -> INT_CONSTANTS
Rule 123   for_range_variables -> VARIABLES
Rule 124   for_range_variables -> CONSTANTS
Rule 125   expr -> mlhs EQUAL mrhs
Rule 126   mlhs -> VARIABLES
Rule 127   mlhs -> CONSTANTS
Rule 128   mlhs -> array
Rule 129   mrhs -> expr1
Rule 130   mrhs -> str_expr
Rule 131   mrhs -> KEYWORD_gets
Rule 132   mrhs -> OPEN_BRACKET CLOSE_BRACKET
Rule 133   mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
Rule 134   mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN
Rule 135   mrhs -> VARIABLES DOT VARIABLES
Rule 136   mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
Rule 137   mrhs -> CONSTANTS DOT KEYWORD_new
Rule 138   mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
Rule 139   str_expr -> STRING_CONSTANTS
Rule 140   expr1 -> expr3
Rule 141   expr3 -> expr3 LOGICALOR expr4
Rule 142   expr3 -> expr4
Rule 143   expr4 -> expr4 LOGICALAND expr5
Rule 144   expr4 -> expr5
Rule 145   expr5 -> expr6 DOUBLEEQUAL expr6
Rule 146   expr5 -> expr6 NOTEQUAL expr6
Rule 147   expr5 -> expr6
Rule 148   expr6 -> expr7 LESSEQUAL expr7
Rule 149   expr6 -> expr7 LESS expr7
Rule 150   expr6 -> expr7 GREATER expr7
Rule 151   expr6 -> expr7 GREATEREQUAL expr7
Rule 152   expr6 -> expr7
Rule 153   expr6 -> BOOLEAN_CONSTANTS
Rule 154   expr7 -> expr7 BITXOR expr8
Rule 155   expr7 -> expr7 PIPE expr8
Rule 156   expr7 -> expr8
Rule 157   expr8 -> expr8 BITAND expr9
Rule 158   expr8 -> expr9
Rule 159   expr9 -> expr9 SHIFTL expr10
Rule 160   expr9 -> expr9 SHIFTR expr10
Rule 161   expr9 -> expr10
Rule 162   expr10 -> expr10 PLUS expr11
Rule 163   expr10 -> expr10 MINUS expr11
Rule 164   expr10 -> expr11
Rule 165   expr11 -> expr11 MULTIPLY expr13
Rule 166   expr11 -> expr11 DIV expr13
Rule 167   expr11 -> expr11 MOD expr13
Rule 168   expr11 -> expr13
Rule 169   expr13 -> OPEN_PAREN expr1 CLOSE_PAREN
Rule 170   expr13 -> uexpr INT_CONSTANTS
Rule 171   expr13 -> CONSTANTS
Rule 172   expr13 -> VARIABLES
Rule 173   expr13 -> array
Rule 174   array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
Rule 175   uexpr -> none
Rule 176   uexpr -> PLUS
Rule 177   uexpr -> MINUS
Rule 178   uexpr -> BITNOT
Rule 179   uexpr -> BITCOMP
Rule 180   opt_terms -> none
Rule 181   opt_terms -> terms
Rule 182   terms -> term
Rule 183   terms -> terms term
Rule 184   term -> DELIM
Rule 185   term -> newline
Rule 186   none -> <empty>

Terminals, with rules where they appear

AND                  : 
BACK_SLASH           : 
BITAND               : 157
BITANDEQUAL          : 
BITCOMP              : 179
BITNOT               : 178
BITXOR               : 154
BITXOREQUAL          : 
BLOCK_BEGIN          : 
BLOCK_END            : 
BOOLEAN_CONSTANTS    : 24 82 153
CHAR_CONSTANTS       : 25
CLOSE_BRACKET        : 132 174
CLOSE_PAREN          : 8 9 11 12 30 32 50 51 63 64 133 134 136 138 169
COLON                : 
COMMA                : 46 47 54 55 68
CONSTANTS            : 11 12 13 14 53 55 57 67 83 124 127 136 137 138 171
DELIM                : 184
DIV                  : 166
DIVEQUAL             : 
DOLLAR               : 
DOT                  : 8 9 10 11 12 13 133 134 135 136 137 138
DOUBLEDOT            : 121
DOUBLEEQUAL          : 145
DOUBLESTAR           : 
DOUBLESTAREQUAL      : 
DOUBLE_COLON         : 
DQUOTES              : 
EQUAL                : 18 36 48 49 64 125
FLOAT_CONSTANTS      : 22
GREATER              : 150
GREATEREQUAL         : 151
IFF                  : 
INT_CONSTANTS        : 21 81 122 170
KEYWORD_BEGIN        : 
KEYWORD_END          : 
KEYWORD___ENCODING__ : 
KEYWORD___END__      : 
KEYWORD___FILE__     : 
KEYWORD___LINE__     : 
KEYWORD_alias        : 
KEYWORD_and          : 
KEYWORD_begin        : 
KEYWORD_break        : 72
KEYWORD_case         : 
KEYWORD_class        : 14
KEYWORD_def          : 30 31 32 50 51
KEYWORD_definedQ     : 
KEYWORD_do           : 119
KEYWORD_else         : 111
KEYWORD_elsif        : 114
KEYWORD_end          : 14 30 31 32 50 51 87 88 89
KEYWORD_ensure       : 
KEYWORD_exit         : 73
KEYWORD_false        : 
KEYWORD_for          : 89
KEYWORD_gets         : 131
KEYWORD_if           : 87
KEYWORD_in           : 89
KEYWORD_module       : 
KEYWORD_new          : 11 12 13 136 137 138
KEYWORD_next         : 
KEYWORD_nil          : 
KEYWORD_not          : 
KEYWORD_or           : 
KEYWORD_puts         : 74 75
KEYWORD_redo         : 
KEYWORD_rescue       : 
KEYWORD_retry        : 
KEYWORD_return       : 37 110
KEYWORD_self         : 
KEYWORD_super        : 
KEYWORD_then         : 117
KEYWORD_true         : 
KEYWORD_undef        : 
KEYWORD_unless       : 
KEYWORD_until        : 
KEYWORD_when         : 
KEYWORD_while        : 88
KEYWORD_yield        : 
LESS                 : 149
LESSEQUAL            : 148
LOGICALAND           : 143
LOGICALANDEQUAL      : 
LOGICALOR            : 141
LOGICALOREQUAL       : 
MINUS                : 163 177
MINUSEQUAL           : 
MOD                  : 167
MODEQUAL             : 
MULTIPLY             : 165
MULTIPLYEQUAL        : 
NOT                  : 
NOTEQUAL             : 146
OPEN_BRACKET         : 132 174
OPEN_PAREN           : 8 9 11 12 30 32 50 51 63 64 133 134 136 138 169
OR                   : 
PIPE                 : 155
PIPEEQUAL            : 
PLUS                 : 162 176
PLUSEQUAL            : 
QUESTIONCOLON        : 
QUESTION_MARK        : 
SHIFTL               : 159
SHIFTLEQUAL          : 
SHIFTR               : 160
SHIFTREQUAL          : 
SIGIL_AT             : 26 39 40 48
SIGIL_DOLLAR         : 
SIGIL_DOUBLE_AT      : 27 28 29 41 49
SQUOTES              : 
STRING_CONSTANTS     : 23 139
TRIPLEDOT            : 
TRIPLEEQUAL          : 
VARIABLES            : 8 8 9 9 10 10 43 52 54 56 66 84 89 123 126 133 133 134 134 135 135 172 174
error                : 
newline              : 14 118 120 185

Nonterminals, with rules where they appear

M_1                  : 87
M_10                 : 89
M_11                 : 89
M_12                 : 54 55 56 57
M_13                 : 50
M_14                 : 50
M_15                 : 51
M_16                 : 68 69
M_17                 : 63 64
M_18                 : 51
M_2                  : 87
M_3                  : 114
M_4                  : 114
M_6                  : 87
M_7                  : 88
M_8                  : 88
M_9                  : 88
arguments            : 8 10 11 13 30 31 50 54 55 133 136
array                : 85 128 173
call_arg             : 63 64 68
class_defn           : 7
class_func           : 19
class_method_arg_expr : 44 46
class_method_mlhs    : 36 39
class_method_mrhs    : 36
class_method_ret_arg : 37 46 47
class_method_stmt    : 33 34
class_method_stmts   : 30 31 32 34
class_mlhs           : 18 28
class_mrhs           : 18
class_stmt           : 15 16
class_stmts          : 14 16
elsif_tail           : 87 114
exit_stmt            : 108
expr                 : 75 104
expr1                : 105 129 169
expr10               : 159 160 161 162 163
expr11               : 162 163 164 165 166 167
expr13               : 165 166 167 168
expr3                : 87 88 114 140 141
expr4                : 141 142 143
expr5                : 143 144
expr6                : 145 145 146 146 147
expr7                : 148 148 149 149 150 150 151 151 152 154 155 174
expr8                : 154 155 156 157
expr9                : 157 158 159 160
fname                : 30 31 32 50 51
fname2               : 63 64
for_range            : 89
for_range_variables  : 121 121
func_call_stmt       : 109
func_defn            : 6
func_ret_arg         : 110
func_stmt            : 76 77
func_stmts           : 50 51 77
gen_stmts            : 87 99 111 114
gen_stmts2           : 88 89 102
literal              : 20 42 45 47 48 49
loop_stmt            : 107
mlhs                 : 64 125
mrhs                 : 74 125
none                 : 17 35 70 78 100 103 112 113 175 180
opt_do               : 88 89
opt_else_stmt        : 87
opt_terms            : 2 14 30 31 32 50 51 87 88 89 111 114
opt_then             : 87 114
primary              : 68 69 80
program              : 0
puts_stmt            : 38 106
statement            : 3 4
statements           : 2 4
stmt                 : 86
str_expr             : 130
term                 : 182 183
terms                : 4 16 28 34 39 77 99 102 181 183
top_stmt             : 5 79 98 99 101 102
top_top_compstmt     : 1
uexpr                : 170

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . top_top_compstmt
    (2) top_top_compstmt -> . statements opt_terms
    (3) statements -> . statement
    (4) statements -> . statements terms statement
    (5) statement -> . top_stmt
    (6) statement -> . func_defn
    (7) statement -> . class_defn
    (8) statement -> . VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (9) statement -> . VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (10) statement -> . VARIABLES DOT VARIABLES arguments
    (11) statement -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (12) statement -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (13) statement -> . CONSTANTS DOT KEYWORD_new arguments
    (86) top_stmt -> . stmt
    (87) top_stmt -> . KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6
    (88) top_stmt -> . KEYWORD_while M_7 expr3 opt_do M_8 gen_stmts2 opt_terms KEYWORD_end M_9
    (89) top_stmt -> . KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts2 opt_terms KEYWORD_end M_11
    (50) func_defn -> . KEYWORD_def fname OPEN_PAREN arguments M_13 CLOSE_PAREN func_stmts opt_terms KEYWORD_end M_14
    (51) func_defn -> . KEYWORD_def fname OPEN_PAREN CLOSE_PAREN M_18 func_stmts opt_terms KEYWORD_end M_15
    (14) class_defn -> . KEYWORD_class CONSTANTS newline class_stmts opt_terms KEYWORD_end
    (104) stmt -> . expr
    (105) stmt -> . expr1
    (106) stmt -> . puts_stmt
    (107) stmt -> . loop_stmt
    (108) stmt -> . exit_stmt
    (109) stmt -> . func_call_stmt
    (110) stmt -> . KEYWORD_return func_ret_arg
    (125) expr -> . mlhs EQUAL mrhs
    (140) expr1 -> . expr3
    (74) puts_stmt -> . KEYWORD_puts mrhs
    (75) puts_stmt -> . KEYWORD_puts expr
    (72) loop_stmt -> . KEYWORD_break
    (73) exit_stmt -> . KEYWORD_exit
    (63) func_call_stmt -> . fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (64) func_call_stmt -> . mlhs EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (126) mlhs -> . VARIABLES
    (127) mlhs -> . CONSTANTS
    (128) mlhs -> . array
    (141) expr3 -> . expr3 LOGICALOR expr4
    (142) expr3 -> . expr4
    (66) fname2 -> . VARIABLES
    (67) fname2 -> . CONSTANTS
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (143) expr4 -> . expr4 LOGICALAND expr5
    (144) expr4 -> . expr5
    (145) expr5 -> . expr6 DOUBLEEQUAL expr6
    (146) expr5 -> . expr6 NOTEQUAL expr6
    (147) expr5 -> . expr6
    (148) expr6 -> . expr7 LESSEQUAL expr7
    (149) expr6 -> . expr7 LESS expr7
    (150) expr6 -> . expr7 GREATER expr7
    (151) expr6 -> . expr7 GREATEREQUAL expr7
    (152) expr6 -> . expr7
    (153) expr6 -> . BOOLEAN_CONSTANTS
    (154) expr7 -> . expr7 BITXOR expr8
    (155) expr7 -> . expr7 PIPE expr8
    (156) expr7 -> . expr8
    (157) expr8 -> . expr8 BITAND expr9
    (158) expr8 -> . expr9
    (159) expr9 -> . expr9 SHIFTL expr10
    (160) expr9 -> . expr9 SHIFTR expr10
    (161) expr9 -> . expr10
    (162) expr10 -> . expr10 PLUS expr11
    (163) expr10 -> . expr10 MINUS expr11
    (164) expr10 -> . expr11
    (165) expr11 -> . expr11 MULTIPLY expr13
    (166) expr11 -> . expr11 DIV expr13
    (167) expr11 -> . expr11 MOD expr13
    (168) expr11 -> . expr13
    (169) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (170) expr13 -> . uexpr INT_CONSTANTS
    (171) expr13 -> . CONSTANTS
    (172) expr13 -> . VARIABLES
    (173) expr13 -> . array
    (175) uexpr -> . none
    (176) uexpr -> . PLUS
    (177) uexpr -> . MINUS
    (178) uexpr -> . BITNOT
    (179) uexpr -> . BITCOMP
    (186) none -> .

    VARIABLES       shift and go to state 22
    CONSTANTS       shift and go to state 46
    KEYWORD_if      shift and go to state 21
    KEYWORD_while   shift and go to state 3
    KEYWORD_for     shift and go to state 44
    KEYWORD_def     shift and go to state 17
    KEYWORD_class   shift and go to state 32
    KEYWORD_return  shift and go to state 14
    KEYWORD_puts    shift and go to state 27
    KEYWORD_break   shift and go to state 41
    KEYWORD_exit    shift and go to state 18
    BOOLEAN_CONSTANTS shift and go to state 9
    OPEN_PAREN      shift and go to state 24
    PLUS            shift and go to state 5
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 33
    BITCOMP         shift and go to state 23
    INT_CONSTANTS   reduce using rule 186 (none -> .)

    statements                     shift and go to state 19
    mlhs                           shift and go to state 1
    func_defn                      shift and go to state 31
    puts_stmt                      shift and go to state 15
    expr11                         shift and go to state 12
    expr13                         shift and go to state 13
    array                          shift and go to state 20
    expr3                          shift and go to state 34
    program                        shift and go to state 4
    expr6                          shift and go to state 36
    statement                      shift and go to state 25
    expr5                          shift and go to state 38
    func_call_stmt                 shift and go to state 26
    expr7                          shift and go to state 6
    expr8                          shift and go to state 39
    fname2                         shift and go to state 45
    expr4                          shift and go to state 37
    exit_stmt                      shift and go to state 42
    expr9                          shift and go to state 40
    none                           shift and go to state 28
    stmt                           shift and go to state 16
    loop_stmt                      shift and go to state 7
    uexpr                          shift and go to state 8
    expr                           shift and go to state 29
    top_top_compstmt               shift and go to state 43
    class_defn                     shift and go to state 30
    expr10                         shift and go to state 11
    expr1                          shift and go to state 35
    top_stmt                       shift and go to state 10

state 1

    (125) expr -> mlhs . EQUAL mrhs
    (64) func_call_stmt -> mlhs . EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17

    EQUAL           shift and go to state 47


state 2

    (177) uexpr -> MINUS .

    INT_CONSTANTS   reduce using rule 177 (uexpr -> MINUS .)


state 3

    (88) top_stmt -> KEYWORD_while . M_7 expr3 opt_do M_8 gen_stmts2 opt_terms KEYWORD_end M_9
    (93) M_7 -> .

    BOOLEAN_CONSTANTS reduce using rule 93 (M_7 -> .)
    OPEN_PAREN      reduce using rule 93 (M_7 -> .)
    CONSTANTS       reduce using rule 93 (M_7 -> .)
    VARIABLES       reduce using rule 93 (M_7 -> .)
    PLUS            reduce using rule 93 (M_7 -> .)
    MINUS           reduce using rule 93 (M_7 -> .)
    BITNOT          reduce using rule 93 (M_7 -> .)
    BITCOMP         reduce using rule 93 (M_7 -> .)
    INT_CONSTANTS   reduce using rule 93 (M_7 -> .)

    M_7                            shift and go to state 48

state 4

    (0) S' -> program .



state 5

    (176) uexpr -> PLUS .

    INT_CONSTANTS   reduce using rule 176 (uexpr -> PLUS .)


state 6

    (148) expr6 -> expr7 . LESSEQUAL expr7
    (149) expr6 -> expr7 . LESS expr7
    (150) expr6 -> expr7 . GREATER expr7
    (151) expr6 -> expr7 . GREATEREQUAL expr7
    (152) expr6 -> expr7 .
    (154) expr7 -> expr7 . BITXOR expr8
    (155) expr7 -> expr7 . PIPE expr8

    LESSEQUAL       shift and go to state 54
    LESS            shift and go to state 51
    GREATER         shift and go to state 50
    GREATEREQUAL    shift and go to state 49
    DOUBLEEQUAL     reduce using rule 152 (expr6 -> expr7 .)
    NOTEQUAL        reduce using rule 152 (expr6 -> expr7 .)
    LOGICALAND      reduce using rule 152 (expr6 -> expr7 .)
    LOGICALOR       reduce using rule 152 (expr6 -> expr7 .)
    DELIM           reduce using rule 152 (expr6 -> expr7 .)
    newline         reduce using rule 152 (expr6 -> expr7 .)
    $end            reduce using rule 152 (expr6 -> expr7 .)
    KEYWORD_elsif   reduce using rule 152 (expr6 -> expr7 .)
    KEYWORD_else    reduce using rule 152 (expr6 -> expr7 .)
    KEYWORD_end     reduce using rule 152 (expr6 -> expr7 .)
    KEYWORD_then    reduce using rule 152 (expr6 -> expr7 .)
    CLOSE_PAREN     reduce using rule 152 (expr6 -> expr7 .)
    KEYWORD_do      reduce using rule 152 (expr6 -> expr7 .)
    BITXOR          shift and go to state 53
    PIPE            shift and go to state 52


state 7

    (107) stmt -> loop_stmt .

    DELIM           reduce using rule 107 (stmt -> loop_stmt .)
    newline         reduce using rule 107 (stmt -> loop_stmt .)
    KEYWORD_end     reduce using rule 107 (stmt -> loop_stmt .)
    KEYWORD_elsif   reduce using rule 107 (stmt -> loop_stmt .)
    KEYWORD_else    reduce using rule 107 (stmt -> loop_stmt .)
    $end            reduce using rule 107 (stmt -> loop_stmt .)


state 8

    (170) expr13 -> uexpr . INT_CONSTANTS

    INT_CONSTANTS   shift and go to state 55


state 9

    (153) expr6 -> BOOLEAN_CONSTANTS .

    DOUBLEEQUAL     reduce using rule 153 (expr6 -> BOOLEAN_CONSTANTS .)
    NOTEQUAL        reduce using rule 153 (expr6 -> BOOLEAN_CONSTANTS .)
    LOGICALAND      reduce using rule 153 (expr6 -> BOOLEAN_CONSTANTS .)
    LOGICALOR       reduce using rule 153 (expr6 -> BOOLEAN_CONSTANTS .)
    DELIM           reduce using rule 153 (expr6 -> BOOLEAN_CONSTANTS .)
    newline         reduce using rule 153 (expr6 -> BOOLEAN_CONSTANTS .)
    $end            reduce using rule 153 (expr6 -> BOOLEAN_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 153 (expr6 -> BOOLEAN_CONSTANTS .)
    KEYWORD_else    reduce using rule 153 (expr6 -> BOOLEAN_CONSTANTS .)
    KEYWORD_end     reduce using rule 153 (expr6 -> BOOLEAN_CONSTANTS .)
    KEYWORD_then    reduce using rule 153 (expr6 -> BOOLEAN_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 153 (expr6 -> BOOLEAN_CONSTANTS .)
    KEYWORD_do      reduce using rule 153 (expr6 -> BOOLEAN_CONSTANTS .)


state 10

    (5) statement -> top_stmt .

    DELIM           reduce using rule 5 (statement -> top_stmt .)
    newline         reduce using rule 5 (statement -> top_stmt .)
    $end            reduce using rule 5 (statement -> top_stmt .)


state 11

    (161) expr9 -> expr10 .
    (162) expr10 -> expr10 . PLUS expr11
    (163) expr10 -> expr10 . MINUS expr11

    SHIFTL          reduce using rule 161 (expr9 -> expr10 .)
    SHIFTR          reduce using rule 161 (expr9 -> expr10 .)
    BITAND          reduce using rule 161 (expr9 -> expr10 .)
    LESSEQUAL       reduce using rule 161 (expr9 -> expr10 .)
    LESS            reduce using rule 161 (expr9 -> expr10 .)
    GREATER         reduce using rule 161 (expr9 -> expr10 .)
    GREATEREQUAL    reduce using rule 161 (expr9 -> expr10 .)
    BITXOR          reduce using rule 161 (expr9 -> expr10 .)
    PIPE            reduce using rule 161 (expr9 -> expr10 .)
    DOUBLEEQUAL     reduce using rule 161 (expr9 -> expr10 .)
    NOTEQUAL        reduce using rule 161 (expr9 -> expr10 .)
    LOGICALAND      reduce using rule 161 (expr9 -> expr10 .)
    LOGICALOR       reduce using rule 161 (expr9 -> expr10 .)
    DELIM           reduce using rule 161 (expr9 -> expr10 .)
    newline         reduce using rule 161 (expr9 -> expr10 .)
    $end            reduce using rule 161 (expr9 -> expr10 .)
    KEYWORD_end     reduce using rule 161 (expr9 -> expr10 .)
    KEYWORD_then    reduce using rule 161 (expr9 -> expr10 .)
    CLOSE_PAREN     reduce using rule 161 (expr9 -> expr10 .)
    KEYWORD_elsif   reduce using rule 161 (expr9 -> expr10 .)
    KEYWORD_else    reduce using rule 161 (expr9 -> expr10 .)
    KEYWORD_do      reduce using rule 161 (expr9 -> expr10 .)
    CLOSE_BRACKET   reduce using rule 161 (expr9 -> expr10 .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57


state 12

    (164) expr10 -> expr11 .
    (165) expr11 -> expr11 . MULTIPLY expr13
    (166) expr11 -> expr11 . DIV expr13
    (167) expr11 -> expr11 . MOD expr13

    PLUS            reduce using rule 164 (expr10 -> expr11 .)
    MINUS           reduce using rule 164 (expr10 -> expr11 .)
    SHIFTL          reduce using rule 164 (expr10 -> expr11 .)
    SHIFTR          reduce using rule 164 (expr10 -> expr11 .)
    BITAND          reduce using rule 164 (expr10 -> expr11 .)
    LESSEQUAL       reduce using rule 164 (expr10 -> expr11 .)
    LESS            reduce using rule 164 (expr10 -> expr11 .)
    GREATER         reduce using rule 164 (expr10 -> expr11 .)
    GREATEREQUAL    reduce using rule 164 (expr10 -> expr11 .)
    BITXOR          reduce using rule 164 (expr10 -> expr11 .)
    PIPE            reduce using rule 164 (expr10 -> expr11 .)
    DOUBLEEQUAL     reduce using rule 164 (expr10 -> expr11 .)
    NOTEQUAL        reduce using rule 164 (expr10 -> expr11 .)
    LOGICALAND      reduce using rule 164 (expr10 -> expr11 .)
    LOGICALOR       reduce using rule 164 (expr10 -> expr11 .)
    DELIM           reduce using rule 164 (expr10 -> expr11 .)
    newline         reduce using rule 164 (expr10 -> expr11 .)
    $end            reduce using rule 164 (expr10 -> expr11 .)
    KEYWORD_then    reduce using rule 164 (expr10 -> expr11 .)
    CLOSE_PAREN     reduce using rule 164 (expr10 -> expr11 .)
    KEYWORD_elsif   reduce using rule 164 (expr10 -> expr11 .)
    KEYWORD_else    reduce using rule 164 (expr10 -> expr11 .)
    KEYWORD_end     reduce using rule 164 (expr10 -> expr11 .)
    KEYWORD_do      reduce using rule 164 (expr10 -> expr11 .)
    CLOSE_BRACKET   reduce using rule 164 (expr10 -> expr11 .)
    MULTIPLY        shift and go to state 58
    DIV             shift and go to state 59
    MOD             shift and go to state 60


state 13

    (168) expr11 -> expr13 .

    MULTIPLY        reduce using rule 168 (expr11 -> expr13 .)
    DIV             reduce using rule 168 (expr11 -> expr13 .)
    MOD             reduce using rule 168 (expr11 -> expr13 .)
    PLUS            reduce using rule 168 (expr11 -> expr13 .)
    MINUS           reduce using rule 168 (expr11 -> expr13 .)
    SHIFTL          reduce using rule 168 (expr11 -> expr13 .)
    SHIFTR          reduce using rule 168 (expr11 -> expr13 .)
    BITAND          reduce using rule 168 (expr11 -> expr13 .)
    LESSEQUAL       reduce using rule 168 (expr11 -> expr13 .)
    LESS            reduce using rule 168 (expr11 -> expr13 .)
    GREATER         reduce using rule 168 (expr11 -> expr13 .)
    GREATEREQUAL    reduce using rule 168 (expr11 -> expr13 .)
    BITXOR          reduce using rule 168 (expr11 -> expr13 .)
    PIPE            reduce using rule 168 (expr11 -> expr13 .)
    DOUBLEEQUAL     reduce using rule 168 (expr11 -> expr13 .)
    NOTEQUAL        reduce using rule 168 (expr11 -> expr13 .)
    LOGICALAND      reduce using rule 168 (expr11 -> expr13 .)
    LOGICALOR       reduce using rule 168 (expr11 -> expr13 .)
    KEYWORD_then    reduce using rule 168 (expr11 -> expr13 .)
    newline         reduce using rule 168 (expr11 -> expr13 .)
    DELIM           reduce using rule 168 (expr11 -> expr13 .)
    KEYWORD_end     reduce using rule 168 (expr11 -> expr13 .)
    $end            reduce using rule 168 (expr11 -> expr13 .)
    CLOSE_PAREN     reduce using rule 168 (expr11 -> expr13 .)
    KEYWORD_elsif   reduce using rule 168 (expr11 -> expr13 .)
    KEYWORD_else    reduce using rule 168 (expr11 -> expr13 .)
    KEYWORD_do      reduce using rule 168 (expr11 -> expr13 .)
    CLOSE_BRACKET   reduce using rule 168 (expr11 -> expr13 .)


state 14

    (110) stmt -> KEYWORD_return . func_ret_arg
    (80) func_ret_arg -> . primary
    (81) primary -> . INT_CONSTANTS
    (82) primary -> . BOOLEAN_CONSTANTS
    (83) primary -> . CONSTANTS
    (84) primary -> . VARIABLES
    (85) primary -> . array
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET

    INT_CONSTANTS   shift and go to state 62
    BOOLEAN_CONSTANTS shift and go to state 61
    CONSTANTS       shift and go to state 67
    VARIABLES       shift and go to state 63

    array                          shift and go to state 66
    func_ret_arg                   shift and go to state 65
    primary                        shift and go to state 64

state 15

    (106) stmt -> puts_stmt .

    DELIM           reduce using rule 106 (stmt -> puts_stmt .)
    newline         reduce using rule 106 (stmt -> puts_stmt .)
    KEYWORD_end     reduce using rule 106 (stmt -> puts_stmt .)
    KEYWORD_elsif   reduce using rule 106 (stmt -> puts_stmt .)
    KEYWORD_else    reduce using rule 106 (stmt -> puts_stmt .)
    $end            reduce using rule 106 (stmt -> puts_stmt .)


state 16

    (86) top_stmt -> stmt .

    DELIM           reduce using rule 86 (top_stmt -> stmt .)
    newline         reduce using rule 86 (top_stmt -> stmt .)
    KEYWORD_elsif   reduce using rule 86 (top_stmt -> stmt .)
    KEYWORD_else    reduce using rule 86 (top_stmt -> stmt .)
    KEYWORD_end     reduce using rule 86 (top_stmt -> stmt .)
    $end            reduce using rule 86 (top_stmt -> stmt .)


state 17

    (50) func_defn -> KEYWORD_def . fname OPEN_PAREN arguments M_13 CLOSE_PAREN func_stmts opt_terms KEYWORD_end M_14
    (51) func_defn -> KEYWORD_def . fname OPEN_PAREN CLOSE_PAREN M_18 func_stmts opt_terms KEYWORD_end M_15
    (52) fname -> . VARIABLES
    (53) fname -> . CONSTANTS

    VARIABLES       shift and go to state 69
    CONSTANTS       shift and go to state 68

    fname                          shift and go to state 70

state 18

    (73) exit_stmt -> KEYWORD_exit .

    DELIM           reduce using rule 73 (exit_stmt -> KEYWORD_exit .)
    newline         reduce using rule 73 (exit_stmt -> KEYWORD_exit .)
    KEYWORD_end     reduce using rule 73 (exit_stmt -> KEYWORD_exit .)
    KEYWORD_elsif   reduce using rule 73 (exit_stmt -> KEYWORD_exit .)
    KEYWORD_else    reduce using rule 73 (exit_stmt -> KEYWORD_exit .)
    $end            reduce using rule 73 (exit_stmt -> KEYWORD_exit .)


state 19

    (2) top_top_compstmt -> statements . opt_terms
    (4) statements -> statements . terms statement
    (180) opt_terms -> . none
    (181) opt_terms -> . terms
    (182) terms -> . term
    (183) terms -> . terms term
    (186) none -> .
    (184) term -> . DELIM
    (185) term -> . newline

    $end            reduce using rule 186 (none -> .)
    DELIM           shift and go to state 74
    newline         shift and go to state 73

    term                           shift and go to state 71
    terms                          shift and go to state 72
    none                           shift and go to state 75
    opt_terms                      shift and go to state 76

state 20

    (128) mlhs -> array .
    (173) expr13 -> array .

    EQUAL           reduce using rule 128 (mlhs -> array .)
    MULTIPLY        reduce using rule 173 (expr13 -> array .)
    DIV             reduce using rule 173 (expr13 -> array .)
    MOD             reduce using rule 173 (expr13 -> array .)
    PLUS            reduce using rule 173 (expr13 -> array .)
    MINUS           reduce using rule 173 (expr13 -> array .)
    SHIFTL          reduce using rule 173 (expr13 -> array .)
    SHIFTR          reduce using rule 173 (expr13 -> array .)
    BITAND          reduce using rule 173 (expr13 -> array .)
    LESSEQUAL       reduce using rule 173 (expr13 -> array .)
    LESS            reduce using rule 173 (expr13 -> array .)
    GREATER         reduce using rule 173 (expr13 -> array .)
    GREATEREQUAL    reduce using rule 173 (expr13 -> array .)
    BITXOR          reduce using rule 173 (expr13 -> array .)
    PIPE            reduce using rule 173 (expr13 -> array .)
    DOUBLEEQUAL     reduce using rule 173 (expr13 -> array .)
    NOTEQUAL        reduce using rule 173 (expr13 -> array .)
    LOGICALAND      reduce using rule 173 (expr13 -> array .)
    LOGICALOR       reduce using rule 173 (expr13 -> array .)
    DELIM           reduce using rule 173 (expr13 -> array .)
    newline         reduce using rule 173 (expr13 -> array .)
    KEYWORD_end     reduce using rule 173 (expr13 -> array .)
    KEYWORD_elsif   reduce using rule 173 (expr13 -> array .)
    KEYWORD_else    reduce using rule 173 (expr13 -> array .)
    $end            reduce using rule 173 (expr13 -> array .)


state 21

    (87) top_stmt -> KEYWORD_if . expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6
    (141) expr3 -> . expr3 LOGICALOR expr4
    (142) expr3 -> . expr4
    (143) expr4 -> . expr4 LOGICALAND expr5
    (144) expr4 -> . expr5
    (145) expr5 -> . expr6 DOUBLEEQUAL expr6
    (146) expr5 -> . expr6 NOTEQUAL expr6
    (147) expr5 -> . expr6
    (148) expr6 -> . expr7 LESSEQUAL expr7
    (149) expr6 -> . expr7 LESS expr7
    (150) expr6 -> . expr7 GREATER expr7
    (151) expr6 -> . expr7 GREATEREQUAL expr7
    (152) expr6 -> . expr7
    (153) expr6 -> . BOOLEAN_CONSTANTS
    (154) expr7 -> . expr7 BITXOR expr8
    (155) expr7 -> . expr7 PIPE expr8
    (156) expr7 -> . expr8
    (157) expr8 -> . expr8 BITAND expr9
    (158) expr8 -> . expr9
    (159) expr9 -> . expr9 SHIFTL expr10
    (160) expr9 -> . expr9 SHIFTR expr10
    (161) expr9 -> . expr10
    (162) expr10 -> . expr10 PLUS expr11
    (163) expr10 -> . expr10 MINUS expr11
    (164) expr10 -> . expr11
    (165) expr11 -> . expr11 MULTIPLY expr13
    (166) expr11 -> . expr11 DIV expr13
    (167) expr11 -> . expr11 MOD expr13
    (168) expr11 -> . expr13
    (169) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (170) expr13 -> . uexpr INT_CONSTANTS
    (171) expr13 -> . CONSTANTS
    (172) expr13 -> . VARIABLES
    (173) expr13 -> . array
    (175) uexpr -> . none
    (176) uexpr -> . PLUS
    (177) uexpr -> . MINUS
    (178) uexpr -> . BITNOT
    (179) uexpr -> . BITCOMP
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (186) none -> .

    BOOLEAN_CONSTANTS shift and go to state 9
    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 80
    VARIABLES       shift and go to state 77
    PLUS            shift and go to state 5
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 33
    BITCOMP         shift and go to state 23
    INT_CONSTANTS   reduce using rule 186 (none -> .)

    expr10                         shift and go to state 11
    expr11                         shift and go to state 12
    expr13                         shift and go to state 13
    array                          shift and go to state 79
    expr3                          shift and go to state 78
    expr6                          shift and go to state 36
    expr7                          shift and go to state 6
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr8                          shift and go to state 39
    expr9                          shift and go to state 40
    uexpr                          shift and go to state 8
    none                           shift and go to state 28

state 22

    (8) statement -> VARIABLES . DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (9) statement -> VARIABLES . DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (10) statement -> VARIABLES . DOT VARIABLES arguments
    (126) mlhs -> VARIABLES .
    (66) fname2 -> VARIABLES .
    (174) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET
    (172) expr13 -> VARIABLES .

    DOT             shift and go to state 82
    EQUAL           reduce using rule 126 (mlhs -> VARIABLES .)
    OPEN_PAREN      reduce using rule 66 (fname2 -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 81
    MULTIPLY        reduce using rule 172 (expr13 -> VARIABLES .)
    DIV             reduce using rule 172 (expr13 -> VARIABLES .)
    MOD             reduce using rule 172 (expr13 -> VARIABLES .)
    PLUS            reduce using rule 172 (expr13 -> VARIABLES .)
    MINUS           reduce using rule 172 (expr13 -> VARIABLES .)
    SHIFTL          reduce using rule 172 (expr13 -> VARIABLES .)
    SHIFTR          reduce using rule 172 (expr13 -> VARIABLES .)
    BITAND          reduce using rule 172 (expr13 -> VARIABLES .)
    LESSEQUAL       reduce using rule 172 (expr13 -> VARIABLES .)
    LESS            reduce using rule 172 (expr13 -> VARIABLES .)
    GREATER         reduce using rule 172 (expr13 -> VARIABLES .)
    GREATEREQUAL    reduce using rule 172 (expr13 -> VARIABLES .)
    BITXOR          reduce using rule 172 (expr13 -> VARIABLES .)
    PIPE            reduce using rule 172 (expr13 -> VARIABLES .)
    DOUBLEEQUAL     reduce using rule 172 (expr13 -> VARIABLES .)
    NOTEQUAL        reduce using rule 172 (expr13 -> VARIABLES .)
    LOGICALAND      reduce using rule 172 (expr13 -> VARIABLES .)
    LOGICALOR       reduce using rule 172 (expr13 -> VARIABLES .)
    DELIM           reduce using rule 172 (expr13 -> VARIABLES .)
    newline         reduce using rule 172 (expr13 -> VARIABLES .)
    $end            reduce using rule 172 (expr13 -> VARIABLES .)


state 23

    (179) uexpr -> BITCOMP .

    INT_CONSTANTS   reduce using rule 179 (uexpr -> BITCOMP .)


state 24

    (169) expr13 -> OPEN_PAREN . expr1 CLOSE_PAREN
    (140) expr1 -> . expr3
    (141) expr3 -> . expr3 LOGICALOR expr4
    (142) expr3 -> . expr4
    (143) expr4 -> . expr4 LOGICALAND expr5
    (144) expr4 -> . expr5
    (145) expr5 -> . expr6 DOUBLEEQUAL expr6
    (146) expr5 -> . expr6 NOTEQUAL expr6
    (147) expr5 -> . expr6
    (148) expr6 -> . expr7 LESSEQUAL expr7
    (149) expr6 -> . expr7 LESS expr7
    (150) expr6 -> . expr7 GREATER expr7
    (151) expr6 -> . expr7 GREATEREQUAL expr7
    (152) expr6 -> . expr7
    (153) expr6 -> . BOOLEAN_CONSTANTS
    (154) expr7 -> . expr7 BITXOR expr8
    (155) expr7 -> . expr7 PIPE expr8
    (156) expr7 -> . expr8
    (157) expr8 -> . expr8 BITAND expr9
    (158) expr8 -> . expr9
    (159) expr9 -> . expr9 SHIFTL expr10
    (160) expr9 -> . expr9 SHIFTR expr10
    (161) expr9 -> . expr10
    (162) expr10 -> . expr10 PLUS expr11
    (163) expr10 -> . expr10 MINUS expr11
    (164) expr10 -> . expr11
    (165) expr11 -> . expr11 MULTIPLY expr13
    (166) expr11 -> . expr11 DIV expr13
    (167) expr11 -> . expr11 MOD expr13
    (168) expr11 -> . expr13
    (169) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (170) expr13 -> . uexpr INT_CONSTANTS
    (171) expr13 -> . CONSTANTS
    (172) expr13 -> . VARIABLES
    (173) expr13 -> . array
    (175) uexpr -> . none
    (176) uexpr -> . PLUS
    (177) uexpr -> . MINUS
    (178) uexpr -> . BITNOT
    (179) uexpr -> . BITCOMP
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (186) none -> .

    BOOLEAN_CONSTANTS shift and go to state 9
    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 80
    VARIABLES       shift and go to state 77
    PLUS            shift and go to state 5
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 33
    BITCOMP         shift and go to state 23
    INT_CONSTANTS   reduce using rule 186 (none -> .)

    uexpr                          shift and go to state 8
    none                           shift and go to state 28
    expr13                         shift and go to state 13
    expr3                          shift and go to state 34
    expr1                          shift and go to state 83
    expr6                          shift and go to state 36
    expr7                          shift and go to state 6
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr10                         shift and go to state 11
    expr8                          shift and go to state 39
    expr9                          shift and go to state 40
    array                          shift and go to state 79
    expr11                         shift and go to state 12

state 25

    (3) statements -> statement .

    DELIM           reduce using rule 3 (statements -> statement .)
    newline         reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)


state 26

    (109) stmt -> func_call_stmt .

    DELIM           reduce using rule 109 (stmt -> func_call_stmt .)
    newline         reduce using rule 109 (stmt -> func_call_stmt .)
    KEYWORD_end     reduce using rule 109 (stmt -> func_call_stmt .)
    KEYWORD_elsif   reduce using rule 109 (stmt -> func_call_stmt .)
    KEYWORD_else    reduce using rule 109 (stmt -> func_call_stmt .)
    $end            reduce using rule 109 (stmt -> func_call_stmt .)


state 27

    (74) puts_stmt -> KEYWORD_puts . mrhs
    (75) puts_stmt -> KEYWORD_puts . expr
    (129) mrhs -> . expr1
    (130) mrhs -> . str_expr
    (131) mrhs -> . KEYWORD_gets
    (132) mrhs -> . OPEN_BRACKET CLOSE_BRACKET
    (133) mrhs -> . VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (134) mrhs -> . VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (135) mrhs -> . VARIABLES DOT VARIABLES
    (136) mrhs -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (137) mrhs -> . CONSTANTS DOT KEYWORD_new
    (138) mrhs -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (125) expr -> . mlhs EQUAL mrhs
    (140) expr1 -> . expr3
    (139) str_expr -> . STRING_CONSTANTS
    (126) mlhs -> . VARIABLES
    (127) mlhs -> . CONSTANTS
    (128) mlhs -> . array
    (141) expr3 -> . expr3 LOGICALOR expr4
    (142) expr3 -> . expr4
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (143) expr4 -> . expr4 LOGICALAND expr5
    (144) expr4 -> . expr5
    (145) expr5 -> . expr6 DOUBLEEQUAL expr6
    (146) expr5 -> . expr6 NOTEQUAL expr6
    (147) expr5 -> . expr6
    (148) expr6 -> . expr7 LESSEQUAL expr7
    (149) expr6 -> . expr7 LESS expr7
    (150) expr6 -> . expr7 GREATER expr7
    (151) expr6 -> . expr7 GREATEREQUAL expr7
    (152) expr6 -> . expr7
    (153) expr6 -> . BOOLEAN_CONSTANTS
    (154) expr7 -> . expr7 BITXOR expr8
    (155) expr7 -> . expr7 PIPE expr8
    (156) expr7 -> . expr8
    (157) expr8 -> . expr8 BITAND expr9
    (158) expr8 -> . expr9
    (159) expr9 -> . expr9 SHIFTL expr10
    (160) expr9 -> . expr9 SHIFTR expr10
    (161) expr9 -> . expr10
    (162) expr10 -> . expr10 PLUS expr11
    (163) expr10 -> . expr10 MINUS expr11
    (164) expr10 -> . expr11
    (165) expr11 -> . expr11 MULTIPLY expr13
    (166) expr11 -> . expr11 DIV expr13
    (167) expr11 -> . expr11 MOD expr13
    (168) expr11 -> . expr13
    (169) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (170) expr13 -> . uexpr INT_CONSTANTS
    (171) expr13 -> . CONSTANTS
    (172) expr13 -> . VARIABLES
    (173) expr13 -> . array
    (175) uexpr -> . none
    (176) uexpr -> . PLUS
    (177) uexpr -> . MINUS
    (178) uexpr -> . BITNOT
    (179) uexpr -> . BITCOMP
    (186) none -> .

    KEYWORD_gets    shift and go to state 89
    OPEN_BRACKET    shift and go to state 87
    VARIABLES       shift and go to state 86
    CONSTANTS       shift and go to state 93
    STRING_CONSTANTS shift and go to state 92
    BOOLEAN_CONSTANTS shift and go to state 9
    OPEN_PAREN      shift and go to state 24
    PLUS            shift and go to state 5
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 33
    BITCOMP         shift and go to state 23
    INT_CONSTANTS   reduce using rule 186 (none -> .)

    expr11                         shift and go to state 12
    uexpr                          shift and go to state 8
    none                           shift and go to state 28
    str_expr                       shift and go to state 85
    expr                           shift and go to state 91
    expr13                         shift and go to state 13
    mlhs                           shift and go to state 84
    expr3                          shift and go to state 34
    mrhs                           shift and go to state 90
    expr1                          shift and go to state 88
    expr6                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr10                         shift and go to state 11
    array                          shift and go to state 20
    expr9                          shift and go to state 40
    expr8                          shift and go to state 39
    expr7                          shift and go to state 6

state 28

    (175) uexpr -> none .

    INT_CONSTANTS   reduce using rule 175 (uexpr -> none .)


state 29

    (104) stmt -> expr .

    DELIM           reduce using rule 104 (stmt -> expr .)
    newline         reduce using rule 104 (stmt -> expr .)
    KEYWORD_end     reduce using rule 104 (stmt -> expr .)
    KEYWORD_elsif   reduce using rule 104 (stmt -> expr .)
    KEYWORD_else    reduce using rule 104 (stmt -> expr .)
    $end            reduce using rule 104 (stmt -> expr .)


state 30

    (7) statement -> class_defn .

    DELIM           reduce using rule 7 (statement -> class_defn .)
    newline         reduce using rule 7 (statement -> class_defn .)
    $end            reduce using rule 7 (statement -> class_defn .)


state 31

    (6) statement -> func_defn .

    DELIM           reduce using rule 6 (statement -> func_defn .)
    newline         reduce using rule 6 (statement -> func_defn .)
    $end            reduce using rule 6 (statement -> func_defn .)


state 32

    (14) class_defn -> KEYWORD_class . CONSTANTS newline class_stmts opt_terms KEYWORD_end

    CONSTANTS       shift and go to state 94


state 33

    (178) uexpr -> BITNOT .

    INT_CONSTANTS   reduce using rule 178 (uexpr -> BITNOT .)


state 34

    (140) expr1 -> expr3 .
    (141) expr3 -> expr3 . LOGICALOR expr4

    DELIM           reduce using rule 140 (expr1 -> expr3 .)
    newline         reduce using rule 140 (expr1 -> expr3 .)
    KEYWORD_elsif   reduce using rule 140 (expr1 -> expr3 .)
    KEYWORD_else    reduce using rule 140 (expr1 -> expr3 .)
    KEYWORD_end     reduce using rule 140 (expr1 -> expr3 .)
    $end            reduce using rule 140 (expr1 -> expr3 .)
    CLOSE_PAREN     reduce using rule 140 (expr1 -> expr3 .)
    LOGICALOR       shift and go to state 95


state 35

    (105) stmt -> expr1 .

    DELIM           reduce using rule 105 (stmt -> expr1 .)
    newline         reduce using rule 105 (stmt -> expr1 .)
    KEYWORD_end     reduce using rule 105 (stmt -> expr1 .)
    KEYWORD_elsif   reduce using rule 105 (stmt -> expr1 .)
    KEYWORD_else    reduce using rule 105 (stmt -> expr1 .)
    $end            reduce using rule 105 (stmt -> expr1 .)


state 36

    (145) expr5 -> expr6 . DOUBLEEQUAL expr6
    (146) expr5 -> expr6 . NOTEQUAL expr6
    (147) expr5 -> expr6 .

    DOUBLEEQUAL     shift and go to state 97
    NOTEQUAL        shift and go to state 96
    LOGICALAND      reduce using rule 147 (expr5 -> expr6 .)
    LOGICALOR       reduce using rule 147 (expr5 -> expr6 .)
    DELIM           reduce using rule 147 (expr5 -> expr6 .)
    newline         reduce using rule 147 (expr5 -> expr6 .)
    $end            reduce using rule 147 (expr5 -> expr6 .)
    KEYWORD_elsif   reduce using rule 147 (expr5 -> expr6 .)
    KEYWORD_else    reduce using rule 147 (expr5 -> expr6 .)
    KEYWORD_end     reduce using rule 147 (expr5 -> expr6 .)
    CLOSE_PAREN     reduce using rule 147 (expr5 -> expr6 .)
    KEYWORD_then    reduce using rule 147 (expr5 -> expr6 .)
    KEYWORD_do      reduce using rule 147 (expr5 -> expr6 .)


state 37

    (142) expr3 -> expr4 .
    (143) expr4 -> expr4 . LOGICALAND expr5

    LOGICALOR       reduce using rule 142 (expr3 -> expr4 .)
    KEYWORD_do      reduce using rule 142 (expr3 -> expr4 .)
    newline         reduce using rule 142 (expr3 -> expr4 .)
    DELIM           reduce using rule 142 (expr3 -> expr4 .)
    KEYWORD_end     reduce using rule 142 (expr3 -> expr4 .)
    $end            reduce using rule 142 (expr3 -> expr4 .)
    KEYWORD_elsif   reduce using rule 142 (expr3 -> expr4 .)
    KEYWORD_else    reduce using rule 142 (expr3 -> expr4 .)
    KEYWORD_then    reduce using rule 142 (expr3 -> expr4 .)
    CLOSE_PAREN     reduce using rule 142 (expr3 -> expr4 .)
    LOGICALAND      shift and go to state 98


state 38

    (144) expr4 -> expr5 .

    LOGICALAND      reduce using rule 144 (expr4 -> expr5 .)
    LOGICALOR       reduce using rule 144 (expr4 -> expr5 .)
    DELIM           reduce using rule 144 (expr4 -> expr5 .)
    newline         reduce using rule 144 (expr4 -> expr5 .)
    KEYWORD_end     reduce using rule 144 (expr4 -> expr5 .)
    KEYWORD_elsif   reduce using rule 144 (expr4 -> expr5 .)
    KEYWORD_else    reduce using rule 144 (expr4 -> expr5 .)
    $end            reduce using rule 144 (expr4 -> expr5 .)
    KEYWORD_then    reduce using rule 144 (expr4 -> expr5 .)
    CLOSE_PAREN     reduce using rule 144 (expr4 -> expr5 .)
    KEYWORD_do      reduce using rule 144 (expr4 -> expr5 .)


state 39

    (156) expr7 -> expr8 .
    (157) expr8 -> expr8 . BITAND expr9

    LESSEQUAL       reduce using rule 156 (expr7 -> expr8 .)
    LESS            reduce using rule 156 (expr7 -> expr8 .)
    GREATER         reduce using rule 156 (expr7 -> expr8 .)
    GREATEREQUAL    reduce using rule 156 (expr7 -> expr8 .)
    BITXOR          reduce using rule 156 (expr7 -> expr8 .)
    PIPE            reduce using rule 156 (expr7 -> expr8 .)
    DOUBLEEQUAL     reduce using rule 156 (expr7 -> expr8 .)
    NOTEQUAL        reduce using rule 156 (expr7 -> expr8 .)
    LOGICALAND      reduce using rule 156 (expr7 -> expr8 .)
    LOGICALOR       reduce using rule 156 (expr7 -> expr8 .)
    CLOSE_PAREN     reduce using rule 156 (expr7 -> expr8 .)
    DELIM           reduce using rule 156 (expr7 -> expr8 .)
    newline         reduce using rule 156 (expr7 -> expr8 .)
    KEYWORD_end     reduce using rule 156 (expr7 -> expr8 .)
    CLOSE_BRACKET   reduce using rule 156 (expr7 -> expr8 .)
    $end            reduce using rule 156 (expr7 -> expr8 .)
    KEYWORD_then    reduce using rule 156 (expr7 -> expr8 .)
    KEYWORD_elsif   reduce using rule 156 (expr7 -> expr8 .)
    KEYWORD_else    reduce using rule 156 (expr7 -> expr8 .)
    KEYWORD_do      reduce using rule 156 (expr7 -> expr8 .)
    BITAND          shift and go to state 99


state 40

    (158) expr8 -> expr9 .
    (159) expr9 -> expr9 . SHIFTL expr10
    (160) expr9 -> expr9 . SHIFTR expr10

    BITAND          reduce using rule 158 (expr8 -> expr9 .)
    LESSEQUAL       reduce using rule 158 (expr8 -> expr9 .)
    LESS            reduce using rule 158 (expr8 -> expr9 .)
    GREATER         reduce using rule 158 (expr8 -> expr9 .)
    GREATEREQUAL    reduce using rule 158 (expr8 -> expr9 .)
    BITXOR          reduce using rule 158 (expr8 -> expr9 .)
    PIPE            reduce using rule 158 (expr8 -> expr9 .)
    LOGICALAND      reduce using rule 158 (expr8 -> expr9 .)
    LOGICALOR       reduce using rule 158 (expr8 -> expr9 .)
    DELIM           reduce using rule 158 (expr8 -> expr9 .)
    newline         reduce using rule 158 (expr8 -> expr9 .)
    $end            reduce using rule 158 (expr8 -> expr9 .)
    KEYWORD_then    reduce using rule 158 (expr8 -> expr9 .)
    CLOSE_PAREN     reduce using rule 158 (expr8 -> expr9 .)
    KEYWORD_elsif   reduce using rule 158 (expr8 -> expr9 .)
    KEYWORD_else    reduce using rule 158 (expr8 -> expr9 .)
    KEYWORD_end     reduce using rule 158 (expr8 -> expr9 .)
    KEYWORD_do      reduce using rule 158 (expr8 -> expr9 .)
    DOUBLEEQUAL     reduce using rule 158 (expr8 -> expr9 .)
    NOTEQUAL        reduce using rule 158 (expr8 -> expr9 .)
    CLOSE_BRACKET   reduce using rule 158 (expr8 -> expr9 .)
    SHIFTL          shift and go to state 101
    SHIFTR          shift and go to state 100


state 41

    (72) loop_stmt -> KEYWORD_break .

    DELIM           reduce using rule 72 (loop_stmt -> KEYWORD_break .)
    newline         reduce using rule 72 (loop_stmt -> KEYWORD_break .)
    KEYWORD_end     reduce using rule 72 (loop_stmt -> KEYWORD_break .)
    $end            reduce using rule 72 (loop_stmt -> KEYWORD_break .)
    KEYWORD_elsif   reduce using rule 72 (loop_stmt -> KEYWORD_break .)
    KEYWORD_else    reduce using rule 72 (loop_stmt -> KEYWORD_break .)


state 42

    (108) stmt -> exit_stmt .

    DELIM           reduce using rule 108 (stmt -> exit_stmt .)
    newline         reduce using rule 108 (stmt -> exit_stmt .)
    KEYWORD_end     reduce using rule 108 (stmt -> exit_stmt .)
    KEYWORD_elsif   reduce using rule 108 (stmt -> exit_stmt .)
    KEYWORD_else    reduce using rule 108 (stmt -> exit_stmt .)
    $end            reduce using rule 108 (stmt -> exit_stmt .)


state 43

    (1) program -> top_top_compstmt .

    $end            reduce using rule 1 (program -> top_top_compstmt .)


state 44

    (89) top_stmt -> KEYWORD_for . VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts2 opt_terms KEYWORD_end M_11

    VARIABLES       shift and go to state 102


state 45

    (63) func_call_stmt -> fname2 . OPEN_PAREN call_arg CLOSE_PAREN M_17

    OPEN_PAREN      shift and go to state 103


state 46

    (11) statement -> CONSTANTS . DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (12) statement -> CONSTANTS . DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (13) statement -> CONSTANTS . DOT KEYWORD_new arguments
    (127) mlhs -> CONSTANTS .
    (67) fname2 -> CONSTANTS .
    (171) expr13 -> CONSTANTS .

    DOT             shift and go to state 104
    EQUAL           reduce using rule 127 (mlhs -> CONSTANTS .)
    OPEN_PAREN      reduce using rule 67 (fname2 -> CONSTANTS .)
    MULTIPLY        reduce using rule 171 (expr13 -> CONSTANTS .)
    DIV             reduce using rule 171 (expr13 -> CONSTANTS .)
    MOD             reduce using rule 171 (expr13 -> CONSTANTS .)
    PLUS            reduce using rule 171 (expr13 -> CONSTANTS .)
    MINUS           reduce using rule 171 (expr13 -> CONSTANTS .)
    SHIFTL          reduce using rule 171 (expr13 -> CONSTANTS .)
    SHIFTR          reduce using rule 171 (expr13 -> CONSTANTS .)
    BITAND          reduce using rule 171 (expr13 -> CONSTANTS .)
    LESSEQUAL       reduce using rule 171 (expr13 -> CONSTANTS .)
    LESS            reduce using rule 171 (expr13 -> CONSTANTS .)
    GREATER         reduce using rule 171 (expr13 -> CONSTANTS .)
    GREATEREQUAL    reduce using rule 171 (expr13 -> CONSTANTS .)
    BITXOR          reduce using rule 171 (expr13 -> CONSTANTS .)
    PIPE            reduce using rule 171 (expr13 -> CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 171 (expr13 -> CONSTANTS .)
    NOTEQUAL        reduce using rule 171 (expr13 -> CONSTANTS .)
    LOGICALAND      reduce using rule 171 (expr13 -> CONSTANTS .)
    LOGICALOR       reduce using rule 171 (expr13 -> CONSTANTS .)
    DELIM           reduce using rule 171 (expr13 -> CONSTANTS .)
    newline         reduce using rule 171 (expr13 -> CONSTANTS .)
    $end            reduce using rule 171 (expr13 -> CONSTANTS .)


state 47

    (125) expr -> mlhs EQUAL . mrhs
    (64) func_call_stmt -> mlhs EQUAL . fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (129) mrhs -> . expr1
    (130) mrhs -> . str_expr
    (131) mrhs -> . KEYWORD_gets
    (132) mrhs -> . OPEN_BRACKET CLOSE_BRACKET
    (133) mrhs -> . VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (134) mrhs -> . VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (135) mrhs -> . VARIABLES DOT VARIABLES
    (136) mrhs -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (137) mrhs -> . CONSTANTS DOT KEYWORD_new
    (138) mrhs -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (66) fname2 -> . VARIABLES
    (67) fname2 -> . CONSTANTS
    (140) expr1 -> . expr3
    (139) str_expr -> . STRING_CONSTANTS
    (141) expr3 -> . expr3 LOGICALOR expr4
    (142) expr3 -> . expr4
    (143) expr4 -> . expr4 LOGICALAND expr5
    (144) expr4 -> . expr5
    (145) expr5 -> . expr6 DOUBLEEQUAL expr6
    (146) expr5 -> . expr6 NOTEQUAL expr6
    (147) expr5 -> . expr6
    (148) expr6 -> . expr7 LESSEQUAL expr7
    (149) expr6 -> . expr7 LESS expr7
    (150) expr6 -> . expr7 GREATER expr7
    (151) expr6 -> . expr7 GREATEREQUAL expr7
    (152) expr6 -> . expr7
    (153) expr6 -> . BOOLEAN_CONSTANTS
    (154) expr7 -> . expr7 BITXOR expr8
    (155) expr7 -> . expr7 PIPE expr8
    (156) expr7 -> . expr8
    (157) expr8 -> . expr8 BITAND expr9
    (158) expr8 -> . expr9
    (159) expr9 -> . expr9 SHIFTL expr10
    (160) expr9 -> . expr9 SHIFTR expr10
    (161) expr9 -> . expr10
    (162) expr10 -> . expr10 PLUS expr11
    (163) expr10 -> . expr10 MINUS expr11
    (164) expr10 -> . expr11
    (165) expr11 -> . expr11 MULTIPLY expr13
    (166) expr11 -> . expr11 DIV expr13
    (167) expr11 -> . expr11 MOD expr13
    (168) expr11 -> . expr13
    (169) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (170) expr13 -> . uexpr INT_CONSTANTS
    (171) expr13 -> . CONSTANTS
    (172) expr13 -> . VARIABLES
    (173) expr13 -> . array
    (175) uexpr -> . none
    (176) uexpr -> . PLUS
    (177) uexpr -> . MINUS
    (178) uexpr -> . BITNOT
    (179) uexpr -> . BITCOMP
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (186) none -> .

    KEYWORD_gets    shift and go to state 89
    OPEN_BRACKET    shift and go to state 87
    VARIABLES       shift and go to state 105
    CONSTANTS       shift and go to state 108
    STRING_CONSTANTS shift and go to state 92
    BOOLEAN_CONSTANTS shift and go to state 9
    OPEN_PAREN      shift and go to state 24
    PLUS            shift and go to state 5
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 33
    BITCOMP         shift and go to state 23
    INT_CONSTANTS   reduce using rule 186 (none -> .)

    expr11                         shift and go to state 12
    uexpr                          shift and go to state 8
    none                           shift and go to state 28
    str_expr                       shift and go to state 85
    expr13                         shift and go to state 13
    fname2                         shift and go to state 107
    expr3                          shift and go to state 34
    mrhs                           shift and go to state 106
    expr1                          shift and go to state 88
    expr6                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr10                         shift and go to state 11
    expr8                          shift and go to state 39
    expr9                          shift and go to state 40
    array                          shift and go to state 79
    expr7                          shift and go to state 6

state 48

    (88) top_stmt -> KEYWORD_while M_7 . expr3 opt_do M_8 gen_stmts2 opt_terms KEYWORD_end M_9
    (141) expr3 -> . expr3 LOGICALOR expr4
    (142) expr3 -> . expr4
    (143) expr4 -> . expr4 LOGICALAND expr5
    (144) expr4 -> . expr5
    (145) expr5 -> . expr6 DOUBLEEQUAL expr6
    (146) expr5 -> . expr6 NOTEQUAL expr6
    (147) expr5 -> . expr6
    (148) expr6 -> . expr7 LESSEQUAL expr7
    (149) expr6 -> . expr7 LESS expr7
    (150) expr6 -> . expr7 GREATER expr7
    (151) expr6 -> . expr7 GREATEREQUAL expr7
    (152) expr6 -> . expr7
    (153) expr6 -> . BOOLEAN_CONSTANTS
    (154) expr7 -> . expr7 BITXOR expr8
    (155) expr7 -> . expr7 PIPE expr8
    (156) expr7 -> . expr8
    (157) expr8 -> . expr8 BITAND expr9
    (158) expr8 -> . expr9
    (159) expr9 -> . expr9 SHIFTL expr10
    (160) expr9 -> . expr9 SHIFTR expr10
    (161) expr9 -> . expr10
    (162) expr10 -> . expr10 PLUS expr11
    (163) expr10 -> . expr10 MINUS expr11
    (164) expr10 -> . expr11
    (165) expr11 -> . expr11 MULTIPLY expr13
    (166) expr11 -> . expr11 DIV expr13
    (167) expr11 -> . expr11 MOD expr13
    (168) expr11 -> . expr13
    (169) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (170) expr13 -> . uexpr INT_CONSTANTS
    (171) expr13 -> . CONSTANTS
    (172) expr13 -> . VARIABLES
    (173) expr13 -> . array
    (175) uexpr -> . none
    (176) uexpr -> . PLUS
    (177) uexpr -> . MINUS
    (178) uexpr -> . BITNOT
    (179) uexpr -> . BITCOMP
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (186) none -> .

    BOOLEAN_CONSTANTS shift and go to state 9
    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 80
    VARIABLES       shift and go to state 77
    PLUS            shift and go to state 5
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 33
    BITCOMP         shift and go to state 23
    INT_CONSTANTS   reduce using rule 186 (none -> .)

    uexpr                          shift and go to state 8
    none                           shift and go to state 28
    expr9                          shift and go to state 40
    array                          shift and go to state 79
    expr13                         shift and go to state 13
    expr3                          shift and go to state 109
    expr6                          shift and go to state 36
    expr7                          shift and go to state 6
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr10                         shift and go to state 11
    expr8                          shift and go to state 39
    expr11                         shift and go to state 12

state 49

    (151) expr6 -> expr7 GREATEREQUAL . expr7
    (154) expr7 -> . expr7 BITXOR expr8
    (155) expr7 -> . expr7 PIPE expr8
    (156) expr7 -> . expr8
    (157) expr8 -> . expr8 BITAND expr9
    (158) expr8 -> . expr9
    (159) expr9 -> . expr9 SHIFTL expr10
    (160) expr9 -> . expr9 SHIFTR expr10
    (161) expr9 -> . expr10
    (162) expr10 -> . expr10 PLUS expr11
    (163) expr10 -> . expr10 MINUS expr11
    (164) expr10 -> . expr11
    (165) expr11 -> . expr11 MULTIPLY expr13
    (166) expr11 -> . expr11 DIV expr13
    (167) expr11 -> . expr11 MOD expr13
    (168) expr11 -> . expr13
    (169) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (170) expr13 -> . uexpr INT_CONSTANTS
    (171) expr13 -> . CONSTANTS
    (172) expr13 -> . VARIABLES
    (173) expr13 -> . array
    (175) uexpr -> . none
    (176) uexpr -> . PLUS
    (177) uexpr -> . MINUS
    (178) uexpr -> . BITNOT
    (179) uexpr -> . BITCOMP
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (186) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 80
    VARIABLES       shift and go to state 77
    PLUS            shift and go to state 5
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 33
    BITCOMP         shift and go to state 23
    INT_CONSTANTS   reduce using rule 186 (none -> .)

    uexpr                          shift and go to state 8
    none                           shift and go to state 28
    expr10                         shift and go to state 11
    expr7                          shift and go to state 110
    expr13                         shift and go to state 13
    expr8                          shift and go to state 39
    expr9                          shift and go to state 40
    array                          shift and go to state 79
    expr11                         shift and go to state 12

state 50

    (150) expr6 -> expr7 GREATER . expr7
    (154) expr7 -> . expr7 BITXOR expr8
    (155) expr7 -> . expr7 PIPE expr8
    (156) expr7 -> . expr8
    (157) expr8 -> . expr8 BITAND expr9
    (158) expr8 -> . expr9
    (159) expr9 -> . expr9 SHIFTL expr10
    (160) expr9 -> . expr9 SHIFTR expr10
    (161) expr9 -> . expr10
    (162) expr10 -> . expr10 PLUS expr11
    (163) expr10 -> . expr10 MINUS expr11
    (164) expr10 -> . expr11
    (165) expr11 -> . expr11 MULTIPLY expr13
    (166) expr11 -> . expr11 DIV expr13
    (167) expr11 -> . expr11 MOD expr13
    (168) expr11 -> . expr13
    (169) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (170) expr13 -> . uexpr INT_CONSTANTS
    (171) expr13 -> . CONSTANTS
    (172) expr13 -> . VARIABLES
    (173) expr13 -> . array
    (175) uexpr -> . none
    (176) uexpr -> . PLUS
    (177) uexpr -> . MINUS
    (178) uexpr -> . BITNOT
    (179) uexpr -> . BITCOMP
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (186) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 80
    VARIABLES       shift and go to state 77
    PLUS            shift and go to state 5
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 33
    BITCOMP         shift and go to state 23
    INT_CONSTANTS   reduce using rule 186 (none -> .)

    uexpr                          shift and go to state 8
    none                           shift and go to state 28
    expr10                         shift and go to state 11
    expr7                          shift and go to state 111
    expr13                         shift and go to state 13
    expr8                          shift and go to state 39
    expr9                          shift and go to state 40
    array                          shift and go to state 79
    expr11                         shift and go to state 12

state 51

    (149) expr6 -> expr7 LESS . expr7
    (154) expr7 -> . expr7 BITXOR expr8
    (155) expr7 -> . expr7 PIPE expr8
    (156) expr7 -> . expr8
    (157) expr8 -> . expr8 BITAND expr9
    (158) expr8 -> . expr9
    (159) expr9 -> . expr9 SHIFTL expr10
    (160) expr9 -> . expr9 SHIFTR expr10
    (161) expr9 -> . expr10
    (162) expr10 -> . expr10 PLUS expr11
    (163) expr10 -> . expr10 MINUS expr11
    (164) expr10 -> . expr11
    (165) expr11 -> . expr11 MULTIPLY expr13
    (166) expr11 -> . expr11 DIV expr13
    (167) expr11 -> . expr11 MOD expr13
    (168) expr11 -> . expr13
    (169) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (170) expr13 -> . uexpr INT_CONSTANTS
    (171) expr13 -> . CONSTANTS
    (172) expr13 -> . VARIABLES
    (173) expr13 -> . array
    (175) uexpr -> . none
    (176) uexpr -> . PLUS
    (177) uexpr -> . MINUS
    (178) uexpr -> . BITNOT
    (179) uexpr -> . BITCOMP
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (186) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 80
    VARIABLES       shift and go to state 77
    PLUS            shift and go to state 5
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 33
    BITCOMP         shift and go to state 23
    INT_CONSTANTS   reduce using rule 186 (none -> .)

    uexpr                          shift and go to state 8
    none                           shift and go to state 28
    expr10                         shift and go to state 11
    expr7                          shift and go to state 112
    expr13                         shift and go to state 13
    expr8                          shift and go to state 39
    expr9                          shift and go to state 40
    array                          shift and go to state 79
    expr11                         shift and go to state 12

state 52

    (155) expr7 -> expr7 PIPE . expr8
    (157) expr8 -> . expr8 BITAND expr9
    (158) expr8 -> . expr9
    (159) expr9 -> . expr9 SHIFTL expr10
    (160) expr9 -> . expr9 SHIFTR expr10
    (161) expr9 -> . expr10
    (162) expr10 -> . expr10 PLUS expr11
    (163) expr10 -> . expr10 MINUS expr11
    (164) expr10 -> . expr11
    (165) expr11 -> . expr11 MULTIPLY expr13
    (166) expr11 -> . expr11 DIV expr13
    (167) expr11 -> . expr11 MOD expr13
    (168) expr11 -> . expr13
    (169) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (170) expr13 -> . uexpr INT_CONSTANTS
    (171) expr13 -> . CONSTANTS
    (172) expr13 -> . VARIABLES
    (173) expr13 -> . array
    (175) uexpr -> . none
    (176) uexpr -> . PLUS
    (177) uexpr -> . MINUS
    (178) uexpr -> . BITNOT
    (179) uexpr -> . BITCOMP
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (186) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 80
    VARIABLES       shift and go to state 77
    PLUS            shift and go to state 5
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 33
    BITCOMP         shift and go to state 23
    INT_CONSTANTS   reduce using rule 186 (none -> .)

    uexpr                          shift and go to state 8
    none                           shift and go to state 28
    expr10                         shift and go to state 11
    expr13                         shift and go to state 13
    expr8                          shift and go to state 113
    expr9                          shift and go to state 40
    array                          shift and go to state 79
    expr11                         shift and go to state 12

state 53

    (154) expr7 -> expr7 BITXOR . expr8
    (157) expr8 -> . expr8 BITAND expr9
    (158) expr8 -> . expr9
    (159) expr9 -> . expr9 SHIFTL expr10
    (160) expr9 -> . expr9 SHIFTR expr10
    (161) expr9 -> . expr10
    (162) expr10 -> . expr10 PLUS expr11
    (163) expr10 -> . expr10 MINUS expr11
    (164) expr10 -> . expr11
    (165) expr11 -> . expr11 MULTIPLY expr13
    (166) expr11 -> . expr11 DIV expr13
    (167) expr11 -> . expr11 MOD expr13
    (168) expr11 -> . expr13
    (169) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (170) expr13 -> . uexpr INT_CONSTANTS
    (171) expr13 -> . CONSTANTS
    (172) expr13 -> . VARIABLES
    (173) expr13 -> . array
    (175) uexpr -> . none
    (176) uexpr -> . PLUS
    (177) uexpr -> . MINUS
    (178) uexpr -> . BITNOT
    (179) uexpr -> . BITCOMP
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (186) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 80
    VARIABLES       shift and go to state 77
    PLUS            shift and go to state 5
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 33
    BITCOMP         shift and go to state 23
    INT_CONSTANTS   reduce using rule 186 (none -> .)

    uexpr                          shift and go to state 8
    none                           shift and go to state 28
    expr10                         shift and go to state 11
    expr13                         shift and go to state 13
    expr8                          shift and go to state 114
    expr9                          shift and go to state 40
    array                          shift and go to state 79
    expr11                         shift and go to state 12

state 54

    (148) expr6 -> expr7 LESSEQUAL . expr7
    (154) expr7 -> . expr7 BITXOR expr8
    (155) expr7 -> . expr7 PIPE expr8
    (156) expr7 -> . expr8
    (157) expr8 -> . expr8 BITAND expr9
    (158) expr8 -> . expr9
    (159) expr9 -> . expr9 SHIFTL expr10
    (160) expr9 -> . expr9 SHIFTR expr10
    (161) expr9 -> . expr10
    (162) expr10 -> . expr10 PLUS expr11
    (163) expr10 -> . expr10 MINUS expr11
    (164) expr10 -> . expr11
    (165) expr11 -> . expr11 MULTIPLY expr13
    (166) expr11 -> . expr11 DIV expr13
    (167) expr11 -> . expr11 MOD expr13
    (168) expr11 -> . expr13
    (169) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (170) expr13 -> . uexpr INT_CONSTANTS
    (171) expr13 -> . CONSTANTS
    (172) expr13 -> . VARIABLES
    (173) expr13 -> . array
    (175) uexpr -> . none
    (176) uexpr -> . PLUS
    (177) uexpr -> . MINUS
    (178) uexpr -> . BITNOT
    (179) uexpr -> . BITCOMP
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (186) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 80
    VARIABLES       shift and go to state 77
    PLUS            shift and go to state 5
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 33
    BITCOMP         shift and go to state 23
    INT_CONSTANTS   reduce using rule 186 (none -> .)

    uexpr                          shift and go to state 8
    none                           shift and go to state 28
    expr10                         shift and go to state 11
    expr7                          shift and go to state 115
    expr13                         shift and go to state 13
    expr8                          shift and go to state 39
    expr9                          shift and go to state 40
    array                          shift and go to state 79
    expr11                         shift and go to state 12

state 55

    (170) expr13 -> uexpr INT_CONSTANTS .

    MULTIPLY        reduce using rule 170 (expr13 -> uexpr INT_CONSTANTS .)
    DIV             reduce using rule 170 (expr13 -> uexpr INT_CONSTANTS .)
    MOD             reduce using rule 170 (expr13 -> uexpr INT_CONSTANTS .)
    PLUS            reduce using rule 170 (expr13 -> uexpr INT_CONSTANTS .)
    MINUS           reduce using rule 170 (expr13 -> uexpr INT_CONSTANTS .)
    SHIFTL          reduce using rule 170 (expr13 -> uexpr INT_CONSTANTS .)
    SHIFTR          reduce using rule 170 (expr13 -> uexpr INT_CONSTANTS .)
    BITAND          reduce using rule 170 (expr13 -> uexpr INT_CONSTANTS .)
    LESSEQUAL       reduce using rule 170 (expr13 -> uexpr INT_CONSTANTS .)
    LESS            reduce using rule 170 (expr13 -> uexpr INT_CONSTANTS .)
    GREATER         reduce using rule 170 (expr13 -> uexpr INT_CONSTANTS .)
    GREATEREQUAL    reduce using rule 170 (expr13 -> uexpr INT_CONSTANTS .)
    BITXOR          reduce using rule 170 (expr13 -> uexpr INT_CONSTANTS .)
    PIPE            reduce using rule 170 (expr13 -> uexpr INT_CONSTANTS .)
    LOGICALAND      reduce using rule 170 (expr13 -> uexpr INT_CONSTANTS .)
    LOGICALOR       reduce using rule 170 (expr13 -> uexpr INT_CONSTANTS .)
    DELIM           reduce using rule 170 (expr13 -> uexpr INT_CONSTANTS .)
    newline         reduce using rule 170 (expr13 -> uexpr INT_CONSTANTS .)
    $end            reduce using rule 170 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_then    reduce using rule 170 (expr13 -> uexpr INT_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 170 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 170 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_else    reduce using rule 170 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_end     reduce using rule 170 (expr13 -> uexpr INT_CONSTANTS .)
    KEYWORD_do      reduce using rule 170 (expr13 -> uexpr INT_CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 170 (expr13 -> uexpr INT_CONSTANTS .)
    NOTEQUAL        reduce using rule 170 (expr13 -> uexpr INT_CONSTANTS .)
    CLOSE_BRACKET   reduce using rule 170 (expr13 -> uexpr INT_CONSTANTS .)


state 56

    (162) expr10 -> expr10 PLUS . expr11
    (165) expr11 -> . expr11 MULTIPLY expr13
    (166) expr11 -> . expr11 DIV expr13
    (167) expr11 -> . expr11 MOD expr13
    (168) expr11 -> . expr13
    (169) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (170) expr13 -> . uexpr INT_CONSTANTS
    (171) expr13 -> . CONSTANTS
    (172) expr13 -> . VARIABLES
    (173) expr13 -> . array
    (175) uexpr -> . none
    (176) uexpr -> . PLUS
    (177) uexpr -> . MINUS
    (178) uexpr -> . BITNOT
    (179) uexpr -> . BITCOMP
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (186) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 80
    VARIABLES       shift and go to state 77
    PLUS            shift and go to state 5
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 33
    BITCOMP         shift and go to state 23
    INT_CONSTANTS   reduce using rule 186 (none -> .)

    uexpr                          shift and go to state 8
    none                           shift and go to state 28
    expr11                         shift and go to state 116
    expr13                         shift and go to state 13
    array                          shift and go to state 79

state 57

    (163) expr10 -> expr10 MINUS . expr11
    (165) expr11 -> . expr11 MULTIPLY expr13
    (166) expr11 -> . expr11 DIV expr13
    (167) expr11 -> . expr11 MOD expr13
    (168) expr11 -> . expr13
    (169) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (170) expr13 -> . uexpr INT_CONSTANTS
    (171) expr13 -> . CONSTANTS
    (172) expr13 -> . VARIABLES
    (173) expr13 -> . array
    (175) uexpr -> . none
    (176) uexpr -> . PLUS
    (177) uexpr -> . MINUS
    (178) uexpr -> . BITNOT
    (179) uexpr -> . BITCOMP
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (186) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 80
    VARIABLES       shift and go to state 77
    PLUS            shift and go to state 5
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 33
    BITCOMP         shift and go to state 23
    INT_CONSTANTS   reduce using rule 186 (none -> .)

    uexpr                          shift and go to state 8
    none                           shift and go to state 28
    expr11                         shift and go to state 117
    expr13                         shift and go to state 13
    array                          shift and go to state 79

state 58

    (165) expr11 -> expr11 MULTIPLY . expr13
    (169) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (170) expr13 -> . uexpr INT_CONSTANTS
    (171) expr13 -> . CONSTANTS
    (172) expr13 -> . VARIABLES
    (173) expr13 -> . array
    (175) uexpr -> . none
    (176) uexpr -> . PLUS
    (177) uexpr -> . MINUS
    (178) uexpr -> . BITNOT
    (179) uexpr -> . BITCOMP
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (186) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 80
    VARIABLES       shift and go to state 77
    PLUS            shift and go to state 5
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 33
    BITCOMP         shift and go to state 23
    INT_CONSTANTS   reduce using rule 186 (none -> .)

    uexpr                          shift and go to state 8
    none                           shift and go to state 28
    expr13                         shift and go to state 118
    array                          shift and go to state 79

state 59

    (166) expr11 -> expr11 DIV . expr13
    (169) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (170) expr13 -> . uexpr INT_CONSTANTS
    (171) expr13 -> . CONSTANTS
    (172) expr13 -> . VARIABLES
    (173) expr13 -> . array
    (175) uexpr -> . none
    (176) uexpr -> . PLUS
    (177) uexpr -> . MINUS
    (178) uexpr -> . BITNOT
    (179) uexpr -> . BITCOMP
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (186) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 80
    VARIABLES       shift and go to state 77
    PLUS            shift and go to state 5
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 33
    BITCOMP         shift and go to state 23
    INT_CONSTANTS   reduce using rule 186 (none -> .)

    uexpr                          shift and go to state 8
    none                           shift and go to state 28
    expr13                         shift and go to state 119
    array                          shift and go to state 79

state 60

    (167) expr11 -> expr11 MOD . expr13
    (169) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (170) expr13 -> . uexpr INT_CONSTANTS
    (171) expr13 -> . CONSTANTS
    (172) expr13 -> . VARIABLES
    (173) expr13 -> . array
    (175) uexpr -> . none
    (176) uexpr -> . PLUS
    (177) uexpr -> . MINUS
    (178) uexpr -> . BITNOT
    (179) uexpr -> . BITCOMP
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (186) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 80
    VARIABLES       shift and go to state 77
    PLUS            shift and go to state 5
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 33
    BITCOMP         shift and go to state 23
    INT_CONSTANTS   reduce using rule 186 (none -> .)

    uexpr                          shift and go to state 8
    none                           shift and go to state 28
    expr13                         shift and go to state 120
    array                          shift and go to state 79

state 61

    (82) primary -> BOOLEAN_CONSTANTS .

    COMMA           reduce using rule 82 (primary -> BOOLEAN_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 82 (primary -> BOOLEAN_CONSTANTS .)
    DELIM           reduce using rule 82 (primary -> BOOLEAN_CONSTANTS .)
    newline         reduce using rule 82 (primary -> BOOLEAN_CONSTANTS .)
    $end            reduce using rule 82 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 82 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_else    reduce using rule 82 (primary -> BOOLEAN_CONSTANTS .)
    KEYWORD_end     reduce using rule 82 (primary -> BOOLEAN_CONSTANTS .)


state 62

    (81) primary -> INT_CONSTANTS .

    COMMA           reduce using rule 81 (primary -> INT_CONSTANTS .)
    CLOSE_PAREN     reduce using rule 81 (primary -> INT_CONSTANTS .)
    DELIM           reduce using rule 81 (primary -> INT_CONSTANTS .)
    newline         reduce using rule 81 (primary -> INT_CONSTANTS .)
    $end            reduce using rule 81 (primary -> INT_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 81 (primary -> INT_CONSTANTS .)
    KEYWORD_else    reduce using rule 81 (primary -> INT_CONSTANTS .)
    KEYWORD_end     reduce using rule 81 (primary -> INT_CONSTANTS .)


state 63

    (84) primary -> VARIABLES .
    (174) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET

    COMMA           reduce using rule 84 (primary -> VARIABLES .)
    CLOSE_PAREN     reduce using rule 84 (primary -> VARIABLES .)
    DELIM           reduce using rule 84 (primary -> VARIABLES .)
    newline         reduce using rule 84 (primary -> VARIABLES .)
    $end            reduce using rule 84 (primary -> VARIABLES .)
    KEYWORD_elsif   reduce using rule 84 (primary -> VARIABLES .)
    KEYWORD_else    reduce using rule 84 (primary -> VARIABLES .)
    KEYWORD_end     reduce using rule 84 (primary -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 81


state 64

    (80) func_ret_arg -> primary .

    DELIM           reduce using rule 80 (func_ret_arg -> primary .)
    newline         reduce using rule 80 (func_ret_arg -> primary .)
    $end            reduce using rule 80 (func_ret_arg -> primary .)
    KEYWORD_elsif   reduce using rule 80 (func_ret_arg -> primary .)
    KEYWORD_else    reduce using rule 80 (func_ret_arg -> primary .)
    KEYWORD_end     reduce using rule 80 (func_ret_arg -> primary .)


state 65

    (110) stmt -> KEYWORD_return func_ret_arg .

    DELIM           reduce using rule 110 (stmt -> KEYWORD_return func_ret_arg .)
    newline         reduce using rule 110 (stmt -> KEYWORD_return func_ret_arg .)
    KEYWORD_end     reduce using rule 110 (stmt -> KEYWORD_return func_ret_arg .)
    KEYWORD_elsif   reduce using rule 110 (stmt -> KEYWORD_return func_ret_arg .)
    KEYWORD_else    reduce using rule 110 (stmt -> KEYWORD_return func_ret_arg .)
    $end            reduce using rule 110 (stmt -> KEYWORD_return func_ret_arg .)


state 66

    (85) primary -> array .

    COMMA           reduce using rule 85 (primary -> array .)
    CLOSE_PAREN     reduce using rule 85 (primary -> array .)
    DELIM           reduce using rule 85 (primary -> array .)
    newline         reduce using rule 85 (primary -> array .)
    $end            reduce using rule 85 (primary -> array .)
    KEYWORD_elsif   reduce using rule 85 (primary -> array .)
    KEYWORD_else    reduce using rule 85 (primary -> array .)
    KEYWORD_end     reduce using rule 85 (primary -> array .)


state 67

    (83) primary -> CONSTANTS .

    COMMA           reduce using rule 83 (primary -> CONSTANTS .)
    CLOSE_PAREN     reduce using rule 83 (primary -> CONSTANTS .)
    DELIM           reduce using rule 83 (primary -> CONSTANTS .)
    newline         reduce using rule 83 (primary -> CONSTANTS .)
    $end            reduce using rule 83 (primary -> CONSTANTS .)
    KEYWORD_elsif   reduce using rule 83 (primary -> CONSTANTS .)
    KEYWORD_else    reduce using rule 83 (primary -> CONSTANTS .)
    KEYWORD_end     reduce using rule 83 (primary -> CONSTANTS .)


state 68

    (53) fname -> CONSTANTS .

    OPEN_PAREN      reduce using rule 53 (fname -> CONSTANTS .)
    VARIABLES       reduce using rule 53 (fname -> CONSTANTS .)
    CONSTANTS       reduce using rule 53 (fname -> CONSTANTS .)


state 69

    (52) fname -> VARIABLES .

    OPEN_PAREN      reduce using rule 52 (fname -> VARIABLES .)
    VARIABLES       reduce using rule 52 (fname -> VARIABLES .)
    CONSTANTS       reduce using rule 52 (fname -> VARIABLES .)


state 70

    (50) func_defn -> KEYWORD_def fname . OPEN_PAREN arguments M_13 CLOSE_PAREN func_stmts opt_terms KEYWORD_end M_14
    (51) func_defn -> KEYWORD_def fname . OPEN_PAREN CLOSE_PAREN M_18 func_stmts opt_terms KEYWORD_end M_15

    OPEN_PAREN      shift and go to state 121


state 71

    (182) terms -> term .

    KEYWORD_if      reduce using rule 182 (terms -> term .)
    KEYWORD_while   reduce using rule 182 (terms -> term .)
    KEYWORD_for     reduce using rule 182 (terms -> term .)
    DELIM           reduce using rule 182 (terms -> term .)
    newline         reduce using rule 182 (terms -> term .)
    KEYWORD_return  reduce using rule 182 (terms -> term .)
    KEYWORD_puts    reduce using rule 182 (terms -> term .)
    KEYWORD_break   reduce using rule 182 (terms -> term .)
    KEYWORD_exit    reduce using rule 182 (terms -> term .)
    VARIABLES       reduce using rule 182 (terms -> term .)
    CONSTANTS       reduce using rule 182 (terms -> term .)
    BOOLEAN_CONSTANTS reduce using rule 182 (terms -> term .)
    OPEN_PAREN      reduce using rule 182 (terms -> term .)
    PLUS            reduce using rule 182 (terms -> term .)
    MINUS           reduce using rule 182 (terms -> term .)
    BITNOT          reduce using rule 182 (terms -> term .)
    BITCOMP         reduce using rule 182 (terms -> term .)
    INT_CONSTANTS   reduce using rule 182 (terms -> term .)
    KEYWORD_elsif   reduce using rule 182 (terms -> term .)
    KEYWORD_else    reduce using rule 182 (terms -> term .)
    KEYWORD_end     reduce using rule 182 (terms -> term .)
    SIGIL_DOUBLE_AT reduce using rule 182 (terms -> term .)
    KEYWORD_def     reduce using rule 182 (terms -> term .)
    KEYWORD_class   reduce using rule 182 (terms -> term .)
    $end            reduce using rule 182 (terms -> term .)
    SIGIL_AT        reduce using rule 182 (terms -> term .)


state 72

    (4) statements -> statements terms . statement
    (181) opt_terms -> terms .
    (183) terms -> terms . term
    (5) statement -> . top_stmt
    (6) statement -> . func_defn
    (7) statement -> . class_defn
    (8) statement -> . VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (9) statement -> . VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (10) statement -> . VARIABLES DOT VARIABLES arguments
    (11) statement -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (12) statement -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (13) statement -> . CONSTANTS DOT KEYWORD_new arguments
    (184) term -> . DELIM
    (185) term -> . newline
    (86) top_stmt -> . stmt
    (87) top_stmt -> . KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6
    (88) top_stmt -> . KEYWORD_while M_7 expr3 opt_do M_8 gen_stmts2 opt_terms KEYWORD_end M_9
    (89) top_stmt -> . KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts2 opt_terms KEYWORD_end M_11
    (50) func_defn -> . KEYWORD_def fname OPEN_PAREN arguments M_13 CLOSE_PAREN func_stmts opt_terms KEYWORD_end M_14
    (51) func_defn -> . KEYWORD_def fname OPEN_PAREN CLOSE_PAREN M_18 func_stmts opt_terms KEYWORD_end M_15
    (14) class_defn -> . KEYWORD_class CONSTANTS newline class_stmts opt_terms KEYWORD_end
    (104) stmt -> . expr
    (105) stmt -> . expr1
    (106) stmt -> . puts_stmt
    (107) stmt -> . loop_stmt
    (108) stmt -> . exit_stmt
    (109) stmt -> . func_call_stmt
    (110) stmt -> . KEYWORD_return func_ret_arg
    (125) expr -> . mlhs EQUAL mrhs
    (140) expr1 -> . expr3
    (74) puts_stmt -> . KEYWORD_puts mrhs
    (75) puts_stmt -> . KEYWORD_puts expr
    (72) loop_stmt -> . KEYWORD_break
    (73) exit_stmt -> . KEYWORD_exit
    (63) func_call_stmt -> . fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (64) func_call_stmt -> . mlhs EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (126) mlhs -> . VARIABLES
    (127) mlhs -> . CONSTANTS
    (128) mlhs -> . array
    (141) expr3 -> . expr3 LOGICALOR expr4
    (142) expr3 -> . expr4
    (66) fname2 -> . VARIABLES
    (67) fname2 -> . CONSTANTS
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (143) expr4 -> . expr4 LOGICALAND expr5
    (144) expr4 -> . expr5
    (145) expr5 -> . expr6 DOUBLEEQUAL expr6
    (146) expr5 -> . expr6 NOTEQUAL expr6
    (147) expr5 -> . expr6
    (148) expr6 -> . expr7 LESSEQUAL expr7
    (149) expr6 -> . expr7 LESS expr7
    (150) expr6 -> . expr7 GREATER expr7
    (151) expr6 -> . expr7 GREATEREQUAL expr7
    (152) expr6 -> . expr7
    (153) expr6 -> . BOOLEAN_CONSTANTS
    (154) expr7 -> . expr7 BITXOR expr8
    (155) expr7 -> . expr7 PIPE expr8
    (156) expr7 -> . expr8
    (157) expr8 -> . expr8 BITAND expr9
    (158) expr8 -> . expr9
    (159) expr9 -> . expr9 SHIFTL expr10
    (160) expr9 -> . expr9 SHIFTR expr10
    (161) expr9 -> . expr10
    (162) expr10 -> . expr10 PLUS expr11
    (163) expr10 -> . expr10 MINUS expr11
    (164) expr10 -> . expr11
    (165) expr11 -> . expr11 MULTIPLY expr13
    (166) expr11 -> . expr11 DIV expr13
    (167) expr11 -> . expr11 MOD expr13
    (168) expr11 -> . expr13
    (169) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (170) expr13 -> . uexpr INT_CONSTANTS
    (171) expr13 -> . CONSTANTS
    (172) expr13 -> . VARIABLES
    (173) expr13 -> . array
    (175) uexpr -> . none
    (176) uexpr -> . PLUS
    (177) uexpr -> . MINUS
    (178) uexpr -> . BITNOT
    (179) uexpr -> . BITCOMP
    (186) none -> .

    $end            reduce using rule 181 (opt_terms -> terms .)
    VARIABLES       shift and go to state 22
    CONSTANTS       shift and go to state 46
    DELIM           shift and go to state 74
    newline         shift and go to state 73
    KEYWORD_if      shift and go to state 21
    KEYWORD_while   shift and go to state 3
    KEYWORD_for     shift and go to state 44
    KEYWORD_def     shift and go to state 17
    KEYWORD_class   shift and go to state 32
    KEYWORD_return  shift and go to state 14
    KEYWORD_puts    shift and go to state 27
    KEYWORD_break   shift and go to state 41
    KEYWORD_exit    shift and go to state 18
    BOOLEAN_CONSTANTS shift and go to state 9
    OPEN_PAREN      shift and go to state 24
    PLUS            shift and go to state 5
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 33
    BITCOMP         shift and go to state 23
    INT_CONSTANTS   reduce using rule 186 (none -> .)

    mlhs                           shift and go to state 1
    func_defn                      shift and go to state 31
    puts_stmt                      shift and go to state 15
    expr11                         shift and go to state 12
    expr13                         shift and go to state 13
    array                          shift and go to state 20
    expr3                          shift and go to state 34
    expr1                          shift and go to state 35
    expr6                          shift and go to state 36
    statement                      shift and go to state 123
    expr5                          shift and go to state 38
    func_call_stmt                 shift and go to state 26
    expr7                          shift and go to state 6
    expr8                          shift and go to state 39
    fname2                         shift and go to state 45
    expr4                          shift and go to state 37
    exit_stmt                      shift and go to state 42
    expr9                          shift and go to state 40
    none                           shift and go to state 28
    stmt                           shift and go to state 16
    loop_stmt                      shift and go to state 7
    uexpr                          shift and go to state 8
    term                           shift and go to state 122
    expr                           shift and go to state 29
    class_defn                     shift and go to state 30
    expr10                         shift and go to state 11
    top_stmt                       shift and go to state 10

state 73

    (185) term -> newline .

    KEYWORD_return  reduce using rule 185 (term -> newline .)
    DELIM           reduce using rule 185 (term -> newline .)
    newline         reduce using rule 185 (term -> newline .)
    SIGIL_AT        reduce using rule 185 (term -> newline .)
    SIGIL_DOUBLE_AT reduce using rule 185 (term -> newline .)
    KEYWORD_puts    reduce using rule 185 (term -> newline .)
    KEYWORD_end     reduce using rule 185 (term -> newline .)
    KEYWORD_if      reduce using rule 185 (term -> newline .)
    KEYWORD_while   reduce using rule 185 (term -> newline .)
    KEYWORD_for     reduce using rule 185 (term -> newline .)
    KEYWORD_break   reduce using rule 185 (term -> newline .)
    KEYWORD_exit    reduce using rule 185 (term -> newline .)
    VARIABLES       reduce using rule 185 (term -> newline .)
    CONSTANTS       reduce using rule 185 (term -> newline .)
    BOOLEAN_CONSTANTS reduce using rule 185 (term -> newline .)
    OPEN_PAREN      reduce using rule 185 (term -> newline .)
    PLUS            reduce using rule 185 (term -> newline .)
    MINUS           reduce using rule 185 (term -> newline .)
    BITNOT          reduce using rule 185 (term -> newline .)
    BITCOMP         reduce using rule 185 (term -> newline .)
    INT_CONSTANTS   reduce using rule 185 (term -> newline .)
    KEYWORD_elsif   reduce using rule 185 (term -> newline .)
    KEYWORD_else    reduce using rule 185 (term -> newline .)
    KEYWORD_def     reduce using rule 185 (term -> newline .)
    KEYWORD_class   reduce using rule 185 (term -> newline .)
    $end            reduce using rule 185 (term -> newline .)


state 74

    (184) term -> DELIM .

    KEYWORD_return  reduce using rule 184 (term -> DELIM .)
    DELIM           reduce using rule 184 (term -> DELIM .)
    newline         reduce using rule 184 (term -> DELIM .)
    SIGIL_AT        reduce using rule 184 (term -> DELIM .)
    SIGIL_DOUBLE_AT reduce using rule 184 (term -> DELIM .)
    KEYWORD_puts    reduce using rule 184 (term -> DELIM .)
    KEYWORD_end     reduce using rule 184 (term -> DELIM .)
    KEYWORD_if      reduce using rule 184 (term -> DELIM .)
    KEYWORD_while   reduce using rule 184 (term -> DELIM .)
    KEYWORD_for     reduce using rule 184 (term -> DELIM .)
    KEYWORD_break   reduce using rule 184 (term -> DELIM .)
    KEYWORD_exit    reduce using rule 184 (term -> DELIM .)
    VARIABLES       reduce using rule 184 (term -> DELIM .)
    CONSTANTS       reduce using rule 184 (term -> DELIM .)
    BOOLEAN_CONSTANTS reduce using rule 184 (term -> DELIM .)
    OPEN_PAREN      reduce using rule 184 (term -> DELIM .)
    PLUS            reduce using rule 184 (term -> DELIM .)
    MINUS           reduce using rule 184 (term -> DELIM .)
    BITNOT          reduce using rule 184 (term -> DELIM .)
    BITCOMP         reduce using rule 184 (term -> DELIM .)
    INT_CONSTANTS   reduce using rule 184 (term -> DELIM .)
    KEYWORD_elsif   reduce using rule 184 (term -> DELIM .)
    KEYWORD_else    reduce using rule 184 (term -> DELIM .)
    KEYWORD_def     reduce using rule 184 (term -> DELIM .)
    KEYWORD_class   reduce using rule 184 (term -> DELIM .)
    $end            reduce using rule 184 (term -> DELIM .)


state 75

    (180) opt_terms -> none .

    KEYWORD_end     reduce using rule 180 (opt_terms -> none .)
    KEYWORD_elsif   reduce using rule 180 (opt_terms -> none .)
    KEYWORD_else    reduce using rule 180 (opt_terms -> none .)
    $end            reduce using rule 180 (opt_terms -> none .)


state 76

    (2) top_top_compstmt -> statements opt_terms .

    $end            reduce using rule 2 (top_top_compstmt -> statements opt_terms .)


state 77

    (172) expr13 -> VARIABLES .
    (174) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET

    MULTIPLY        reduce using rule 172 (expr13 -> VARIABLES .)
    DIV             reduce using rule 172 (expr13 -> VARIABLES .)
    MOD             reduce using rule 172 (expr13 -> VARIABLES .)
    PLUS            reduce using rule 172 (expr13 -> VARIABLES .)
    MINUS           reduce using rule 172 (expr13 -> VARIABLES .)
    SHIFTL          reduce using rule 172 (expr13 -> VARIABLES .)
    SHIFTR          reduce using rule 172 (expr13 -> VARIABLES .)
    BITAND          reduce using rule 172 (expr13 -> VARIABLES .)
    LESSEQUAL       reduce using rule 172 (expr13 -> VARIABLES .)
    LESS            reduce using rule 172 (expr13 -> VARIABLES .)
    GREATER         reduce using rule 172 (expr13 -> VARIABLES .)
    GREATEREQUAL    reduce using rule 172 (expr13 -> VARIABLES .)
    BITXOR          reduce using rule 172 (expr13 -> VARIABLES .)
    PIPE            reduce using rule 172 (expr13 -> VARIABLES .)
    LOGICALAND      reduce using rule 172 (expr13 -> VARIABLES .)
    LOGICALOR       reduce using rule 172 (expr13 -> VARIABLES .)
    DELIM           reduce using rule 172 (expr13 -> VARIABLES .)
    newline         reduce using rule 172 (expr13 -> VARIABLES .)
    $end            reduce using rule 172 (expr13 -> VARIABLES .)
    KEYWORD_then    reduce using rule 172 (expr13 -> VARIABLES .)
    CLOSE_PAREN     reduce using rule 172 (expr13 -> VARIABLES .)
    KEYWORD_elsif   reduce using rule 172 (expr13 -> VARIABLES .)
    KEYWORD_else    reduce using rule 172 (expr13 -> VARIABLES .)
    KEYWORD_end     reduce using rule 172 (expr13 -> VARIABLES .)
    KEYWORD_do      reduce using rule 172 (expr13 -> VARIABLES .)
    DOUBLEEQUAL     reduce using rule 172 (expr13 -> VARIABLES .)
    NOTEQUAL        reduce using rule 172 (expr13 -> VARIABLES .)
    CLOSE_BRACKET   reduce using rule 172 (expr13 -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 81


state 78

    (87) top_stmt -> KEYWORD_if expr3 . opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6
    (141) expr3 -> expr3 . LOGICALOR expr4
    (117) opt_then -> . KEYWORD_then
    (118) opt_then -> . newline

    LOGICALOR       shift and go to state 95
    KEYWORD_then    shift and go to state 125
    newline         shift and go to state 124

    opt_then                       shift and go to state 126

state 79

    (173) expr13 -> array .

    MULTIPLY        reduce using rule 173 (expr13 -> array .)
    DIV             reduce using rule 173 (expr13 -> array .)
    MOD             reduce using rule 173 (expr13 -> array .)
    PLUS            reduce using rule 173 (expr13 -> array .)
    MINUS           reduce using rule 173 (expr13 -> array .)
    SHIFTL          reduce using rule 173 (expr13 -> array .)
    SHIFTR          reduce using rule 173 (expr13 -> array .)
    BITAND          reduce using rule 173 (expr13 -> array .)
    LESSEQUAL       reduce using rule 173 (expr13 -> array .)
    LESS            reduce using rule 173 (expr13 -> array .)
    GREATER         reduce using rule 173 (expr13 -> array .)
    GREATEREQUAL    reduce using rule 173 (expr13 -> array .)
    BITXOR          reduce using rule 173 (expr13 -> array .)
    PIPE            reduce using rule 173 (expr13 -> array .)
    LOGICALAND      reduce using rule 173 (expr13 -> array .)
    LOGICALOR       reduce using rule 173 (expr13 -> array .)
    DELIM           reduce using rule 173 (expr13 -> array .)
    newline         reduce using rule 173 (expr13 -> array .)
    $end            reduce using rule 173 (expr13 -> array .)
    KEYWORD_then    reduce using rule 173 (expr13 -> array .)
    CLOSE_PAREN     reduce using rule 173 (expr13 -> array .)
    KEYWORD_elsif   reduce using rule 173 (expr13 -> array .)
    KEYWORD_else    reduce using rule 173 (expr13 -> array .)
    KEYWORD_end     reduce using rule 173 (expr13 -> array .)
    KEYWORD_do      reduce using rule 173 (expr13 -> array .)
    DOUBLEEQUAL     reduce using rule 173 (expr13 -> array .)
    NOTEQUAL        reduce using rule 173 (expr13 -> array .)
    CLOSE_BRACKET   reduce using rule 173 (expr13 -> array .)


state 80

    (171) expr13 -> CONSTANTS .

    MULTIPLY        reduce using rule 171 (expr13 -> CONSTANTS .)
    DIV             reduce using rule 171 (expr13 -> CONSTANTS .)
    MOD             reduce using rule 171 (expr13 -> CONSTANTS .)
    PLUS            reduce using rule 171 (expr13 -> CONSTANTS .)
    MINUS           reduce using rule 171 (expr13 -> CONSTANTS .)
    SHIFTL          reduce using rule 171 (expr13 -> CONSTANTS .)
    SHIFTR          reduce using rule 171 (expr13 -> CONSTANTS .)
    BITAND          reduce using rule 171 (expr13 -> CONSTANTS .)
    LESSEQUAL       reduce using rule 171 (expr13 -> CONSTANTS .)
    LESS            reduce using rule 171 (expr13 -> CONSTANTS .)
    GREATER         reduce using rule 171 (expr13 -> CONSTANTS .)
    GREATEREQUAL    reduce using rule 171 (expr13 -> CONSTANTS .)
    BITXOR          reduce using rule 171 (expr13 -> CONSTANTS .)
    PIPE            reduce using rule 171 (expr13 -> CONSTANTS .)
    LOGICALAND      reduce using rule 171 (expr13 -> CONSTANTS .)
    LOGICALOR       reduce using rule 171 (expr13 -> CONSTANTS .)
    DELIM           reduce using rule 171 (expr13 -> CONSTANTS .)
    newline         reduce using rule 171 (expr13 -> CONSTANTS .)
    $end            reduce using rule 171 (expr13 -> CONSTANTS .)
    KEYWORD_then    reduce using rule 171 (expr13 -> CONSTANTS .)
    CLOSE_PAREN     reduce using rule 171 (expr13 -> CONSTANTS .)
    KEYWORD_elsif   reduce using rule 171 (expr13 -> CONSTANTS .)
    KEYWORD_else    reduce using rule 171 (expr13 -> CONSTANTS .)
    KEYWORD_end     reduce using rule 171 (expr13 -> CONSTANTS .)
    KEYWORD_do      reduce using rule 171 (expr13 -> CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 171 (expr13 -> CONSTANTS .)
    NOTEQUAL        reduce using rule 171 (expr13 -> CONSTANTS .)
    CLOSE_BRACKET   reduce using rule 171 (expr13 -> CONSTANTS .)


state 81

    (174) array -> VARIABLES OPEN_BRACKET . expr7 CLOSE_BRACKET
    (154) expr7 -> . expr7 BITXOR expr8
    (155) expr7 -> . expr7 PIPE expr8
    (156) expr7 -> . expr8
    (157) expr8 -> . expr8 BITAND expr9
    (158) expr8 -> . expr9
    (159) expr9 -> . expr9 SHIFTL expr10
    (160) expr9 -> . expr9 SHIFTR expr10
    (161) expr9 -> . expr10
    (162) expr10 -> . expr10 PLUS expr11
    (163) expr10 -> . expr10 MINUS expr11
    (164) expr10 -> . expr11
    (165) expr11 -> . expr11 MULTIPLY expr13
    (166) expr11 -> . expr11 DIV expr13
    (167) expr11 -> . expr11 MOD expr13
    (168) expr11 -> . expr13
    (169) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (170) expr13 -> . uexpr INT_CONSTANTS
    (171) expr13 -> . CONSTANTS
    (172) expr13 -> . VARIABLES
    (173) expr13 -> . array
    (175) uexpr -> . none
    (176) uexpr -> . PLUS
    (177) uexpr -> . MINUS
    (178) uexpr -> . BITNOT
    (179) uexpr -> . BITCOMP
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (186) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 80
    VARIABLES       shift and go to state 77
    PLUS            shift and go to state 5
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 33
    BITCOMP         shift and go to state 23
    INT_CONSTANTS   reduce using rule 186 (none -> .)

    uexpr                          shift and go to state 8
    none                           shift and go to state 28
    expr10                         shift and go to state 11
    expr7                          shift and go to state 127
    expr13                         shift and go to state 13
    expr8                          shift and go to state 39
    expr9                          shift and go to state 40
    array                          shift and go to state 79
    expr11                         shift and go to state 12

state 82

    (8) statement -> VARIABLES DOT . VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (9) statement -> VARIABLES DOT . VARIABLES OPEN_PAREN CLOSE_PAREN
    (10) statement -> VARIABLES DOT . VARIABLES arguments

    VARIABLES       shift and go to state 128


state 83

    (169) expr13 -> OPEN_PAREN expr1 . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 129


state 84

    (125) expr -> mlhs . EQUAL mrhs

    EQUAL           shift and go to state 130


state 85

    (130) mrhs -> str_expr .

    DELIM           reduce using rule 130 (mrhs -> str_expr .)
    newline         reduce using rule 130 (mrhs -> str_expr .)
    $end            reduce using rule 130 (mrhs -> str_expr .)
    KEYWORD_elsif   reduce using rule 130 (mrhs -> str_expr .)
    KEYWORD_else    reduce using rule 130 (mrhs -> str_expr .)
    KEYWORD_end     reduce using rule 130 (mrhs -> str_expr .)


state 86

    (133) mrhs -> VARIABLES . DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (134) mrhs -> VARIABLES . DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (135) mrhs -> VARIABLES . DOT VARIABLES
    (126) mlhs -> VARIABLES .
    (174) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET
    (172) expr13 -> VARIABLES .

    DOT             shift and go to state 131
    EQUAL           reduce using rule 126 (mlhs -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 81
    MULTIPLY        reduce using rule 172 (expr13 -> VARIABLES .)
    DIV             reduce using rule 172 (expr13 -> VARIABLES .)
    MOD             reduce using rule 172 (expr13 -> VARIABLES .)
    PLUS            reduce using rule 172 (expr13 -> VARIABLES .)
    MINUS           reduce using rule 172 (expr13 -> VARIABLES .)
    SHIFTL          reduce using rule 172 (expr13 -> VARIABLES .)
    SHIFTR          reduce using rule 172 (expr13 -> VARIABLES .)
    BITAND          reduce using rule 172 (expr13 -> VARIABLES .)
    LESSEQUAL       reduce using rule 172 (expr13 -> VARIABLES .)
    LESS            reduce using rule 172 (expr13 -> VARIABLES .)
    GREATER         reduce using rule 172 (expr13 -> VARIABLES .)
    GREATEREQUAL    reduce using rule 172 (expr13 -> VARIABLES .)
    BITXOR          reduce using rule 172 (expr13 -> VARIABLES .)
    PIPE            reduce using rule 172 (expr13 -> VARIABLES .)
    DOUBLEEQUAL     reduce using rule 172 (expr13 -> VARIABLES .)
    NOTEQUAL        reduce using rule 172 (expr13 -> VARIABLES .)
    LOGICALAND      reduce using rule 172 (expr13 -> VARIABLES .)
    LOGICALOR       reduce using rule 172 (expr13 -> VARIABLES .)
    DELIM           reduce using rule 172 (expr13 -> VARIABLES .)
    newline         reduce using rule 172 (expr13 -> VARIABLES .)
    $end            reduce using rule 172 (expr13 -> VARIABLES .)
    KEYWORD_elsif   reduce using rule 172 (expr13 -> VARIABLES .)
    KEYWORD_else    reduce using rule 172 (expr13 -> VARIABLES .)
    KEYWORD_end     reduce using rule 172 (expr13 -> VARIABLES .)


state 87

    (132) mrhs -> OPEN_BRACKET . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 132


state 88

    (129) mrhs -> expr1 .

    DELIM           reduce using rule 129 (mrhs -> expr1 .)
    newline         reduce using rule 129 (mrhs -> expr1 .)
    $end            reduce using rule 129 (mrhs -> expr1 .)
    KEYWORD_elsif   reduce using rule 129 (mrhs -> expr1 .)
    KEYWORD_else    reduce using rule 129 (mrhs -> expr1 .)
    KEYWORD_end     reduce using rule 129 (mrhs -> expr1 .)


state 89

    (131) mrhs -> KEYWORD_gets .

    DELIM           reduce using rule 131 (mrhs -> KEYWORD_gets .)
    newline         reduce using rule 131 (mrhs -> KEYWORD_gets .)
    $end            reduce using rule 131 (mrhs -> KEYWORD_gets .)
    KEYWORD_elsif   reduce using rule 131 (mrhs -> KEYWORD_gets .)
    KEYWORD_else    reduce using rule 131 (mrhs -> KEYWORD_gets .)
    KEYWORD_end     reduce using rule 131 (mrhs -> KEYWORD_gets .)


state 90

    (74) puts_stmt -> KEYWORD_puts mrhs .

    DELIM           reduce using rule 74 (puts_stmt -> KEYWORD_puts mrhs .)
    newline         reduce using rule 74 (puts_stmt -> KEYWORD_puts mrhs .)
    $end            reduce using rule 74 (puts_stmt -> KEYWORD_puts mrhs .)
    KEYWORD_elsif   reduce using rule 74 (puts_stmt -> KEYWORD_puts mrhs .)
    KEYWORD_else    reduce using rule 74 (puts_stmt -> KEYWORD_puts mrhs .)
    KEYWORD_end     reduce using rule 74 (puts_stmt -> KEYWORD_puts mrhs .)


state 91

    (75) puts_stmt -> KEYWORD_puts expr .

    DELIM           reduce using rule 75 (puts_stmt -> KEYWORD_puts expr .)
    newline         reduce using rule 75 (puts_stmt -> KEYWORD_puts expr .)
    $end            reduce using rule 75 (puts_stmt -> KEYWORD_puts expr .)
    KEYWORD_elsif   reduce using rule 75 (puts_stmt -> KEYWORD_puts expr .)
    KEYWORD_else    reduce using rule 75 (puts_stmt -> KEYWORD_puts expr .)
    KEYWORD_end     reduce using rule 75 (puts_stmt -> KEYWORD_puts expr .)


state 92

    (139) str_expr -> STRING_CONSTANTS .

    DELIM           reduce using rule 139 (str_expr -> STRING_CONSTANTS .)
    newline         reduce using rule 139 (str_expr -> STRING_CONSTANTS .)
    $end            reduce using rule 139 (str_expr -> STRING_CONSTANTS .)
    KEYWORD_elsif   reduce using rule 139 (str_expr -> STRING_CONSTANTS .)
    KEYWORD_else    reduce using rule 139 (str_expr -> STRING_CONSTANTS .)
    KEYWORD_end     reduce using rule 139 (str_expr -> STRING_CONSTANTS .)


state 93

    (136) mrhs -> CONSTANTS . DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (137) mrhs -> CONSTANTS . DOT KEYWORD_new
    (138) mrhs -> CONSTANTS . DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (127) mlhs -> CONSTANTS .
    (171) expr13 -> CONSTANTS .

    DOT             shift and go to state 133
    EQUAL           reduce using rule 127 (mlhs -> CONSTANTS .)
    MULTIPLY        reduce using rule 171 (expr13 -> CONSTANTS .)
    DIV             reduce using rule 171 (expr13 -> CONSTANTS .)
    MOD             reduce using rule 171 (expr13 -> CONSTANTS .)
    PLUS            reduce using rule 171 (expr13 -> CONSTANTS .)
    MINUS           reduce using rule 171 (expr13 -> CONSTANTS .)
    SHIFTL          reduce using rule 171 (expr13 -> CONSTANTS .)
    SHIFTR          reduce using rule 171 (expr13 -> CONSTANTS .)
    BITAND          reduce using rule 171 (expr13 -> CONSTANTS .)
    LESSEQUAL       reduce using rule 171 (expr13 -> CONSTANTS .)
    LESS            reduce using rule 171 (expr13 -> CONSTANTS .)
    GREATER         reduce using rule 171 (expr13 -> CONSTANTS .)
    GREATEREQUAL    reduce using rule 171 (expr13 -> CONSTANTS .)
    BITXOR          reduce using rule 171 (expr13 -> CONSTANTS .)
    PIPE            reduce using rule 171 (expr13 -> CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 171 (expr13 -> CONSTANTS .)
    NOTEQUAL        reduce using rule 171 (expr13 -> CONSTANTS .)
    LOGICALAND      reduce using rule 171 (expr13 -> CONSTANTS .)
    LOGICALOR       reduce using rule 171 (expr13 -> CONSTANTS .)
    DELIM           reduce using rule 171 (expr13 -> CONSTANTS .)
    newline         reduce using rule 171 (expr13 -> CONSTANTS .)
    $end            reduce using rule 171 (expr13 -> CONSTANTS .)
    KEYWORD_elsif   reduce using rule 171 (expr13 -> CONSTANTS .)
    KEYWORD_else    reduce using rule 171 (expr13 -> CONSTANTS .)
    KEYWORD_end     reduce using rule 171 (expr13 -> CONSTANTS .)


state 94

    (14) class_defn -> KEYWORD_class CONSTANTS . newline class_stmts opt_terms KEYWORD_end

    newline         shift and go to state 134


state 95

    (141) expr3 -> expr3 LOGICALOR . expr4
    (143) expr4 -> . expr4 LOGICALAND expr5
    (144) expr4 -> . expr5
    (145) expr5 -> . expr6 DOUBLEEQUAL expr6
    (146) expr5 -> . expr6 NOTEQUAL expr6
    (147) expr5 -> . expr6
    (148) expr6 -> . expr7 LESSEQUAL expr7
    (149) expr6 -> . expr7 LESS expr7
    (150) expr6 -> . expr7 GREATER expr7
    (151) expr6 -> . expr7 GREATEREQUAL expr7
    (152) expr6 -> . expr7
    (153) expr6 -> . BOOLEAN_CONSTANTS
    (154) expr7 -> . expr7 BITXOR expr8
    (155) expr7 -> . expr7 PIPE expr8
    (156) expr7 -> . expr8
    (157) expr8 -> . expr8 BITAND expr9
    (158) expr8 -> . expr9
    (159) expr9 -> . expr9 SHIFTL expr10
    (160) expr9 -> . expr9 SHIFTR expr10
    (161) expr9 -> . expr10
    (162) expr10 -> . expr10 PLUS expr11
    (163) expr10 -> . expr10 MINUS expr11
    (164) expr10 -> . expr11
    (165) expr11 -> . expr11 MULTIPLY expr13
    (166) expr11 -> . expr11 DIV expr13
    (167) expr11 -> . expr11 MOD expr13
    (168) expr11 -> . expr13
    (169) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (170) expr13 -> . uexpr INT_CONSTANTS
    (171) expr13 -> . CONSTANTS
    (172) expr13 -> . VARIABLES
    (173) expr13 -> . array
    (175) uexpr -> . none
    (176) uexpr -> . PLUS
    (177) uexpr -> . MINUS
    (178) uexpr -> . BITNOT
    (179) uexpr -> . BITCOMP
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (186) none -> .

    BOOLEAN_CONSTANTS shift and go to state 9
    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 80
    VARIABLES       shift and go to state 77
    PLUS            shift and go to state 5
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 33
    BITCOMP         shift and go to state 23
    INT_CONSTANTS   reduce using rule 186 (none -> .)

    uexpr                          shift and go to state 8
    none                           shift and go to state 28
    expr13                         shift and go to state 13
    expr6                          shift and go to state 36
    expr7                          shift and go to state 6
    expr4                          shift and go to state 135
    expr5                          shift and go to state 38
    expr10                         shift and go to state 11
    expr8                          shift and go to state 39
    expr9                          shift and go to state 40
    array                          shift and go to state 79
    expr11                         shift and go to state 12

state 96

    (146) expr5 -> expr6 NOTEQUAL . expr6
    (148) expr6 -> . expr7 LESSEQUAL expr7
    (149) expr6 -> . expr7 LESS expr7
    (150) expr6 -> . expr7 GREATER expr7
    (151) expr6 -> . expr7 GREATEREQUAL expr7
    (152) expr6 -> . expr7
    (153) expr6 -> . BOOLEAN_CONSTANTS
    (154) expr7 -> . expr7 BITXOR expr8
    (155) expr7 -> . expr7 PIPE expr8
    (156) expr7 -> . expr8
    (157) expr8 -> . expr8 BITAND expr9
    (158) expr8 -> . expr9
    (159) expr9 -> . expr9 SHIFTL expr10
    (160) expr9 -> . expr9 SHIFTR expr10
    (161) expr9 -> . expr10
    (162) expr10 -> . expr10 PLUS expr11
    (163) expr10 -> . expr10 MINUS expr11
    (164) expr10 -> . expr11
    (165) expr11 -> . expr11 MULTIPLY expr13
    (166) expr11 -> . expr11 DIV expr13
    (167) expr11 -> . expr11 MOD expr13
    (168) expr11 -> . expr13
    (169) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (170) expr13 -> . uexpr INT_CONSTANTS
    (171) expr13 -> . CONSTANTS
    (172) expr13 -> . VARIABLES
    (173) expr13 -> . array
    (175) uexpr -> . none
    (176) uexpr -> . PLUS
    (177) uexpr -> . MINUS
    (178) uexpr -> . BITNOT
    (179) uexpr -> . BITCOMP
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (186) none -> .

    BOOLEAN_CONSTANTS shift and go to state 9
    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 80
    VARIABLES       shift and go to state 77
    PLUS            shift and go to state 5
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 33
    BITCOMP         shift and go to state 23
    INT_CONSTANTS   reduce using rule 186 (none -> .)

    uexpr                          shift and go to state 8
    none                           shift and go to state 28
    expr10                         shift and go to state 11
    expr7                          shift and go to state 6
    expr13                         shift and go to state 13
    expr6                          shift and go to state 136
    expr8                          shift and go to state 39
    expr9                          shift and go to state 40
    array                          shift and go to state 79
    expr11                         shift and go to state 12

state 97

    (145) expr5 -> expr6 DOUBLEEQUAL . expr6
    (148) expr6 -> . expr7 LESSEQUAL expr7
    (149) expr6 -> . expr7 LESS expr7
    (150) expr6 -> . expr7 GREATER expr7
    (151) expr6 -> . expr7 GREATEREQUAL expr7
    (152) expr6 -> . expr7
    (153) expr6 -> . BOOLEAN_CONSTANTS
    (154) expr7 -> . expr7 BITXOR expr8
    (155) expr7 -> . expr7 PIPE expr8
    (156) expr7 -> . expr8
    (157) expr8 -> . expr8 BITAND expr9
    (158) expr8 -> . expr9
    (159) expr9 -> . expr9 SHIFTL expr10
    (160) expr9 -> . expr9 SHIFTR expr10
    (161) expr9 -> . expr10
    (162) expr10 -> . expr10 PLUS expr11
    (163) expr10 -> . expr10 MINUS expr11
    (164) expr10 -> . expr11
    (165) expr11 -> . expr11 MULTIPLY expr13
    (166) expr11 -> . expr11 DIV expr13
    (167) expr11 -> . expr11 MOD expr13
    (168) expr11 -> . expr13
    (169) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (170) expr13 -> . uexpr INT_CONSTANTS
    (171) expr13 -> . CONSTANTS
    (172) expr13 -> . VARIABLES
    (173) expr13 -> . array
    (175) uexpr -> . none
    (176) uexpr -> . PLUS
    (177) uexpr -> . MINUS
    (178) uexpr -> . BITNOT
    (179) uexpr -> . BITCOMP
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (186) none -> .

    BOOLEAN_CONSTANTS shift and go to state 9
    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 80
    VARIABLES       shift and go to state 77
    PLUS            shift and go to state 5
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 33
    BITCOMP         shift and go to state 23
    INT_CONSTANTS   reduce using rule 186 (none -> .)

    uexpr                          shift and go to state 8
    none                           shift and go to state 28
    expr10                         shift and go to state 11
    expr7                          shift and go to state 6
    expr13                         shift and go to state 13
    expr6                          shift and go to state 137
    expr8                          shift and go to state 39
    expr9                          shift and go to state 40
    array                          shift and go to state 79
    expr11                         shift and go to state 12

state 98

    (143) expr4 -> expr4 LOGICALAND . expr5
    (145) expr5 -> . expr6 DOUBLEEQUAL expr6
    (146) expr5 -> . expr6 NOTEQUAL expr6
    (147) expr5 -> . expr6
    (148) expr6 -> . expr7 LESSEQUAL expr7
    (149) expr6 -> . expr7 LESS expr7
    (150) expr6 -> . expr7 GREATER expr7
    (151) expr6 -> . expr7 GREATEREQUAL expr7
    (152) expr6 -> . expr7
    (153) expr6 -> . BOOLEAN_CONSTANTS
    (154) expr7 -> . expr7 BITXOR expr8
    (155) expr7 -> . expr7 PIPE expr8
    (156) expr7 -> . expr8
    (157) expr8 -> . expr8 BITAND expr9
    (158) expr8 -> . expr9
    (159) expr9 -> . expr9 SHIFTL expr10
    (160) expr9 -> . expr9 SHIFTR expr10
    (161) expr9 -> . expr10
    (162) expr10 -> . expr10 PLUS expr11
    (163) expr10 -> . expr10 MINUS expr11
    (164) expr10 -> . expr11
    (165) expr11 -> . expr11 MULTIPLY expr13
    (166) expr11 -> . expr11 DIV expr13
    (167) expr11 -> . expr11 MOD expr13
    (168) expr11 -> . expr13
    (169) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (170) expr13 -> . uexpr INT_CONSTANTS
    (171) expr13 -> . CONSTANTS
    (172) expr13 -> . VARIABLES
    (173) expr13 -> . array
    (175) uexpr -> . none
    (176) uexpr -> . PLUS
    (177) uexpr -> . MINUS
    (178) uexpr -> . BITNOT
    (179) uexpr -> . BITCOMP
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (186) none -> .

    BOOLEAN_CONSTANTS shift and go to state 9
    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 80
    VARIABLES       shift and go to state 77
    PLUS            shift and go to state 5
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 33
    BITCOMP         shift and go to state 23
    INT_CONSTANTS   reduce using rule 186 (none -> .)

    uexpr                          shift and go to state 8
    none                           shift and go to state 28
    expr13                         shift and go to state 13
    expr6                          shift and go to state 36
    expr7                          shift and go to state 6
    expr5                          shift and go to state 138
    expr10                         shift and go to state 11
    expr8                          shift and go to state 39
    expr9                          shift and go to state 40
    array                          shift and go to state 79
    expr11                         shift and go to state 12

state 99

    (157) expr8 -> expr8 BITAND . expr9
    (159) expr9 -> . expr9 SHIFTL expr10
    (160) expr9 -> . expr9 SHIFTR expr10
    (161) expr9 -> . expr10
    (162) expr10 -> . expr10 PLUS expr11
    (163) expr10 -> . expr10 MINUS expr11
    (164) expr10 -> . expr11
    (165) expr11 -> . expr11 MULTIPLY expr13
    (166) expr11 -> . expr11 DIV expr13
    (167) expr11 -> . expr11 MOD expr13
    (168) expr11 -> . expr13
    (169) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (170) expr13 -> . uexpr INT_CONSTANTS
    (171) expr13 -> . CONSTANTS
    (172) expr13 -> . VARIABLES
    (173) expr13 -> . array
    (175) uexpr -> . none
    (176) uexpr -> . PLUS
    (177) uexpr -> . MINUS
    (178) uexpr -> . BITNOT
    (179) uexpr -> . BITCOMP
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (186) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 80
    VARIABLES       shift and go to state 77
    PLUS            shift and go to state 5
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 33
    BITCOMP         shift and go to state 23
    INT_CONSTANTS   reduce using rule 186 (none -> .)

    uexpr                          shift and go to state 8
    none                           shift and go to state 28
    expr10                         shift and go to state 11
    expr11                         shift and go to state 12
    expr13                         shift and go to state 13
    expr9                          shift and go to state 139
    array                          shift and go to state 79

state 100

    (160) expr9 -> expr9 SHIFTR . expr10
    (162) expr10 -> . expr10 PLUS expr11
    (163) expr10 -> . expr10 MINUS expr11
    (164) expr10 -> . expr11
    (165) expr11 -> . expr11 MULTIPLY expr13
    (166) expr11 -> . expr11 DIV expr13
    (167) expr11 -> . expr11 MOD expr13
    (168) expr11 -> . expr13
    (169) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (170) expr13 -> . uexpr INT_CONSTANTS
    (171) expr13 -> . CONSTANTS
    (172) expr13 -> . VARIABLES
    (173) expr13 -> . array
    (175) uexpr -> . none
    (176) uexpr -> . PLUS
    (177) uexpr -> . MINUS
    (178) uexpr -> . BITNOT
    (179) uexpr -> . BITCOMP
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (186) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 80
    VARIABLES       shift and go to state 77
    PLUS            shift and go to state 5
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 33
    BITCOMP         shift and go to state 23
    INT_CONSTANTS   reduce using rule 186 (none -> .)

    uexpr                          shift and go to state 8
    none                           shift and go to state 28
    expr10                         shift and go to state 140
    expr11                         shift and go to state 12
    expr13                         shift and go to state 13
    array                          shift and go to state 79

state 101

    (159) expr9 -> expr9 SHIFTL . expr10
    (162) expr10 -> . expr10 PLUS expr11
    (163) expr10 -> . expr10 MINUS expr11
    (164) expr10 -> . expr11
    (165) expr11 -> . expr11 MULTIPLY expr13
    (166) expr11 -> . expr11 DIV expr13
    (167) expr11 -> . expr11 MOD expr13
    (168) expr11 -> . expr13
    (169) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (170) expr13 -> . uexpr INT_CONSTANTS
    (171) expr13 -> . CONSTANTS
    (172) expr13 -> . VARIABLES
    (173) expr13 -> . array
    (175) uexpr -> . none
    (176) uexpr -> . PLUS
    (177) uexpr -> . MINUS
    (178) uexpr -> . BITNOT
    (179) uexpr -> . BITCOMP
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (186) none -> .

    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 80
    VARIABLES       shift and go to state 77
    PLUS            shift and go to state 5
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 33
    BITCOMP         shift and go to state 23
    INT_CONSTANTS   reduce using rule 186 (none -> .)

    uexpr                          shift and go to state 8
    none                           shift and go to state 28
    expr10                         shift and go to state 141
    expr11                         shift and go to state 12
    expr13                         shift and go to state 13
    array                          shift and go to state 79

state 102

    (89) top_stmt -> KEYWORD_for VARIABLES . KEYWORD_in for_range opt_do M_10 gen_stmts2 opt_terms KEYWORD_end M_11

    KEYWORD_in      shift and go to state 142


state 103

    (63) func_call_stmt -> fname2 OPEN_PAREN . call_arg CLOSE_PAREN M_17
    (68) call_arg -> . primary M_16 COMMA call_arg
    (69) call_arg -> . primary M_16
    (70) call_arg -> . none
    (81) primary -> . INT_CONSTANTS
    (82) primary -> . BOOLEAN_CONSTANTS
    (83) primary -> . CONSTANTS
    (84) primary -> . VARIABLES
    (85) primary -> . array
    (186) none -> .
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET

    INT_CONSTANTS   shift and go to state 62
    BOOLEAN_CONSTANTS shift and go to state 61
    CONSTANTS       shift and go to state 67
    VARIABLES       shift and go to state 63
    CLOSE_PAREN     reduce using rule 186 (none -> .)

    none                           shift and go to state 143
    primary                        shift and go to state 144
    call_arg                       shift and go to state 145
    array                          shift and go to state 66

state 104

    (11) statement -> CONSTANTS DOT . KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (12) statement -> CONSTANTS DOT . KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (13) statement -> CONSTANTS DOT . KEYWORD_new arguments

    KEYWORD_new     shift and go to state 146


state 105

    (133) mrhs -> VARIABLES . DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (134) mrhs -> VARIABLES . DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (135) mrhs -> VARIABLES . DOT VARIABLES
    (66) fname2 -> VARIABLES .
    (172) expr13 -> VARIABLES .
    (174) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET

    DOT             shift and go to state 131
    OPEN_PAREN      reduce using rule 66 (fname2 -> VARIABLES .)
    MULTIPLY        reduce using rule 172 (expr13 -> VARIABLES .)
    DIV             reduce using rule 172 (expr13 -> VARIABLES .)
    MOD             reduce using rule 172 (expr13 -> VARIABLES .)
    PLUS            reduce using rule 172 (expr13 -> VARIABLES .)
    MINUS           reduce using rule 172 (expr13 -> VARIABLES .)
    SHIFTL          reduce using rule 172 (expr13 -> VARIABLES .)
    SHIFTR          reduce using rule 172 (expr13 -> VARIABLES .)
    BITAND          reduce using rule 172 (expr13 -> VARIABLES .)
    LESSEQUAL       reduce using rule 172 (expr13 -> VARIABLES .)
    LESS            reduce using rule 172 (expr13 -> VARIABLES .)
    GREATER         reduce using rule 172 (expr13 -> VARIABLES .)
    GREATEREQUAL    reduce using rule 172 (expr13 -> VARIABLES .)
    BITXOR          reduce using rule 172 (expr13 -> VARIABLES .)
    PIPE            reduce using rule 172 (expr13 -> VARIABLES .)
    DOUBLEEQUAL     reduce using rule 172 (expr13 -> VARIABLES .)
    NOTEQUAL        reduce using rule 172 (expr13 -> VARIABLES .)
    LOGICALAND      reduce using rule 172 (expr13 -> VARIABLES .)
    LOGICALOR       reduce using rule 172 (expr13 -> VARIABLES .)
    DELIM           reduce using rule 172 (expr13 -> VARIABLES .)
    newline         reduce using rule 172 (expr13 -> VARIABLES .)
    $end            reduce using rule 172 (expr13 -> VARIABLES .)
    KEYWORD_elsif   reduce using rule 172 (expr13 -> VARIABLES .)
    KEYWORD_else    reduce using rule 172 (expr13 -> VARIABLES .)
    KEYWORD_end     reduce using rule 172 (expr13 -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 81


state 106

    (125) expr -> mlhs EQUAL mrhs .

    DELIM           reduce using rule 125 (expr -> mlhs EQUAL mrhs .)
    newline         reduce using rule 125 (expr -> mlhs EQUAL mrhs .)
    KEYWORD_end     reduce using rule 125 (expr -> mlhs EQUAL mrhs .)
    KEYWORD_elsif   reduce using rule 125 (expr -> mlhs EQUAL mrhs .)
    KEYWORD_else    reduce using rule 125 (expr -> mlhs EQUAL mrhs .)
    $end            reduce using rule 125 (expr -> mlhs EQUAL mrhs .)


state 107

    (64) func_call_stmt -> mlhs EQUAL fname2 . OPEN_PAREN call_arg CLOSE_PAREN M_17

    OPEN_PAREN      shift and go to state 147


state 108

    (136) mrhs -> CONSTANTS . DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (137) mrhs -> CONSTANTS . DOT KEYWORD_new
    (138) mrhs -> CONSTANTS . DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (67) fname2 -> CONSTANTS .
    (171) expr13 -> CONSTANTS .

    DOT             shift and go to state 133
    OPEN_PAREN      reduce using rule 67 (fname2 -> CONSTANTS .)
    MULTIPLY        reduce using rule 171 (expr13 -> CONSTANTS .)
    DIV             reduce using rule 171 (expr13 -> CONSTANTS .)
    MOD             reduce using rule 171 (expr13 -> CONSTANTS .)
    PLUS            reduce using rule 171 (expr13 -> CONSTANTS .)
    MINUS           reduce using rule 171 (expr13 -> CONSTANTS .)
    SHIFTL          reduce using rule 171 (expr13 -> CONSTANTS .)
    SHIFTR          reduce using rule 171 (expr13 -> CONSTANTS .)
    BITAND          reduce using rule 171 (expr13 -> CONSTANTS .)
    LESSEQUAL       reduce using rule 171 (expr13 -> CONSTANTS .)
    LESS            reduce using rule 171 (expr13 -> CONSTANTS .)
    GREATER         reduce using rule 171 (expr13 -> CONSTANTS .)
    GREATEREQUAL    reduce using rule 171 (expr13 -> CONSTANTS .)
    BITXOR          reduce using rule 171 (expr13 -> CONSTANTS .)
    PIPE            reduce using rule 171 (expr13 -> CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 171 (expr13 -> CONSTANTS .)
    NOTEQUAL        reduce using rule 171 (expr13 -> CONSTANTS .)
    LOGICALAND      reduce using rule 171 (expr13 -> CONSTANTS .)
    LOGICALOR       reduce using rule 171 (expr13 -> CONSTANTS .)
    DELIM           reduce using rule 171 (expr13 -> CONSTANTS .)
    newline         reduce using rule 171 (expr13 -> CONSTANTS .)
    $end            reduce using rule 171 (expr13 -> CONSTANTS .)
    KEYWORD_elsif   reduce using rule 171 (expr13 -> CONSTANTS .)
    KEYWORD_else    reduce using rule 171 (expr13 -> CONSTANTS .)
    KEYWORD_end     reduce using rule 171 (expr13 -> CONSTANTS .)


state 109

    (88) top_stmt -> KEYWORD_while M_7 expr3 . opt_do M_8 gen_stmts2 opt_terms KEYWORD_end M_9
    (141) expr3 -> expr3 . LOGICALOR expr4
    (119) opt_do -> . KEYWORD_do
    (120) opt_do -> . newline

    LOGICALOR       shift and go to state 95
    KEYWORD_do      shift and go to state 149
    newline         shift and go to state 148

    opt_do                         shift and go to state 150

state 110

    (151) expr6 -> expr7 GREATEREQUAL expr7 .
    (154) expr7 -> expr7 . BITXOR expr8
    (155) expr7 -> expr7 . PIPE expr8

    DOUBLEEQUAL     reduce using rule 151 (expr6 -> expr7 GREATEREQUAL expr7 .)
    NOTEQUAL        reduce using rule 151 (expr6 -> expr7 GREATEREQUAL expr7 .)
    LOGICALAND      reduce using rule 151 (expr6 -> expr7 GREATEREQUAL expr7 .)
    LOGICALOR       reduce using rule 151 (expr6 -> expr7 GREATEREQUAL expr7 .)
    DELIM           reduce using rule 151 (expr6 -> expr7 GREATEREQUAL expr7 .)
    newline         reduce using rule 151 (expr6 -> expr7 GREATEREQUAL expr7 .)
    $end            reduce using rule 151 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_elsif   reduce using rule 151 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_else    reduce using rule 151 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_end     reduce using rule 151 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_then    reduce using rule 151 (expr6 -> expr7 GREATEREQUAL expr7 .)
    CLOSE_PAREN     reduce using rule 151 (expr6 -> expr7 GREATEREQUAL expr7 .)
    KEYWORD_do      reduce using rule 151 (expr6 -> expr7 GREATEREQUAL expr7 .)
    BITXOR          shift and go to state 53
    PIPE            shift and go to state 52


state 111

    (150) expr6 -> expr7 GREATER expr7 .
    (154) expr7 -> expr7 . BITXOR expr8
    (155) expr7 -> expr7 . PIPE expr8

    DOUBLEEQUAL     reduce using rule 150 (expr6 -> expr7 GREATER expr7 .)
    NOTEQUAL        reduce using rule 150 (expr6 -> expr7 GREATER expr7 .)
    LOGICALAND      reduce using rule 150 (expr6 -> expr7 GREATER expr7 .)
    LOGICALOR       reduce using rule 150 (expr6 -> expr7 GREATER expr7 .)
    DELIM           reduce using rule 150 (expr6 -> expr7 GREATER expr7 .)
    newline         reduce using rule 150 (expr6 -> expr7 GREATER expr7 .)
    $end            reduce using rule 150 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_elsif   reduce using rule 150 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_else    reduce using rule 150 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_end     reduce using rule 150 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_then    reduce using rule 150 (expr6 -> expr7 GREATER expr7 .)
    CLOSE_PAREN     reduce using rule 150 (expr6 -> expr7 GREATER expr7 .)
    KEYWORD_do      reduce using rule 150 (expr6 -> expr7 GREATER expr7 .)
    BITXOR          shift and go to state 53
    PIPE            shift and go to state 52


state 112

    (149) expr6 -> expr7 LESS expr7 .
    (154) expr7 -> expr7 . BITXOR expr8
    (155) expr7 -> expr7 . PIPE expr8

    DOUBLEEQUAL     reduce using rule 149 (expr6 -> expr7 LESS expr7 .)
    NOTEQUAL        reduce using rule 149 (expr6 -> expr7 LESS expr7 .)
    LOGICALAND      reduce using rule 149 (expr6 -> expr7 LESS expr7 .)
    LOGICALOR       reduce using rule 149 (expr6 -> expr7 LESS expr7 .)
    DELIM           reduce using rule 149 (expr6 -> expr7 LESS expr7 .)
    newline         reduce using rule 149 (expr6 -> expr7 LESS expr7 .)
    $end            reduce using rule 149 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_elsif   reduce using rule 149 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_else    reduce using rule 149 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_end     reduce using rule 149 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_then    reduce using rule 149 (expr6 -> expr7 LESS expr7 .)
    CLOSE_PAREN     reduce using rule 149 (expr6 -> expr7 LESS expr7 .)
    KEYWORD_do      reduce using rule 149 (expr6 -> expr7 LESS expr7 .)
    BITXOR          shift and go to state 53
    PIPE            shift and go to state 52


state 113

    (155) expr7 -> expr7 PIPE expr8 .
    (157) expr8 -> expr8 . BITAND expr9

    LESSEQUAL       reduce using rule 155 (expr7 -> expr7 PIPE expr8 .)
    LESS            reduce using rule 155 (expr7 -> expr7 PIPE expr8 .)
    GREATER         reduce using rule 155 (expr7 -> expr7 PIPE expr8 .)
    GREATEREQUAL    reduce using rule 155 (expr7 -> expr7 PIPE expr8 .)
    BITXOR          reduce using rule 155 (expr7 -> expr7 PIPE expr8 .)
    PIPE            reduce using rule 155 (expr7 -> expr7 PIPE expr8 .)
    DOUBLEEQUAL     reduce using rule 155 (expr7 -> expr7 PIPE expr8 .)
    NOTEQUAL        reduce using rule 155 (expr7 -> expr7 PIPE expr8 .)
    LOGICALAND      reduce using rule 155 (expr7 -> expr7 PIPE expr8 .)
    LOGICALOR       reduce using rule 155 (expr7 -> expr7 PIPE expr8 .)
    CLOSE_PAREN     reduce using rule 155 (expr7 -> expr7 PIPE expr8 .)
    DELIM           reduce using rule 155 (expr7 -> expr7 PIPE expr8 .)
    newline         reduce using rule 155 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_end     reduce using rule 155 (expr7 -> expr7 PIPE expr8 .)
    CLOSE_BRACKET   reduce using rule 155 (expr7 -> expr7 PIPE expr8 .)
    $end            reduce using rule 155 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_then    reduce using rule 155 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_elsif   reduce using rule 155 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_else    reduce using rule 155 (expr7 -> expr7 PIPE expr8 .)
    KEYWORD_do      reduce using rule 155 (expr7 -> expr7 PIPE expr8 .)
    BITAND          shift and go to state 99


state 114

    (154) expr7 -> expr7 BITXOR expr8 .
    (157) expr8 -> expr8 . BITAND expr9

    LESSEQUAL       reduce using rule 154 (expr7 -> expr7 BITXOR expr8 .)
    LESS            reduce using rule 154 (expr7 -> expr7 BITXOR expr8 .)
    GREATER         reduce using rule 154 (expr7 -> expr7 BITXOR expr8 .)
    GREATEREQUAL    reduce using rule 154 (expr7 -> expr7 BITXOR expr8 .)
    BITXOR          reduce using rule 154 (expr7 -> expr7 BITXOR expr8 .)
    PIPE            reduce using rule 154 (expr7 -> expr7 BITXOR expr8 .)
    DOUBLEEQUAL     reduce using rule 154 (expr7 -> expr7 BITXOR expr8 .)
    NOTEQUAL        reduce using rule 154 (expr7 -> expr7 BITXOR expr8 .)
    LOGICALAND      reduce using rule 154 (expr7 -> expr7 BITXOR expr8 .)
    LOGICALOR       reduce using rule 154 (expr7 -> expr7 BITXOR expr8 .)
    CLOSE_PAREN     reduce using rule 154 (expr7 -> expr7 BITXOR expr8 .)
    DELIM           reduce using rule 154 (expr7 -> expr7 BITXOR expr8 .)
    newline         reduce using rule 154 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_end     reduce using rule 154 (expr7 -> expr7 BITXOR expr8 .)
    CLOSE_BRACKET   reduce using rule 154 (expr7 -> expr7 BITXOR expr8 .)
    $end            reduce using rule 154 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_then    reduce using rule 154 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_elsif   reduce using rule 154 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_else    reduce using rule 154 (expr7 -> expr7 BITXOR expr8 .)
    KEYWORD_do      reduce using rule 154 (expr7 -> expr7 BITXOR expr8 .)
    BITAND          shift and go to state 99


state 115

    (148) expr6 -> expr7 LESSEQUAL expr7 .
    (154) expr7 -> expr7 . BITXOR expr8
    (155) expr7 -> expr7 . PIPE expr8

    DOUBLEEQUAL     reduce using rule 148 (expr6 -> expr7 LESSEQUAL expr7 .)
    NOTEQUAL        reduce using rule 148 (expr6 -> expr7 LESSEQUAL expr7 .)
    LOGICALAND      reduce using rule 148 (expr6 -> expr7 LESSEQUAL expr7 .)
    LOGICALOR       reduce using rule 148 (expr6 -> expr7 LESSEQUAL expr7 .)
    DELIM           reduce using rule 148 (expr6 -> expr7 LESSEQUAL expr7 .)
    newline         reduce using rule 148 (expr6 -> expr7 LESSEQUAL expr7 .)
    $end            reduce using rule 148 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_elsif   reduce using rule 148 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_else    reduce using rule 148 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_end     reduce using rule 148 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_then    reduce using rule 148 (expr6 -> expr7 LESSEQUAL expr7 .)
    CLOSE_PAREN     reduce using rule 148 (expr6 -> expr7 LESSEQUAL expr7 .)
    KEYWORD_do      reduce using rule 148 (expr6 -> expr7 LESSEQUAL expr7 .)
    BITXOR          shift and go to state 53
    PIPE            shift and go to state 52


state 116

    (162) expr10 -> expr10 PLUS expr11 .
    (165) expr11 -> expr11 . MULTIPLY expr13
    (166) expr11 -> expr11 . DIV expr13
    (167) expr11 -> expr11 . MOD expr13

    PLUS            reduce using rule 162 (expr10 -> expr10 PLUS expr11 .)
    MINUS           reduce using rule 162 (expr10 -> expr10 PLUS expr11 .)
    SHIFTL          reduce using rule 162 (expr10 -> expr10 PLUS expr11 .)
    SHIFTR          reduce using rule 162 (expr10 -> expr10 PLUS expr11 .)
    BITAND          reduce using rule 162 (expr10 -> expr10 PLUS expr11 .)
    LESSEQUAL       reduce using rule 162 (expr10 -> expr10 PLUS expr11 .)
    LESS            reduce using rule 162 (expr10 -> expr10 PLUS expr11 .)
    GREATER         reduce using rule 162 (expr10 -> expr10 PLUS expr11 .)
    GREATEREQUAL    reduce using rule 162 (expr10 -> expr10 PLUS expr11 .)
    BITXOR          reduce using rule 162 (expr10 -> expr10 PLUS expr11 .)
    PIPE            reduce using rule 162 (expr10 -> expr10 PLUS expr11 .)
    DOUBLEEQUAL     reduce using rule 162 (expr10 -> expr10 PLUS expr11 .)
    NOTEQUAL        reduce using rule 162 (expr10 -> expr10 PLUS expr11 .)
    LOGICALAND      reduce using rule 162 (expr10 -> expr10 PLUS expr11 .)
    LOGICALOR       reduce using rule 162 (expr10 -> expr10 PLUS expr11 .)
    DELIM           reduce using rule 162 (expr10 -> expr10 PLUS expr11 .)
    newline         reduce using rule 162 (expr10 -> expr10 PLUS expr11 .)
    $end            reduce using rule 162 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_then    reduce using rule 162 (expr10 -> expr10 PLUS expr11 .)
    CLOSE_PAREN     reduce using rule 162 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_elsif   reduce using rule 162 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_else    reduce using rule 162 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_end     reduce using rule 162 (expr10 -> expr10 PLUS expr11 .)
    KEYWORD_do      reduce using rule 162 (expr10 -> expr10 PLUS expr11 .)
    CLOSE_BRACKET   reduce using rule 162 (expr10 -> expr10 PLUS expr11 .)
    MULTIPLY        shift and go to state 58
    DIV             shift and go to state 59
    MOD             shift and go to state 60


state 117

    (163) expr10 -> expr10 MINUS expr11 .
    (165) expr11 -> expr11 . MULTIPLY expr13
    (166) expr11 -> expr11 . DIV expr13
    (167) expr11 -> expr11 . MOD expr13

    PLUS            reduce using rule 163 (expr10 -> expr10 MINUS expr11 .)
    MINUS           reduce using rule 163 (expr10 -> expr10 MINUS expr11 .)
    SHIFTL          reduce using rule 163 (expr10 -> expr10 MINUS expr11 .)
    SHIFTR          reduce using rule 163 (expr10 -> expr10 MINUS expr11 .)
    BITAND          reduce using rule 163 (expr10 -> expr10 MINUS expr11 .)
    LESSEQUAL       reduce using rule 163 (expr10 -> expr10 MINUS expr11 .)
    LESS            reduce using rule 163 (expr10 -> expr10 MINUS expr11 .)
    GREATER         reduce using rule 163 (expr10 -> expr10 MINUS expr11 .)
    GREATEREQUAL    reduce using rule 163 (expr10 -> expr10 MINUS expr11 .)
    BITXOR          reduce using rule 163 (expr10 -> expr10 MINUS expr11 .)
    PIPE            reduce using rule 163 (expr10 -> expr10 MINUS expr11 .)
    DOUBLEEQUAL     reduce using rule 163 (expr10 -> expr10 MINUS expr11 .)
    NOTEQUAL        reduce using rule 163 (expr10 -> expr10 MINUS expr11 .)
    LOGICALAND      reduce using rule 163 (expr10 -> expr10 MINUS expr11 .)
    LOGICALOR       reduce using rule 163 (expr10 -> expr10 MINUS expr11 .)
    DELIM           reduce using rule 163 (expr10 -> expr10 MINUS expr11 .)
    newline         reduce using rule 163 (expr10 -> expr10 MINUS expr11 .)
    $end            reduce using rule 163 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_then    reduce using rule 163 (expr10 -> expr10 MINUS expr11 .)
    CLOSE_PAREN     reduce using rule 163 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_elsif   reduce using rule 163 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_else    reduce using rule 163 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_end     reduce using rule 163 (expr10 -> expr10 MINUS expr11 .)
    KEYWORD_do      reduce using rule 163 (expr10 -> expr10 MINUS expr11 .)
    CLOSE_BRACKET   reduce using rule 163 (expr10 -> expr10 MINUS expr11 .)
    MULTIPLY        shift and go to state 58
    DIV             shift and go to state 59
    MOD             shift and go to state 60


state 118

    (165) expr11 -> expr11 MULTIPLY expr13 .

    MULTIPLY        reduce using rule 165 (expr11 -> expr11 MULTIPLY expr13 .)
    DIV             reduce using rule 165 (expr11 -> expr11 MULTIPLY expr13 .)
    MOD             reduce using rule 165 (expr11 -> expr11 MULTIPLY expr13 .)
    PLUS            reduce using rule 165 (expr11 -> expr11 MULTIPLY expr13 .)
    MINUS           reduce using rule 165 (expr11 -> expr11 MULTIPLY expr13 .)
    SHIFTL          reduce using rule 165 (expr11 -> expr11 MULTIPLY expr13 .)
    SHIFTR          reduce using rule 165 (expr11 -> expr11 MULTIPLY expr13 .)
    BITAND          reduce using rule 165 (expr11 -> expr11 MULTIPLY expr13 .)
    LESSEQUAL       reduce using rule 165 (expr11 -> expr11 MULTIPLY expr13 .)
    LESS            reduce using rule 165 (expr11 -> expr11 MULTIPLY expr13 .)
    GREATER         reduce using rule 165 (expr11 -> expr11 MULTIPLY expr13 .)
    GREATEREQUAL    reduce using rule 165 (expr11 -> expr11 MULTIPLY expr13 .)
    BITXOR          reduce using rule 165 (expr11 -> expr11 MULTIPLY expr13 .)
    PIPE            reduce using rule 165 (expr11 -> expr11 MULTIPLY expr13 .)
    DOUBLEEQUAL     reduce using rule 165 (expr11 -> expr11 MULTIPLY expr13 .)
    NOTEQUAL        reduce using rule 165 (expr11 -> expr11 MULTIPLY expr13 .)
    LOGICALAND      reduce using rule 165 (expr11 -> expr11 MULTIPLY expr13 .)
    LOGICALOR       reduce using rule 165 (expr11 -> expr11 MULTIPLY expr13 .)
    KEYWORD_then    reduce using rule 165 (expr11 -> expr11 MULTIPLY expr13 .)
    newline         reduce using rule 165 (expr11 -> expr11 MULTIPLY expr13 .)
    DELIM           reduce using rule 165 (expr11 -> expr11 MULTIPLY expr13 .)
    KEYWORD_end     reduce using rule 165 (expr11 -> expr11 MULTIPLY expr13 .)
    $end            reduce using rule 165 (expr11 -> expr11 MULTIPLY expr13 .)
    CLOSE_PAREN     reduce using rule 165 (expr11 -> expr11 MULTIPLY expr13 .)
    KEYWORD_elsif   reduce using rule 165 (expr11 -> expr11 MULTIPLY expr13 .)
    KEYWORD_else    reduce using rule 165 (expr11 -> expr11 MULTIPLY expr13 .)
    KEYWORD_do      reduce using rule 165 (expr11 -> expr11 MULTIPLY expr13 .)
    CLOSE_BRACKET   reduce using rule 165 (expr11 -> expr11 MULTIPLY expr13 .)


state 119

    (166) expr11 -> expr11 DIV expr13 .

    MULTIPLY        reduce using rule 166 (expr11 -> expr11 DIV expr13 .)
    DIV             reduce using rule 166 (expr11 -> expr11 DIV expr13 .)
    MOD             reduce using rule 166 (expr11 -> expr11 DIV expr13 .)
    PLUS            reduce using rule 166 (expr11 -> expr11 DIV expr13 .)
    MINUS           reduce using rule 166 (expr11 -> expr11 DIV expr13 .)
    SHIFTL          reduce using rule 166 (expr11 -> expr11 DIV expr13 .)
    SHIFTR          reduce using rule 166 (expr11 -> expr11 DIV expr13 .)
    BITAND          reduce using rule 166 (expr11 -> expr11 DIV expr13 .)
    LESSEQUAL       reduce using rule 166 (expr11 -> expr11 DIV expr13 .)
    LESS            reduce using rule 166 (expr11 -> expr11 DIV expr13 .)
    GREATER         reduce using rule 166 (expr11 -> expr11 DIV expr13 .)
    GREATEREQUAL    reduce using rule 166 (expr11 -> expr11 DIV expr13 .)
    BITXOR          reduce using rule 166 (expr11 -> expr11 DIV expr13 .)
    PIPE            reduce using rule 166 (expr11 -> expr11 DIV expr13 .)
    DOUBLEEQUAL     reduce using rule 166 (expr11 -> expr11 DIV expr13 .)
    NOTEQUAL        reduce using rule 166 (expr11 -> expr11 DIV expr13 .)
    LOGICALAND      reduce using rule 166 (expr11 -> expr11 DIV expr13 .)
    LOGICALOR       reduce using rule 166 (expr11 -> expr11 DIV expr13 .)
    KEYWORD_then    reduce using rule 166 (expr11 -> expr11 DIV expr13 .)
    newline         reduce using rule 166 (expr11 -> expr11 DIV expr13 .)
    DELIM           reduce using rule 166 (expr11 -> expr11 DIV expr13 .)
    KEYWORD_end     reduce using rule 166 (expr11 -> expr11 DIV expr13 .)
    $end            reduce using rule 166 (expr11 -> expr11 DIV expr13 .)
    CLOSE_PAREN     reduce using rule 166 (expr11 -> expr11 DIV expr13 .)
    KEYWORD_elsif   reduce using rule 166 (expr11 -> expr11 DIV expr13 .)
    KEYWORD_else    reduce using rule 166 (expr11 -> expr11 DIV expr13 .)
    KEYWORD_do      reduce using rule 166 (expr11 -> expr11 DIV expr13 .)
    CLOSE_BRACKET   reduce using rule 166 (expr11 -> expr11 DIV expr13 .)


state 120

    (167) expr11 -> expr11 MOD expr13 .

    MULTIPLY        reduce using rule 167 (expr11 -> expr11 MOD expr13 .)
    DIV             reduce using rule 167 (expr11 -> expr11 MOD expr13 .)
    MOD             reduce using rule 167 (expr11 -> expr11 MOD expr13 .)
    PLUS            reduce using rule 167 (expr11 -> expr11 MOD expr13 .)
    MINUS           reduce using rule 167 (expr11 -> expr11 MOD expr13 .)
    SHIFTL          reduce using rule 167 (expr11 -> expr11 MOD expr13 .)
    SHIFTR          reduce using rule 167 (expr11 -> expr11 MOD expr13 .)
    BITAND          reduce using rule 167 (expr11 -> expr11 MOD expr13 .)
    LESSEQUAL       reduce using rule 167 (expr11 -> expr11 MOD expr13 .)
    LESS            reduce using rule 167 (expr11 -> expr11 MOD expr13 .)
    GREATER         reduce using rule 167 (expr11 -> expr11 MOD expr13 .)
    GREATEREQUAL    reduce using rule 167 (expr11 -> expr11 MOD expr13 .)
    BITXOR          reduce using rule 167 (expr11 -> expr11 MOD expr13 .)
    PIPE            reduce using rule 167 (expr11 -> expr11 MOD expr13 .)
    DOUBLEEQUAL     reduce using rule 167 (expr11 -> expr11 MOD expr13 .)
    NOTEQUAL        reduce using rule 167 (expr11 -> expr11 MOD expr13 .)
    LOGICALAND      reduce using rule 167 (expr11 -> expr11 MOD expr13 .)
    LOGICALOR       reduce using rule 167 (expr11 -> expr11 MOD expr13 .)
    KEYWORD_then    reduce using rule 167 (expr11 -> expr11 MOD expr13 .)
    newline         reduce using rule 167 (expr11 -> expr11 MOD expr13 .)
    DELIM           reduce using rule 167 (expr11 -> expr11 MOD expr13 .)
    KEYWORD_end     reduce using rule 167 (expr11 -> expr11 MOD expr13 .)
    $end            reduce using rule 167 (expr11 -> expr11 MOD expr13 .)
    CLOSE_PAREN     reduce using rule 167 (expr11 -> expr11 MOD expr13 .)
    KEYWORD_elsif   reduce using rule 167 (expr11 -> expr11 MOD expr13 .)
    KEYWORD_else    reduce using rule 167 (expr11 -> expr11 MOD expr13 .)
    KEYWORD_do      reduce using rule 167 (expr11 -> expr11 MOD expr13 .)
    CLOSE_BRACKET   reduce using rule 167 (expr11 -> expr11 MOD expr13 .)


state 121

    (50) func_defn -> KEYWORD_def fname OPEN_PAREN . arguments M_13 CLOSE_PAREN func_stmts opt_terms KEYWORD_end M_14
    (51) func_defn -> KEYWORD_def fname OPEN_PAREN . CLOSE_PAREN M_18 func_stmts opt_terms KEYWORD_end M_15
    (54) arguments -> . VARIABLES M_12 COMMA arguments
    (55) arguments -> . CONSTANTS M_12 COMMA arguments
    (56) arguments -> . VARIABLES M_12
    (57) arguments -> . CONSTANTS M_12

    CLOSE_PAREN     shift and go to state 154
    VARIABLES       shift and go to state 152
    CONSTANTS       shift and go to state 151

    arguments                      shift and go to state 153

state 122

    (183) terms -> terms term .

    KEYWORD_if      reduce using rule 183 (terms -> terms term .)
    KEYWORD_while   reduce using rule 183 (terms -> terms term .)
    KEYWORD_for     reduce using rule 183 (terms -> terms term .)
    DELIM           reduce using rule 183 (terms -> terms term .)
    newline         reduce using rule 183 (terms -> terms term .)
    KEYWORD_return  reduce using rule 183 (terms -> terms term .)
    KEYWORD_puts    reduce using rule 183 (terms -> terms term .)
    KEYWORD_break   reduce using rule 183 (terms -> terms term .)
    KEYWORD_exit    reduce using rule 183 (terms -> terms term .)
    VARIABLES       reduce using rule 183 (terms -> terms term .)
    CONSTANTS       reduce using rule 183 (terms -> terms term .)
    BOOLEAN_CONSTANTS reduce using rule 183 (terms -> terms term .)
    OPEN_PAREN      reduce using rule 183 (terms -> terms term .)
    PLUS            reduce using rule 183 (terms -> terms term .)
    MINUS           reduce using rule 183 (terms -> terms term .)
    BITNOT          reduce using rule 183 (terms -> terms term .)
    BITCOMP         reduce using rule 183 (terms -> terms term .)
    INT_CONSTANTS   reduce using rule 183 (terms -> terms term .)
    KEYWORD_elsif   reduce using rule 183 (terms -> terms term .)
    KEYWORD_else    reduce using rule 183 (terms -> terms term .)
    KEYWORD_end     reduce using rule 183 (terms -> terms term .)
    SIGIL_DOUBLE_AT reduce using rule 183 (terms -> terms term .)
    KEYWORD_def     reduce using rule 183 (terms -> terms term .)
    KEYWORD_class   reduce using rule 183 (terms -> terms term .)
    $end            reduce using rule 183 (terms -> terms term .)
    SIGIL_AT        reduce using rule 183 (terms -> terms term .)


state 123

    (4) statements -> statements terms statement .

    DELIM           reduce using rule 4 (statements -> statements terms statement .)
    newline         reduce using rule 4 (statements -> statements terms statement .)
    $end            reduce using rule 4 (statements -> statements terms statement .)


state 124

    (118) opt_then -> newline .

    KEYWORD_if      reduce using rule 118 (opt_then -> newline .)
    KEYWORD_while   reduce using rule 118 (opt_then -> newline .)
    KEYWORD_for     reduce using rule 118 (opt_then -> newline .)
    KEYWORD_return  reduce using rule 118 (opt_then -> newline .)
    KEYWORD_puts    reduce using rule 118 (opt_then -> newline .)
    KEYWORD_break   reduce using rule 118 (opt_then -> newline .)
    KEYWORD_exit    reduce using rule 118 (opt_then -> newline .)
    VARIABLES       reduce using rule 118 (opt_then -> newline .)
    CONSTANTS       reduce using rule 118 (opt_then -> newline .)
    BOOLEAN_CONSTANTS reduce using rule 118 (opt_then -> newline .)
    OPEN_PAREN      reduce using rule 118 (opt_then -> newline .)
    PLUS            reduce using rule 118 (opt_then -> newline .)
    MINUS           reduce using rule 118 (opt_then -> newline .)
    BITNOT          reduce using rule 118 (opt_then -> newline .)
    BITCOMP         reduce using rule 118 (opt_then -> newline .)
    DELIM           reduce using rule 118 (opt_then -> newline .)
    newline         reduce using rule 118 (opt_then -> newline .)
    KEYWORD_elsif   reduce using rule 118 (opt_then -> newline .)
    INT_CONSTANTS   reduce using rule 118 (opt_then -> newline .)
    KEYWORD_else    reduce using rule 118 (opt_then -> newline .)
    KEYWORD_end     reduce using rule 118 (opt_then -> newline .)


state 125

    (117) opt_then -> KEYWORD_then .

    KEYWORD_if      reduce using rule 117 (opt_then -> KEYWORD_then .)
    KEYWORD_while   reduce using rule 117 (opt_then -> KEYWORD_then .)
    KEYWORD_for     reduce using rule 117 (opt_then -> KEYWORD_then .)
    KEYWORD_return  reduce using rule 117 (opt_then -> KEYWORD_then .)
    KEYWORD_puts    reduce using rule 117 (opt_then -> KEYWORD_then .)
    KEYWORD_break   reduce using rule 117 (opt_then -> KEYWORD_then .)
    KEYWORD_exit    reduce using rule 117 (opt_then -> KEYWORD_then .)
    VARIABLES       reduce using rule 117 (opt_then -> KEYWORD_then .)
    CONSTANTS       reduce using rule 117 (opt_then -> KEYWORD_then .)
    BOOLEAN_CONSTANTS reduce using rule 117 (opt_then -> KEYWORD_then .)
    OPEN_PAREN      reduce using rule 117 (opt_then -> KEYWORD_then .)
    PLUS            reduce using rule 117 (opt_then -> KEYWORD_then .)
    MINUS           reduce using rule 117 (opt_then -> KEYWORD_then .)
    BITNOT          reduce using rule 117 (opt_then -> KEYWORD_then .)
    BITCOMP         reduce using rule 117 (opt_then -> KEYWORD_then .)
    DELIM           reduce using rule 117 (opt_then -> KEYWORD_then .)
    newline         reduce using rule 117 (opt_then -> KEYWORD_then .)
    KEYWORD_elsif   reduce using rule 117 (opt_then -> KEYWORD_then .)
    INT_CONSTANTS   reduce using rule 117 (opt_then -> KEYWORD_then .)
    KEYWORD_else    reduce using rule 117 (opt_then -> KEYWORD_then .)
    KEYWORD_end     reduce using rule 117 (opt_then -> KEYWORD_then .)


state 126

    (87) top_stmt -> KEYWORD_if expr3 opt_then . M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6
    (90) M_1 -> .

    KEYWORD_if      reduce using rule 90 (M_1 -> .)
    KEYWORD_while   reduce using rule 90 (M_1 -> .)
    KEYWORD_for     reduce using rule 90 (M_1 -> .)
    KEYWORD_return  reduce using rule 90 (M_1 -> .)
    KEYWORD_puts    reduce using rule 90 (M_1 -> .)
    KEYWORD_break   reduce using rule 90 (M_1 -> .)
    KEYWORD_exit    reduce using rule 90 (M_1 -> .)
    VARIABLES       reduce using rule 90 (M_1 -> .)
    CONSTANTS       reduce using rule 90 (M_1 -> .)
    BOOLEAN_CONSTANTS reduce using rule 90 (M_1 -> .)
    OPEN_PAREN      reduce using rule 90 (M_1 -> .)
    PLUS            reduce using rule 90 (M_1 -> .)
    MINUS           reduce using rule 90 (M_1 -> .)
    BITNOT          reduce using rule 90 (M_1 -> .)
    BITCOMP         reduce using rule 90 (M_1 -> .)
    DELIM           reduce using rule 90 (M_1 -> .)
    newline         reduce using rule 90 (M_1 -> .)
    KEYWORD_elsif   reduce using rule 90 (M_1 -> .)
    KEYWORD_else    reduce using rule 90 (M_1 -> .)
    KEYWORD_end     reduce using rule 90 (M_1 -> .)
    INT_CONSTANTS   reduce using rule 90 (M_1 -> .)

    M_1                            shift and go to state 155

state 127

    (174) array -> VARIABLES OPEN_BRACKET expr7 . CLOSE_BRACKET
    (154) expr7 -> expr7 . BITXOR expr8
    (155) expr7 -> expr7 . PIPE expr8

    CLOSE_BRACKET   shift and go to state 156
    BITXOR          shift and go to state 53
    PIPE            shift and go to state 52


state 128

    (8) statement -> VARIABLES DOT VARIABLES . OPEN_PAREN arguments CLOSE_PAREN
    (9) statement -> VARIABLES DOT VARIABLES . OPEN_PAREN CLOSE_PAREN
    (10) statement -> VARIABLES DOT VARIABLES . arguments
    (54) arguments -> . VARIABLES M_12 COMMA arguments
    (55) arguments -> . CONSTANTS M_12 COMMA arguments
    (56) arguments -> . VARIABLES M_12
    (57) arguments -> . CONSTANTS M_12

    OPEN_PAREN      shift and go to state 157
    VARIABLES       shift and go to state 152
    CONSTANTS       shift and go to state 151

    arguments                      shift and go to state 158

state 129

    (169) expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .

    MULTIPLY        reduce using rule 169 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    DIV             reduce using rule 169 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    MOD             reduce using rule 169 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    PLUS            reduce using rule 169 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    MINUS           reduce using rule 169 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    SHIFTL          reduce using rule 169 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    SHIFTR          reduce using rule 169 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    BITAND          reduce using rule 169 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    LESSEQUAL       reduce using rule 169 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    LESS            reduce using rule 169 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    GREATER         reduce using rule 169 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    GREATEREQUAL    reduce using rule 169 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    BITXOR          reduce using rule 169 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    PIPE            reduce using rule 169 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    LOGICALAND      reduce using rule 169 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    LOGICALOR       reduce using rule 169 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    DELIM           reduce using rule 169 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    newline         reduce using rule 169 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    $end            reduce using rule 169 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_then    reduce using rule 169 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 169 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_elsif   reduce using rule 169 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_else    reduce using rule 169 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_end     reduce using rule 169 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    KEYWORD_do      reduce using rule 169 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    DOUBLEEQUAL     reduce using rule 169 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    NOTEQUAL        reduce using rule 169 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 169 (expr13 -> OPEN_PAREN expr1 CLOSE_PAREN .)


state 130

    (125) expr -> mlhs EQUAL . mrhs
    (129) mrhs -> . expr1
    (130) mrhs -> . str_expr
    (131) mrhs -> . KEYWORD_gets
    (132) mrhs -> . OPEN_BRACKET CLOSE_BRACKET
    (133) mrhs -> . VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (134) mrhs -> . VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (135) mrhs -> . VARIABLES DOT VARIABLES
    (136) mrhs -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (137) mrhs -> . CONSTANTS DOT KEYWORD_new
    (138) mrhs -> . CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (140) expr1 -> . expr3
    (139) str_expr -> . STRING_CONSTANTS
    (141) expr3 -> . expr3 LOGICALOR expr4
    (142) expr3 -> . expr4
    (143) expr4 -> . expr4 LOGICALAND expr5
    (144) expr4 -> . expr5
    (145) expr5 -> . expr6 DOUBLEEQUAL expr6
    (146) expr5 -> . expr6 NOTEQUAL expr6
    (147) expr5 -> . expr6
    (148) expr6 -> . expr7 LESSEQUAL expr7
    (149) expr6 -> . expr7 LESS expr7
    (150) expr6 -> . expr7 GREATER expr7
    (151) expr6 -> . expr7 GREATEREQUAL expr7
    (152) expr6 -> . expr7
    (153) expr6 -> . BOOLEAN_CONSTANTS
    (154) expr7 -> . expr7 BITXOR expr8
    (155) expr7 -> . expr7 PIPE expr8
    (156) expr7 -> . expr8
    (157) expr8 -> . expr8 BITAND expr9
    (158) expr8 -> . expr9
    (159) expr9 -> . expr9 SHIFTL expr10
    (160) expr9 -> . expr9 SHIFTR expr10
    (161) expr9 -> . expr10
    (162) expr10 -> . expr10 PLUS expr11
    (163) expr10 -> . expr10 MINUS expr11
    (164) expr10 -> . expr11
    (165) expr11 -> . expr11 MULTIPLY expr13
    (166) expr11 -> . expr11 DIV expr13
    (167) expr11 -> . expr11 MOD expr13
    (168) expr11 -> . expr13
    (169) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (170) expr13 -> . uexpr INT_CONSTANTS
    (171) expr13 -> . CONSTANTS
    (172) expr13 -> . VARIABLES
    (173) expr13 -> . array
    (175) uexpr -> . none
    (176) uexpr -> . PLUS
    (177) uexpr -> . MINUS
    (178) uexpr -> . BITNOT
    (179) uexpr -> . BITCOMP
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (186) none -> .

    KEYWORD_gets    shift and go to state 89
    OPEN_BRACKET    shift and go to state 87
    VARIABLES       shift and go to state 159
    CONSTANTS       shift and go to state 160
    STRING_CONSTANTS shift and go to state 92
    BOOLEAN_CONSTANTS shift and go to state 9
    OPEN_PAREN      shift and go to state 24
    PLUS            shift and go to state 5
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 33
    BITCOMP         shift and go to state 23
    INT_CONSTANTS   reduce using rule 186 (none -> .)

    expr11                         shift and go to state 12
    uexpr                          shift and go to state 8
    none                           shift and go to state 28
    str_expr                       shift and go to state 85
    expr13                         shift and go to state 13
    expr3                          shift and go to state 34
    mrhs                           shift and go to state 106
    expr1                          shift and go to state 88
    expr6                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr10                         shift and go to state 11
    expr8                          shift and go to state 39
    expr9                          shift and go to state 40
    array                          shift and go to state 79
    expr7                          shift and go to state 6

state 131

    (133) mrhs -> VARIABLES DOT . VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (134) mrhs -> VARIABLES DOT . VARIABLES OPEN_PAREN CLOSE_PAREN
    (135) mrhs -> VARIABLES DOT . VARIABLES

    VARIABLES       shift and go to state 161


state 132

    (132) mrhs -> OPEN_BRACKET CLOSE_BRACKET .

    DELIM           reduce using rule 132 (mrhs -> OPEN_BRACKET CLOSE_BRACKET .)
    newline         reduce using rule 132 (mrhs -> OPEN_BRACKET CLOSE_BRACKET .)
    $end            reduce using rule 132 (mrhs -> OPEN_BRACKET CLOSE_BRACKET .)
    KEYWORD_elsif   reduce using rule 132 (mrhs -> OPEN_BRACKET CLOSE_BRACKET .)
    KEYWORD_else    reduce using rule 132 (mrhs -> OPEN_BRACKET CLOSE_BRACKET .)
    KEYWORD_end     reduce using rule 132 (mrhs -> OPEN_BRACKET CLOSE_BRACKET .)


state 133

    (136) mrhs -> CONSTANTS DOT . KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (137) mrhs -> CONSTANTS DOT . KEYWORD_new
    (138) mrhs -> CONSTANTS DOT . KEYWORD_new OPEN_PAREN CLOSE_PAREN

    KEYWORD_new     shift and go to state 162


state 134

    (14) class_defn -> KEYWORD_class CONSTANTS newline . class_stmts opt_terms KEYWORD_end
    (15) class_stmts -> . class_stmt
    (16) class_stmts -> . class_stmts terms class_stmt
    (17) class_stmts -> . none
    (18) class_stmt -> . class_mlhs EQUAL class_mrhs
    (19) class_stmt -> . class_func
    (186) none -> .
    (28) class_mlhs -> . class_mlhs terms SIGIL_DOUBLE_AT
    (29) class_mlhs -> . SIGIL_DOUBLE_AT
    (30) class_func -> . KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (31) class_func -> . KEYWORD_def fname arguments class_method_stmts opt_terms KEYWORD_end
    (32) class_func -> . KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end

    DELIM           reduce using rule 186 (none -> .)
    newline         reduce using rule 186 (none -> .)
    KEYWORD_end     reduce using rule 186 (none -> .)
    SIGIL_DOUBLE_AT shift and go to state 165
    KEYWORD_def     shift and go to state 168

    none                           shift and go to state 163
    class_mlhs                     shift and go to state 164
    class_func                     shift and go to state 166
    class_stmts                    shift and go to state 167
    class_stmt                     shift and go to state 169

state 135

    (141) expr3 -> expr3 LOGICALOR expr4 .
    (143) expr4 -> expr4 . LOGICALAND expr5

    LOGICALOR       reduce using rule 141 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_do      reduce using rule 141 (expr3 -> expr3 LOGICALOR expr4 .)
    newline         reduce using rule 141 (expr3 -> expr3 LOGICALOR expr4 .)
    DELIM           reduce using rule 141 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_end     reduce using rule 141 (expr3 -> expr3 LOGICALOR expr4 .)
    $end            reduce using rule 141 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_elsif   reduce using rule 141 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_else    reduce using rule 141 (expr3 -> expr3 LOGICALOR expr4 .)
    KEYWORD_then    reduce using rule 141 (expr3 -> expr3 LOGICALOR expr4 .)
    CLOSE_PAREN     reduce using rule 141 (expr3 -> expr3 LOGICALOR expr4 .)
    LOGICALAND      shift and go to state 98


state 136

    (146) expr5 -> expr6 NOTEQUAL expr6 .

    LOGICALAND      reduce using rule 146 (expr5 -> expr6 NOTEQUAL expr6 .)
    LOGICALOR       reduce using rule 146 (expr5 -> expr6 NOTEQUAL expr6 .)
    DELIM           reduce using rule 146 (expr5 -> expr6 NOTEQUAL expr6 .)
    newline         reduce using rule 146 (expr5 -> expr6 NOTEQUAL expr6 .)
    $end            reduce using rule 146 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_elsif   reduce using rule 146 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_else    reduce using rule 146 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_end     reduce using rule 146 (expr5 -> expr6 NOTEQUAL expr6 .)
    CLOSE_PAREN     reduce using rule 146 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_then    reduce using rule 146 (expr5 -> expr6 NOTEQUAL expr6 .)
    KEYWORD_do      reduce using rule 146 (expr5 -> expr6 NOTEQUAL expr6 .)


state 137

    (145) expr5 -> expr6 DOUBLEEQUAL expr6 .

    LOGICALAND      reduce using rule 145 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    LOGICALOR       reduce using rule 145 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    DELIM           reduce using rule 145 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    newline         reduce using rule 145 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    $end            reduce using rule 145 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_elsif   reduce using rule 145 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_else    reduce using rule 145 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_end     reduce using rule 145 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    CLOSE_PAREN     reduce using rule 145 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_then    reduce using rule 145 (expr5 -> expr6 DOUBLEEQUAL expr6 .)
    KEYWORD_do      reduce using rule 145 (expr5 -> expr6 DOUBLEEQUAL expr6 .)


state 138

    (143) expr4 -> expr4 LOGICALAND expr5 .

    LOGICALAND      reduce using rule 143 (expr4 -> expr4 LOGICALAND expr5 .)
    LOGICALOR       reduce using rule 143 (expr4 -> expr4 LOGICALAND expr5 .)
    DELIM           reduce using rule 143 (expr4 -> expr4 LOGICALAND expr5 .)
    newline         reduce using rule 143 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_end     reduce using rule 143 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_elsif   reduce using rule 143 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_else    reduce using rule 143 (expr4 -> expr4 LOGICALAND expr5 .)
    $end            reduce using rule 143 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_then    reduce using rule 143 (expr4 -> expr4 LOGICALAND expr5 .)
    CLOSE_PAREN     reduce using rule 143 (expr4 -> expr4 LOGICALAND expr5 .)
    KEYWORD_do      reduce using rule 143 (expr4 -> expr4 LOGICALAND expr5 .)


state 139

    (157) expr8 -> expr8 BITAND expr9 .
    (159) expr9 -> expr9 . SHIFTL expr10
    (160) expr9 -> expr9 . SHIFTR expr10

    BITAND          reduce using rule 157 (expr8 -> expr8 BITAND expr9 .)
    LESSEQUAL       reduce using rule 157 (expr8 -> expr8 BITAND expr9 .)
    LESS            reduce using rule 157 (expr8 -> expr8 BITAND expr9 .)
    GREATER         reduce using rule 157 (expr8 -> expr8 BITAND expr9 .)
    GREATEREQUAL    reduce using rule 157 (expr8 -> expr8 BITAND expr9 .)
    BITXOR          reduce using rule 157 (expr8 -> expr8 BITAND expr9 .)
    PIPE            reduce using rule 157 (expr8 -> expr8 BITAND expr9 .)
    LOGICALAND      reduce using rule 157 (expr8 -> expr8 BITAND expr9 .)
    LOGICALOR       reduce using rule 157 (expr8 -> expr8 BITAND expr9 .)
    DELIM           reduce using rule 157 (expr8 -> expr8 BITAND expr9 .)
    newline         reduce using rule 157 (expr8 -> expr8 BITAND expr9 .)
    $end            reduce using rule 157 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_then    reduce using rule 157 (expr8 -> expr8 BITAND expr9 .)
    CLOSE_PAREN     reduce using rule 157 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_elsif   reduce using rule 157 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_else    reduce using rule 157 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_end     reduce using rule 157 (expr8 -> expr8 BITAND expr9 .)
    KEYWORD_do      reduce using rule 157 (expr8 -> expr8 BITAND expr9 .)
    DOUBLEEQUAL     reduce using rule 157 (expr8 -> expr8 BITAND expr9 .)
    NOTEQUAL        reduce using rule 157 (expr8 -> expr8 BITAND expr9 .)
    CLOSE_BRACKET   reduce using rule 157 (expr8 -> expr8 BITAND expr9 .)
    SHIFTL          shift and go to state 101
    SHIFTR          shift and go to state 100


state 140

    (160) expr9 -> expr9 SHIFTR expr10 .
    (162) expr10 -> expr10 . PLUS expr11
    (163) expr10 -> expr10 . MINUS expr11

    SHIFTL          reduce using rule 160 (expr9 -> expr9 SHIFTR expr10 .)
    SHIFTR          reduce using rule 160 (expr9 -> expr9 SHIFTR expr10 .)
    BITAND          reduce using rule 160 (expr9 -> expr9 SHIFTR expr10 .)
    LESSEQUAL       reduce using rule 160 (expr9 -> expr9 SHIFTR expr10 .)
    LESS            reduce using rule 160 (expr9 -> expr9 SHIFTR expr10 .)
    GREATER         reduce using rule 160 (expr9 -> expr9 SHIFTR expr10 .)
    GREATEREQUAL    reduce using rule 160 (expr9 -> expr9 SHIFTR expr10 .)
    BITXOR          reduce using rule 160 (expr9 -> expr9 SHIFTR expr10 .)
    PIPE            reduce using rule 160 (expr9 -> expr9 SHIFTR expr10 .)
    DOUBLEEQUAL     reduce using rule 160 (expr9 -> expr9 SHIFTR expr10 .)
    NOTEQUAL        reduce using rule 160 (expr9 -> expr9 SHIFTR expr10 .)
    LOGICALAND      reduce using rule 160 (expr9 -> expr9 SHIFTR expr10 .)
    LOGICALOR       reduce using rule 160 (expr9 -> expr9 SHIFTR expr10 .)
    DELIM           reduce using rule 160 (expr9 -> expr9 SHIFTR expr10 .)
    newline         reduce using rule 160 (expr9 -> expr9 SHIFTR expr10 .)
    $end            reduce using rule 160 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_end     reduce using rule 160 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_then    reduce using rule 160 (expr9 -> expr9 SHIFTR expr10 .)
    CLOSE_PAREN     reduce using rule 160 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_elsif   reduce using rule 160 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_else    reduce using rule 160 (expr9 -> expr9 SHIFTR expr10 .)
    KEYWORD_do      reduce using rule 160 (expr9 -> expr9 SHIFTR expr10 .)
    CLOSE_BRACKET   reduce using rule 160 (expr9 -> expr9 SHIFTR expr10 .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57


state 141

    (159) expr9 -> expr9 SHIFTL expr10 .
    (162) expr10 -> expr10 . PLUS expr11
    (163) expr10 -> expr10 . MINUS expr11

    SHIFTL          reduce using rule 159 (expr9 -> expr9 SHIFTL expr10 .)
    SHIFTR          reduce using rule 159 (expr9 -> expr9 SHIFTL expr10 .)
    BITAND          reduce using rule 159 (expr9 -> expr9 SHIFTL expr10 .)
    LESSEQUAL       reduce using rule 159 (expr9 -> expr9 SHIFTL expr10 .)
    LESS            reduce using rule 159 (expr9 -> expr9 SHIFTL expr10 .)
    GREATER         reduce using rule 159 (expr9 -> expr9 SHIFTL expr10 .)
    GREATEREQUAL    reduce using rule 159 (expr9 -> expr9 SHIFTL expr10 .)
    BITXOR          reduce using rule 159 (expr9 -> expr9 SHIFTL expr10 .)
    PIPE            reduce using rule 159 (expr9 -> expr9 SHIFTL expr10 .)
    DOUBLEEQUAL     reduce using rule 159 (expr9 -> expr9 SHIFTL expr10 .)
    NOTEQUAL        reduce using rule 159 (expr9 -> expr9 SHIFTL expr10 .)
    LOGICALAND      reduce using rule 159 (expr9 -> expr9 SHIFTL expr10 .)
    LOGICALOR       reduce using rule 159 (expr9 -> expr9 SHIFTL expr10 .)
    DELIM           reduce using rule 159 (expr9 -> expr9 SHIFTL expr10 .)
    newline         reduce using rule 159 (expr9 -> expr9 SHIFTL expr10 .)
    $end            reduce using rule 159 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_end     reduce using rule 159 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_then    reduce using rule 159 (expr9 -> expr9 SHIFTL expr10 .)
    CLOSE_PAREN     reduce using rule 159 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_elsif   reduce using rule 159 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_else    reduce using rule 159 (expr9 -> expr9 SHIFTL expr10 .)
    KEYWORD_do      reduce using rule 159 (expr9 -> expr9 SHIFTL expr10 .)
    CLOSE_BRACKET   reduce using rule 159 (expr9 -> expr9 SHIFTL expr10 .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57


state 142

    (89) top_stmt -> KEYWORD_for VARIABLES KEYWORD_in . for_range opt_do M_10 gen_stmts2 opt_terms KEYWORD_end M_11
    (121) for_range -> . for_range_variables DOUBLEDOT for_range_variables
    (122) for_range_variables -> . INT_CONSTANTS
    (123) for_range_variables -> . VARIABLES
    (124) for_range_variables -> . CONSTANTS

    INT_CONSTANTS   shift and go to state 170
    VARIABLES       shift and go to state 171
    CONSTANTS       shift and go to state 173

    for_range                      shift and go to state 172
    for_range_variables            shift and go to state 174

state 143

    (70) call_arg -> none .

    CLOSE_PAREN     reduce using rule 70 (call_arg -> none .)


state 144

    (68) call_arg -> primary . M_16 COMMA call_arg
    (69) call_arg -> primary . M_16
    (71) M_16 -> .

    COMMA           reduce using rule 71 (M_16 -> .)
    CLOSE_PAREN     reduce using rule 71 (M_16 -> .)

    M_16                           shift and go to state 175

state 145

    (63) func_call_stmt -> fname2 OPEN_PAREN call_arg . CLOSE_PAREN M_17

    CLOSE_PAREN     shift and go to state 176


state 146

    (11) statement -> CONSTANTS DOT KEYWORD_new . OPEN_PAREN arguments CLOSE_PAREN
    (12) statement -> CONSTANTS DOT KEYWORD_new . OPEN_PAREN CLOSE_PAREN
    (13) statement -> CONSTANTS DOT KEYWORD_new . arguments
    (54) arguments -> . VARIABLES M_12 COMMA arguments
    (55) arguments -> . CONSTANTS M_12 COMMA arguments
    (56) arguments -> . VARIABLES M_12
    (57) arguments -> . CONSTANTS M_12

    OPEN_PAREN      shift and go to state 177
    VARIABLES       shift and go to state 152
    CONSTANTS       shift and go to state 151

    arguments                      shift and go to state 178

state 147

    (64) func_call_stmt -> mlhs EQUAL fname2 OPEN_PAREN . call_arg CLOSE_PAREN M_17
    (68) call_arg -> . primary M_16 COMMA call_arg
    (69) call_arg -> . primary M_16
    (70) call_arg -> . none
    (81) primary -> . INT_CONSTANTS
    (82) primary -> . BOOLEAN_CONSTANTS
    (83) primary -> . CONSTANTS
    (84) primary -> . VARIABLES
    (85) primary -> . array
    (186) none -> .
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET

    INT_CONSTANTS   shift and go to state 62
    BOOLEAN_CONSTANTS shift and go to state 61
    CONSTANTS       shift and go to state 67
    VARIABLES       shift and go to state 63
    CLOSE_PAREN     reduce using rule 186 (none -> .)

    none                           shift and go to state 143
    primary                        shift and go to state 144
    call_arg                       shift and go to state 179
    array                          shift and go to state 66

state 148

    (120) opt_do -> newline .

    KEYWORD_if      reduce using rule 120 (opt_do -> newline .)
    KEYWORD_while   reduce using rule 120 (opt_do -> newline .)
    KEYWORD_for     reduce using rule 120 (opt_do -> newline .)
    KEYWORD_return  reduce using rule 120 (opt_do -> newline .)
    KEYWORD_puts    reduce using rule 120 (opt_do -> newline .)
    KEYWORD_break   reduce using rule 120 (opt_do -> newline .)
    KEYWORD_exit    reduce using rule 120 (opt_do -> newline .)
    VARIABLES       reduce using rule 120 (opt_do -> newline .)
    CONSTANTS       reduce using rule 120 (opt_do -> newline .)
    BOOLEAN_CONSTANTS reduce using rule 120 (opt_do -> newline .)
    OPEN_PAREN      reduce using rule 120 (opt_do -> newline .)
    PLUS            reduce using rule 120 (opt_do -> newline .)
    MINUS           reduce using rule 120 (opt_do -> newline .)
    BITNOT          reduce using rule 120 (opt_do -> newline .)
    BITCOMP         reduce using rule 120 (opt_do -> newline .)
    DELIM           reduce using rule 120 (opt_do -> newline .)
    newline         reduce using rule 120 (opt_do -> newline .)
    KEYWORD_end     reduce using rule 120 (opt_do -> newline .)
    INT_CONSTANTS   reduce using rule 120 (opt_do -> newline .)


state 149

    (119) opt_do -> KEYWORD_do .

    KEYWORD_if      reduce using rule 119 (opt_do -> KEYWORD_do .)
    KEYWORD_while   reduce using rule 119 (opt_do -> KEYWORD_do .)
    KEYWORD_for     reduce using rule 119 (opt_do -> KEYWORD_do .)
    KEYWORD_return  reduce using rule 119 (opt_do -> KEYWORD_do .)
    KEYWORD_puts    reduce using rule 119 (opt_do -> KEYWORD_do .)
    KEYWORD_break   reduce using rule 119 (opt_do -> KEYWORD_do .)
    KEYWORD_exit    reduce using rule 119 (opt_do -> KEYWORD_do .)
    VARIABLES       reduce using rule 119 (opt_do -> KEYWORD_do .)
    CONSTANTS       reduce using rule 119 (opt_do -> KEYWORD_do .)
    BOOLEAN_CONSTANTS reduce using rule 119 (opt_do -> KEYWORD_do .)
    OPEN_PAREN      reduce using rule 119 (opt_do -> KEYWORD_do .)
    PLUS            reduce using rule 119 (opt_do -> KEYWORD_do .)
    MINUS           reduce using rule 119 (opt_do -> KEYWORD_do .)
    BITNOT          reduce using rule 119 (opt_do -> KEYWORD_do .)
    BITCOMP         reduce using rule 119 (opt_do -> KEYWORD_do .)
    DELIM           reduce using rule 119 (opt_do -> KEYWORD_do .)
    newline         reduce using rule 119 (opt_do -> KEYWORD_do .)
    KEYWORD_end     reduce using rule 119 (opt_do -> KEYWORD_do .)
    INT_CONSTANTS   reduce using rule 119 (opt_do -> KEYWORD_do .)


state 150

    (88) top_stmt -> KEYWORD_while M_7 expr3 opt_do . M_8 gen_stmts2 opt_terms KEYWORD_end M_9
    (94) M_8 -> .

    KEYWORD_if      reduce using rule 94 (M_8 -> .)
    KEYWORD_while   reduce using rule 94 (M_8 -> .)
    KEYWORD_for     reduce using rule 94 (M_8 -> .)
    KEYWORD_return  reduce using rule 94 (M_8 -> .)
    KEYWORD_puts    reduce using rule 94 (M_8 -> .)
    KEYWORD_break   reduce using rule 94 (M_8 -> .)
    KEYWORD_exit    reduce using rule 94 (M_8 -> .)
    VARIABLES       reduce using rule 94 (M_8 -> .)
    CONSTANTS       reduce using rule 94 (M_8 -> .)
    BOOLEAN_CONSTANTS reduce using rule 94 (M_8 -> .)
    OPEN_PAREN      reduce using rule 94 (M_8 -> .)
    PLUS            reduce using rule 94 (M_8 -> .)
    MINUS           reduce using rule 94 (M_8 -> .)
    BITNOT          reduce using rule 94 (M_8 -> .)
    BITCOMP         reduce using rule 94 (M_8 -> .)
    DELIM           reduce using rule 94 (M_8 -> .)
    newline         reduce using rule 94 (M_8 -> .)
    KEYWORD_end     reduce using rule 94 (M_8 -> .)
    INT_CONSTANTS   reduce using rule 94 (M_8 -> .)

    M_8                            shift and go to state 180

state 151

    (55) arguments -> CONSTANTS . M_12 COMMA arguments
    (57) arguments -> CONSTANTS . M_12
    (58) M_12 -> .

    COMMA           reduce using rule 58 (M_12 -> .)
    CLOSE_PAREN     reduce using rule 58 (M_12 -> .)
    DELIM           reduce using rule 58 (M_12 -> .)
    newline         reduce using rule 58 (M_12 -> .)
    $end            reduce using rule 58 (M_12 -> .)
    KEYWORD_return  reduce using rule 58 (M_12 -> .)
    SIGIL_AT        reduce using rule 58 (M_12 -> .)
    SIGIL_DOUBLE_AT reduce using rule 58 (M_12 -> .)
    KEYWORD_puts    reduce using rule 58 (M_12 -> .)
    KEYWORD_end     reduce using rule 58 (M_12 -> .)

    M_12                           shift and go to state 181

state 152

    (54) arguments -> VARIABLES . M_12 COMMA arguments
    (56) arguments -> VARIABLES . M_12
    (58) M_12 -> .

    COMMA           reduce using rule 58 (M_12 -> .)
    CLOSE_PAREN     reduce using rule 58 (M_12 -> .)
    DELIM           reduce using rule 58 (M_12 -> .)
    newline         reduce using rule 58 (M_12 -> .)
    $end            reduce using rule 58 (M_12 -> .)
    KEYWORD_return  reduce using rule 58 (M_12 -> .)
    SIGIL_AT        reduce using rule 58 (M_12 -> .)
    SIGIL_DOUBLE_AT reduce using rule 58 (M_12 -> .)
    KEYWORD_puts    reduce using rule 58 (M_12 -> .)
    KEYWORD_end     reduce using rule 58 (M_12 -> .)

    M_12                           shift and go to state 182

state 153

    (50) func_defn -> KEYWORD_def fname OPEN_PAREN arguments . M_13 CLOSE_PAREN func_stmts opt_terms KEYWORD_end M_14
    (59) M_13 -> .

    CLOSE_PAREN     reduce using rule 59 (M_13 -> .)

    M_13                           shift and go to state 183

state 154

    (51) func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN . M_18 func_stmts opt_terms KEYWORD_end M_15
    (60) M_18 -> .

    KEYWORD_if      reduce using rule 60 (M_18 -> .)
    KEYWORD_while   reduce using rule 60 (M_18 -> .)
    KEYWORD_for     reduce using rule 60 (M_18 -> .)
    KEYWORD_return  reduce using rule 60 (M_18 -> .)
    KEYWORD_puts    reduce using rule 60 (M_18 -> .)
    KEYWORD_break   reduce using rule 60 (M_18 -> .)
    KEYWORD_exit    reduce using rule 60 (M_18 -> .)
    VARIABLES       reduce using rule 60 (M_18 -> .)
    CONSTANTS       reduce using rule 60 (M_18 -> .)
    BOOLEAN_CONSTANTS reduce using rule 60 (M_18 -> .)
    OPEN_PAREN      reduce using rule 60 (M_18 -> .)
    PLUS            reduce using rule 60 (M_18 -> .)
    MINUS           reduce using rule 60 (M_18 -> .)
    BITNOT          reduce using rule 60 (M_18 -> .)
    BITCOMP         reduce using rule 60 (M_18 -> .)
    DELIM           reduce using rule 60 (M_18 -> .)
    newline         reduce using rule 60 (M_18 -> .)
    KEYWORD_end     reduce using rule 60 (M_18 -> .)
    INT_CONSTANTS   reduce using rule 60 (M_18 -> .)

    M_18                           shift and go to state 184

state 155

    (87) top_stmt -> KEYWORD_if expr3 opt_then M_1 . gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6
    (98) gen_stmts -> . top_stmt
    (99) gen_stmts -> . gen_stmts terms top_stmt
    (100) gen_stmts -> . none
    (86) top_stmt -> . stmt
    (87) top_stmt -> . KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6
    (88) top_stmt -> . KEYWORD_while M_7 expr3 opt_do M_8 gen_stmts2 opt_terms KEYWORD_end M_9
    (89) top_stmt -> . KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts2 opt_terms KEYWORD_end M_11
    (186) none -> .
    (104) stmt -> . expr
    (105) stmt -> . expr1
    (106) stmt -> . puts_stmt
    (107) stmt -> . loop_stmt
    (108) stmt -> . exit_stmt
    (109) stmt -> . func_call_stmt
    (110) stmt -> . KEYWORD_return func_ret_arg
    (125) expr -> . mlhs EQUAL mrhs
    (140) expr1 -> . expr3
    (74) puts_stmt -> . KEYWORD_puts mrhs
    (75) puts_stmt -> . KEYWORD_puts expr
    (72) loop_stmt -> . KEYWORD_break
    (73) exit_stmt -> . KEYWORD_exit
    (63) func_call_stmt -> . fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (64) func_call_stmt -> . mlhs EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (126) mlhs -> . VARIABLES
    (127) mlhs -> . CONSTANTS
    (128) mlhs -> . array
    (141) expr3 -> . expr3 LOGICALOR expr4
    (142) expr3 -> . expr4
    (66) fname2 -> . VARIABLES
    (67) fname2 -> . CONSTANTS
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (143) expr4 -> . expr4 LOGICALAND expr5
    (144) expr4 -> . expr5
    (145) expr5 -> . expr6 DOUBLEEQUAL expr6
    (146) expr5 -> . expr6 NOTEQUAL expr6
    (147) expr5 -> . expr6
    (148) expr6 -> . expr7 LESSEQUAL expr7
    (149) expr6 -> . expr7 LESS expr7
    (150) expr6 -> . expr7 GREATER expr7
    (151) expr6 -> . expr7 GREATEREQUAL expr7
    (152) expr6 -> . expr7
    (153) expr6 -> . BOOLEAN_CONSTANTS
    (154) expr7 -> . expr7 BITXOR expr8
    (155) expr7 -> . expr7 PIPE expr8
    (156) expr7 -> . expr8
    (157) expr8 -> . expr8 BITAND expr9
    (158) expr8 -> . expr9
    (159) expr9 -> . expr9 SHIFTL expr10
    (160) expr9 -> . expr9 SHIFTR expr10
    (161) expr9 -> . expr10
    (162) expr10 -> . expr10 PLUS expr11
    (163) expr10 -> . expr10 MINUS expr11
    (164) expr10 -> . expr11
    (165) expr11 -> . expr11 MULTIPLY expr13
    (166) expr11 -> . expr11 DIV expr13
    (167) expr11 -> . expr11 MOD expr13
    (168) expr11 -> . expr13
    (169) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (170) expr13 -> . uexpr INT_CONSTANTS
    (171) expr13 -> . CONSTANTS
    (172) expr13 -> . VARIABLES
    (173) expr13 -> . array
    (175) uexpr -> . none
    (176) uexpr -> . PLUS
    (177) uexpr -> . MINUS
    (178) uexpr -> . BITNOT
    (179) uexpr -> . BITCOMP

    KEYWORD_if      shift and go to state 21
    KEYWORD_while   shift and go to state 3
    KEYWORD_for     shift and go to state 44
    DELIM           reduce using rule 186 (none -> .)
    newline         reduce using rule 186 (none -> .)
    KEYWORD_elsif   reduce using rule 186 (none -> .)
    KEYWORD_else    reduce using rule 186 (none -> .)
    KEYWORD_end     reduce using rule 186 (none -> .)
    INT_CONSTANTS   reduce using rule 186 (none -> .)
    KEYWORD_return  shift and go to state 14
    KEYWORD_puts    shift and go to state 27
    KEYWORD_break   shift and go to state 41
    KEYWORD_exit    shift and go to state 18
    VARIABLES       shift and go to state 186
    CONSTANTS       shift and go to state 185
    BOOLEAN_CONSTANTS shift and go to state 9
    OPEN_PAREN      shift and go to state 24
    PLUS            shift and go to state 5
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 33
    BITCOMP         shift and go to state 23

    mlhs                           shift and go to state 1
    fname2                         shift and go to state 45
    expr10                         shift and go to state 11
    expr11                         shift and go to state 12
    expr13                         shift and go to state 13
    array                          shift and go to state 20
    expr3                          shift and go to state 34
    expr1                          shift and go to state 35
    expr6                          shift and go to state 36
    expr7                          shift and go to state 6
    puts_stmt                      shift and go to state 15
    expr5                          shift and go to state 38
    func_call_stmt                 shift and go to state 26
    expr8                          shift and go to state 39
    expr9                          shift and go to state 40
    expr4                          shift and go to state 37
    exit_stmt                      shift and go to state 42
    stmt                           shift and go to state 16
    loop_stmt                      shift and go to state 7
    uexpr                          shift and go to state 8
    none                           shift and go to state 187
    gen_stmts                      shift and go to state 188
    expr                           shift and go to state 29
    top_stmt                       shift and go to state 189

state 156

    (174) array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .

    EQUAL           reduce using rule 174 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    MULTIPLY        reduce using rule 174 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    DIV             reduce using rule 174 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    MOD             reduce using rule 174 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    PLUS            reduce using rule 174 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    MINUS           reduce using rule 174 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    SHIFTL          reduce using rule 174 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    SHIFTR          reduce using rule 174 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    BITAND          reduce using rule 174 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    LESSEQUAL       reduce using rule 174 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    LESS            reduce using rule 174 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    GREATER         reduce using rule 174 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    GREATEREQUAL    reduce using rule 174 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    BITXOR          reduce using rule 174 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    PIPE            reduce using rule 174 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    DOUBLEEQUAL     reduce using rule 174 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    NOTEQUAL        reduce using rule 174 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    LOGICALAND      reduce using rule 174 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    LOGICALOR       reduce using rule 174 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    DELIM           reduce using rule 174 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    newline         reduce using rule 174 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    $end            reduce using rule 174 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_elsif   reduce using rule 174 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_else    reduce using rule 174 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_end     reduce using rule 174 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_then    reduce using rule 174 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    CLOSE_PAREN     reduce using rule 174 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    KEYWORD_do      reduce using rule 174 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 174 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)
    COMMA           reduce using rule 174 (array -> VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET .)


state 157

    (8) statement -> VARIABLES DOT VARIABLES OPEN_PAREN . arguments CLOSE_PAREN
    (9) statement -> VARIABLES DOT VARIABLES OPEN_PAREN . CLOSE_PAREN
    (54) arguments -> . VARIABLES M_12 COMMA arguments
    (55) arguments -> . CONSTANTS M_12 COMMA arguments
    (56) arguments -> . VARIABLES M_12
    (57) arguments -> . CONSTANTS M_12

    CLOSE_PAREN     shift and go to state 191
    VARIABLES       shift and go to state 152
    CONSTANTS       shift and go to state 151

    arguments                      shift and go to state 190

state 158

    (10) statement -> VARIABLES DOT VARIABLES arguments .

    DELIM           reduce using rule 10 (statement -> VARIABLES DOT VARIABLES arguments .)
    newline         reduce using rule 10 (statement -> VARIABLES DOT VARIABLES arguments .)
    $end            reduce using rule 10 (statement -> VARIABLES DOT VARIABLES arguments .)


state 159

    (133) mrhs -> VARIABLES . DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN
    (134) mrhs -> VARIABLES . DOT VARIABLES OPEN_PAREN CLOSE_PAREN
    (135) mrhs -> VARIABLES . DOT VARIABLES
    (172) expr13 -> VARIABLES .
    (174) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET

    DOT             shift and go to state 131
    MULTIPLY        reduce using rule 172 (expr13 -> VARIABLES .)
    DIV             reduce using rule 172 (expr13 -> VARIABLES .)
    MOD             reduce using rule 172 (expr13 -> VARIABLES .)
    PLUS            reduce using rule 172 (expr13 -> VARIABLES .)
    MINUS           reduce using rule 172 (expr13 -> VARIABLES .)
    SHIFTL          reduce using rule 172 (expr13 -> VARIABLES .)
    SHIFTR          reduce using rule 172 (expr13 -> VARIABLES .)
    BITAND          reduce using rule 172 (expr13 -> VARIABLES .)
    LESSEQUAL       reduce using rule 172 (expr13 -> VARIABLES .)
    LESS            reduce using rule 172 (expr13 -> VARIABLES .)
    GREATER         reduce using rule 172 (expr13 -> VARIABLES .)
    GREATEREQUAL    reduce using rule 172 (expr13 -> VARIABLES .)
    BITXOR          reduce using rule 172 (expr13 -> VARIABLES .)
    PIPE            reduce using rule 172 (expr13 -> VARIABLES .)
    DOUBLEEQUAL     reduce using rule 172 (expr13 -> VARIABLES .)
    NOTEQUAL        reduce using rule 172 (expr13 -> VARIABLES .)
    LOGICALAND      reduce using rule 172 (expr13 -> VARIABLES .)
    LOGICALOR       reduce using rule 172 (expr13 -> VARIABLES .)
    DELIM           reduce using rule 172 (expr13 -> VARIABLES .)
    newline         reduce using rule 172 (expr13 -> VARIABLES .)
    $end            reduce using rule 172 (expr13 -> VARIABLES .)
    KEYWORD_elsif   reduce using rule 172 (expr13 -> VARIABLES .)
    KEYWORD_else    reduce using rule 172 (expr13 -> VARIABLES .)
    KEYWORD_end     reduce using rule 172 (expr13 -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 81


state 160

    (136) mrhs -> CONSTANTS . DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN
    (137) mrhs -> CONSTANTS . DOT KEYWORD_new
    (138) mrhs -> CONSTANTS . DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN
    (171) expr13 -> CONSTANTS .

    DOT             shift and go to state 133
    MULTIPLY        reduce using rule 171 (expr13 -> CONSTANTS .)
    DIV             reduce using rule 171 (expr13 -> CONSTANTS .)
    MOD             reduce using rule 171 (expr13 -> CONSTANTS .)
    PLUS            reduce using rule 171 (expr13 -> CONSTANTS .)
    MINUS           reduce using rule 171 (expr13 -> CONSTANTS .)
    SHIFTL          reduce using rule 171 (expr13 -> CONSTANTS .)
    SHIFTR          reduce using rule 171 (expr13 -> CONSTANTS .)
    BITAND          reduce using rule 171 (expr13 -> CONSTANTS .)
    LESSEQUAL       reduce using rule 171 (expr13 -> CONSTANTS .)
    LESS            reduce using rule 171 (expr13 -> CONSTANTS .)
    GREATER         reduce using rule 171 (expr13 -> CONSTANTS .)
    GREATEREQUAL    reduce using rule 171 (expr13 -> CONSTANTS .)
    BITXOR          reduce using rule 171 (expr13 -> CONSTANTS .)
    PIPE            reduce using rule 171 (expr13 -> CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 171 (expr13 -> CONSTANTS .)
    NOTEQUAL        reduce using rule 171 (expr13 -> CONSTANTS .)
    LOGICALAND      reduce using rule 171 (expr13 -> CONSTANTS .)
    LOGICALOR       reduce using rule 171 (expr13 -> CONSTANTS .)
    DELIM           reduce using rule 171 (expr13 -> CONSTANTS .)
    newline         reduce using rule 171 (expr13 -> CONSTANTS .)
    $end            reduce using rule 171 (expr13 -> CONSTANTS .)
    KEYWORD_elsif   reduce using rule 171 (expr13 -> CONSTANTS .)
    KEYWORD_else    reduce using rule 171 (expr13 -> CONSTANTS .)
    KEYWORD_end     reduce using rule 171 (expr13 -> CONSTANTS .)


state 161

    (133) mrhs -> VARIABLES DOT VARIABLES . OPEN_PAREN arguments CLOSE_PAREN
    (134) mrhs -> VARIABLES DOT VARIABLES . OPEN_PAREN CLOSE_PAREN
    (135) mrhs -> VARIABLES DOT VARIABLES .

    OPEN_PAREN      shift and go to state 192
    DELIM           reduce using rule 135 (mrhs -> VARIABLES DOT VARIABLES .)
    newline         reduce using rule 135 (mrhs -> VARIABLES DOT VARIABLES .)
    $end            reduce using rule 135 (mrhs -> VARIABLES DOT VARIABLES .)
    KEYWORD_elsif   reduce using rule 135 (mrhs -> VARIABLES DOT VARIABLES .)
    KEYWORD_else    reduce using rule 135 (mrhs -> VARIABLES DOT VARIABLES .)
    KEYWORD_end     reduce using rule 135 (mrhs -> VARIABLES DOT VARIABLES .)


state 162

    (136) mrhs -> CONSTANTS DOT KEYWORD_new . OPEN_PAREN arguments CLOSE_PAREN
    (137) mrhs -> CONSTANTS DOT KEYWORD_new .
    (138) mrhs -> CONSTANTS DOT KEYWORD_new . OPEN_PAREN CLOSE_PAREN

    OPEN_PAREN      shift and go to state 193
    DELIM           reduce using rule 137 (mrhs -> CONSTANTS DOT KEYWORD_new .)
    newline         reduce using rule 137 (mrhs -> CONSTANTS DOT KEYWORD_new .)
    $end            reduce using rule 137 (mrhs -> CONSTANTS DOT KEYWORD_new .)
    KEYWORD_elsif   reduce using rule 137 (mrhs -> CONSTANTS DOT KEYWORD_new .)
    KEYWORD_else    reduce using rule 137 (mrhs -> CONSTANTS DOT KEYWORD_new .)
    KEYWORD_end     reduce using rule 137 (mrhs -> CONSTANTS DOT KEYWORD_new .)


state 163

    (17) class_stmts -> none .

    DELIM           reduce using rule 17 (class_stmts -> none .)
    newline         reduce using rule 17 (class_stmts -> none .)
    KEYWORD_end     reduce using rule 17 (class_stmts -> none .)


state 164

    (18) class_stmt -> class_mlhs . EQUAL class_mrhs
    (28) class_mlhs -> class_mlhs . terms SIGIL_DOUBLE_AT
    (182) terms -> . term
    (183) terms -> . terms term
    (184) term -> . DELIM
    (185) term -> . newline

    EQUAL           shift and go to state 195
    DELIM           shift and go to state 74
    newline         shift and go to state 73

    term                           shift and go to state 71
    terms                          shift and go to state 194

state 165

    (29) class_mlhs -> SIGIL_DOUBLE_AT .

    EQUAL           reduce using rule 29 (class_mlhs -> SIGIL_DOUBLE_AT .)
    DELIM           reduce using rule 29 (class_mlhs -> SIGIL_DOUBLE_AT .)
    newline         reduce using rule 29 (class_mlhs -> SIGIL_DOUBLE_AT .)


state 166

    (19) class_stmt -> class_func .

    DELIM           reduce using rule 19 (class_stmt -> class_func .)
    newline         reduce using rule 19 (class_stmt -> class_func .)
    KEYWORD_end     reduce using rule 19 (class_stmt -> class_func .)


state 167

    (14) class_defn -> KEYWORD_class CONSTANTS newline class_stmts . opt_terms KEYWORD_end
    (16) class_stmts -> class_stmts . terms class_stmt
    (180) opt_terms -> . none
    (181) opt_terms -> . terms
    (182) terms -> . term
    (183) terms -> . terms term
    (186) none -> .
    (184) term -> . DELIM
    (185) term -> . newline

    KEYWORD_end     reduce using rule 186 (none -> .)
    DELIM           shift and go to state 74
    newline         shift and go to state 73

    term                           shift and go to state 71
    terms                          shift and go to state 196
    none                           shift and go to state 75
    opt_terms                      shift and go to state 197

state 168

    (30) class_func -> KEYWORD_def . fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (31) class_func -> KEYWORD_def . fname arguments class_method_stmts opt_terms KEYWORD_end
    (32) class_func -> KEYWORD_def . fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (52) fname -> . VARIABLES
    (53) fname -> . CONSTANTS

    VARIABLES       shift and go to state 69
    CONSTANTS       shift and go to state 68

    fname                          shift and go to state 198

state 169

    (15) class_stmts -> class_stmt .

    DELIM           reduce using rule 15 (class_stmts -> class_stmt .)
    newline         reduce using rule 15 (class_stmts -> class_stmt .)
    KEYWORD_end     reduce using rule 15 (class_stmts -> class_stmt .)


state 170

    (122) for_range_variables -> INT_CONSTANTS .

    KEYWORD_do      reduce using rule 122 (for_range_variables -> INT_CONSTANTS .)
    newline         reduce using rule 122 (for_range_variables -> INT_CONSTANTS .)
    DOUBLEDOT       reduce using rule 122 (for_range_variables -> INT_CONSTANTS .)


state 171

    (123) for_range_variables -> VARIABLES .

    KEYWORD_do      reduce using rule 123 (for_range_variables -> VARIABLES .)
    newline         reduce using rule 123 (for_range_variables -> VARIABLES .)
    DOUBLEDOT       reduce using rule 123 (for_range_variables -> VARIABLES .)


state 172

    (89) top_stmt -> KEYWORD_for VARIABLES KEYWORD_in for_range . opt_do M_10 gen_stmts2 opt_terms KEYWORD_end M_11
    (119) opt_do -> . KEYWORD_do
    (120) opt_do -> . newline

    KEYWORD_do      shift and go to state 149
    newline         shift and go to state 148

    opt_do                         shift and go to state 199

state 173

    (124) for_range_variables -> CONSTANTS .

    KEYWORD_do      reduce using rule 124 (for_range_variables -> CONSTANTS .)
    newline         reduce using rule 124 (for_range_variables -> CONSTANTS .)
    DOUBLEDOT       reduce using rule 124 (for_range_variables -> CONSTANTS .)


state 174

    (121) for_range -> for_range_variables . DOUBLEDOT for_range_variables

    DOUBLEDOT       shift and go to state 200


state 175

    (68) call_arg -> primary M_16 . COMMA call_arg
    (69) call_arg -> primary M_16 .

    COMMA           shift and go to state 201
    CLOSE_PAREN     reduce using rule 69 (call_arg -> primary M_16 .)


state 176

    (63) func_call_stmt -> fname2 OPEN_PAREN call_arg CLOSE_PAREN . M_17
    (65) M_17 -> .

    DELIM           reduce using rule 65 (M_17 -> .)
    newline         reduce using rule 65 (M_17 -> .)
    $end            reduce using rule 65 (M_17 -> .)
    KEYWORD_elsif   reduce using rule 65 (M_17 -> .)
    KEYWORD_else    reduce using rule 65 (M_17 -> .)
    KEYWORD_end     reduce using rule 65 (M_17 -> .)

    M_17                           shift and go to state 202

state 177

    (11) statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN . arguments CLOSE_PAREN
    (12) statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN . CLOSE_PAREN
    (54) arguments -> . VARIABLES M_12 COMMA arguments
    (55) arguments -> . CONSTANTS M_12 COMMA arguments
    (56) arguments -> . VARIABLES M_12
    (57) arguments -> . CONSTANTS M_12

    CLOSE_PAREN     shift and go to state 204
    VARIABLES       shift and go to state 152
    CONSTANTS       shift and go to state 151

    arguments                      shift and go to state 203

state 178

    (13) statement -> CONSTANTS DOT KEYWORD_new arguments .

    DELIM           reduce using rule 13 (statement -> CONSTANTS DOT KEYWORD_new arguments .)
    newline         reduce using rule 13 (statement -> CONSTANTS DOT KEYWORD_new arguments .)
    $end            reduce using rule 13 (statement -> CONSTANTS DOT KEYWORD_new arguments .)


state 179

    (64) func_call_stmt -> mlhs EQUAL fname2 OPEN_PAREN call_arg . CLOSE_PAREN M_17

    CLOSE_PAREN     shift and go to state 205


state 180

    (88) top_stmt -> KEYWORD_while M_7 expr3 opt_do M_8 . gen_stmts2 opt_terms KEYWORD_end M_9
    (101) gen_stmts2 -> . top_stmt
    (102) gen_stmts2 -> . gen_stmts2 terms top_stmt
    (103) gen_stmts2 -> . none
    (86) top_stmt -> . stmt
    (87) top_stmt -> . KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6
    (88) top_stmt -> . KEYWORD_while M_7 expr3 opt_do M_8 gen_stmts2 opt_terms KEYWORD_end M_9
    (89) top_stmt -> . KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts2 opt_terms KEYWORD_end M_11
    (186) none -> .
    (104) stmt -> . expr
    (105) stmt -> . expr1
    (106) stmt -> . puts_stmt
    (107) stmt -> . loop_stmt
    (108) stmt -> . exit_stmt
    (109) stmt -> . func_call_stmt
    (110) stmt -> . KEYWORD_return func_ret_arg
    (125) expr -> . mlhs EQUAL mrhs
    (140) expr1 -> . expr3
    (74) puts_stmt -> . KEYWORD_puts mrhs
    (75) puts_stmt -> . KEYWORD_puts expr
    (72) loop_stmt -> . KEYWORD_break
    (73) exit_stmt -> . KEYWORD_exit
    (63) func_call_stmt -> . fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (64) func_call_stmt -> . mlhs EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (126) mlhs -> . VARIABLES
    (127) mlhs -> . CONSTANTS
    (128) mlhs -> . array
    (141) expr3 -> . expr3 LOGICALOR expr4
    (142) expr3 -> . expr4
    (66) fname2 -> . VARIABLES
    (67) fname2 -> . CONSTANTS
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (143) expr4 -> . expr4 LOGICALAND expr5
    (144) expr4 -> . expr5
    (145) expr5 -> . expr6 DOUBLEEQUAL expr6
    (146) expr5 -> . expr6 NOTEQUAL expr6
    (147) expr5 -> . expr6
    (148) expr6 -> . expr7 LESSEQUAL expr7
    (149) expr6 -> . expr7 LESS expr7
    (150) expr6 -> . expr7 GREATER expr7
    (151) expr6 -> . expr7 GREATEREQUAL expr7
    (152) expr6 -> . expr7
    (153) expr6 -> . BOOLEAN_CONSTANTS
    (154) expr7 -> . expr7 BITXOR expr8
    (155) expr7 -> . expr7 PIPE expr8
    (156) expr7 -> . expr8
    (157) expr8 -> . expr8 BITAND expr9
    (158) expr8 -> . expr9
    (159) expr9 -> . expr9 SHIFTL expr10
    (160) expr9 -> . expr9 SHIFTR expr10
    (161) expr9 -> . expr10
    (162) expr10 -> . expr10 PLUS expr11
    (163) expr10 -> . expr10 MINUS expr11
    (164) expr10 -> . expr11
    (165) expr11 -> . expr11 MULTIPLY expr13
    (166) expr11 -> . expr11 DIV expr13
    (167) expr11 -> . expr11 MOD expr13
    (168) expr11 -> . expr13
    (169) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (170) expr13 -> . uexpr INT_CONSTANTS
    (171) expr13 -> . CONSTANTS
    (172) expr13 -> . VARIABLES
    (173) expr13 -> . array
    (175) uexpr -> . none
    (176) uexpr -> . PLUS
    (177) uexpr -> . MINUS
    (178) uexpr -> . BITNOT
    (179) uexpr -> . BITCOMP

    KEYWORD_if      shift and go to state 21
    KEYWORD_while   shift and go to state 3
    KEYWORD_for     shift and go to state 44
    DELIM           reduce using rule 186 (none -> .)
    newline         reduce using rule 186 (none -> .)
    KEYWORD_end     reduce using rule 186 (none -> .)
    INT_CONSTANTS   reduce using rule 186 (none -> .)
    KEYWORD_return  shift and go to state 14
    KEYWORD_puts    shift and go to state 27
    KEYWORD_break   shift and go to state 41
    KEYWORD_exit    shift and go to state 18
    VARIABLES       shift and go to state 186
    CONSTANTS       shift and go to state 185
    BOOLEAN_CONSTANTS shift and go to state 9
    OPEN_PAREN      shift and go to state 24
    PLUS            shift and go to state 5
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 33
    BITCOMP         shift and go to state 23

    gen_stmts2                     shift and go to state 206
    mlhs                           shift and go to state 1
    fname2                         shift and go to state 45
    expr10                         shift and go to state 11
    expr11                         shift and go to state 12
    expr13                         shift and go to state 13
    array                          shift and go to state 20
    expr3                          shift and go to state 34
    expr1                          shift and go to state 35
    expr6                          shift and go to state 36
    expr7                          shift and go to state 6
    puts_stmt                      shift and go to state 15
    expr5                          shift and go to state 38
    func_call_stmt                 shift and go to state 26
    expr8                          shift and go to state 39
    expr9                          shift and go to state 40
    expr4                          shift and go to state 37
    exit_stmt                      shift and go to state 42
    stmt                           shift and go to state 16
    loop_stmt                      shift and go to state 7
    uexpr                          shift and go to state 8
    none                           shift and go to state 207
    expr                           shift and go to state 29
    top_stmt                       shift and go to state 208

state 181

    (55) arguments -> CONSTANTS M_12 . COMMA arguments
    (57) arguments -> CONSTANTS M_12 .

    COMMA           shift and go to state 209
    CLOSE_PAREN     reduce using rule 57 (arguments -> CONSTANTS M_12 .)
    DELIM           reduce using rule 57 (arguments -> CONSTANTS M_12 .)
    newline         reduce using rule 57 (arguments -> CONSTANTS M_12 .)
    $end            reduce using rule 57 (arguments -> CONSTANTS M_12 .)
    KEYWORD_return  reduce using rule 57 (arguments -> CONSTANTS M_12 .)
    SIGIL_AT        reduce using rule 57 (arguments -> CONSTANTS M_12 .)
    SIGIL_DOUBLE_AT reduce using rule 57 (arguments -> CONSTANTS M_12 .)
    KEYWORD_puts    reduce using rule 57 (arguments -> CONSTANTS M_12 .)
    KEYWORD_end     reduce using rule 57 (arguments -> CONSTANTS M_12 .)


state 182

    (54) arguments -> VARIABLES M_12 . COMMA arguments
    (56) arguments -> VARIABLES M_12 .

    COMMA           shift and go to state 210
    CLOSE_PAREN     reduce using rule 56 (arguments -> VARIABLES M_12 .)
    DELIM           reduce using rule 56 (arguments -> VARIABLES M_12 .)
    newline         reduce using rule 56 (arguments -> VARIABLES M_12 .)
    $end            reduce using rule 56 (arguments -> VARIABLES M_12 .)
    KEYWORD_return  reduce using rule 56 (arguments -> VARIABLES M_12 .)
    SIGIL_AT        reduce using rule 56 (arguments -> VARIABLES M_12 .)
    SIGIL_DOUBLE_AT reduce using rule 56 (arguments -> VARIABLES M_12 .)
    KEYWORD_puts    reduce using rule 56 (arguments -> VARIABLES M_12 .)
    KEYWORD_end     reduce using rule 56 (arguments -> VARIABLES M_12 .)


state 183

    (50) func_defn -> KEYWORD_def fname OPEN_PAREN arguments M_13 . CLOSE_PAREN func_stmts opt_terms KEYWORD_end M_14

    CLOSE_PAREN     shift and go to state 211


state 184

    (51) func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN M_18 . func_stmts opt_terms KEYWORD_end M_15
    (76) func_stmts -> . func_stmt
    (77) func_stmts -> . func_stmts terms func_stmt
    (78) func_stmts -> . none
    (79) func_stmt -> . top_stmt
    (186) none -> .
    (86) top_stmt -> . stmt
    (87) top_stmt -> . KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6
    (88) top_stmt -> . KEYWORD_while M_7 expr3 opt_do M_8 gen_stmts2 opt_terms KEYWORD_end M_9
    (89) top_stmt -> . KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts2 opt_terms KEYWORD_end M_11
    (104) stmt -> . expr
    (105) stmt -> . expr1
    (106) stmt -> . puts_stmt
    (107) stmt -> . loop_stmt
    (108) stmt -> . exit_stmt
    (109) stmt -> . func_call_stmt
    (110) stmt -> . KEYWORD_return func_ret_arg
    (125) expr -> . mlhs EQUAL mrhs
    (140) expr1 -> . expr3
    (74) puts_stmt -> . KEYWORD_puts mrhs
    (75) puts_stmt -> . KEYWORD_puts expr
    (72) loop_stmt -> . KEYWORD_break
    (73) exit_stmt -> . KEYWORD_exit
    (63) func_call_stmt -> . fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (64) func_call_stmt -> . mlhs EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (126) mlhs -> . VARIABLES
    (127) mlhs -> . CONSTANTS
    (128) mlhs -> . array
    (141) expr3 -> . expr3 LOGICALOR expr4
    (142) expr3 -> . expr4
    (66) fname2 -> . VARIABLES
    (67) fname2 -> . CONSTANTS
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (143) expr4 -> . expr4 LOGICALAND expr5
    (144) expr4 -> . expr5
    (145) expr5 -> . expr6 DOUBLEEQUAL expr6
    (146) expr5 -> . expr6 NOTEQUAL expr6
    (147) expr5 -> . expr6
    (148) expr6 -> . expr7 LESSEQUAL expr7
    (149) expr6 -> . expr7 LESS expr7
    (150) expr6 -> . expr7 GREATER expr7
    (151) expr6 -> . expr7 GREATEREQUAL expr7
    (152) expr6 -> . expr7
    (153) expr6 -> . BOOLEAN_CONSTANTS
    (154) expr7 -> . expr7 BITXOR expr8
    (155) expr7 -> . expr7 PIPE expr8
    (156) expr7 -> . expr8
    (157) expr8 -> . expr8 BITAND expr9
    (158) expr8 -> . expr9
    (159) expr9 -> . expr9 SHIFTL expr10
    (160) expr9 -> . expr9 SHIFTR expr10
    (161) expr9 -> . expr10
    (162) expr10 -> . expr10 PLUS expr11
    (163) expr10 -> . expr10 MINUS expr11
    (164) expr10 -> . expr11
    (165) expr11 -> . expr11 MULTIPLY expr13
    (166) expr11 -> . expr11 DIV expr13
    (167) expr11 -> . expr11 MOD expr13
    (168) expr11 -> . expr13
    (169) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (170) expr13 -> . uexpr INT_CONSTANTS
    (171) expr13 -> . CONSTANTS
    (172) expr13 -> . VARIABLES
    (173) expr13 -> . array
    (175) uexpr -> . none
    (176) uexpr -> . PLUS
    (177) uexpr -> . MINUS
    (178) uexpr -> . BITNOT
    (179) uexpr -> . BITCOMP

    DELIM           reduce using rule 186 (none -> .)
    newline         reduce using rule 186 (none -> .)
    KEYWORD_end     reduce using rule 186 (none -> .)
    INT_CONSTANTS   reduce using rule 186 (none -> .)
    KEYWORD_if      shift and go to state 21
    KEYWORD_while   shift and go to state 3
    KEYWORD_for     shift and go to state 44
    KEYWORD_return  shift and go to state 14
    KEYWORD_puts    shift and go to state 27
    KEYWORD_break   shift and go to state 41
    KEYWORD_exit    shift and go to state 18
    VARIABLES       shift and go to state 186
    CONSTANTS       shift and go to state 185
    BOOLEAN_CONSTANTS shift and go to state 9
    OPEN_PAREN      shift and go to state 24
    PLUS            shift and go to state 5
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 33
    BITCOMP         shift and go to state 23

    func_stmt                      shift and go to state 215
    mlhs                           shift and go to state 1
    fname2                         shift and go to state 45
    func_stmts                     shift and go to state 212
    expr11                         shift and go to state 12
    expr13                         shift and go to state 13
    array                          shift and go to state 20
    expr3                          shift and go to state 34
    expr1                          shift and go to state 35
    expr6                          shift and go to state 36
    expr7                          shift and go to state 6
    expr5                          shift and go to state 38
    func_call_stmt                 shift and go to state 26
    expr8                          shift and go to state 39
    expr9                          shift and go to state 40
    expr4                          shift and go to state 37
    puts_stmt                      shift and go to state 15
    exit_stmt                      shift and go to state 42
    stmt                           shift and go to state 16
    loop_stmt                      shift and go to state 7
    uexpr                          shift and go to state 8
    none                           shift and go to state 214
    expr                           shift and go to state 29
    expr10                         shift and go to state 11
    top_stmt                       shift and go to state 213

state 185

    (127) mlhs -> CONSTANTS .
    (67) fname2 -> CONSTANTS .
    (171) expr13 -> CONSTANTS .

    EQUAL           reduce using rule 127 (mlhs -> CONSTANTS .)
    OPEN_PAREN      reduce using rule 67 (fname2 -> CONSTANTS .)
    MULTIPLY        reduce using rule 171 (expr13 -> CONSTANTS .)
    DIV             reduce using rule 171 (expr13 -> CONSTANTS .)
    MOD             reduce using rule 171 (expr13 -> CONSTANTS .)
    PLUS            reduce using rule 171 (expr13 -> CONSTANTS .)
    MINUS           reduce using rule 171 (expr13 -> CONSTANTS .)
    SHIFTL          reduce using rule 171 (expr13 -> CONSTANTS .)
    SHIFTR          reduce using rule 171 (expr13 -> CONSTANTS .)
    BITAND          reduce using rule 171 (expr13 -> CONSTANTS .)
    LESSEQUAL       reduce using rule 171 (expr13 -> CONSTANTS .)
    LESS            reduce using rule 171 (expr13 -> CONSTANTS .)
    GREATER         reduce using rule 171 (expr13 -> CONSTANTS .)
    GREATEREQUAL    reduce using rule 171 (expr13 -> CONSTANTS .)
    BITXOR          reduce using rule 171 (expr13 -> CONSTANTS .)
    PIPE            reduce using rule 171 (expr13 -> CONSTANTS .)
    DOUBLEEQUAL     reduce using rule 171 (expr13 -> CONSTANTS .)
    NOTEQUAL        reduce using rule 171 (expr13 -> CONSTANTS .)
    LOGICALAND      reduce using rule 171 (expr13 -> CONSTANTS .)
    LOGICALOR       reduce using rule 171 (expr13 -> CONSTANTS .)
    DELIM           reduce using rule 171 (expr13 -> CONSTANTS .)
    newline         reduce using rule 171 (expr13 -> CONSTANTS .)
    KEYWORD_end     reduce using rule 171 (expr13 -> CONSTANTS .)
    KEYWORD_elsif   reduce using rule 171 (expr13 -> CONSTANTS .)
    KEYWORD_else    reduce using rule 171 (expr13 -> CONSTANTS .)


state 186

    (126) mlhs -> VARIABLES .
    (66) fname2 -> VARIABLES .
    (174) array -> VARIABLES . OPEN_BRACKET expr7 CLOSE_BRACKET
    (172) expr13 -> VARIABLES .

    EQUAL           reduce using rule 126 (mlhs -> VARIABLES .)
    OPEN_PAREN      reduce using rule 66 (fname2 -> VARIABLES .)
    OPEN_BRACKET    shift and go to state 81
    MULTIPLY        reduce using rule 172 (expr13 -> VARIABLES .)
    DIV             reduce using rule 172 (expr13 -> VARIABLES .)
    MOD             reduce using rule 172 (expr13 -> VARIABLES .)
    PLUS            reduce using rule 172 (expr13 -> VARIABLES .)
    MINUS           reduce using rule 172 (expr13 -> VARIABLES .)
    SHIFTL          reduce using rule 172 (expr13 -> VARIABLES .)
    SHIFTR          reduce using rule 172 (expr13 -> VARIABLES .)
    BITAND          reduce using rule 172 (expr13 -> VARIABLES .)
    LESSEQUAL       reduce using rule 172 (expr13 -> VARIABLES .)
    LESS            reduce using rule 172 (expr13 -> VARIABLES .)
    GREATER         reduce using rule 172 (expr13 -> VARIABLES .)
    GREATEREQUAL    reduce using rule 172 (expr13 -> VARIABLES .)
    BITXOR          reduce using rule 172 (expr13 -> VARIABLES .)
    PIPE            reduce using rule 172 (expr13 -> VARIABLES .)
    DOUBLEEQUAL     reduce using rule 172 (expr13 -> VARIABLES .)
    NOTEQUAL        reduce using rule 172 (expr13 -> VARIABLES .)
    LOGICALAND      reduce using rule 172 (expr13 -> VARIABLES .)
    LOGICALOR       reduce using rule 172 (expr13 -> VARIABLES .)
    DELIM           reduce using rule 172 (expr13 -> VARIABLES .)
    newline         reduce using rule 172 (expr13 -> VARIABLES .)
    KEYWORD_end     reduce using rule 172 (expr13 -> VARIABLES .)
    KEYWORD_elsif   reduce using rule 172 (expr13 -> VARIABLES .)
    KEYWORD_else    reduce using rule 172 (expr13 -> VARIABLES .)


state 187

    (100) gen_stmts -> none .
    (175) uexpr -> none .

    DELIM           reduce using rule 100 (gen_stmts -> none .)
    newline         reduce using rule 100 (gen_stmts -> none .)
    KEYWORD_elsif   reduce using rule 100 (gen_stmts -> none .)
    KEYWORD_else    reduce using rule 100 (gen_stmts -> none .)
    KEYWORD_end     reduce using rule 100 (gen_stmts -> none .)
    INT_CONSTANTS   reduce using rule 175 (uexpr -> none .)


state 188

    (87) top_stmt -> KEYWORD_if expr3 opt_then M_1 gen_stmts . opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6
    (99) gen_stmts -> gen_stmts . terms top_stmt
    (180) opt_terms -> . none
    (181) opt_terms -> . terms
    (182) terms -> . term
    (183) terms -> . terms term
    (186) none -> .
    (184) term -> . DELIM
    (185) term -> . newline

    KEYWORD_elsif   reduce using rule 186 (none -> .)
    KEYWORD_else    reduce using rule 186 (none -> .)
    KEYWORD_end     reduce using rule 186 (none -> .)
    DELIM           shift and go to state 74
    newline         shift and go to state 73

    none                           shift and go to state 75
    terms                          shift and go to state 216
    term                           shift and go to state 71
    opt_terms                      shift and go to state 217

state 189

    (98) gen_stmts -> top_stmt .

    DELIM           reduce using rule 98 (gen_stmts -> top_stmt .)
    newline         reduce using rule 98 (gen_stmts -> top_stmt .)
    KEYWORD_elsif   reduce using rule 98 (gen_stmts -> top_stmt .)
    KEYWORD_else    reduce using rule 98 (gen_stmts -> top_stmt .)
    KEYWORD_end     reduce using rule 98 (gen_stmts -> top_stmt .)


state 190

    (8) statement -> VARIABLES DOT VARIABLES OPEN_PAREN arguments . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 218


state 191

    (9) statement -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .

    DELIM           reduce using rule 9 (statement -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    newline         reduce using rule 9 (statement -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    $end            reduce using rule 9 (statement -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)


state 192

    (133) mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN . arguments CLOSE_PAREN
    (134) mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN . CLOSE_PAREN
    (54) arguments -> . VARIABLES M_12 COMMA arguments
    (55) arguments -> . CONSTANTS M_12 COMMA arguments
    (56) arguments -> . VARIABLES M_12
    (57) arguments -> . CONSTANTS M_12

    CLOSE_PAREN     shift and go to state 220
    VARIABLES       shift and go to state 152
    CONSTANTS       shift and go to state 151

    arguments                      shift and go to state 219

state 193

    (136) mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN . arguments CLOSE_PAREN
    (138) mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN . CLOSE_PAREN
    (54) arguments -> . VARIABLES M_12 COMMA arguments
    (55) arguments -> . CONSTANTS M_12 COMMA arguments
    (56) arguments -> . VARIABLES M_12
    (57) arguments -> . CONSTANTS M_12

    CLOSE_PAREN     shift and go to state 222
    VARIABLES       shift and go to state 152
    CONSTANTS       shift and go to state 151

    arguments                      shift and go to state 221

state 194

    (28) class_mlhs -> class_mlhs terms . SIGIL_DOUBLE_AT
    (183) terms -> terms . term
    (184) term -> . DELIM
    (185) term -> . newline

    SIGIL_DOUBLE_AT shift and go to state 223
    DELIM           shift and go to state 74
    newline         shift and go to state 73

    term                           shift and go to state 122

state 195

    (18) class_stmt -> class_mlhs EQUAL . class_mrhs
    (20) class_mrhs -> . literal
    (21) literal -> . INT_CONSTANTS
    (22) literal -> . FLOAT_CONSTANTS
    (23) literal -> . STRING_CONSTANTS
    (24) literal -> . BOOLEAN_CONSTANTS
    (25) literal -> . CHAR_CONSTANTS
    (26) literal -> . SIGIL_AT
    (27) literal -> . SIGIL_DOUBLE_AT

    INT_CONSTANTS   shift and go to state 226
    FLOAT_CONSTANTS shift and go to state 227
    STRING_CONSTANTS shift and go to state 229
    BOOLEAN_CONSTANTS shift and go to state 225
    CHAR_CONSTANTS  shift and go to state 232
    SIGIL_AT        shift and go to state 224
    SIGIL_DOUBLE_AT shift and go to state 228

    literal                        shift and go to state 230
    class_mrhs                     shift and go to state 231

state 196

    (16) class_stmts -> class_stmts terms . class_stmt
    (181) opt_terms -> terms .
    (183) terms -> terms . term
    (18) class_stmt -> . class_mlhs EQUAL class_mrhs
    (19) class_stmt -> . class_func
    (184) term -> . DELIM
    (185) term -> . newline
    (28) class_mlhs -> . class_mlhs terms SIGIL_DOUBLE_AT
    (29) class_mlhs -> . SIGIL_DOUBLE_AT
    (30) class_func -> . KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (31) class_func -> . KEYWORD_def fname arguments class_method_stmts opt_terms KEYWORD_end
    (32) class_func -> . KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end

    KEYWORD_end     reduce using rule 181 (opt_terms -> terms .)
    DELIM           shift and go to state 74
    newline         shift and go to state 73
    SIGIL_DOUBLE_AT shift and go to state 165
    KEYWORD_def     shift and go to state 168

    term                           shift and go to state 122
    class_mlhs                     shift and go to state 164
    class_func                     shift and go to state 166
    class_stmt                     shift and go to state 233

state 197

    (14) class_defn -> KEYWORD_class CONSTANTS newline class_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 234


state 198

    (30) class_func -> KEYWORD_def fname . OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (31) class_func -> KEYWORD_def fname . arguments class_method_stmts opt_terms KEYWORD_end
    (32) class_func -> KEYWORD_def fname . OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (54) arguments -> . VARIABLES M_12 COMMA arguments
    (55) arguments -> . CONSTANTS M_12 COMMA arguments
    (56) arguments -> . VARIABLES M_12
    (57) arguments -> . CONSTANTS M_12

    OPEN_PAREN      shift and go to state 235
    VARIABLES       shift and go to state 152
    CONSTANTS       shift and go to state 151

    arguments                      shift and go to state 236

state 199

    (89) top_stmt -> KEYWORD_for VARIABLES KEYWORD_in for_range opt_do . M_10 gen_stmts2 opt_terms KEYWORD_end M_11
    (96) M_10 -> .

    KEYWORD_if      reduce using rule 96 (M_10 -> .)
    KEYWORD_while   reduce using rule 96 (M_10 -> .)
    KEYWORD_for     reduce using rule 96 (M_10 -> .)
    KEYWORD_return  reduce using rule 96 (M_10 -> .)
    KEYWORD_puts    reduce using rule 96 (M_10 -> .)
    KEYWORD_break   reduce using rule 96 (M_10 -> .)
    KEYWORD_exit    reduce using rule 96 (M_10 -> .)
    VARIABLES       reduce using rule 96 (M_10 -> .)
    CONSTANTS       reduce using rule 96 (M_10 -> .)
    BOOLEAN_CONSTANTS reduce using rule 96 (M_10 -> .)
    OPEN_PAREN      reduce using rule 96 (M_10 -> .)
    PLUS            reduce using rule 96 (M_10 -> .)
    MINUS           reduce using rule 96 (M_10 -> .)
    BITNOT          reduce using rule 96 (M_10 -> .)
    BITCOMP         reduce using rule 96 (M_10 -> .)
    DELIM           reduce using rule 96 (M_10 -> .)
    newline         reduce using rule 96 (M_10 -> .)
    KEYWORD_end     reduce using rule 96 (M_10 -> .)
    INT_CONSTANTS   reduce using rule 96 (M_10 -> .)

    M_10                           shift and go to state 237

state 200

    (121) for_range -> for_range_variables DOUBLEDOT . for_range_variables
    (122) for_range_variables -> . INT_CONSTANTS
    (123) for_range_variables -> . VARIABLES
    (124) for_range_variables -> . CONSTANTS

    INT_CONSTANTS   shift and go to state 170
    VARIABLES       shift and go to state 171
    CONSTANTS       shift and go to state 173

    for_range_variables            shift and go to state 238

state 201

    (68) call_arg -> primary M_16 COMMA . call_arg
    (68) call_arg -> . primary M_16 COMMA call_arg
    (69) call_arg -> . primary M_16
    (70) call_arg -> . none
    (81) primary -> . INT_CONSTANTS
    (82) primary -> . BOOLEAN_CONSTANTS
    (83) primary -> . CONSTANTS
    (84) primary -> . VARIABLES
    (85) primary -> . array
    (186) none -> .
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET

    INT_CONSTANTS   shift and go to state 62
    BOOLEAN_CONSTANTS shift and go to state 61
    CONSTANTS       shift and go to state 67
    VARIABLES       shift and go to state 63
    CLOSE_PAREN     reduce using rule 186 (none -> .)

    none                           shift and go to state 143
    primary                        shift and go to state 144
    call_arg                       shift and go to state 239
    array                          shift and go to state 66

state 202

    (63) func_call_stmt -> fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17 .

    DELIM           reduce using rule 63 (func_call_stmt -> fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17 .)
    newline         reduce using rule 63 (func_call_stmt -> fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17 .)
    KEYWORD_elsif   reduce using rule 63 (func_call_stmt -> fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17 .)
    KEYWORD_else    reduce using rule 63 (func_call_stmt -> fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17 .)
    KEYWORD_end     reduce using rule 63 (func_call_stmt -> fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17 .)
    $end            reduce using rule 63 (func_call_stmt -> fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17 .)


state 203

    (11) statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 240


state 204

    (12) statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .

    DELIM           reduce using rule 12 (statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    newline         reduce using rule 12 (statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    $end            reduce using rule 12 (statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)


state 205

    (64) func_call_stmt -> mlhs EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN . M_17
    (65) M_17 -> .

    DELIM           reduce using rule 65 (M_17 -> .)
    newline         reduce using rule 65 (M_17 -> .)
    $end            reduce using rule 65 (M_17 -> .)
    KEYWORD_elsif   reduce using rule 65 (M_17 -> .)
    KEYWORD_else    reduce using rule 65 (M_17 -> .)
    KEYWORD_end     reduce using rule 65 (M_17 -> .)

    M_17                           shift and go to state 241

state 206

    (88) top_stmt -> KEYWORD_while M_7 expr3 opt_do M_8 gen_stmts2 . opt_terms KEYWORD_end M_9
    (102) gen_stmts2 -> gen_stmts2 . terms top_stmt
    (180) opt_terms -> . none
    (181) opt_terms -> . terms
    (182) terms -> . term
    (183) terms -> . terms term
    (186) none -> .
    (184) term -> . DELIM
    (185) term -> . newline

    KEYWORD_end     reduce using rule 186 (none -> .)
    DELIM           shift and go to state 74
    newline         shift and go to state 73

    none                           shift and go to state 75
    terms                          shift and go to state 242
    opt_terms                      shift and go to state 243
    term                           shift and go to state 71

state 207

    (103) gen_stmts2 -> none .
    (175) uexpr -> none .

    DELIM           reduce using rule 103 (gen_stmts2 -> none .)
    newline         reduce using rule 103 (gen_stmts2 -> none .)
    KEYWORD_end     reduce using rule 103 (gen_stmts2 -> none .)
    INT_CONSTANTS   reduce using rule 175 (uexpr -> none .)


state 208

    (101) gen_stmts2 -> top_stmt .

    DELIM           reduce using rule 101 (gen_stmts2 -> top_stmt .)
    newline         reduce using rule 101 (gen_stmts2 -> top_stmt .)
    KEYWORD_end     reduce using rule 101 (gen_stmts2 -> top_stmt .)


state 209

    (55) arguments -> CONSTANTS M_12 COMMA . arguments
    (54) arguments -> . VARIABLES M_12 COMMA arguments
    (55) arguments -> . CONSTANTS M_12 COMMA arguments
    (56) arguments -> . VARIABLES M_12
    (57) arguments -> . CONSTANTS M_12

    VARIABLES       shift and go to state 152
    CONSTANTS       shift and go to state 151

    arguments                      shift and go to state 244

state 210

    (54) arguments -> VARIABLES M_12 COMMA . arguments
    (54) arguments -> . VARIABLES M_12 COMMA arguments
    (55) arguments -> . CONSTANTS M_12 COMMA arguments
    (56) arguments -> . VARIABLES M_12
    (57) arguments -> . CONSTANTS M_12

    VARIABLES       shift and go to state 152
    CONSTANTS       shift and go to state 151

    arguments                      shift and go to state 245

state 211

    (50) func_defn -> KEYWORD_def fname OPEN_PAREN arguments M_13 CLOSE_PAREN . func_stmts opt_terms KEYWORD_end M_14
    (76) func_stmts -> . func_stmt
    (77) func_stmts -> . func_stmts terms func_stmt
    (78) func_stmts -> . none
    (79) func_stmt -> . top_stmt
    (186) none -> .
    (86) top_stmt -> . stmt
    (87) top_stmt -> . KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6
    (88) top_stmt -> . KEYWORD_while M_7 expr3 opt_do M_8 gen_stmts2 opt_terms KEYWORD_end M_9
    (89) top_stmt -> . KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts2 opt_terms KEYWORD_end M_11
    (104) stmt -> . expr
    (105) stmt -> . expr1
    (106) stmt -> . puts_stmt
    (107) stmt -> . loop_stmt
    (108) stmt -> . exit_stmt
    (109) stmt -> . func_call_stmt
    (110) stmt -> . KEYWORD_return func_ret_arg
    (125) expr -> . mlhs EQUAL mrhs
    (140) expr1 -> . expr3
    (74) puts_stmt -> . KEYWORD_puts mrhs
    (75) puts_stmt -> . KEYWORD_puts expr
    (72) loop_stmt -> . KEYWORD_break
    (73) exit_stmt -> . KEYWORD_exit
    (63) func_call_stmt -> . fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (64) func_call_stmt -> . mlhs EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (126) mlhs -> . VARIABLES
    (127) mlhs -> . CONSTANTS
    (128) mlhs -> . array
    (141) expr3 -> . expr3 LOGICALOR expr4
    (142) expr3 -> . expr4
    (66) fname2 -> . VARIABLES
    (67) fname2 -> . CONSTANTS
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (143) expr4 -> . expr4 LOGICALAND expr5
    (144) expr4 -> . expr5
    (145) expr5 -> . expr6 DOUBLEEQUAL expr6
    (146) expr5 -> . expr6 NOTEQUAL expr6
    (147) expr5 -> . expr6
    (148) expr6 -> . expr7 LESSEQUAL expr7
    (149) expr6 -> . expr7 LESS expr7
    (150) expr6 -> . expr7 GREATER expr7
    (151) expr6 -> . expr7 GREATEREQUAL expr7
    (152) expr6 -> . expr7
    (153) expr6 -> . BOOLEAN_CONSTANTS
    (154) expr7 -> . expr7 BITXOR expr8
    (155) expr7 -> . expr7 PIPE expr8
    (156) expr7 -> . expr8
    (157) expr8 -> . expr8 BITAND expr9
    (158) expr8 -> . expr9
    (159) expr9 -> . expr9 SHIFTL expr10
    (160) expr9 -> . expr9 SHIFTR expr10
    (161) expr9 -> . expr10
    (162) expr10 -> . expr10 PLUS expr11
    (163) expr10 -> . expr10 MINUS expr11
    (164) expr10 -> . expr11
    (165) expr11 -> . expr11 MULTIPLY expr13
    (166) expr11 -> . expr11 DIV expr13
    (167) expr11 -> . expr11 MOD expr13
    (168) expr11 -> . expr13
    (169) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (170) expr13 -> . uexpr INT_CONSTANTS
    (171) expr13 -> . CONSTANTS
    (172) expr13 -> . VARIABLES
    (173) expr13 -> . array
    (175) uexpr -> . none
    (176) uexpr -> . PLUS
    (177) uexpr -> . MINUS
    (178) uexpr -> . BITNOT
    (179) uexpr -> . BITCOMP

    DELIM           reduce using rule 186 (none -> .)
    newline         reduce using rule 186 (none -> .)
    KEYWORD_end     reduce using rule 186 (none -> .)
    INT_CONSTANTS   reduce using rule 186 (none -> .)
    KEYWORD_if      shift and go to state 21
    KEYWORD_while   shift and go to state 3
    KEYWORD_for     shift and go to state 44
    KEYWORD_return  shift and go to state 14
    KEYWORD_puts    shift and go to state 27
    KEYWORD_break   shift and go to state 41
    KEYWORD_exit    shift and go to state 18
    VARIABLES       shift and go to state 186
    CONSTANTS       shift and go to state 185
    BOOLEAN_CONSTANTS shift and go to state 9
    OPEN_PAREN      shift and go to state 24
    PLUS            shift and go to state 5
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 33
    BITCOMP         shift and go to state 23

    func_stmt                      shift and go to state 215
    mlhs                           shift and go to state 1
    fname2                         shift and go to state 45
    func_stmts                     shift and go to state 246
    expr11                         shift and go to state 12
    expr13                         shift and go to state 13
    array                          shift and go to state 20
    expr3                          shift and go to state 34
    expr1                          shift and go to state 35
    expr6                          shift and go to state 36
    expr5                          shift and go to state 38
    func_call_stmt                 shift and go to state 26
    expr7                          shift and go to state 6
    expr8                          shift and go to state 39
    expr9                          shift and go to state 40
    expr4                          shift and go to state 37
    puts_stmt                      shift and go to state 15
    exit_stmt                      shift and go to state 42
    stmt                           shift and go to state 16
    loop_stmt                      shift and go to state 7
    uexpr                          shift and go to state 8
    none                           shift and go to state 214
    expr                           shift and go to state 29
    expr10                         shift and go to state 11
    top_stmt                       shift and go to state 213

state 212

    (51) func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN M_18 func_stmts . opt_terms KEYWORD_end M_15
    (77) func_stmts -> func_stmts . terms func_stmt
    (180) opt_terms -> . none
    (181) opt_terms -> . terms
    (182) terms -> . term
    (183) terms -> . terms term
    (186) none -> .
    (184) term -> . DELIM
    (185) term -> . newline

    KEYWORD_end     reduce using rule 186 (none -> .)
    DELIM           shift and go to state 74
    newline         shift and go to state 73

    none                           shift and go to state 75
    terms                          shift and go to state 247
    term                           shift and go to state 71
    opt_terms                      shift and go to state 248

state 213

    (79) func_stmt -> top_stmt .

    DELIM           reduce using rule 79 (func_stmt -> top_stmt .)
    newline         reduce using rule 79 (func_stmt -> top_stmt .)
    KEYWORD_end     reduce using rule 79 (func_stmt -> top_stmt .)


state 214

    (78) func_stmts -> none .
    (175) uexpr -> none .

    DELIM           reduce using rule 78 (func_stmts -> none .)
    newline         reduce using rule 78 (func_stmts -> none .)
    KEYWORD_end     reduce using rule 78 (func_stmts -> none .)
    INT_CONSTANTS   reduce using rule 175 (uexpr -> none .)


state 215

    (76) func_stmts -> func_stmt .

    DELIM           reduce using rule 76 (func_stmts -> func_stmt .)
    newline         reduce using rule 76 (func_stmts -> func_stmt .)
    KEYWORD_end     reduce using rule 76 (func_stmts -> func_stmt .)


state 216

    (99) gen_stmts -> gen_stmts terms . top_stmt
    (181) opt_terms -> terms .
    (183) terms -> terms . term
    (86) top_stmt -> . stmt
    (87) top_stmt -> . KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6
    (88) top_stmt -> . KEYWORD_while M_7 expr3 opt_do M_8 gen_stmts2 opt_terms KEYWORD_end M_9
    (89) top_stmt -> . KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts2 opt_terms KEYWORD_end M_11
    (184) term -> . DELIM
    (185) term -> . newline
    (104) stmt -> . expr
    (105) stmt -> . expr1
    (106) stmt -> . puts_stmt
    (107) stmt -> . loop_stmt
    (108) stmt -> . exit_stmt
    (109) stmt -> . func_call_stmt
    (110) stmt -> . KEYWORD_return func_ret_arg
    (125) expr -> . mlhs EQUAL mrhs
    (140) expr1 -> . expr3
    (74) puts_stmt -> . KEYWORD_puts mrhs
    (75) puts_stmt -> . KEYWORD_puts expr
    (72) loop_stmt -> . KEYWORD_break
    (73) exit_stmt -> . KEYWORD_exit
    (63) func_call_stmt -> . fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (64) func_call_stmt -> . mlhs EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (126) mlhs -> . VARIABLES
    (127) mlhs -> . CONSTANTS
    (128) mlhs -> . array
    (141) expr3 -> . expr3 LOGICALOR expr4
    (142) expr3 -> . expr4
    (66) fname2 -> . VARIABLES
    (67) fname2 -> . CONSTANTS
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (143) expr4 -> . expr4 LOGICALAND expr5
    (144) expr4 -> . expr5
    (145) expr5 -> . expr6 DOUBLEEQUAL expr6
    (146) expr5 -> . expr6 NOTEQUAL expr6
    (147) expr5 -> . expr6
    (148) expr6 -> . expr7 LESSEQUAL expr7
    (149) expr6 -> . expr7 LESS expr7
    (150) expr6 -> . expr7 GREATER expr7
    (151) expr6 -> . expr7 GREATEREQUAL expr7
    (152) expr6 -> . expr7
    (153) expr6 -> . BOOLEAN_CONSTANTS
    (154) expr7 -> . expr7 BITXOR expr8
    (155) expr7 -> . expr7 PIPE expr8
    (156) expr7 -> . expr8
    (157) expr8 -> . expr8 BITAND expr9
    (158) expr8 -> . expr9
    (159) expr9 -> . expr9 SHIFTL expr10
    (160) expr9 -> . expr9 SHIFTR expr10
    (161) expr9 -> . expr10
    (162) expr10 -> . expr10 PLUS expr11
    (163) expr10 -> . expr10 MINUS expr11
    (164) expr10 -> . expr11
    (165) expr11 -> . expr11 MULTIPLY expr13
    (166) expr11 -> . expr11 DIV expr13
    (167) expr11 -> . expr11 MOD expr13
    (168) expr11 -> . expr13
    (169) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (170) expr13 -> . uexpr INT_CONSTANTS
    (171) expr13 -> . CONSTANTS
    (172) expr13 -> . VARIABLES
    (173) expr13 -> . array
    (175) uexpr -> . none
    (176) uexpr -> . PLUS
    (177) uexpr -> . MINUS
    (178) uexpr -> . BITNOT
    (179) uexpr -> . BITCOMP
    (186) none -> .

    KEYWORD_elsif   reduce using rule 181 (opt_terms -> terms .)
    KEYWORD_else    reduce using rule 181 (opt_terms -> terms .)
    KEYWORD_end     reduce using rule 181 (opt_terms -> terms .)
    KEYWORD_if      shift and go to state 21
    KEYWORD_while   shift and go to state 3
    KEYWORD_for     shift and go to state 44
    DELIM           shift and go to state 74
    newline         shift and go to state 73
    KEYWORD_return  shift and go to state 14
    KEYWORD_puts    shift and go to state 27
    KEYWORD_break   shift and go to state 41
    KEYWORD_exit    shift and go to state 18
    VARIABLES       shift and go to state 186
    CONSTANTS       shift and go to state 185
    BOOLEAN_CONSTANTS shift and go to state 9
    OPEN_PAREN      shift and go to state 24
    PLUS            shift and go to state 5
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 33
    BITCOMP         shift and go to state 23
    INT_CONSTANTS   reduce using rule 186 (none -> .)

    mlhs                           shift and go to state 1
    fname2                         shift and go to state 45
    expr10                         shift and go to state 11
    expr11                         shift and go to state 12
    expr13                         shift and go to state 13
    array                          shift and go to state 20
    expr3                          shift and go to state 34
    expr1                          shift and go to state 35
    expr6                          shift and go to state 36
    expr7                          shift and go to state 6
    puts_stmt                      shift and go to state 15
    expr5                          shift and go to state 38
    func_call_stmt                 shift and go to state 26
    expr8                          shift and go to state 39
    expr9                          shift and go to state 40
    expr4                          shift and go to state 37
    exit_stmt                      shift and go to state 42
    none                           shift and go to state 28
    stmt                           shift and go to state 16
    loop_stmt                      shift and go to state 7
    uexpr                          shift and go to state 8
    term                           shift and go to state 122
    expr                           shift and go to state 29
    top_stmt                       shift and go to state 249

state 217

    (87) top_stmt -> KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms . M_2 elsif_tail opt_else_stmt KEYWORD_end M_6
    (91) M_2 -> .

    KEYWORD_elsif   reduce using rule 91 (M_2 -> .)
    KEYWORD_else    reduce using rule 91 (M_2 -> .)
    KEYWORD_end     reduce using rule 91 (M_2 -> .)

    M_2                            shift and go to state 250

state 218

    (8) statement -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .

    DELIM           reduce using rule 8 (statement -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    newline         reduce using rule 8 (statement -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    $end            reduce using rule 8 (statement -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)


state 219

    (133) mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 251


state 220

    (134) mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .

    DELIM           reduce using rule 134 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    newline         reduce using rule 134 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    $end            reduce using rule 134 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    KEYWORD_elsif   reduce using rule 134 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    KEYWORD_else    reduce using rule 134 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)
    KEYWORD_end     reduce using rule 134 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN CLOSE_PAREN .)


state 221

    (136) mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 252


state 222

    (138) mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .

    DELIM           reduce using rule 138 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    newline         reduce using rule 138 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    $end            reduce using rule 138 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    KEYWORD_elsif   reduce using rule 138 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    KEYWORD_else    reduce using rule 138 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)
    KEYWORD_end     reduce using rule 138 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN CLOSE_PAREN .)


state 223

    (28) class_mlhs -> class_mlhs terms SIGIL_DOUBLE_AT .

    EQUAL           reduce using rule 28 (class_mlhs -> class_mlhs terms SIGIL_DOUBLE_AT .)
    DELIM           reduce using rule 28 (class_mlhs -> class_mlhs terms SIGIL_DOUBLE_AT .)
    newline         reduce using rule 28 (class_mlhs -> class_mlhs terms SIGIL_DOUBLE_AT .)


state 224

    (26) literal -> SIGIL_AT .

    COMMA           reduce using rule 26 (literal -> SIGIL_AT .)
    DELIM           reduce using rule 26 (literal -> SIGIL_AT .)
    newline         reduce using rule 26 (literal -> SIGIL_AT .)
    KEYWORD_end     reduce using rule 26 (literal -> SIGIL_AT .)


state 225

    (24) literal -> BOOLEAN_CONSTANTS .

    COMMA           reduce using rule 24 (literal -> BOOLEAN_CONSTANTS .)
    DELIM           reduce using rule 24 (literal -> BOOLEAN_CONSTANTS .)
    newline         reduce using rule 24 (literal -> BOOLEAN_CONSTANTS .)
    KEYWORD_end     reduce using rule 24 (literal -> BOOLEAN_CONSTANTS .)


state 226

    (21) literal -> INT_CONSTANTS .

    COMMA           reduce using rule 21 (literal -> INT_CONSTANTS .)
    DELIM           reduce using rule 21 (literal -> INT_CONSTANTS .)
    newline         reduce using rule 21 (literal -> INT_CONSTANTS .)
    KEYWORD_end     reduce using rule 21 (literal -> INT_CONSTANTS .)


state 227

    (22) literal -> FLOAT_CONSTANTS .

    COMMA           reduce using rule 22 (literal -> FLOAT_CONSTANTS .)
    DELIM           reduce using rule 22 (literal -> FLOAT_CONSTANTS .)
    newline         reduce using rule 22 (literal -> FLOAT_CONSTANTS .)
    KEYWORD_end     reduce using rule 22 (literal -> FLOAT_CONSTANTS .)


state 228

    (27) literal -> SIGIL_DOUBLE_AT .

    COMMA           reduce using rule 27 (literal -> SIGIL_DOUBLE_AT .)
    DELIM           reduce using rule 27 (literal -> SIGIL_DOUBLE_AT .)
    newline         reduce using rule 27 (literal -> SIGIL_DOUBLE_AT .)
    KEYWORD_end     reduce using rule 27 (literal -> SIGIL_DOUBLE_AT .)


state 229

    (23) literal -> STRING_CONSTANTS .

    COMMA           reduce using rule 23 (literal -> STRING_CONSTANTS .)
    DELIM           reduce using rule 23 (literal -> STRING_CONSTANTS .)
    newline         reduce using rule 23 (literal -> STRING_CONSTANTS .)
    KEYWORD_end     reduce using rule 23 (literal -> STRING_CONSTANTS .)


state 230

    (20) class_mrhs -> literal .

    DELIM           reduce using rule 20 (class_mrhs -> literal .)
    newline         reduce using rule 20 (class_mrhs -> literal .)
    KEYWORD_end     reduce using rule 20 (class_mrhs -> literal .)


state 231

    (18) class_stmt -> class_mlhs EQUAL class_mrhs .

    DELIM           reduce using rule 18 (class_stmt -> class_mlhs EQUAL class_mrhs .)
    newline         reduce using rule 18 (class_stmt -> class_mlhs EQUAL class_mrhs .)
    KEYWORD_end     reduce using rule 18 (class_stmt -> class_mlhs EQUAL class_mrhs .)


state 232

    (25) literal -> CHAR_CONSTANTS .

    COMMA           reduce using rule 25 (literal -> CHAR_CONSTANTS .)
    DELIM           reduce using rule 25 (literal -> CHAR_CONSTANTS .)
    newline         reduce using rule 25 (literal -> CHAR_CONSTANTS .)
    KEYWORD_end     reduce using rule 25 (literal -> CHAR_CONSTANTS .)


state 233

    (16) class_stmts -> class_stmts terms class_stmt .

    DELIM           reduce using rule 16 (class_stmts -> class_stmts terms class_stmt .)
    newline         reduce using rule 16 (class_stmts -> class_stmts terms class_stmt .)
    KEYWORD_end     reduce using rule 16 (class_stmts -> class_stmts terms class_stmt .)


state 234

    (14) class_defn -> KEYWORD_class CONSTANTS newline class_stmts opt_terms KEYWORD_end .

    DELIM           reduce using rule 14 (class_defn -> KEYWORD_class CONSTANTS newline class_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 14 (class_defn -> KEYWORD_class CONSTANTS newline class_stmts opt_terms KEYWORD_end .)
    $end            reduce using rule 14 (class_defn -> KEYWORD_class CONSTANTS newline class_stmts opt_terms KEYWORD_end .)


state 235

    (30) class_func -> KEYWORD_def fname OPEN_PAREN . arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (32) class_func -> KEYWORD_def fname OPEN_PAREN . CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end
    (54) arguments -> . VARIABLES M_12 COMMA arguments
    (55) arguments -> . CONSTANTS M_12 COMMA arguments
    (56) arguments -> . VARIABLES M_12
    (57) arguments -> . CONSTANTS M_12

    CLOSE_PAREN     shift and go to state 254
    VARIABLES       shift and go to state 152
    CONSTANTS       shift and go to state 151

    arguments                      shift and go to state 253

state 236

    (31) class_func -> KEYWORD_def fname arguments . class_method_stmts opt_terms KEYWORD_end
    (33) class_method_stmts -> . class_method_stmt
    (34) class_method_stmts -> . class_method_stmts terms class_method_stmt
    (35) class_method_stmts -> . none
    (36) class_method_stmt -> . class_method_mlhs EQUAL class_method_mrhs
    (37) class_method_stmt -> . KEYWORD_return class_method_ret_arg
    (38) class_method_stmt -> . puts_stmt
    (186) none -> .
    (39) class_method_mlhs -> . class_method_mlhs terms SIGIL_AT
    (40) class_method_mlhs -> . SIGIL_AT
    (41) class_method_mlhs -> . SIGIL_DOUBLE_AT
    (74) puts_stmt -> . KEYWORD_puts mrhs
    (75) puts_stmt -> . KEYWORD_puts expr

    KEYWORD_return  shift and go to state 256
    DELIM           reduce using rule 186 (none -> .)
    newline         reduce using rule 186 (none -> .)
    KEYWORD_end     reduce using rule 186 (none -> .)
    SIGIL_AT        shift and go to state 261
    SIGIL_DOUBLE_AT shift and go to state 259
    KEYWORD_puts    shift and go to state 27

    class_method_stmt              shift and go to state 255
    none                           shift and go to state 257
    class_method_mlhs              shift and go to state 258
    puts_stmt                      shift and go to state 262
    class_method_stmts             shift and go to state 260

state 237

    (89) top_stmt -> KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 . gen_stmts2 opt_terms KEYWORD_end M_11
    (101) gen_stmts2 -> . top_stmt
    (102) gen_stmts2 -> . gen_stmts2 terms top_stmt
    (103) gen_stmts2 -> . none
    (86) top_stmt -> . stmt
    (87) top_stmt -> . KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6
    (88) top_stmt -> . KEYWORD_while M_7 expr3 opt_do M_8 gen_stmts2 opt_terms KEYWORD_end M_9
    (89) top_stmt -> . KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts2 opt_terms KEYWORD_end M_11
    (186) none -> .
    (104) stmt -> . expr
    (105) stmt -> . expr1
    (106) stmt -> . puts_stmt
    (107) stmt -> . loop_stmt
    (108) stmt -> . exit_stmt
    (109) stmt -> . func_call_stmt
    (110) stmt -> . KEYWORD_return func_ret_arg
    (125) expr -> . mlhs EQUAL mrhs
    (140) expr1 -> . expr3
    (74) puts_stmt -> . KEYWORD_puts mrhs
    (75) puts_stmt -> . KEYWORD_puts expr
    (72) loop_stmt -> . KEYWORD_break
    (73) exit_stmt -> . KEYWORD_exit
    (63) func_call_stmt -> . fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (64) func_call_stmt -> . mlhs EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (126) mlhs -> . VARIABLES
    (127) mlhs -> . CONSTANTS
    (128) mlhs -> . array
    (141) expr3 -> . expr3 LOGICALOR expr4
    (142) expr3 -> . expr4
    (66) fname2 -> . VARIABLES
    (67) fname2 -> . CONSTANTS
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (143) expr4 -> . expr4 LOGICALAND expr5
    (144) expr4 -> . expr5
    (145) expr5 -> . expr6 DOUBLEEQUAL expr6
    (146) expr5 -> . expr6 NOTEQUAL expr6
    (147) expr5 -> . expr6
    (148) expr6 -> . expr7 LESSEQUAL expr7
    (149) expr6 -> . expr7 LESS expr7
    (150) expr6 -> . expr7 GREATER expr7
    (151) expr6 -> . expr7 GREATEREQUAL expr7
    (152) expr6 -> . expr7
    (153) expr6 -> . BOOLEAN_CONSTANTS
    (154) expr7 -> . expr7 BITXOR expr8
    (155) expr7 -> . expr7 PIPE expr8
    (156) expr7 -> . expr8
    (157) expr8 -> . expr8 BITAND expr9
    (158) expr8 -> . expr9
    (159) expr9 -> . expr9 SHIFTL expr10
    (160) expr9 -> . expr9 SHIFTR expr10
    (161) expr9 -> . expr10
    (162) expr10 -> . expr10 PLUS expr11
    (163) expr10 -> . expr10 MINUS expr11
    (164) expr10 -> . expr11
    (165) expr11 -> . expr11 MULTIPLY expr13
    (166) expr11 -> . expr11 DIV expr13
    (167) expr11 -> . expr11 MOD expr13
    (168) expr11 -> . expr13
    (169) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (170) expr13 -> . uexpr INT_CONSTANTS
    (171) expr13 -> . CONSTANTS
    (172) expr13 -> . VARIABLES
    (173) expr13 -> . array
    (175) uexpr -> . none
    (176) uexpr -> . PLUS
    (177) uexpr -> . MINUS
    (178) uexpr -> . BITNOT
    (179) uexpr -> . BITCOMP

    KEYWORD_if      shift and go to state 21
    KEYWORD_while   shift and go to state 3
    KEYWORD_for     shift and go to state 44
    DELIM           reduce using rule 186 (none -> .)
    newline         reduce using rule 186 (none -> .)
    KEYWORD_end     reduce using rule 186 (none -> .)
    INT_CONSTANTS   reduce using rule 186 (none -> .)
    KEYWORD_return  shift and go to state 14
    KEYWORD_puts    shift and go to state 27
    KEYWORD_break   shift and go to state 41
    KEYWORD_exit    shift and go to state 18
    VARIABLES       shift and go to state 186
    CONSTANTS       shift and go to state 185
    BOOLEAN_CONSTANTS shift and go to state 9
    OPEN_PAREN      shift and go to state 24
    PLUS            shift and go to state 5
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 33
    BITCOMP         shift and go to state 23

    gen_stmts2                     shift and go to state 263
    mlhs                           shift and go to state 1
    fname2                         shift and go to state 45
    expr10                         shift and go to state 11
    expr11                         shift and go to state 12
    expr13                         shift and go to state 13
    array                          shift and go to state 20
    expr3                          shift and go to state 34
    expr1                          shift and go to state 35
    expr6                          shift and go to state 36
    expr7                          shift and go to state 6
    puts_stmt                      shift and go to state 15
    expr5                          shift and go to state 38
    func_call_stmt                 shift and go to state 26
    expr8                          shift and go to state 39
    expr9                          shift and go to state 40
    expr4                          shift and go to state 37
    exit_stmt                      shift and go to state 42
    stmt                           shift and go to state 16
    loop_stmt                      shift and go to state 7
    uexpr                          shift and go to state 8
    none                           shift and go to state 207
    expr                           shift and go to state 29
    top_stmt                       shift and go to state 208

state 238

    (121) for_range -> for_range_variables DOUBLEDOT for_range_variables .

    KEYWORD_do      reduce using rule 121 (for_range -> for_range_variables DOUBLEDOT for_range_variables .)
    newline         reduce using rule 121 (for_range -> for_range_variables DOUBLEDOT for_range_variables .)


state 239

    (68) call_arg -> primary M_16 COMMA call_arg .

    CLOSE_PAREN     reduce using rule 68 (call_arg -> primary M_16 COMMA call_arg .)


state 240

    (11) statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .

    DELIM           reduce using rule 11 (statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    newline         reduce using rule 11 (statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    $end            reduce using rule 11 (statement -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)


state 241

    (64) func_call_stmt -> mlhs EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17 .

    DELIM           reduce using rule 64 (func_call_stmt -> mlhs EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17 .)
    newline         reduce using rule 64 (func_call_stmt -> mlhs EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17 .)
    KEYWORD_elsif   reduce using rule 64 (func_call_stmt -> mlhs EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17 .)
    KEYWORD_else    reduce using rule 64 (func_call_stmt -> mlhs EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17 .)
    KEYWORD_end     reduce using rule 64 (func_call_stmt -> mlhs EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17 .)
    $end            reduce using rule 64 (func_call_stmt -> mlhs EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17 .)


state 242

    (102) gen_stmts2 -> gen_stmts2 terms . top_stmt
    (181) opt_terms -> terms .
    (183) terms -> terms . term
    (86) top_stmt -> . stmt
    (87) top_stmt -> . KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6
    (88) top_stmt -> . KEYWORD_while M_7 expr3 opt_do M_8 gen_stmts2 opt_terms KEYWORD_end M_9
    (89) top_stmt -> . KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts2 opt_terms KEYWORD_end M_11
    (184) term -> . DELIM
    (185) term -> . newline
    (104) stmt -> . expr
    (105) stmt -> . expr1
    (106) stmt -> . puts_stmt
    (107) stmt -> . loop_stmt
    (108) stmt -> . exit_stmt
    (109) stmt -> . func_call_stmt
    (110) stmt -> . KEYWORD_return func_ret_arg
    (125) expr -> . mlhs EQUAL mrhs
    (140) expr1 -> . expr3
    (74) puts_stmt -> . KEYWORD_puts mrhs
    (75) puts_stmt -> . KEYWORD_puts expr
    (72) loop_stmt -> . KEYWORD_break
    (73) exit_stmt -> . KEYWORD_exit
    (63) func_call_stmt -> . fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (64) func_call_stmt -> . mlhs EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (126) mlhs -> . VARIABLES
    (127) mlhs -> . CONSTANTS
    (128) mlhs -> . array
    (141) expr3 -> . expr3 LOGICALOR expr4
    (142) expr3 -> . expr4
    (66) fname2 -> . VARIABLES
    (67) fname2 -> . CONSTANTS
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (143) expr4 -> . expr4 LOGICALAND expr5
    (144) expr4 -> . expr5
    (145) expr5 -> . expr6 DOUBLEEQUAL expr6
    (146) expr5 -> . expr6 NOTEQUAL expr6
    (147) expr5 -> . expr6
    (148) expr6 -> . expr7 LESSEQUAL expr7
    (149) expr6 -> . expr7 LESS expr7
    (150) expr6 -> . expr7 GREATER expr7
    (151) expr6 -> . expr7 GREATEREQUAL expr7
    (152) expr6 -> . expr7
    (153) expr6 -> . BOOLEAN_CONSTANTS
    (154) expr7 -> . expr7 BITXOR expr8
    (155) expr7 -> . expr7 PIPE expr8
    (156) expr7 -> . expr8
    (157) expr8 -> . expr8 BITAND expr9
    (158) expr8 -> . expr9
    (159) expr9 -> . expr9 SHIFTL expr10
    (160) expr9 -> . expr9 SHIFTR expr10
    (161) expr9 -> . expr10
    (162) expr10 -> . expr10 PLUS expr11
    (163) expr10 -> . expr10 MINUS expr11
    (164) expr10 -> . expr11
    (165) expr11 -> . expr11 MULTIPLY expr13
    (166) expr11 -> . expr11 DIV expr13
    (167) expr11 -> . expr11 MOD expr13
    (168) expr11 -> . expr13
    (169) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (170) expr13 -> . uexpr INT_CONSTANTS
    (171) expr13 -> . CONSTANTS
    (172) expr13 -> . VARIABLES
    (173) expr13 -> . array
    (175) uexpr -> . none
    (176) uexpr -> . PLUS
    (177) uexpr -> . MINUS
    (178) uexpr -> . BITNOT
    (179) uexpr -> . BITCOMP
    (186) none -> .

    KEYWORD_end     reduce using rule 181 (opt_terms -> terms .)
    KEYWORD_if      shift and go to state 21
    KEYWORD_while   shift and go to state 3
    KEYWORD_for     shift and go to state 44
    DELIM           shift and go to state 74
    newline         shift and go to state 73
    KEYWORD_return  shift and go to state 14
    KEYWORD_puts    shift and go to state 27
    KEYWORD_break   shift and go to state 41
    KEYWORD_exit    shift and go to state 18
    VARIABLES       shift and go to state 186
    CONSTANTS       shift and go to state 185
    BOOLEAN_CONSTANTS shift and go to state 9
    OPEN_PAREN      shift and go to state 24
    PLUS            shift and go to state 5
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 33
    BITCOMP         shift and go to state 23
    INT_CONSTANTS   reduce using rule 186 (none -> .)

    mlhs                           shift and go to state 1
    fname2                         shift and go to state 45
    expr10                         shift and go to state 11
    expr11                         shift and go to state 12
    expr13                         shift and go to state 13
    array                          shift and go to state 20
    expr3                          shift and go to state 34
    expr1                          shift and go to state 35
    expr6                          shift and go to state 36
    expr7                          shift and go to state 6
    puts_stmt                      shift and go to state 15
    expr5                          shift and go to state 38
    func_call_stmt                 shift and go to state 26
    expr8                          shift and go to state 39
    expr9                          shift and go to state 40
    expr4                          shift and go to state 37
    exit_stmt                      shift and go to state 42
    none                           shift and go to state 28
    stmt                           shift and go to state 16
    loop_stmt                      shift and go to state 7
    uexpr                          shift and go to state 8
    term                           shift and go to state 122
    expr                           shift and go to state 29
    top_stmt                       shift and go to state 264

state 243

    (88) top_stmt -> KEYWORD_while M_7 expr3 opt_do M_8 gen_stmts2 opt_terms . KEYWORD_end M_9

    KEYWORD_end     shift and go to state 265


state 244

    (55) arguments -> CONSTANTS M_12 COMMA arguments .

    CLOSE_PAREN     reduce using rule 55 (arguments -> CONSTANTS M_12 COMMA arguments .)
    DELIM           reduce using rule 55 (arguments -> CONSTANTS M_12 COMMA arguments .)
    newline         reduce using rule 55 (arguments -> CONSTANTS M_12 COMMA arguments .)
    $end            reduce using rule 55 (arguments -> CONSTANTS M_12 COMMA arguments .)
    KEYWORD_return  reduce using rule 55 (arguments -> CONSTANTS M_12 COMMA arguments .)
    SIGIL_AT        reduce using rule 55 (arguments -> CONSTANTS M_12 COMMA arguments .)
    SIGIL_DOUBLE_AT reduce using rule 55 (arguments -> CONSTANTS M_12 COMMA arguments .)
    KEYWORD_puts    reduce using rule 55 (arguments -> CONSTANTS M_12 COMMA arguments .)
    KEYWORD_end     reduce using rule 55 (arguments -> CONSTANTS M_12 COMMA arguments .)


state 245

    (54) arguments -> VARIABLES M_12 COMMA arguments .

    CLOSE_PAREN     reduce using rule 54 (arguments -> VARIABLES M_12 COMMA arguments .)
    DELIM           reduce using rule 54 (arguments -> VARIABLES M_12 COMMA arguments .)
    newline         reduce using rule 54 (arguments -> VARIABLES M_12 COMMA arguments .)
    $end            reduce using rule 54 (arguments -> VARIABLES M_12 COMMA arguments .)
    KEYWORD_return  reduce using rule 54 (arguments -> VARIABLES M_12 COMMA arguments .)
    SIGIL_AT        reduce using rule 54 (arguments -> VARIABLES M_12 COMMA arguments .)
    SIGIL_DOUBLE_AT reduce using rule 54 (arguments -> VARIABLES M_12 COMMA arguments .)
    KEYWORD_puts    reduce using rule 54 (arguments -> VARIABLES M_12 COMMA arguments .)
    KEYWORD_end     reduce using rule 54 (arguments -> VARIABLES M_12 COMMA arguments .)


state 246

    (50) func_defn -> KEYWORD_def fname OPEN_PAREN arguments M_13 CLOSE_PAREN func_stmts . opt_terms KEYWORD_end M_14
    (77) func_stmts -> func_stmts . terms func_stmt
    (180) opt_terms -> . none
    (181) opt_terms -> . terms
    (182) terms -> . term
    (183) terms -> . terms term
    (186) none -> .
    (184) term -> . DELIM
    (185) term -> . newline

    KEYWORD_end     reduce using rule 186 (none -> .)
    DELIM           shift and go to state 74
    newline         shift and go to state 73

    none                           shift and go to state 75
    terms                          shift and go to state 247
    term                           shift and go to state 71
    opt_terms                      shift and go to state 266

state 247

    (77) func_stmts -> func_stmts terms . func_stmt
    (181) opt_terms -> terms .
    (183) terms -> terms . term
    (79) func_stmt -> . top_stmt
    (184) term -> . DELIM
    (185) term -> . newline
    (86) top_stmt -> . stmt
    (87) top_stmt -> . KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6
    (88) top_stmt -> . KEYWORD_while M_7 expr3 opt_do M_8 gen_stmts2 opt_terms KEYWORD_end M_9
    (89) top_stmt -> . KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts2 opt_terms KEYWORD_end M_11
    (104) stmt -> . expr
    (105) stmt -> . expr1
    (106) stmt -> . puts_stmt
    (107) stmt -> . loop_stmt
    (108) stmt -> . exit_stmt
    (109) stmt -> . func_call_stmt
    (110) stmt -> . KEYWORD_return func_ret_arg
    (125) expr -> . mlhs EQUAL mrhs
    (140) expr1 -> . expr3
    (74) puts_stmt -> . KEYWORD_puts mrhs
    (75) puts_stmt -> . KEYWORD_puts expr
    (72) loop_stmt -> . KEYWORD_break
    (73) exit_stmt -> . KEYWORD_exit
    (63) func_call_stmt -> . fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (64) func_call_stmt -> . mlhs EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (126) mlhs -> . VARIABLES
    (127) mlhs -> . CONSTANTS
    (128) mlhs -> . array
    (141) expr3 -> . expr3 LOGICALOR expr4
    (142) expr3 -> . expr4
    (66) fname2 -> . VARIABLES
    (67) fname2 -> . CONSTANTS
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (143) expr4 -> . expr4 LOGICALAND expr5
    (144) expr4 -> . expr5
    (145) expr5 -> . expr6 DOUBLEEQUAL expr6
    (146) expr5 -> . expr6 NOTEQUAL expr6
    (147) expr5 -> . expr6
    (148) expr6 -> . expr7 LESSEQUAL expr7
    (149) expr6 -> . expr7 LESS expr7
    (150) expr6 -> . expr7 GREATER expr7
    (151) expr6 -> . expr7 GREATEREQUAL expr7
    (152) expr6 -> . expr7
    (153) expr6 -> . BOOLEAN_CONSTANTS
    (154) expr7 -> . expr7 BITXOR expr8
    (155) expr7 -> . expr7 PIPE expr8
    (156) expr7 -> . expr8
    (157) expr8 -> . expr8 BITAND expr9
    (158) expr8 -> . expr9
    (159) expr9 -> . expr9 SHIFTL expr10
    (160) expr9 -> . expr9 SHIFTR expr10
    (161) expr9 -> . expr10
    (162) expr10 -> . expr10 PLUS expr11
    (163) expr10 -> . expr10 MINUS expr11
    (164) expr10 -> . expr11
    (165) expr11 -> . expr11 MULTIPLY expr13
    (166) expr11 -> . expr11 DIV expr13
    (167) expr11 -> . expr11 MOD expr13
    (168) expr11 -> . expr13
    (169) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (170) expr13 -> . uexpr INT_CONSTANTS
    (171) expr13 -> . CONSTANTS
    (172) expr13 -> . VARIABLES
    (173) expr13 -> . array
    (175) uexpr -> . none
    (176) uexpr -> . PLUS
    (177) uexpr -> . MINUS
    (178) uexpr -> . BITNOT
    (179) uexpr -> . BITCOMP
    (186) none -> .

    KEYWORD_end     reduce using rule 181 (opt_terms -> terms .)
    DELIM           shift and go to state 74
    newline         shift and go to state 73
    KEYWORD_if      shift and go to state 21
    KEYWORD_while   shift and go to state 3
    KEYWORD_for     shift and go to state 44
    KEYWORD_return  shift and go to state 14
    KEYWORD_puts    shift and go to state 27
    KEYWORD_break   shift and go to state 41
    KEYWORD_exit    shift and go to state 18
    VARIABLES       shift and go to state 186
    CONSTANTS       shift and go to state 185
    BOOLEAN_CONSTANTS shift and go to state 9
    OPEN_PAREN      shift and go to state 24
    PLUS            shift and go to state 5
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 33
    BITCOMP         shift and go to state 23
    INT_CONSTANTS   reduce using rule 186 (none -> .)

    mlhs                           shift and go to state 1
    fname2                         shift and go to state 45
    expr11                         shift and go to state 12
    expr13                         shift and go to state 13
    array                          shift and go to state 20
    func_stmt                      shift and go to state 267
    expr3                          shift and go to state 34
    expr1                          shift and go to state 35
    expr6                          shift and go to state 36
    expr7                          shift and go to state 6
    puts_stmt                      shift and go to state 15
    expr5                          shift and go to state 38
    func_call_stmt                 shift and go to state 26
    expr8                          shift and go to state 39
    expr9                          shift and go to state 40
    expr4                          shift and go to state 37
    exit_stmt                      shift and go to state 42
    none                           shift and go to state 28
    stmt                           shift and go to state 16
    loop_stmt                      shift and go to state 7
    uexpr                          shift and go to state 8
    term                           shift and go to state 122
    expr                           shift and go to state 29
    expr10                         shift and go to state 11
    top_stmt                       shift and go to state 213

state 248

    (51) func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN M_18 func_stmts opt_terms . KEYWORD_end M_15

    KEYWORD_end     shift and go to state 268


state 249

    (99) gen_stmts -> gen_stmts terms top_stmt .

    DELIM           reduce using rule 99 (gen_stmts -> gen_stmts terms top_stmt .)
    newline         reduce using rule 99 (gen_stmts -> gen_stmts terms top_stmt .)
    KEYWORD_elsif   reduce using rule 99 (gen_stmts -> gen_stmts terms top_stmt .)
    KEYWORD_else    reduce using rule 99 (gen_stmts -> gen_stmts terms top_stmt .)
    KEYWORD_end     reduce using rule 99 (gen_stmts -> gen_stmts terms top_stmt .)


state 250

    (87) top_stmt -> KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 . elsif_tail opt_else_stmt KEYWORD_end M_6
    (113) elsif_tail -> . none
    (114) elsif_tail -> . KEYWORD_elsif expr3 opt_then M_3 gen_stmts opt_terms M_4 elsif_tail
    (186) none -> .

    KEYWORD_elsif   shift and go to state 270
    KEYWORD_else    reduce using rule 186 (none -> .)
    KEYWORD_end     reduce using rule 186 (none -> .)

    none                           shift and go to state 269
    elsif_tail                     shift and go to state 271

state 251

    (133) mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .

    DELIM           reduce using rule 133 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    newline         reduce using rule 133 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    $end            reduce using rule 133 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    KEYWORD_elsif   reduce using rule 133 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    KEYWORD_else    reduce using rule 133 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)
    KEYWORD_end     reduce using rule 133 (mrhs -> VARIABLES DOT VARIABLES OPEN_PAREN arguments CLOSE_PAREN .)


state 252

    (136) mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .

    DELIM           reduce using rule 136 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    newline         reduce using rule 136 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    $end            reduce using rule 136 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    KEYWORD_elsif   reduce using rule 136 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    KEYWORD_else    reduce using rule 136 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)
    KEYWORD_end     reduce using rule 136 (mrhs -> CONSTANTS DOT KEYWORD_new OPEN_PAREN arguments CLOSE_PAREN .)


state 253

    (30) class_func -> KEYWORD_def fname OPEN_PAREN arguments . CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end

    CLOSE_PAREN     shift and go to state 272


state 254

    (32) class_func -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN . class_method_stmts opt_terms KEYWORD_end
    (33) class_method_stmts -> . class_method_stmt
    (34) class_method_stmts -> . class_method_stmts terms class_method_stmt
    (35) class_method_stmts -> . none
    (36) class_method_stmt -> . class_method_mlhs EQUAL class_method_mrhs
    (37) class_method_stmt -> . KEYWORD_return class_method_ret_arg
    (38) class_method_stmt -> . puts_stmt
    (186) none -> .
    (39) class_method_mlhs -> . class_method_mlhs terms SIGIL_AT
    (40) class_method_mlhs -> . SIGIL_AT
    (41) class_method_mlhs -> . SIGIL_DOUBLE_AT
    (74) puts_stmt -> . KEYWORD_puts mrhs
    (75) puts_stmt -> . KEYWORD_puts expr

    KEYWORD_return  shift and go to state 256
    DELIM           reduce using rule 186 (none -> .)
    newline         reduce using rule 186 (none -> .)
    KEYWORD_end     reduce using rule 186 (none -> .)
    SIGIL_AT        shift and go to state 261
    SIGIL_DOUBLE_AT shift and go to state 259
    KEYWORD_puts    shift and go to state 27

    class_method_stmt              shift and go to state 255
    none                           shift and go to state 257
    class_method_mlhs              shift and go to state 258
    puts_stmt                      shift and go to state 262
    class_method_stmts             shift and go to state 273

state 255

    (33) class_method_stmts -> class_method_stmt .

    DELIM           reduce using rule 33 (class_method_stmts -> class_method_stmt .)
    newline         reduce using rule 33 (class_method_stmts -> class_method_stmt .)
    KEYWORD_end     reduce using rule 33 (class_method_stmts -> class_method_stmt .)


state 256

    (37) class_method_stmt -> KEYWORD_return . class_method_ret_arg
    (44) class_method_ret_arg -> . class_method_arg_expr
    (45) class_method_ret_arg -> . literal
    (46) class_method_ret_arg -> . class_method_ret_arg COMMA class_method_arg_expr
    (47) class_method_ret_arg -> . class_method_ret_arg COMMA literal
    (48) class_method_arg_expr -> . SIGIL_AT EQUAL literal
    (49) class_method_arg_expr -> . SIGIL_DOUBLE_AT EQUAL literal
    (21) literal -> . INT_CONSTANTS
    (22) literal -> . FLOAT_CONSTANTS
    (23) literal -> . STRING_CONSTANTS
    (24) literal -> . BOOLEAN_CONSTANTS
    (25) literal -> . CHAR_CONSTANTS
    (26) literal -> . SIGIL_AT
    (27) literal -> . SIGIL_DOUBLE_AT

    SIGIL_AT        shift and go to state 274
    SIGIL_DOUBLE_AT shift and go to state 275
    INT_CONSTANTS   shift and go to state 226
    FLOAT_CONSTANTS shift and go to state 227
    STRING_CONSTANTS shift and go to state 229
    BOOLEAN_CONSTANTS shift and go to state 225
    CHAR_CONSTANTS  shift and go to state 232

    class_method_arg_expr          shift and go to state 278
    literal                        shift and go to state 276
    class_method_ret_arg           shift and go to state 277

state 257

    (35) class_method_stmts -> none .

    DELIM           reduce using rule 35 (class_method_stmts -> none .)
    newline         reduce using rule 35 (class_method_stmts -> none .)
    KEYWORD_end     reduce using rule 35 (class_method_stmts -> none .)


state 258

    (36) class_method_stmt -> class_method_mlhs . EQUAL class_method_mrhs
    (39) class_method_mlhs -> class_method_mlhs . terms SIGIL_AT
    (182) terms -> . term
    (183) terms -> . terms term
    (184) term -> . DELIM
    (185) term -> . newline

    EQUAL           shift and go to state 280
    DELIM           shift and go to state 74
    newline         shift and go to state 73

    term                           shift and go to state 71
    terms                          shift and go to state 279

state 259

    (41) class_method_mlhs -> SIGIL_DOUBLE_AT .

    EQUAL           reduce using rule 41 (class_method_mlhs -> SIGIL_DOUBLE_AT .)
    DELIM           reduce using rule 41 (class_method_mlhs -> SIGIL_DOUBLE_AT .)
    newline         reduce using rule 41 (class_method_mlhs -> SIGIL_DOUBLE_AT .)


state 260

    (31) class_func -> KEYWORD_def fname arguments class_method_stmts . opt_terms KEYWORD_end
    (34) class_method_stmts -> class_method_stmts . terms class_method_stmt
    (180) opt_terms -> . none
    (181) opt_terms -> . terms
    (182) terms -> . term
    (183) terms -> . terms term
    (186) none -> .
    (184) term -> . DELIM
    (185) term -> . newline

    KEYWORD_end     reduce using rule 186 (none -> .)
    DELIM           shift and go to state 74
    newline         shift and go to state 73

    none                           shift and go to state 75
    terms                          shift and go to state 281
    term                           shift and go to state 71
    opt_terms                      shift and go to state 282

state 261

    (40) class_method_mlhs -> SIGIL_AT .

    EQUAL           reduce using rule 40 (class_method_mlhs -> SIGIL_AT .)
    DELIM           reduce using rule 40 (class_method_mlhs -> SIGIL_AT .)
    newline         reduce using rule 40 (class_method_mlhs -> SIGIL_AT .)


state 262

    (38) class_method_stmt -> puts_stmt .

    DELIM           reduce using rule 38 (class_method_stmt -> puts_stmt .)
    newline         reduce using rule 38 (class_method_stmt -> puts_stmt .)
    KEYWORD_end     reduce using rule 38 (class_method_stmt -> puts_stmt .)


state 263

    (89) top_stmt -> KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts2 . opt_terms KEYWORD_end M_11
    (102) gen_stmts2 -> gen_stmts2 . terms top_stmt
    (180) opt_terms -> . none
    (181) opt_terms -> . terms
    (182) terms -> . term
    (183) terms -> . terms term
    (186) none -> .
    (184) term -> . DELIM
    (185) term -> . newline

    KEYWORD_end     reduce using rule 186 (none -> .)
    DELIM           shift and go to state 74
    newline         shift and go to state 73

    none                           shift and go to state 75
    terms                          shift and go to state 242
    term                           shift and go to state 71
    opt_terms                      shift and go to state 283

state 264

    (102) gen_stmts2 -> gen_stmts2 terms top_stmt .

    DELIM           reduce using rule 102 (gen_stmts2 -> gen_stmts2 terms top_stmt .)
    newline         reduce using rule 102 (gen_stmts2 -> gen_stmts2 terms top_stmt .)
    KEYWORD_end     reduce using rule 102 (gen_stmts2 -> gen_stmts2 terms top_stmt .)


state 265

    (88) top_stmt -> KEYWORD_while M_7 expr3 opt_do M_8 gen_stmts2 opt_terms KEYWORD_end . M_9
    (95) M_9 -> .

    DELIM           reduce using rule 95 (M_9 -> .)
    newline         reduce using rule 95 (M_9 -> .)
    $end            reduce using rule 95 (M_9 -> .)
    KEYWORD_elsif   reduce using rule 95 (M_9 -> .)
    KEYWORD_else    reduce using rule 95 (M_9 -> .)
    KEYWORD_end     reduce using rule 95 (M_9 -> .)

    M_9                            shift and go to state 284

state 266

    (50) func_defn -> KEYWORD_def fname OPEN_PAREN arguments M_13 CLOSE_PAREN func_stmts opt_terms . KEYWORD_end M_14

    KEYWORD_end     shift and go to state 285


state 267

    (77) func_stmts -> func_stmts terms func_stmt .

    DELIM           reduce using rule 77 (func_stmts -> func_stmts terms func_stmt .)
    newline         reduce using rule 77 (func_stmts -> func_stmts terms func_stmt .)
    KEYWORD_end     reduce using rule 77 (func_stmts -> func_stmts terms func_stmt .)


state 268

    (51) func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN M_18 func_stmts opt_terms KEYWORD_end . M_15
    (62) M_15 -> .

    DELIM           reduce using rule 62 (M_15 -> .)
    newline         reduce using rule 62 (M_15 -> .)
    $end            reduce using rule 62 (M_15 -> .)

    M_15                           shift and go to state 286

state 269

    (113) elsif_tail -> none .

    KEYWORD_else    reduce using rule 113 (elsif_tail -> none .)
    KEYWORD_end     reduce using rule 113 (elsif_tail -> none .)


state 270

    (114) elsif_tail -> KEYWORD_elsif . expr3 opt_then M_3 gen_stmts opt_terms M_4 elsif_tail
    (141) expr3 -> . expr3 LOGICALOR expr4
    (142) expr3 -> . expr4
    (143) expr4 -> . expr4 LOGICALAND expr5
    (144) expr4 -> . expr5
    (145) expr5 -> . expr6 DOUBLEEQUAL expr6
    (146) expr5 -> . expr6 NOTEQUAL expr6
    (147) expr5 -> . expr6
    (148) expr6 -> . expr7 LESSEQUAL expr7
    (149) expr6 -> . expr7 LESS expr7
    (150) expr6 -> . expr7 GREATER expr7
    (151) expr6 -> . expr7 GREATEREQUAL expr7
    (152) expr6 -> . expr7
    (153) expr6 -> . BOOLEAN_CONSTANTS
    (154) expr7 -> . expr7 BITXOR expr8
    (155) expr7 -> . expr7 PIPE expr8
    (156) expr7 -> . expr8
    (157) expr8 -> . expr8 BITAND expr9
    (158) expr8 -> . expr9
    (159) expr9 -> . expr9 SHIFTL expr10
    (160) expr9 -> . expr9 SHIFTR expr10
    (161) expr9 -> . expr10
    (162) expr10 -> . expr10 PLUS expr11
    (163) expr10 -> . expr10 MINUS expr11
    (164) expr10 -> . expr11
    (165) expr11 -> . expr11 MULTIPLY expr13
    (166) expr11 -> . expr11 DIV expr13
    (167) expr11 -> . expr11 MOD expr13
    (168) expr11 -> . expr13
    (169) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (170) expr13 -> . uexpr INT_CONSTANTS
    (171) expr13 -> . CONSTANTS
    (172) expr13 -> . VARIABLES
    (173) expr13 -> . array
    (175) uexpr -> . none
    (176) uexpr -> . PLUS
    (177) uexpr -> . MINUS
    (178) uexpr -> . BITNOT
    (179) uexpr -> . BITCOMP
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (186) none -> .

    BOOLEAN_CONSTANTS shift and go to state 9
    OPEN_PAREN      shift and go to state 24
    CONSTANTS       shift and go to state 80
    VARIABLES       shift and go to state 77
    PLUS            shift and go to state 5
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 33
    BITCOMP         shift and go to state 23
    INT_CONSTANTS   reduce using rule 186 (none -> .)

    expr11                         shift and go to state 12
    uexpr                          shift and go to state 8
    none                           shift and go to state 28
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr3                          shift and go to state 287
    expr6                          shift and go to state 36
    expr7                          shift and go to state 6
    expr10                         shift and go to state 11
    expr8                          shift and go to state 39
    expr9                          shift and go to state 40
    expr13                         shift and go to state 13
    array                          shift and go to state 79

state 271

    (87) top_stmt -> KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail . opt_else_stmt KEYWORD_end M_6
    (111) opt_else_stmt -> . KEYWORD_else gen_stmts opt_terms
    (112) opt_else_stmt -> . none
    (186) none -> .

    KEYWORD_else    shift and go to state 289
    KEYWORD_end     reduce using rule 186 (none -> .)

    none                           shift and go to state 288
    opt_else_stmt                  shift and go to state 290

state 272

    (30) class_func -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN . class_method_stmts opt_terms KEYWORD_end
    (33) class_method_stmts -> . class_method_stmt
    (34) class_method_stmts -> . class_method_stmts terms class_method_stmt
    (35) class_method_stmts -> . none
    (36) class_method_stmt -> . class_method_mlhs EQUAL class_method_mrhs
    (37) class_method_stmt -> . KEYWORD_return class_method_ret_arg
    (38) class_method_stmt -> . puts_stmt
    (186) none -> .
    (39) class_method_mlhs -> . class_method_mlhs terms SIGIL_AT
    (40) class_method_mlhs -> . SIGIL_AT
    (41) class_method_mlhs -> . SIGIL_DOUBLE_AT
    (74) puts_stmt -> . KEYWORD_puts mrhs
    (75) puts_stmt -> . KEYWORD_puts expr

    KEYWORD_return  shift and go to state 256
    DELIM           reduce using rule 186 (none -> .)
    newline         reduce using rule 186 (none -> .)
    KEYWORD_end     reduce using rule 186 (none -> .)
    SIGIL_AT        shift and go to state 261
    SIGIL_DOUBLE_AT shift and go to state 259
    KEYWORD_puts    shift and go to state 27

    class_method_stmt              shift and go to state 255
    none                           shift and go to state 257
    class_method_mlhs              shift and go to state 258
    puts_stmt                      shift and go to state 262
    class_method_stmts             shift and go to state 291

state 273

    (32) class_func -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts . opt_terms KEYWORD_end
    (34) class_method_stmts -> class_method_stmts . terms class_method_stmt
    (180) opt_terms -> . none
    (181) opt_terms -> . terms
    (182) terms -> . term
    (183) terms -> . terms term
    (186) none -> .
    (184) term -> . DELIM
    (185) term -> . newline

    KEYWORD_end     reduce using rule 186 (none -> .)
    DELIM           shift and go to state 74
    newline         shift and go to state 73

    none                           shift and go to state 75
    terms                          shift and go to state 281
    opt_terms                      shift and go to state 292
    term                           shift and go to state 71

state 274

    (48) class_method_arg_expr -> SIGIL_AT . EQUAL literal
    (26) literal -> SIGIL_AT .

    EQUAL           shift and go to state 293
    COMMA           reduce using rule 26 (literal -> SIGIL_AT .)
    DELIM           reduce using rule 26 (literal -> SIGIL_AT .)
    newline         reduce using rule 26 (literal -> SIGIL_AT .)
    KEYWORD_end     reduce using rule 26 (literal -> SIGIL_AT .)


state 275

    (49) class_method_arg_expr -> SIGIL_DOUBLE_AT . EQUAL literal
    (27) literal -> SIGIL_DOUBLE_AT .

    EQUAL           shift and go to state 294
    COMMA           reduce using rule 27 (literal -> SIGIL_DOUBLE_AT .)
    DELIM           reduce using rule 27 (literal -> SIGIL_DOUBLE_AT .)
    newline         reduce using rule 27 (literal -> SIGIL_DOUBLE_AT .)
    KEYWORD_end     reduce using rule 27 (literal -> SIGIL_DOUBLE_AT .)


state 276

    (45) class_method_ret_arg -> literal .

    COMMA           reduce using rule 45 (class_method_ret_arg -> literal .)
    DELIM           reduce using rule 45 (class_method_ret_arg -> literal .)
    newline         reduce using rule 45 (class_method_ret_arg -> literal .)
    KEYWORD_end     reduce using rule 45 (class_method_ret_arg -> literal .)


state 277

    (37) class_method_stmt -> KEYWORD_return class_method_ret_arg .
    (46) class_method_ret_arg -> class_method_ret_arg . COMMA class_method_arg_expr
    (47) class_method_ret_arg -> class_method_ret_arg . COMMA literal

    DELIM           reduce using rule 37 (class_method_stmt -> KEYWORD_return class_method_ret_arg .)
    newline         reduce using rule 37 (class_method_stmt -> KEYWORD_return class_method_ret_arg .)
    KEYWORD_end     reduce using rule 37 (class_method_stmt -> KEYWORD_return class_method_ret_arg .)
    COMMA           shift and go to state 295


state 278

    (44) class_method_ret_arg -> class_method_arg_expr .

    COMMA           reduce using rule 44 (class_method_ret_arg -> class_method_arg_expr .)
    DELIM           reduce using rule 44 (class_method_ret_arg -> class_method_arg_expr .)
    newline         reduce using rule 44 (class_method_ret_arg -> class_method_arg_expr .)
    KEYWORD_end     reduce using rule 44 (class_method_ret_arg -> class_method_arg_expr .)


state 279

    (39) class_method_mlhs -> class_method_mlhs terms . SIGIL_AT
    (183) terms -> terms . term
    (184) term -> . DELIM
    (185) term -> . newline

    SIGIL_AT        shift and go to state 296
    DELIM           shift and go to state 74
    newline         shift and go to state 73

    term                           shift and go to state 122

state 280

    (36) class_method_stmt -> class_method_mlhs EQUAL . class_method_mrhs
    (42) class_method_mrhs -> . literal
    (43) class_method_mrhs -> . VARIABLES
    (21) literal -> . INT_CONSTANTS
    (22) literal -> . FLOAT_CONSTANTS
    (23) literal -> . STRING_CONSTANTS
    (24) literal -> . BOOLEAN_CONSTANTS
    (25) literal -> . CHAR_CONSTANTS
    (26) literal -> . SIGIL_AT
    (27) literal -> . SIGIL_DOUBLE_AT

    VARIABLES       shift and go to state 298
    INT_CONSTANTS   shift and go to state 226
    FLOAT_CONSTANTS shift and go to state 227
    STRING_CONSTANTS shift and go to state 229
    BOOLEAN_CONSTANTS shift and go to state 225
    CHAR_CONSTANTS  shift and go to state 232
    SIGIL_AT        shift and go to state 224
    SIGIL_DOUBLE_AT shift and go to state 228

    class_method_mrhs              shift and go to state 297
    literal                        shift and go to state 299

state 281

    (34) class_method_stmts -> class_method_stmts terms . class_method_stmt
    (181) opt_terms -> terms .
    (183) terms -> terms . term
    (36) class_method_stmt -> . class_method_mlhs EQUAL class_method_mrhs
    (37) class_method_stmt -> . KEYWORD_return class_method_ret_arg
    (38) class_method_stmt -> . puts_stmt
    (184) term -> . DELIM
    (185) term -> . newline
    (39) class_method_mlhs -> . class_method_mlhs terms SIGIL_AT
    (40) class_method_mlhs -> . SIGIL_AT
    (41) class_method_mlhs -> . SIGIL_DOUBLE_AT
    (74) puts_stmt -> . KEYWORD_puts mrhs
    (75) puts_stmt -> . KEYWORD_puts expr

    KEYWORD_end     reduce using rule 181 (opt_terms -> terms .)
    KEYWORD_return  shift and go to state 256
    DELIM           shift and go to state 74
    newline         shift and go to state 73
    SIGIL_AT        shift and go to state 261
    SIGIL_DOUBLE_AT shift and go to state 259
    KEYWORD_puts    shift and go to state 27

    class_method_stmt              shift and go to state 300
    term                           shift and go to state 122
    puts_stmt                      shift and go to state 262
    class_method_mlhs              shift and go to state 258

state 282

    (31) class_func -> KEYWORD_def fname arguments class_method_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 301


state 283

    (89) top_stmt -> KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts2 opt_terms . KEYWORD_end M_11

    KEYWORD_end     shift and go to state 302


state 284

    (88) top_stmt -> KEYWORD_while M_7 expr3 opt_do M_8 gen_stmts2 opt_terms KEYWORD_end M_9 .

    DELIM           reduce using rule 88 (top_stmt -> KEYWORD_while M_7 expr3 opt_do M_8 gen_stmts2 opt_terms KEYWORD_end M_9 .)
    newline         reduce using rule 88 (top_stmt -> KEYWORD_while M_7 expr3 opt_do M_8 gen_stmts2 opt_terms KEYWORD_end M_9 .)
    KEYWORD_elsif   reduce using rule 88 (top_stmt -> KEYWORD_while M_7 expr3 opt_do M_8 gen_stmts2 opt_terms KEYWORD_end M_9 .)
    KEYWORD_else    reduce using rule 88 (top_stmt -> KEYWORD_while M_7 expr3 opt_do M_8 gen_stmts2 opt_terms KEYWORD_end M_9 .)
    KEYWORD_end     reduce using rule 88 (top_stmt -> KEYWORD_while M_7 expr3 opt_do M_8 gen_stmts2 opt_terms KEYWORD_end M_9 .)
    $end            reduce using rule 88 (top_stmt -> KEYWORD_while M_7 expr3 opt_do M_8 gen_stmts2 opt_terms KEYWORD_end M_9 .)


state 285

    (50) func_defn -> KEYWORD_def fname OPEN_PAREN arguments M_13 CLOSE_PAREN func_stmts opt_terms KEYWORD_end . M_14
    (61) M_14 -> .

    DELIM           reduce using rule 61 (M_14 -> .)
    newline         reduce using rule 61 (M_14 -> .)
    $end            reduce using rule 61 (M_14 -> .)

    M_14                           shift and go to state 303

state 286

    (51) func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN M_18 func_stmts opt_terms KEYWORD_end M_15 .

    DELIM           reduce using rule 51 (func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN M_18 func_stmts opt_terms KEYWORD_end M_15 .)
    newline         reduce using rule 51 (func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN M_18 func_stmts opt_terms KEYWORD_end M_15 .)
    $end            reduce using rule 51 (func_defn -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN M_18 func_stmts opt_terms KEYWORD_end M_15 .)


state 287

    (114) elsif_tail -> KEYWORD_elsif expr3 . opt_then M_3 gen_stmts opt_terms M_4 elsif_tail
    (141) expr3 -> expr3 . LOGICALOR expr4
    (117) opt_then -> . KEYWORD_then
    (118) opt_then -> . newline

    LOGICALOR       shift and go to state 95
    KEYWORD_then    shift and go to state 125
    newline         shift and go to state 124

    opt_then                       shift and go to state 304

state 288

    (112) opt_else_stmt -> none .

    KEYWORD_end     reduce using rule 112 (opt_else_stmt -> none .)


state 289

    (111) opt_else_stmt -> KEYWORD_else . gen_stmts opt_terms
    (98) gen_stmts -> . top_stmt
    (99) gen_stmts -> . gen_stmts terms top_stmt
    (100) gen_stmts -> . none
    (86) top_stmt -> . stmt
    (87) top_stmt -> . KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6
    (88) top_stmt -> . KEYWORD_while M_7 expr3 opt_do M_8 gen_stmts2 opt_terms KEYWORD_end M_9
    (89) top_stmt -> . KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts2 opt_terms KEYWORD_end M_11
    (186) none -> .
    (104) stmt -> . expr
    (105) stmt -> . expr1
    (106) stmt -> . puts_stmt
    (107) stmt -> . loop_stmt
    (108) stmt -> . exit_stmt
    (109) stmt -> . func_call_stmt
    (110) stmt -> . KEYWORD_return func_ret_arg
    (125) expr -> . mlhs EQUAL mrhs
    (140) expr1 -> . expr3
    (74) puts_stmt -> . KEYWORD_puts mrhs
    (75) puts_stmt -> . KEYWORD_puts expr
    (72) loop_stmt -> . KEYWORD_break
    (73) exit_stmt -> . KEYWORD_exit
    (63) func_call_stmt -> . fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (64) func_call_stmt -> . mlhs EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (126) mlhs -> . VARIABLES
    (127) mlhs -> . CONSTANTS
    (128) mlhs -> . array
    (141) expr3 -> . expr3 LOGICALOR expr4
    (142) expr3 -> . expr4
    (66) fname2 -> . VARIABLES
    (67) fname2 -> . CONSTANTS
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (143) expr4 -> . expr4 LOGICALAND expr5
    (144) expr4 -> . expr5
    (145) expr5 -> . expr6 DOUBLEEQUAL expr6
    (146) expr5 -> . expr6 NOTEQUAL expr6
    (147) expr5 -> . expr6
    (148) expr6 -> . expr7 LESSEQUAL expr7
    (149) expr6 -> . expr7 LESS expr7
    (150) expr6 -> . expr7 GREATER expr7
    (151) expr6 -> . expr7 GREATEREQUAL expr7
    (152) expr6 -> . expr7
    (153) expr6 -> . BOOLEAN_CONSTANTS
    (154) expr7 -> . expr7 BITXOR expr8
    (155) expr7 -> . expr7 PIPE expr8
    (156) expr7 -> . expr8
    (157) expr8 -> . expr8 BITAND expr9
    (158) expr8 -> . expr9
    (159) expr9 -> . expr9 SHIFTL expr10
    (160) expr9 -> . expr9 SHIFTR expr10
    (161) expr9 -> . expr10
    (162) expr10 -> . expr10 PLUS expr11
    (163) expr10 -> . expr10 MINUS expr11
    (164) expr10 -> . expr11
    (165) expr11 -> . expr11 MULTIPLY expr13
    (166) expr11 -> . expr11 DIV expr13
    (167) expr11 -> . expr11 MOD expr13
    (168) expr11 -> . expr13
    (169) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (170) expr13 -> . uexpr INT_CONSTANTS
    (171) expr13 -> . CONSTANTS
    (172) expr13 -> . VARIABLES
    (173) expr13 -> . array
    (175) uexpr -> . none
    (176) uexpr -> . PLUS
    (177) uexpr -> . MINUS
    (178) uexpr -> . BITNOT
    (179) uexpr -> . BITCOMP

    KEYWORD_if      shift and go to state 21
    KEYWORD_while   shift and go to state 3
    KEYWORD_for     shift and go to state 44
    DELIM           reduce using rule 186 (none -> .)
    newline         reduce using rule 186 (none -> .)
    KEYWORD_end     reduce using rule 186 (none -> .)
    INT_CONSTANTS   reduce using rule 186 (none -> .)
    KEYWORD_return  shift and go to state 14
    KEYWORD_puts    shift and go to state 27
    KEYWORD_break   shift and go to state 41
    KEYWORD_exit    shift and go to state 18
    VARIABLES       shift and go to state 186
    CONSTANTS       shift and go to state 185
    BOOLEAN_CONSTANTS shift and go to state 9
    OPEN_PAREN      shift and go to state 24
    PLUS            shift and go to state 5
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 33
    BITCOMP         shift and go to state 23

    mlhs                           shift and go to state 1
    fname2                         shift and go to state 45
    expr10                         shift and go to state 11
    expr11                         shift and go to state 12
    expr13                         shift and go to state 13
    array                          shift and go to state 20
    expr3                          shift and go to state 34
    expr1                          shift and go to state 35
    expr6                          shift and go to state 36
    expr7                          shift and go to state 6
    puts_stmt                      shift and go to state 15
    expr5                          shift and go to state 38
    func_call_stmt                 shift and go to state 26
    expr8                          shift and go to state 39
    expr9                          shift and go to state 40
    expr4                          shift and go to state 37
    exit_stmt                      shift and go to state 42
    stmt                           shift and go to state 16
    loop_stmt                      shift and go to state 7
    uexpr                          shift and go to state 8
    none                           shift and go to state 187
    gen_stmts                      shift and go to state 305
    expr                           shift and go to state 29
    top_stmt                       shift and go to state 189

state 290

    (87) top_stmt -> KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt . KEYWORD_end M_6

    KEYWORD_end     shift and go to state 306


state 291

    (30) class_func -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts . opt_terms KEYWORD_end
    (34) class_method_stmts -> class_method_stmts . terms class_method_stmt
    (180) opt_terms -> . none
    (181) opt_terms -> . terms
    (182) terms -> . term
    (183) terms -> . terms term
    (186) none -> .
    (184) term -> . DELIM
    (185) term -> . newline

    KEYWORD_end     reduce using rule 186 (none -> .)
    DELIM           shift and go to state 74
    newline         shift and go to state 73

    none                           shift and go to state 75
    terms                          shift and go to state 281
    term                           shift and go to state 71
    opt_terms                      shift and go to state 307

state 292

    (32) class_func -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 308


state 293

    (48) class_method_arg_expr -> SIGIL_AT EQUAL . literal
    (21) literal -> . INT_CONSTANTS
    (22) literal -> . FLOAT_CONSTANTS
    (23) literal -> . STRING_CONSTANTS
    (24) literal -> . BOOLEAN_CONSTANTS
    (25) literal -> . CHAR_CONSTANTS
    (26) literal -> . SIGIL_AT
    (27) literal -> . SIGIL_DOUBLE_AT

    INT_CONSTANTS   shift and go to state 226
    FLOAT_CONSTANTS shift and go to state 227
    STRING_CONSTANTS shift and go to state 229
    BOOLEAN_CONSTANTS shift and go to state 225
    CHAR_CONSTANTS  shift and go to state 232
    SIGIL_AT        shift and go to state 224
    SIGIL_DOUBLE_AT shift and go to state 228

    literal                        shift and go to state 309

state 294

    (49) class_method_arg_expr -> SIGIL_DOUBLE_AT EQUAL . literal
    (21) literal -> . INT_CONSTANTS
    (22) literal -> . FLOAT_CONSTANTS
    (23) literal -> . STRING_CONSTANTS
    (24) literal -> . BOOLEAN_CONSTANTS
    (25) literal -> . CHAR_CONSTANTS
    (26) literal -> . SIGIL_AT
    (27) literal -> . SIGIL_DOUBLE_AT

    INT_CONSTANTS   shift and go to state 226
    FLOAT_CONSTANTS shift and go to state 227
    STRING_CONSTANTS shift and go to state 229
    BOOLEAN_CONSTANTS shift and go to state 225
    CHAR_CONSTANTS  shift and go to state 232
    SIGIL_AT        shift and go to state 224
    SIGIL_DOUBLE_AT shift and go to state 228

    literal                        shift and go to state 310

state 295

    (46) class_method_ret_arg -> class_method_ret_arg COMMA . class_method_arg_expr
    (47) class_method_ret_arg -> class_method_ret_arg COMMA . literal
    (48) class_method_arg_expr -> . SIGIL_AT EQUAL literal
    (49) class_method_arg_expr -> . SIGIL_DOUBLE_AT EQUAL literal
    (21) literal -> . INT_CONSTANTS
    (22) literal -> . FLOAT_CONSTANTS
    (23) literal -> . STRING_CONSTANTS
    (24) literal -> . BOOLEAN_CONSTANTS
    (25) literal -> . CHAR_CONSTANTS
    (26) literal -> . SIGIL_AT
    (27) literal -> . SIGIL_DOUBLE_AT

    SIGIL_AT        shift and go to state 274
    SIGIL_DOUBLE_AT shift and go to state 275
    INT_CONSTANTS   shift and go to state 226
    FLOAT_CONSTANTS shift and go to state 227
    STRING_CONSTANTS shift and go to state 229
    BOOLEAN_CONSTANTS shift and go to state 225
    CHAR_CONSTANTS  shift and go to state 232

    class_method_arg_expr          shift and go to state 312
    literal                        shift and go to state 311

state 296

    (39) class_method_mlhs -> class_method_mlhs terms SIGIL_AT .

    EQUAL           reduce using rule 39 (class_method_mlhs -> class_method_mlhs terms SIGIL_AT .)
    DELIM           reduce using rule 39 (class_method_mlhs -> class_method_mlhs terms SIGIL_AT .)
    newline         reduce using rule 39 (class_method_mlhs -> class_method_mlhs terms SIGIL_AT .)


state 297

    (36) class_method_stmt -> class_method_mlhs EQUAL class_method_mrhs .

    DELIM           reduce using rule 36 (class_method_stmt -> class_method_mlhs EQUAL class_method_mrhs .)
    newline         reduce using rule 36 (class_method_stmt -> class_method_mlhs EQUAL class_method_mrhs .)
    KEYWORD_end     reduce using rule 36 (class_method_stmt -> class_method_mlhs EQUAL class_method_mrhs .)


state 298

    (43) class_method_mrhs -> VARIABLES .

    DELIM           reduce using rule 43 (class_method_mrhs -> VARIABLES .)
    newline         reduce using rule 43 (class_method_mrhs -> VARIABLES .)
    KEYWORD_end     reduce using rule 43 (class_method_mrhs -> VARIABLES .)


state 299

    (42) class_method_mrhs -> literal .

    DELIM           reduce using rule 42 (class_method_mrhs -> literal .)
    newline         reduce using rule 42 (class_method_mrhs -> literal .)
    KEYWORD_end     reduce using rule 42 (class_method_mrhs -> literal .)


state 300

    (34) class_method_stmts -> class_method_stmts terms class_method_stmt .

    DELIM           reduce using rule 34 (class_method_stmts -> class_method_stmts terms class_method_stmt .)
    newline         reduce using rule 34 (class_method_stmts -> class_method_stmts terms class_method_stmt .)
    KEYWORD_end     reduce using rule 34 (class_method_stmts -> class_method_stmts terms class_method_stmt .)


state 301

    (31) class_func -> KEYWORD_def fname arguments class_method_stmts opt_terms KEYWORD_end .

    DELIM           reduce using rule 31 (class_func -> KEYWORD_def fname arguments class_method_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 31 (class_func -> KEYWORD_def fname arguments class_method_stmts opt_terms KEYWORD_end .)
    KEYWORD_end     reduce using rule 31 (class_func -> KEYWORD_def fname arguments class_method_stmts opt_terms KEYWORD_end .)


state 302

    (89) top_stmt -> KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts2 opt_terms KEYWORD_end . M_11
    (97) M_11 -> .

    DELIM           reduce using rule 97 (M_11 -> .)
    newline         reduce using rule 97 (M_11 -> .)
    $end            reduce using rule 97 (M_11 -> .)
    KEYWORD_elsif   reduce using rule 97 (M_11 -> .)
    KEYWORD_else    reduce using rule 97 (M_11 -> .)
    KEYWORD_end     reduce using rule 97 (M_11 -> .)

    M_11                           shift and go to state 313

state 303

    (50) func_defn -> KEYWORD_def fname OPEN_PAREN arguments M_13 CLOSE_PAREN func_stmts opt_terms KEYWORD_end M_14 .

    DELIM           reduce using rule 50 (func_defn -> KEYWORD_def fname OPEN_PAREN arguments M_13 CLOSE_PAREN func_stmts opt_terms KEYWORD_end M_14 .)
    newline         reduce using rule 50 (func_defn -> KEYWORD_def fname OPEN_PAREN arguments M_13 CLOSE_PAREN func_stmts opt_terms KEYWORD_end M_14 .)
    $end            reduce using rule 50 (func_defn -> KEYWORD_def fname OPEN_PAREN arguments M_13 CLOSE_PAREN func_stmts opt_terms KEYWORD_end M_14 .)


state 304

    (114) elsif_tail -> KEYWORD_elsif expr3 opt_then . M_3 gen_stmts opt_terms M_4 elsif_tail
    (115) M_3 -> .

    KEYWORD_if      reduce using rule 115 (M_3 -> .)
    KEYWORD_while   reduce using rule 115 (M_3 -> .)
    KEYWORD_for     reduce using rule 115 (M_3 -> .)
    KEYWORD_return  reduce using rule 115 (M_3 -> .)
    KEYWORD_puts    reduce using rule 115 (M_3 -> .)
    KEYWORD_break   reduce using rule 115 (M_3 -> .)
    KEYWORD_exit    reduce using rule 115 (M_3 -> .)
    VARIABLES       reduce using rule 115 (M_3 -> .)
    CONSTANTS       reduce using rule 115 (M_3 -> .)
    BOOLEAN_CONSTANTS reduce using rule 115 (M_3 -> .)
    OPEN_PAREN      reduce using rule 115 (M_3 -> .)
    PLUS            reduce using rule 115 (M_3 -> .)
    MINUS           reduce using rule 115 (M_3 -> .)
    BITNOT          reduce using rule 115 (M_3 -> .)
    BITCOMP         reduce using rule 115 (M_3 -> .)
    DELIM           reduce using rule 115 (M_3 -> .)
    newline         reduce using rule 115 (M_3 -> .)
    KEYWORD_elsif   reduce using rule 115 (M_3 -> .)
    INT_CONSTANTS   reduce using rule 115 (M_3 -> .)
    KEYWORD_else    reduce using rule 115 (M_3 -> .)
    KEYWORD_end     reduce using rule 115 (M_3 -> .)

    M_3                            shift and go to state 314

state 305

    (111) opt_else_stmt -> KEYWORD_else gen_stmts . opt_terms
    (99) gen_stmts -> gen_stmts . terms top_stmt
    (180) opt_terms -> . none
    (181) opt_terms -> . terms
    (182) terms -> . term
    (183) terms -> . terms term
    (186) none -> .
    (184) term -> . DELIM
    (185) term -> . newline

    KEYWORD_end     reduce using rule 186 (none -> .)
    DELIM           shift and go to state 74
    newline         shift and go to state 73

    term                           shift and go to state 71
    terms                          shift and go to state 216
    none                           shift and go to state 75
    opt_terms                      shift and go to state 315

state 306

    (87) top_stmt -> KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end . M_6
    (92) M_6 -> .

    DELIM           reduce using rule 92 (M_6 -> .)
    newline         reduce using rule 92 (M_6 -> .)
    $end            reduce using rule 92 (M_6 -> .)
    KEYWORD_elsif   reduce using rule 92 (M_6 -> .)
    KEYWORD_else    reduce using rule 92 (M_6 -> .)
    KEYWORD_end     reduce using rule 92 (M_6 -> .)

    M_6                            shift and go to state 316

state 307

    (30) class_func -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms . KEYWORD_end

    KEYWORD_end     shift and go to state 317


state 308

    (32) class_func -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end .

    DELIM           reduce using rule 32 (class_func -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 32 (class_func -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end .)
    KEYWORD_end     reduce using rule 32 (class_func -> KEYWORD_def fname OPEN_PAREN CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end .)


state 309

    (48) class_method_arg_expr -> SIGIL_AT EQUAL literal .

    COMMA           reduce using rule 48 (class_method_arg_expr -> SIGIL_AT EQUAL literal .)
    DELIM           reduce using rule 48 (class_method_arg_expr -> SIGIL_AT EQUAL literal .)
    newline         reduce using rule 48 (class_method_arg_expr -> SIGIL_AT EQUAL literal .)
    KEYWORD_end     reduce using rule 48 (class_method_arg_expr -> SIGIL_AT EQUAL literal .)


state 310

    (49) class_method_arg_expr -> SIGIL_DOUBLE_AT EQUAL literal .

    COMMA           reduce using rule 49 (class_method_arg_expr -> SIGIL_DOUBLE_AT EQUAL literal .)
    DELIM           reduce using rule 49 (class_method_arg_expr -> SIGIL_DOUBLE_AT EQUAL literal .)
    newline         reduce using rule 49 (class_method_arg_expr -> SIGIL_DOUBLE_AT EQUAL literal .)
    KEYWORD_end     reduce using rule 49 (class_method_arg_expr -> SIGIL_DOUBLE_AT EQUAL literal .)


state 311

    (47) class_method_ret_arg -> class_method_ret_arg COMMA literal .

    COMMA           reduce using rule 47 (class_method_ret_arg -> class_method_ret_arg COMMA literal .)
    DELIM           reduce using rule 47 (class_method_ret_arg -> class_method_ret_arg COMMA literal .)
    newline         reduce using rule 47 (class_method_ret_arg -> class_method_ret_arg COMMA literal .)
    KEYWORD_end     reduce using rule 47 (class_method_ret_arg -> class_method_ret_arg COMMA literal .)


state 312

    (46) class_method_ret_arg -> class_method_ret_arg COMMA class_method_arg_expr .

    COMMA           reduce using rule 46 (class_method_ret_arg -> class_method_ret_arg COMMA class_method_arg_expr .)
    DELIM           reduce using rule 46 (class_method_ret_arg -> class_method_ret_arg COMMA class_method_arg_expr .)
    newline         reduce using rule 46 (class_method_ret_arg -> class_method_ret_arg COMMA class_method_arg_expr .)
    KEYWORD_end     reduce using rule 46 (class_method_ret_arg -> class_method_ret_arg COMMA class_method_arg_expr .)


state 313

    (89) top_stmt -> KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts2 opt_terms KEYWORD_end M_11 .

    DELIM           reduce using rule 89 (top_stmt -> KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts2 opt_terms KEYWORD_end M_11 .)
    newline         reduce using rule 89 (top_stmt -> KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts2 opt_terms KEYWORD_end M_11 .)
    KEYWORD_elsif   reduce using rule 89 (top_stmt -> KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts2 opt_terms KEYWORD_end M_11 .)
    KEYWORD_else    reduce using rule 89 (top_stmt -> KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts2 opt_terms KEYWORD_end M_11 .)
    KEYWORD_end     reduce using rule 89 (top_stmt -> KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts2 opt_terms KEYWORD_end M_11 .)
    $end            reduce using rule 89 (top_stmt -> KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts2 opt_terms KEYWORD_end M_11 .)


state 314

    (114) elsif_tail -> KEYWORD_elsif expr3 opt_then M_3 . gen_stmts opt_terms M_4 elsif_tail
    (98) gen_stmts -> . top_stmt
    (99) gen_stmts -> . gen_stmts terms top_stmt
    (100) gen_stmts -> . none
    (86) top_stmt -> . stmt
    (87) top_stmt -> . KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6
    (88) top_stmt -> . KEYWORD_while M_7 expr3 opt_do M_8 gen_stmts2 opt_terms KEYWORD_end M_9
    (89) top_stmt -> . KEYWORD_for VARIABLES KEYWORD_in for_range opt_do M_10 gen_stmts2 opt_terms KEYWORD_end M_11
    (186) none -> .
    (104) stmt -> . expr
    (105) stmt -> . expr1
    (106) stmt -> . puts_stmt
    (107) stmt -> . loop_stmt
    (108) stmt -> . exit_stmt
    (109) stmt -> . func_call_stmt
    (110) stmt -> . KEYWORD_return func_ret_arg
    (125) expr -> . mlhs EQUAL mrhs
    (140) expr1 -> . expr3
    (74) puts_stmt -> . KEYWORD_puts mrhs
    (75) puts_stmt -> . KEYWORD_puts expr
    (72) loop_stmt -> . KEYWORD_break
    (73) exit_stmt -> . KEYWORD_exit
    (63) func_call_stmt -> . fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (64) func_call_stmt -> . mlhs EQUAL fname2 OPEN_PAREN call_arg CLOSE_PAREN M_17
    (126) mlhs -> . VARIABLES
    (127) mlhs -> . CONSTANTS
    (128) mlhs -> . array
    (141) expr3 -> . expr3 LOGICALOR expr4
    (142) expr3 -> . expr4
    (66) fname2 -> . VARIABLES
    (67) fname2 -> . CONSTANTS
    (174) array -> . VARIABLES OPEN_BRACKET expr7 CLOSE_BRACKET
    (143) expr4 -> . expr4 LOGICALAND expr5
    (144) expr4 -> . expr5
    (145) expr5 -> . expr6 DOUBLEEQUAL expr6
    (146) expr5 -> . expr6 NOTEQUAL expr6
    (147) expr5 -> . expr6
    (148) expr6 -> . expr7 LESSEQUAL expr7
    (149) expr6 -> . expr7 LESS expr7
    (150) expr6 -> . expr7 GREATER expr7
    (151) expr6 -> . expr7 GREATEREQUAL expr7
    (152) expr6 -> . expr7
    (153) expr6 -> . BOOLEAN_CONSTANTS
    (154) expr7 -> . expr7 BITXOR expr8
    (155) expr7 -> . expr7 PIPE expr8
    (156) expr7 -> . expr8
    (157) expr8 -> . expr8 BITAND expr9
    (158) expr8 -> . expr9
    (159) expr9 -> . expr9 SHIFTL expr10
    (160) expr9 -> . expr9 SHIFTR expr10
    (161) expr9 -> . expr10
    (162) expr10 -> . expr10 PLUS expr11
    (163) expr10 -> . expr10 MINUS expr11
    (164) expr10 -> . expr11
    (165) expr11 -> . expr11 MULTIPLY expr13
    (166) expr11 -> . expr11 DIV expr13
    (167) expr11 -> . expr11 MOD expr13
    (168) expr11 -> . expr13
    (169) expr13 -> . OPEN_PAREN expr1 CLOSE_PAREN
    (170) expr13 -> . uexpr INT_CONSTANTS
    (171) expr13 -> . CONSTANTS
    (172) expr13 -> . VARIABLES
    (173) expr13 -> . array
    (175) uexpr -> . none
    (176) uexpr -> . PLUS
    (177) uexpr -> . MINUS
    (178) uexpr -> . BITNOT
    (179) uexpr -> . BITCOMP

    KEYWORD_if      shift and go to state 21
    KEYWORD_while   shift and go to state 3
    KEYWORD_for     shift and go to state 44
    DELIM           reduce using rule 186 (none -> .)
    newline         reduce using rule 186 (none -> .)
    KEYWORD_elsif   reduce using rule 186 (none -> .)
    KEYWORD_else    reduce using rule 186 (none -> .)
    KEYWORD_end     reduce using rule 186 (none -> .)
    INT_CONSTANTS   reduce using rule 186 (none -> .)
    KEYWORD_return  shift and go to state 14
    KEYWORD_puts    shift and go to state 27
    KEYWORD_break   shift and go to state 41
    KEYWORD_exit    shift and go to state 18
    VARIABLES       shift and go to state 186
    CONSTANTS       shift and go to state 185
    BOOLEAN_CONSTANTS shift and go to state 9
    OPEN_PAREN      shift and go to state 24
    PLUS            shift and go to state 5
    MINUS           shift and go to state 2
    BITNOT          shift and go to state 33
    BITCOMP         shift and go to state 23

    mlhs                           shift and go to state 1
    fname2                         shift and go to state 45
    expr10                         shift and go to state 11
    expr11                         shift and go to state 12
    expr13                         shift and go to state 13
    array                          shift and go to state 20
    expr3                          shift and go to state 34
    expr1                          shift and go to state 35
    expr6                          shift and go to state 36
    expr7                          shift and go to state 6
    puts_stmt                      shift and go to state 15
    expr5                          shift and go to state 38
    func_call_stmt                 shift and go to state 26
    expr8                          shift and go to state 39
    expr9                          shift and go to state 40
    expr4                          shift and go to state 37
    exit_stmt                      shift and go to state 42
    stmt                           shift and go to state 16
    loop_stmt                      shift and go to state 7
    uexpr                          shift and go to state 8
    none                           shift and go to state 187
    gen_stmts                      shift and go to state 318
    expr                           shift and go to state 29
    top_stmt                       shift and go to state 189

state 315

    (111) opt_else_stmt -> KEYWORD_else gen_stmts opt_terms .

    KEYWORD_end     reduce using rule 111 (opt_else_stmt -> KEYWORD_else gen_stmts opt_terms .)


state 316

    (87) top_stmt -> KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6 .

    DELIM           reduce using rule 87 (top_stmt -> KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6 .)
    newline         reduce using rule 87 (top_stmt -> KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6 .)
    KEYWORD_elsif   reduce using rule 87 (top_stmt -> KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6 .)
    KEYWORD_else    reduce using rule 87 (top_stmt -> KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6 .)
    KEYWORD_end     reduce using rule 87 (top_stmt -> KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6 .)
    $end            reduce using rule 87 (top_stmt -> KEYWORD_if expr3 opt_then M_1 gen_stmts opt_terms M_2 elsif_tail opt_else_stmt KEYWORD_end M_6 .)


state 317

    (30) class_func -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end .

    DELIM           reduce using rule 30 (class_func -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end .)
    newline         reduce using rule 30 (class_func -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end .)
    KEYWORD_end     reduce using rule 30 (class_func -> KEYWORD_def fname OPEN_PAREN arguments CLOSE_PAREN class_method_stmts opt_terms KEYWORD_end .)


state 318

    (114) elsif_tail -> KEYWORD_elsif expr3 opt_then M_3 gen_stmts . opt_terms M_4 elsif_tail
    (99) gen_stmts -> gen_stmts . terms top_stmt
    (180) opt_terms -> . none
    (181) opt_terms -> . terms
    (182) terms -> . term
    (183) terms -> . terms term
    (186) none -> .
    (184) term -> . DELIM
    (185) term -> . newline

    KEYWORD_elsif   reduce using rule 186 (none -> .)
    KEYWORD_else    reduce using rule 186 (none -> .)
    KEYWORD_end     reduce using rule 186 (none -> .)
    DELIM           shift and go to state 74
    newline         shift and go to state 73

    none                           shift and go to state 75
    terms                          shift and go to state 216
    term                           shift and go to state 71
    opt_terms                      shift and go to state 319

state 319

    (114) elsif_tail -> KEYWORD_elsif expr3 opt_then M_3 gen_stmts opt_terms . M_4 elsif_tail
    (116) M_4 -> .

    KEYWORD_elsif   reduce using rule 116 (M_4 -> .)
    KEYWORD_else    reduce using rule 116 (M_4 -> .)
    KEYWORD_end     reduce using rule 116 (M_4 -> .)

    M_4                            shift and go to state 320

state 320

    (114) elsif_tail -> KEYWORD_elsif expr3 opt_then M_3 gen_stmts opt_terms M_4 . elsif_tail
    (113) elsif_tail -> . none
    (114) elsif_tail -> . KEYWORD_elsif expr3 opt_then M_3 gen_stmts opt_terms M_4 elsif_tail
    (186) none -> .

    KEYWORD_elsif   shift and go to state 270
    KEYWORD_else    reduce using rule 186 (none -> .)
    KEYWORD_end     reduce using rule 186 (none -> .)

    none                           shift and go to state 269
    elsif_tail                     shift and go to state 321

state 321

    (114) elsif_tail -> KEYWORD_elsif expr3 opt_then M_3 gen_stmts opt_terms M_4 elsif_tail .

    KEYWORD_else    reduce using rule 114 (elsif_tail -> KEYWORD_elsif expr3 opt_then M_3 gen_stmts opt_terms M_4 elsif_tail .)
    KEYWORD_end     reduce using rule 114 (elsif_tail -> KEYWORD_elsif expr3 opt_then M_3 gen_stmts opt_terms M_4 elsif_tail .)

